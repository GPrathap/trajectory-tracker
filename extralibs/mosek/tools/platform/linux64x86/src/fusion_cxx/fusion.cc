#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {}
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; }
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; }
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr;
  size_t sz0, sz1;
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {}
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T>
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow;
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow;
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _157,    std::shared_ptr< monty::ndarray< long long,1 > > _158,    int _159,    int _160,    int _161,    std::shared_ptr< monty::ndarray< long long,1 > > _162) { mosek::fusion::p_Sort::argTransposeSort(_157,_158,_159,_160,_161,_162); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _157,std::shared_ptr< monty::ndarray< long long,1 > > _158,int _159,int _160,int _161,std::shared_ptr< monty::ndarray< long long,1 > > _162){
  _checked_ptr_1<long long> _ptr__157(_157 ? _157->raw() : nullptr, _157 ? _157->size(0) : 0);
  _checked_ptr_1<long long> _ptr__158(_158 ? _158->raw() : nullptr, _158 ? _158->size(0) : 0);
  _checked_ptr_1<long long> _ptr__162(_162 ? _162->raw() : nullptr, _162 ? _162->size(0) : 0);
  int _8627 = (int)0;
  int _8628 = safe_add( safe_mul( _159,_161 ),(int)1 );
  for (int _163 = _8627; _163 < _8628; ++_163)
  {
    {
      _ptr__158[_163] = (int)0;
    }
  }
  int _8629 = (int)0;
  int _8630 = (int)((_162)->size(0));
  for (int _164 = _8629; _164 < _8630; ++_164)
  {
    {
      ++ _ptr__158[safe_add( safe_add( safe_mul( (_ptr__162[_ptr__157[_164]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__157[_164]] % _161) ),(int)1 )];
    }
  }
  int _8631 = (int)0;
  int _8632 = safe_mul( _159,_161 );
  for (int _165 = _8631; _165 < _8632; ++_165)
  {
    {
      _ptr__158[safe_add( _165,(int)1 )] = safe_add( _ptr__158[safe_add( _165,(int)1 )],_ptr__158[_165] );
    }
  }
  std::vector<long long> _8633;
  for (int _167 = (int)0, _8634 = (int)((_157)->size(0)); _167 < _8634 ; ++_167)
  {
    _8633.push_back(_ptr__157[_167]);
  }
  auto _8635 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8633.size()),_8633.begin(),_8633.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _166 = _8635;
  _checked_ptr_1<long long> _ptr__166(_166 ? _166->raw() : nullptr,_166 ? _166->size(0) : 0);
  long long _8636 = (long long)0;
  long long _8637 = (long long)((_162)->size(0));
  for (long long _168 = _8636; _168 < _8637; ++_168)
  {
    {
      long long _169 = safe_add( safe_mul( (_ptr__162[_ptr__166[_168]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__166[_168]] % _161) );
      _ptr__157[_ptr__158[_169]] = _ptr__166[_168];
      ++ _ptr__158[_169];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _170,    std::shared_ptr< monty::ndarray< long long,1 > > _171) { mosek::fusion::p_Sort::argsort(_170,_171); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _170,std::shared_ptr< monty::ndarray< long long,1 > > _171){
  _checked_ptr_1<long long> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_170,_171,(long long)((int)0),(long long)((int)((_170)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _172,    std::shared_ptr< monty::ndarray< int,1 > > _173) { mosek::fusion::p_Sort::argsort(_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _172,std::shared_ptr< monty::ndarray< int,1 > > _173){
  _checked_ptr_1<long long> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<int> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_172,_173,(long long)((int)0),(long long)((int)((_172)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    std::shared_ptr< monty::ndarray< long long,1 > > _176) { mosek::fusion::p_Sort::argsort(_174,_175,_176); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,std::shared_ptr< monty::ndarray< long long,1 > > _176){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<long long> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  _checked_ptr_1<long long> _ptr__176(_176 ? _176->raw() : nullptr, _176 ? _176->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,(long long)((int)0),(long long)((int)((_174)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _177,    std::shared_ptr< monty::ndarray< int,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179) { mosek::fusion::p_Sort::argsort(_177,_178,_179); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _177,std::shared_ptr< monty::ndarray< int,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179){
  _checked_ptr_1<long long> _ptr__177(_177 ? _177->raw() : nullptr, _177 ? _177->size(0) : 0);
  _checked_ptr_1<int> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  _checked_ptr_1<int> _ptr__179(_179 ? _179->raw() : nullptr, _179 ? _179->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_177,_178,_179,(long long)((int)0),(long long)((int)((_177)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _180,    std::shared_ptr< monty::ndarray< long long,1 > > _181,    long long _182,    long long _183) { mosek::fusion::p_Sort::argsort(_180,_181,_182,_183); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _180,std::shared_ptr< monty::ndarray< long long,1 > > _181,long long _182,long long _183){
  _checked_ptr_1<long long> _ptr__180(_180 ? _180->raw() : nullptr, _180 ? _180->size(0) : 0);
  _checked_ptr_1<long long> _ptr__181(_181 ? _181->raw() : nullptr, _181 ? _181->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_180,_181,_182,_183,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _184,    std::shared_ptr< monty::ndarray< int,1 > > _185,    long long _186,    long long _187) { mosek::fusion::p_Sort::argsort(_184,_185,_186,_187); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _184,std::shared_ptr< monty::ndarray< int,1 > > _185,long long _186,long long _187){
  _checked_ptr_1<long long> _ptr__184(_184 ? _184->raw() : nullptr, _184 ? _184->size(0) : 0);
  _checked_ptr_1<int> _ptr__185(_185 ? _185->raw() : nullptr, _185 ? _185->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_184,_185,_186,_187,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _188,    std::shared_ptr< monty::ndarray< long long,1 > > _189,    std::shared_ptr< monty::ndarray< long long,1 > > _190,    long long _191,    long long _192) { mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _188,std::shared_ptr< monty::ndarray< long long,1 > > _189,std::shared_ptr< monty::ndarray< long long,1 > > _190,long long _191,long long _192){
  _checked_ptr_1<long long> _ptr__188(_188 ? _188->raw() : nullptr, _188 ? _188->size(0) : 0);
  _checked_ptr_1<long long> _ptr__189(_189 ? _189->raw() : nullptr, _189 ? _189->size(0) : 0);
  _checked_ptr_1<long long> _ptr__190(_190 ? _190->raw() : nullptr, _190 ? _190->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _193,    std::shared_ptr< monty::ndarray< int,1 > > _194,    std::shared_ptr< monty::ndarray< int,1 > > _195,    long long _196,    long long _197) { mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _193,std::shared_ptr< monty::ndarray< int,1 > > _194,std::shared_ptr< monty::ndarray< int,1 > > _195,long long _196,long long _197){
  _checked_ptr_1<long long> _ptr__193(_193 ? _193->raw() : nullptr, _193 ? _193->size(0) : 0);
  _checked_ptr_1<int> _ptr__194(_194 ? _194->raw() : nullptr, _194 ? _194->size(0) : 0);
  _checked_ptr_1<int> _ptr__195(_195 ? _195->raw() : nullptr, _195 ? _195->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _198,    std::shared_ptr< monty::ndarray< long long,1 > > _199,    long long _200,    long long _201,    bool _202) { mosek::fusion::p_Sort::argsort(_198,_199,_200,_201,_202); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _198,std::shared_ptr< monty::ndarray< long long,1 > > _199,long long _200,long long _201,bool _202){
  _checked_ptr_1<long long> _ptr__198(_198 ? _198->raw() : nullptr, _198 ? _198->size(0) : 0);
  _checked_ptr_1<long long> _ptr__199(_199 ? _199->raw() : nullptr, _199 ? _199->size(0) : 0);
  if (((!_202) || ((_201 - _200) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_198,_199,_200,_201,_202)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__203(_203 ? _203->raw() : nullptr,_203 ? _203->size(0) : 0);
      int _204 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_198,_199,nullptr,_200,_201,_203);
      if (((_ptr__203[(int)1] - _ptr__203[(int)0]) < safe_mul( _204,(_201 - _200) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_198,_199,_200,_201,_ptr__203[(int)0],_ptr__203[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _205,    std::shared_ptr< monty::ndarray< int,1 > > _206,    long long _207,    long long _208,    bool _209) { mosek::fusion::p_Sort::argsort(_205,_206,_207,_208,_209); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _205,std::shared_ptr< monty::ndarray< int,1 > > _206,long long _207,long long _208,bool _209){
  _checked_ptr_1<long long> _ptr__205(_205 ? _205->raw() : nullptr, _205 ? _205->size(0) : 0);
  _checked_ptr_1<int> _ptr__206(_206 ? _206->raw() : nullptr, _206 ? _206->size(0) : 0);
  if (((!_209) || ((_208 - _207) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_205,_206,_207,_208,_209)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _210 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__210(_210 ? _210->raw() : nullptr,_210 ? _210->size(0) : 0);
      int _211 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_205,_206,nullptr,_207,_208,_210);
      if (((_ptr__210[(int)1] - _ptr__210[(int)0]) < safe_mul( _211,(_208 - _207) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_205,_206,_207,_208,_ptr__210[(int)0],_ptr__210[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _212,    std::shared_ptr< monty::ndarray< long long,1 > > _213,    std::shared_ptr< monty::ndarray< long long,1 > > _214,    long long _215,    long long _216,    bool _217) { mosek::fusion::p_Sort::argsort(_212,_213,_214,_215,_216,_217); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _212,std::shared_ptr< monty::ndarray< long long,1 > > _213,std::shared_ptr< monty::ndarray< long long,1 > > _214,long long _215,long long _216,bool _217){
  _checked_ptr_1<long long> _ptr__212(_212 ? _212->raw() : nullptr, _212 ? _212->size(0) : 0);
  _checked_ptr_1<long long> _ptr__213(_213 ? _213->raw() : nullptr, _213 ? _213->size(0) : 0);
  _checked_ptr_1<long long> _ptr__214(_214 ? _214->raw() : nullptr, _214 ? _214->size(0) : 0);
  if (((!_217) || ((_216 - _215) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_212,_213,_214,_215,_216,_217)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _218 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__218(_218 ? _218->raw() : nullptr,_218 ? _218->size(0) : 0);
      int _219 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_212,_213,_214,_215,_216,_218);
      if ((((_ptr__218[(int)1] - _ptr__218[(int)0]) < safe_mul( _219,(_216 - _215) )) && ((_ptr__218[(int)3] - _ptr__218[(int)2]) < safe_mul( _219,(_216 - _215) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_212,_214,_215,_216,_ptr__218[(int)2],_ptr__218[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_212,_213,_215,_216,_ptr__218[(int)0],_ptr__218[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _220,    std::shared_ptr< monty::ndarray< int,1 > > _221,    std::shared_ptr< monty::ndarray< int,1 > > _222,    long long _223,    long long _224,    bool _225) { mosek::fusion::p_Sort::argsort(_220,_221,_222,_223,_224,_225); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _220,std::shared_ptr< monty::ndarray< int,1 > > _221,std::shared_ptr< monty::ndarray< int,1 > > _222,long long _223,long long _224,bool _225){
  _checked_ptr_1<long long> _ptr__220(_220 ? _220->raw() : nullptr, _220 ? _220->size(0) : 0);
  _checked_ptr_1<int> _ptr__221(_221 ? _221->raw() : nullptr, _221 ? _221->size(0) : 0);
  _checked_ptr_1<int> _ptr__222(_222 ? _222->raw() : nullptr, _222 ? _222->size(0) : 0);
  if (((!_225) || ((_224 - _223) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_220,_221,_222,_223,_224,_225)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _226 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__226(_226 ? _226->raw() : nullptr,_226 ? _226->size(0) : 0);
      int _227 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_220,_221,_222,_223,_224,_226);
      if ((((_ptr__226[(int)1] - _ptr__226[(int)0]) < safe_mul( _227,(_224 - _223) )) && ((_ptr__226[(int)3] - _ptr__226[(int)2]) < safe_mul( _227,(_224 - _223) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_220,_222,_223,_224,_ptr__226[(int)2],_ptr__226[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_220,_221,_223,_224,_ptr__226[(int)0],_ptr__226[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _228,    std::shared_ptr< monty::ndarray< long long,1 > > _229,    long long _230,    long long _231,    long long _232,    long long _233) { mosek::fusion::p_Sort::argbucketsort(_228,_229,_230,_231,_232,_233); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _228,std::shared_ptr< monty::ndarray< long long,1 > > _229,long long _230,long long _231,long long _232,long long _233){
  _checked_ptr_1<long long> _ptr__228(_228 ? _228->raw() : nullptr, _228 ? _228->size(0) : 0);
  _checked_ptr_1<long long> _ptr__229(_229 ? _229->raw() : nullptr, _229 ? _229->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_228,_230,_231,_229,_232,_233);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< int,1 > > _235,    long long _236,    long long _237,    int _238,    int _239) { mosek::fusion::p_Sort::argbucketsort(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< int,1 > > _235,long long _236,long long _237,int _238,int _239){
  _checked_ptr_1<long long> _ptr__234(_234 ? _234->raw() : nullptr, _234 ? _234->size(0) : 0);
  _checked_ptr_1<int> _ptr__235(_235 ? _235->raw() : nullptr, _235 ? _235->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_234,_236,_237,_235,_238,_239);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _240,    std::shared_ptr< monty::ndarray< long long,1 > > _241,    std::shared_ptr< monty::ndarray< long long,1 > > _242,    long long _243,    long long _244,    std::shared_ptr< monty::ndarray< long long,1 > > _245) { mosek::fusion::p_Sort::getminmax(_240,_241,_242,_243,_244,_245); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _240,std::shared_ptr< monty::ndarray< long long,1 > > _241,std::shared_ptr< monty::ndarray< long long,1 > > _242,long long _243,long long _244,std::shared_ptr< monty::ndarray< long long,1 > > _245){
  _checked_ptr_1<long long> _ptr__240(_240 ? _240->raw() : nullptr, _240 ? _240->size(0) : 0);
  _checked_ptr_1<long long> _ptr__241(_241 ? _241->raw() : nullptr, _241 ? _241->size(0) : 0);
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _checked_ptr_1<long long> _ptr__245(_245 ? _245->raw() : nullptr, _245 ? _245->size(0) : 0);
  _ptr__245[(int)0] = _ptr__241[_ptr__240[_243]];
  _ptr__245[(int)1] = _ptr__241[_ptr__240[_243]];
  long long _8638 = safe_add( _243,(int)1 );
  long long _8639 = _244;
  for (long long _246 = _8638; _246 < _8639; ++_246)
  {
    {
      if ((_ptr__245[(int)0] > _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)0] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
      if ((_ptr__245[(int)1] < _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)1] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
    }
  }
  if ((NULL != _242.get()))
  {
    {
      _ptr__245[(int)2] = _ptr__242[_ptr__240[_243]];
      _ptr__245[(int)3] = _ptr__242[_ptr__240[_243]];
      long long _8640 = safe_add( _243,(int)1 );
      long long _8641 = _244;
      for (long long _247 = _8640; _247 < _8641; ++_247)
      {
        {
          if ((_ptr__245[(int)2] > _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)2] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
          if ((_ptr__245[(int)3] < _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)3] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _248,    std::shared_ptr< monty::ndarray< int,1 > > _249,    std::shared_ptr< monty::ndarray< int,1 > > _250,    long long _251,    long long _252,    std::shared_ptr< monty::ndarray< int,1 > > _253) { mosek::fusion::p_Sort::getminmax(_248,_249,_250,_251,_252,_253); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _248,std::shared_ptr< monty::ndarray< int,1 > > _249,std::shared_ptr< monty::ndarray< int,1 > > _250,long long _251,long long _252,std::shared_ptr< monty::ndarray< int,1 > > _253){
  _checked_ptr_1<long long> _ptr__248(_248 ? _248->raw() : nullptr, _248 ? _248->size(0) : 0);
  _checked_ptr_1<int> _ptr__249(_249 ? _249->raw() : nullptr, _249 ? _249->size(0) : 0);
  _checked_ptr_1<int> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _checked_ptr_1<int> _ptr__253(_253 ? _253->raw() : nullptr, _253 ? _253->size(0) : 0);
  _ptr__253[(int)0] = _ptr__249[_ptr__248[_251]];
  _ptr__253[(int)1] = _ptr__249[_ptr__248[_251]];
  long long _8642 = safe_add( _251,(int)1 );
  long long _8643 = _252;
  for (long long _254 = _8642; _254 < _8643; ++_254)
  {
    {
      if ((_ptr__253[(int)0] > _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)0] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
      if ((_ptr__253[(int)1] < _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)1] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
    }
  }
  if ((NULL != _250.get()))
  {
    {
      _ptr__253[(int)2] = _ptr__250[_ptr__248[_251]];
      _ptr__253[(int)3] = _ptr__250[_ptr__248[_251]];
      long long _8644 = safe_add( _251,(int)1 );
      long long _8645 = _252;
      for (long long _255 = _8644; _255 < _8645; ++_255)
      {
        {
          if ((_ptr__253[(int)2] > _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)2] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
          if ((_ptr__253[(int)3] < _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)3] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _256,    std::shared_ptr< monty::ndarray< long long,1 > > _257,    long long _258,    long long _259,    bool _260) { return mosek::fusion::p_Sort::issorted(_256,_257,_258,_259,_260); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _256,std::shared_ptr< monty::ndarray< long long,1 > > _257,long long _258,long long _259,bool _260){
  _checked_ptr_1<long long> _ptr__256(_256 ? _256->raw() : nullptr, _256 ? _256->size(0) : 0);
  _checked_ptr_1<long long> _ptr__257(_257 ? _257->raw() : nullptr, _257 ? _257->size(0) : 0);
  long long _8646 = _258;
  long long _8647 = (_259 - (int)1);
  for (long long _261 = _8646; _261 < _8647; ++_261)
  {
    {
      if ((_ptr__257[_ptr__256[_261]] > _ptr__257[_ptr__256[safe_add( _261,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _262,    std::shared_ptr< monty::ndarray< int,1 > > _263,    long long _264,    long long _265,    bool _266) { return mosek::fusion::p_Sort::issorted(_262,_263,_264,_265,_266); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _262,std::shared_ptr< monty::ndarray< int,1 > > _263,long long _264,long long _265,bool _266){
  _checked_ptr_1<long long> _ptr__262(_262 ? _262->raw() : nullptr, _262 ? _262->size(0) : 0);
  _checked_ptr_1<int> _ptr__263(_263 ? _263->raw() : nullptr, _263 ? _263->size(0) : 0);
  long long _8648 = _264;
  long long _8649 = (_265 - (int)1);
  for (long long _267 = _8648; _267 < _8649; ++_267)
  {
    {
      if ((_ptr__263[_ptr__262[_267]] > _ptr__263[_ptr__262[safe_add( _267,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _268,    std::shared_ptr< monty::ndarray< long long,1 > > _269,    std::shared_ptr< monty::ndarray< long long,1 > > _270,    long long _271,    long long _272,    bool _273) { return mosek::fusion::p_Sort::issorted(_268,_269,_270,_271,_272,_273); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _268,std::shared_ptr< monty::ndarray< long long,1 > > _269,std::shared_ptr< monty::ndarray< long long,1 > > _270,long long _271,long long _272,bool _273){
  _checked_ptr_1<long long> _ptr__268(_268 ? _268->raw() : nullptr, _268 ? _268->size(0) : 0);
  _checked_ptr_1<long long> _ptr__269(_269 ? _269->raw() : nullptr, _269 ? _269->size(0) : 0);
  _checked_ptr_1<long long> _ptr__270(_270 ? _270->raw() : nullptr, _270 ? _270->size(0) : 0);
  long long _8650 = _271;
  long long _8651 = (_272 - (int)1);
  for (long long _274 = _8650; _274 < _8651; ++_274)
  {
    {
      if (((_ptr__269[_ptr__268[_274]] > _ptr__269[_ptr__268[safe_add( _274,(int)1 )]]) || ((_ptr__269[_ptr__268[safe_add( _274,(int)1 )]] == _ptr__269[_ptr__268[_274]]) && (_ptr__270[_ptr__268[_274]] > _ptr__270[_ptr__268[safe_add( _274,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _275,    std::shared_ptr< monty::ndarray< int,1 > > _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    long long _278,    long long _279,    bool _280) { return mosek::fusion::p_Sort::issorted(_275,_276,_277,_278,_279,_280); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _275,std::shared_ptr< monty::ndarray< int,1 > > _276,std::shared_ptr< monty::ndarray< int,1 > > _277,long long _278,long long _279,bool _280){
  _checked_ptr_1<long long> _ptr__275(_275 ? _275->raw() : nullptr, _275 ? _275->size(0) : 0);
  _checked_ptr_1<int> _ptr__276(_276 ? _276->raw() : nullptr, _276 ? _276->size(0) : 0);
  _checked_ptr_1<int> _ptr__277(_277 ? _277->raw() : nullptr, _277 ? _277->size(0) : 0);
  long long _8652 = _278;
  long long _8653 = (_279 - (int)1);
  for (long long _281 = _8652; _281 < _8653; ++_281)
  {
    {
      if (((_ptr__276[_ptr__275[_281]] > _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) || ((_ptr__276[_ptr__275[_281]] == _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) && (_ptr__277[_ptr__275[_281]] > _ptr__277[_ptr__275[safe_add( _281,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282){ return new mosek::fusion::IndexCounter(_282); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_282); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _282){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__282(_282 ? _282->raw() : nullptr, _282 ? _282->size(0) : 0);
    n = (int)((_282)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_282);
    std::vector<int> _8654;
    for (int _283 = (int)0, _8655 = (int)((_282)->size(0)); _283 < _8655 ; ++_283)
    {
      _8654.push_back(_ptr__282[_283]);
    }
    auto _8656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8654.size()),_8654.begin(),_8654.end()));
    dims = _8656;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){ return new mosek::fusion::IndexCounter(_284,_285,_286); }mosek::fusion::IndexCounter::IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_284,_285,_286); }void mosek::fusion::p_IndexCounter::_initialize  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__285(_285 ? _285->raw() : nullptr, _285 ? _285->size(0) : 0);
    _checked_ptr_1<int> _ptr__286(_286 ? _286->raw() : nullptr, _286 ? _286->size(0) : 0);
    int _287 = (int)((_286)->size(0));
    n = (int)((_285)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8657 = (int)0;
    int _8658 = n;
    for (int _288 = _8657; _288 < _8658; ++_288)
    {
      {
        ((*st)(_288)) = _284;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_286);
    dims = _285;
    start = _284;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){ return new mosek::fusion::IndexCounter(_289,_290,_291); }mosek::fusion::IndexCounter::IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_289,_290,_291); }void mosek::fusion::p_IndexCounter::_initialize  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__290(_290 ? _290->raw() : nullptr, _290 ? _290->size(0) : 0);
    _checked_ptr_1<long long> _ptr__291(_291 ? _291->raw() : nullptr, _291 ? _291->size(0) : 0);
    n = (int)((_290)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8659 = (int)0;
    int _8660 = n;
    for (int _292 = _8659; _292 < _8660; ++_292)
    {
      {
        ((*st)(_292)) = _289;
      }
    }
    strides = _291;
    dims = _290;
    start = _289;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _293 = _pubthis->get();
  _pubthis->inc();
  return _293;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _294;
  {
    _294 = (int)0;
    for(;((_294 < (n - (int)1)) && (((*ii)(_294)) == ((*dims)(((n - _294) - (int)1)))));++ _294)
    {
      {
        ((*ii)(_294)) = (int)0;
        ++ ((*ii)(safe_add( _294,(int)1 )));
        ((*st)(safe_add( _294,(int)1 ))) = safe_add( ((*st)(safe_add( _294,(int)1 ))),((*strides)(((n - _294) - (int)2))) );
      }
    }
  }
  int _8661 = (int)0;
  int _8662 = _294;
  for (int _295 = _8661; _295 < _8662; ++_295)
  {
    {
      ((*st)(_295)) = ((*st)(_294));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _8663 = (int)0;
  int _8664 = n;
  for (int _296 = _8663; _296 < _8664; ++_296)
  {
    {
      ((*st)(_296)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _297,int _298){
  _checked_ptr_1<long long> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _299 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_298)));
      _checked_ptr_1<long long> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::resize(_300,_301); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _300,int _301){
  _checked_ptr_1<int> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  if ((_301 == (int)((_300)->size(0))))
  {
    {
      return _300;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_301)));
      _checked_ptr_1<int> _ptr__302(_302 ? _302->raw() : nullptr,_302 ? _302->size(0) : 0);
      if ((_301 > (int)((_300)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,(int)((_300)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,_301);
        }
      }
      return _302;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _303,    int _304) { return mosek::fusion::p_CommonTools::resize(_303,_304); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _303,int _304){
  _checked_ptr_1<double> _ptr__303(_303 ? _303->raw() : nullptr, _303 ? _303->size(0) : 0);
  if ((_304 == (int)((_303)->size(0))))
  {
    {
      return _303;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _305 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_304)));
      _checked_ptr_1<double> _ptr__305(_305 ? _305->raw() : nullptr,_305 ? _305->size(0) : 0);
      if ((_304 > (int)((_303)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,(int)((_303)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,_304);
        }
      }
      return _305;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _306,    int _307) { return mosek::fusion::p_CommonTools::binarySearch(_306,_307); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _306,int _307){
  _checked_ptr_1<int> _ptr__306(_306 ? _306->raw() : nullptr, _306 ? _306->size(0) : 0);
  int _308 = (int)0;
  int _309 = (int)((_306)->size(0));
  if ((_ptr__306[_308] == _307))
  {
    {
      return _308;
    }
  }
  else if((_ptr__306[(_309 - (int)1)] == _307))
  {
    {
      return (_309 - (int)1);
    }
  }
  {}
  while ( (_308 < (_309 - (int)1)) )
  {
    {
      int _310 = ((_309 - _308) / (int)2);
      if ((_307 < _ptr__306[_310]))
      {
        {
          _308 = safe_add( _310,(int)1 );
        }
      }
      else if((_307 > _ptr__306[_310]))
      {
        {
          _309 = _310;
        }
      }
      else
      {
        {
          return _310;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _311,    long long _312) { return mosek::fusion::p_CommonTools::binarySearch(_311,_312); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _311,long long _312){
  _checked_ptr_1<long long> _ptr__311(_311 ? _311->raw() : nullptr, _311 ? _311->size(0) : 0);
  int _313 = ::mosek::fusion::p_CommonTools::binarySearchL(_311,_312);
  if (((_313 < (int)((_311)->size(0))) && (_ptr__311[_313] == _312)))
  {
    {
      return _313;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _314,    long long _315) { return mosek::fusion::p_CommonTools::binarySearchR(_314,_315); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _314,long long _315){
  _checked_ptr_1<long long> _ptr__314(_314 ? _314->raw() : nullptr, _314 ? _314->size(0) : 0);
  int _316 = (int)0;
  int _317 = (int)((_314)->size(0));
  if ((_ptr__314[_316] > _315))
  {
    {
      return _316;
    }
  }
  {}
  while ( (_316 < (_317 - (int)1)) )
  {
    {
      int _318 = (safe_add( _317,_316 ) / (int)2);
      if ((_315 >= _ptr__314[_318]))
      {
        {
          _316 = _318;
        }
      }
      else
      {
        {
          _317 = _318;
        }
      }
    }
  }
  return _317;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _319,    long long _320) { return mosek::fusion::p_CommonTools::binarySearchL(_319,_320); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _319,long long _320){
  _checked_ptr_1<long long> _ptr__319(_319 ? _319->raw() : nullptr, _319 ? _319->size(0) : 0);
  int _321 = (int)0;
  int _322 = (int)((_319)->size(0));
  if ((_320 <= _ptr__319[_321]))
  {
    {
      return _321;
    }
  }
  {}
  while ( (_321 < (_322 - (int)1)) )
  {
    {
      int _323 = (safe_add( _322,_321 ) / (int)2);
      if ((_ptr__319[_323] < _320))
      {
        {
          _321 = _323;
        }
      }
      else
      {
        {
          _322 = _323;
        }
      }
    }
  }
  return _322;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _324,    std::shared_ptr< monty::ndarray< int,1 > > _325,    std::shared_ptr< monty::ndarray< int,1 > > _326) { mosek::fusion::p_CommonTools::ndIncr(_324,_325,_326); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _324,std::shared_ptr< monty::ndarray< int,1 > > _325,std::shared_ptr< monty::ndarray< int,1 > > _326){
  _checked_ptr_1<int> _ptr__324(_324 ? _324->raw() : nullptr, _324 ? _324->size(0) : 0);
  _checked_ptr_1<int> _ptr__325(_325 ? _325->raw() : nullptr, _325 ? _325->size(0) : 0);
  _checked_ptr_1<int> _ptr__326(_326 ? _326->raw() : nullptr, _326 ? _326->size(0) : 0);
  int _327 = ((int)((_324)->size(0)) - (int)1);
  ++ _ptr__324[_327];
  while ( ((_327 > (int)0) && (_ptr__324[_327] >= _ptr__326[_327])) )
  {
    {
      _ptr__324[_327] = _ptr__325[_327];
      ++ _ptr__324[(_327 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _328,    std::shared_ptr< monty::ndarray< int,1 > > _329,    std::shared_ptr< monty::ndarray< double,1 > > _330,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,    long long _334,    int _335,    int _336) { mosek::fusion::p_CommonTools::transposeTriplets(_328,_329,_330,_331,_332,_333,_334,_335,_336); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _328,std::shared_ptr< monty::ndarray< int,1 > > _329,std::shared_ptr< monty::ndarray< double,1 > > _330,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,long long _334,int _335,int _336){
  _checked_ptr_1<int> _ptr__328(_328 ? _328->raw() : nullptr, _328 ? _328->size(0) : 0);
  _checked_ptr_1<int> _ptr__329(_329 ? _329->raw() : nullptr, _329 ? _329->size(0) : 0);
  _checked_ptr_1<double> _ptr__330(_330 ? _330->raw() : nullptr, _330 ? _330->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _335,(int)2 ))));
  _checked_ptr_1<long long> _ptr__337(_337 ? _337->raw() : nullptr,_337 ? _337->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _336,(int)2 ))));
  _checked_ptr_1<long long> _ptr__338(_338 ? _338->raw() : nullptr,_338 ? _338->size(0) : 0);
  {
    long long _339 = (long long)0;
    for(;(_339 < _334);++ _339)
    {
      {
        _ptr__338[safe_add( _ptr__329[_339],(int)2 )] = safe_add( _ptr__338[safe_add( _ptr__329[_339],(int)2 )],(int)1 );
        _ptr__337[safe_add( _ptr__328[_339],(int)2 )] = safe_add( _ptr__337[safe_add( _ptr__328[_339],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _340 = (int)1;
    for(;(_340 < _335);++ _340)
    {
      {
        _ptr__337[safe_add( _340,(int)1 )] = safe_add( _ptr__337[safe_add( _340,(int)1 )],_ptr__337[_340] );
      }
    }
  }
  {
    int _341 = (int)1;
    for(;(_341 < _336);++ _341)
    {
      {
        _ptr__338[safe_add( _341,(int)1 )] = safe_add( _ptr__338[safe_add( _341,(int)1 )],_ptr__338[_341] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__342(_342 ? _342->raw() : nullptr,_342 ? _342->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _343 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__343(_343 ? _343->raw() : nullptr,_343 ? _343->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _344 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_334)));
  _checked_ptr_1<double> _ptr__344(_344 ? _344->raw() : nullptr,_344 ? _344->size(0) : 0);
  int _8665 = (int)0;
  int _8666 = _335;
  for (int _345 = _8665; _345 < _8666; ++_345)
  {
    {
      {
        long long _346 = _ptr__337[_345];
        for(;(_346 < _ptr__337[safe_add( _345,(int)1 )]);++ _346)
        {
          {
            int _347 = _ptr__329[_346];
            long long _348 = _ptr__338[_347];
            _ptr__342[_348] = _345;
            _ptr__343[_348] = _347;
            _ptr__344[_348] = _ptr__330[_346];
            _ptr__338[_347] = safe_add( _348,(int)1 );
          }
        }
      }
    }
  }
  ((*_331)((int)0)) = _343;
  ((*_332)((int)0)) = _342;
  ((*_333)((int)0)) = _344;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _349,    std::shared_ptr< monty::ndarray< int,1 > > _350,    std::shared_ptr< monty::ndarray< double,1 > > _351,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,    long long _355,    int _356,    int _357) { mosek::fusion::p_CommonTools::transposeTriplets(_349,_350,_351,_352,_353,_354,_355,_356,_357); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _349,std::shared_ptr< monty::ndarray< int,1 > > _350,std::shared_ptr< monty::ndarray< double,1 > > _351,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,long long _355,int _356,int _357){
  _checked_ptr_1<int> _ptr__349(_349 ? _349->raw() : nullptr, _349 ? _349->size(0) : 0);
  _checked_ptr_1<int> _ptr__350(_350 ? _350->raw() : nullptr, _350 ? _350->size(0) : 0);
  _checked_ptr_1<double> _ptr__351(_351 ? _351->raw() : nullptr, _351 ? _351->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _358 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _356,(int)2 ))));
  _checked_ptr_1<long long> _ptr__358(_358 ? _358->raw() : nullptr,_358 ? _358->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _359 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _357,(int)2 ))));
  _checked_ptr_1<long long> _ptr__359(_359 ? _359->raw() : nullptr,_359 ? _359->size(0) : 0);
  {
    long long _360 = (long long)0;
    for(;(_360 < _355);++ _360)
    {
      {
        _ptr__359[safe_add( _ptr__350[_360],(int)2 )] = safe_add( _ptr__359[safe_add( _ptr__350[_360],(int)2 )],(int)1 );
        _ptr__358[safe_add( _ptr__349[_360],(int)2 )] = safe_add( _ptr__358[safe_add( _ptr__349[_360],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _361 = (int)1;
    for(;(_361 < _356);++ _361)
    {
      {
        _ptr__358[safe_add( _361,(int)1 )] = safe_add( _ptr__358[safe_add( _361,(int)1 )],_ptr__358[_361] );
      }
    }
  }
  {
    int _362 = (int)1;
    for(;(_362 < _357);++ _362)
    {
      {
        _ptr__359[safe_add( _362,(int)1 )] = safe_add( _ptr__359[safe_add( _362,(int)1 )],_ptr__359[_362] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _363 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__363(_363 ? _363->raw() : nullptr,_363 ? _363->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _364 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__364(_364 ? _364->raw() : nullptr,_364 ? _364->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _365 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_355)));
  _checked_ptr_1<double> _ptr__365(_365 ? _365->raw() : nullptr,_365 ? _365->size(0) : 0);
  {
    int _366 = (int)0;
    for(;(_366 < _356);++ _366)
    {
      {
        long long _8667 = _ptr__358[_366];
        long long _8668 = _ptr__358[safe_add( _366,(int)1 )];
        for (long long _367 = _8667; _367 < _8668; ++_367)
        {
          {
            int _368 = _ptr__350[_367];
            long long _369 = _ptr__359[_368];
            _ptr__363[_369] = _366;
            _ptr__364[_369] = _368;
            _ptr__365[_369] = _ptr__351[_367];
            _ptr__359[_368] = safe_add( _369,(int)1 );
          }
        }
      }
    }
  }
  ((*_352)((int)0)) = _364;
  ((*_353)((int)0)) = _363;
  ((*_354)((int)0)) = _365;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _370,    std::shared_ptr< monty::ndarray< int,1 > > _371,    std::shared_ptr< monty::ndarray< double,1 > > _372,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,    long long _376,    int _377,    int _378) { mosek::fusion::p_CommonTools::tripletSort(_370,_371,_372,_373,_374,_375,_376,_377,_378); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _370,std::shared_ptr< monty::ndarray< int,1 > > _371,std::shared_ptr< monty::ndarray< double,1 > > _372,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,long long _376,int _377,int _378){
  _checked_ptr_1<int> _ptr__370(_370 ? _370->raw() : nullptr, _370 ? _370->size(0) : 0);
  _checked_ptr_1<int> _ptr__371(_371 ? _371->raw() : nullptr, _371 ? _371->size(0) : 0);
  _checked_ptr_1<double> _ptr__372(_372 ? _372->raw() : nullptr, _372 ? _372->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__379(_379 ? _379->raw() : nullptr,_379 ? _379->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _380 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _378,(int)2 ))));
  _checked_ptr_1<long long> _ptr__380(_380 ? _380->raw() : nullptr,_380 ? _380->size(0) : 0);
  long long _8669 = (long long)0;
  long long _8670 = _376;
  for (long long _381 = _8669; _381 < _8670; ++_381)
  {
    {
      _ptr__380[safe_add( _ptr__371[_381],(int)2 )] = safe_add( _ptr__380[safe_add( _ptr__371[_381],(int)2 )],(int)1 );
    }
  }
  int _8671 = (int)1;
  int _8672 = _378;
  for (int _382 = _8671; _382 < _8672; ++_382)
  {
    {
      _ptr__380[safe_add( _382,(int)1 )] = safe_add( _ptr__380[safe_add( _382,(int)1 )],_ptr__380[_382] );
    }
  }
  int _8673 = (int)0;
  int _8674 = (int)_376;
  for (int _383 = _8673; _383 < _8674; ++_383)
  {
    {
      int _384 = _ptr__371[_383];
      _ptr__379[_ptr__380[safe_add( _384,(int)1 )]] = _383;
      _ptr__380[safe_add( _384,(int)1 )] = safe_add( _ptr__380[safe_add( _384,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _385 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _377,(int)2 ))));
  _checked_ptr_1<long long> _ptr__385(_385 ? _385->raw() : nullptr,_385 ? _385->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__386(_386 ? _386->raw() : nullptr,_386 ? _386->size(0) : 0);
  {
    int _387 = (int)0;
    for(;(_387 < _376);++ _387)
    {
      {
        _ptr__385[safe_add( _ptr__370[_387],(int)2 )] = safe_add( _ptr__385[safe_add( _ptr__370[_387],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _388 = (int)1;
    for(;(_388 < _377);++ _388)
    {
      {
        _ptr__385[safe_add( _388,(int)1 )] = safe_add( _ptr__385[safe_add( _388,(int)1 )],_ptr__385[_388] );
      }
    }
  }
  {
    int _389 = (int)0;
    for(;(_389 < _378);++ _389)
    {
      {
        {
          long long _390 = _ptr__380[_389];
          for(;(_390 < _ptr__380[safe_add( _389,(int)1 )]);++ _390)
          {
            {
              int _391 = _ptr__370[_ptr__379[_390]];
              _ptr__386[_ptr__385[safe_add( _391,(int)1 )]] = _ptr__379[_390];
              _ptr__385[safe_add( _391,(int)1 )] = safe_add( _ptr__385[safe_add( _391,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _392 = (int)1;
  {
    int _393 = _ptr__370[_ptr__386[(int)0]];
    int _394 = _ptr__371[_ptr__386[(int)0]];
    {
      int _395 = (int)1;
      for(;(_395 < _376);++ _395)
      {
        {
          int _396 = _ptr__386[_395];
          if (((_393 != _ptr__370[_396]) || (_394 != _ptr__371[_396])))
          {
            {
              _393 = _ptr__370[_396];
              _394 = _ptr__371[_396];
              ++ _392;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _397 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__397(_397 ? _397->raw() : nullptr,_397 ? _397->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__398(_398 ? _398->raw() : nullptr,_398 ? _398->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _399 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)));
  _checked_ptr_1<double> _ptr__399(_399 ? _399->raw() : nullptr,_399 ? _399->size(0) : 0);
  {
    int _400 = _ptr__386[(int)0];
    _ptr__397[(int)0] = _ptr__370[_400];
    _ptr__398[(int)0] = _ptr__371[_400];
    _ptr__399[(int)0] = _ptr__372[_400];
  }
  int _401 = (int)1;
  int _8675 = (int)1;
  long long _8676 = _376;
  for (long long _402 = _8675; _402 < _8676; ++_402)
  {
    {
      int _403 = _ptr__386[_402];
      if (((_ptr__397[(_401 - (int)1)] == _ptr__370[_403]) && (_ptr__398[(_401 - (int)1)] == _ptr__371[_403])))
      {
        {
          _ptr__399[(_401 - (int)1)] = (_ptr__399[(_401 - (int)1)] + _ptr__372[_403]);
        }
      }
      else
      {
        {
          _ptr__397[_401] = _ptr__370[_403];
          _ptr__398[_401] = _ptr__371[_403];
          _ptr__399[_401] = _ptr__372[_403];
          ++ _401;
        }
      }
    }
  }
  ((*_373)((int)0)) = _397;
  ((*_374)((int)0)) = _398;
  ((*_375)((int)0)) = _399;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _404,    std::shared_ptr< monty::ndarray< int,1 > > _405) { mosek::fusion::p_CommonTools::argMSort(_404,_405); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _404,std::shared_ptr< monty::ndarray< int,1 > > _405){
  _checked_ptr_1<int> _ptr__404(_404 ? _404->raw() : nullptr, _404 ? _404->size(0) : 0);
  _checked_ptr_1<int> _ptr__405(_405 ? _405->raw() : nullptr, _405 ? _405->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _406 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_404)->size(0)))));
  _checked_ptr_1<int> _ptr__406(_406 ? _406->raw() : nullptr,_406 ? _406->size(0) : 0);
  bool _407 = false;
  {
    int _408 = (int)1;
    for(;(_408 < (int)((_404)->size(0)));_408 *= (int)2)
    {
      {
        _407 = (!_407);
        int _8677 = (int)0;
        int _8678 = (int)((_404)->size(0));
        int _8679 = safe_mul( _408,(int)2 );
        for (int _409 = _8677; _409 < _8678; _409 += _8679)
        {
          {
            if (_407)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_404,_406,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_406,_404,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_407)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_406,(int)0,_404,(int)0,(int)((_404)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _410,std::shared_ptr< monty::ndarray< int,1 > > _411,std::shared_ptr< monty::ndarray< int,1 > > _412,int _413,int _414,int _415){
  _checked_ptr_1<int> _ptr__410(_410 ? _410->raw() : nullptr, _410 ? _410->size(0) : 0);
  _checked_ptr_1<int> _ptr__411(_411 ? _411->raw() : nullptr, _411 ? _411->size(0) : 0);
  _checked_ptr_1<int> _ptr__412(_412 ? _412->raw() : nullptr, _412 ? _412->size(0) : 0);
  int _8680;
  bool _8681 = (_415 > (int)((_410)->size(0)));
  if (_8681)
  {
    _8680 = (int)((_410)->size(0));
  }
  else
  {
    _8680 = _415;
  }
  int _416 = _8680;
  int _8682;
  bool _8683 = (_414 > _416);
  if (_8683)
  {
    _8682 = _416;
  }
  else
  {
    _8682 = _414;
  }
  int _417 = _8682;
  if ((_417 == _416))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_410,_413,_411,_413,(_417 - _413));
    }
  }
  else
  {
    {
      int _418 = _413;
      int _419 = _417;
      int _420;
      {
        _420 = _413;
        for(;((_418 < _417) && (_419 < _416));++ _420)
        {
          {
            if ((_ptr__412[_ptr__410[_418]] < _ptr__412[_ptr__410[_419]]))
            {
              {
                _ptr__411[_420] = _ptr__410[_418];
                ++ _418;
              }
            }
            else
            {
              {
                _ptr__411[_420] = _ptr__410[_419];
                ++ _419;
              }
            }
          }
        }
      }
      while ( (_418 < _417) )
      {
        {
          _ptr__411[_420] = _ptr__410[_418];
          ++ _418;
          ++ _420;
        }
      }
      while ( (_419 < _416) )
      {
        {
          _ptr__411[_420] = _ptr__410[_419];
          ++ _419;
          ++ _420;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _421,    std::shared_ptr< monty::ndarray< long long,1 > > _422,    std::shared_ptr< monty::ndarray< long long,1 > > _423,    long long _424,    long long _425) { mosek::fusion::p_CommonTools::argQsort(_421,_422,_423,_424,_425); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _421,std::shared_ptr< monty::ndarray< long long,1 > > _422,std::shared_ptr< monty::ndarray< long long,1 > > _423,long long _424,long long _425){
  _checked_ptr_1<long long> _ptr__421(_421 ? _421->raw() : nullptr, _421 ? _421->size(0) : 0);
  _checked_ptr_1<long long> _ptr__422(_422 ? _422->raw() : nullptr, _422 ? _422->size(0) : 0);
  _checked_ptr_1<long long> _ptr__423(_423 ? _423->raw() : nullptr, _423 ? _423->size(0) : 0);
  if ((NULL == _423.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_424,_425);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_423,_424,_425);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _426,    std::shared_ptr< monty::ndarray< int,1 > > _427,    std::shared_ptr< monty::ndarray< int,1 > > _428,    long long _429,    long long _430) { mosek::fusion::p_CommonTools::argQsort(_426,_427,_428,_429,_430); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _426,std::shared_ptr< monty::ndarray< int,1 > > _427,std::shared_ptr< monty::ndarray< int,1 > > _428,long long _429,long long _430){
  _checked_ptr_1<long long> _ptr__426(_426 ? _426->raw() : nullptr, _426 ? _426->size(0) : 0);
  _checked_ptr_1<int> _ptr__427(_427 ? _427->raw() : nullptr, _427 ? _427->size(0) : 0);
  _checked_ptr_1<int> _ptr__428(_428 ? _428->raw() : nullptr, _428 ? _428->size(0) : 0);
  if ((NULL == _428.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_429,_430);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_428,_429,_430);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _431,    int _432,    int _433,    int _434){ return new mosek::fusion::SolutionStruct(_431,_432,_433,_434); }mosek::fusion::SolutionStruct::SolutionStruct  (int _431,    int _432,    int _433,    int _434) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_431,_432,_433,_434); }void mosek::fusion::p_SolutionStruct::_initialize  (int _431,    int _432,    int _433,    int _434){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _431;
    sol_numcon = _432;
    sol_numcone = _433;
    sol_numbarvar = _434;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_431 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
    if ((_434 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
      }
    }
    {}
    if ((_432 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
      }
    }
    {}
    if ((_433 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){ return new mosek::fusion::SolutionStruct(_435); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_435); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _8684;
    bool _8685 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc.get());
    if (_8685)
    {
      _8684 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc);
    }
    else
    {
      _8684 = nullptr;
    }
    xc = _8684;
    std::shared_ptr< monty::ndarray< double,1 > > _8686;
    bool _8687 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx.get());
    if (_8687)
    {
      _8686 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx);
    }
    else
    {
      _8686 = nullptr;
    }
    xx = _8686;
    std::shared_ptr< monty::ndarray< double,1 > > _8688;
    bool _8689 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx.get());
    if (_8689)
    {
      _8688 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx);
    }
    else
    {
      _8688 = nullptr;
    }
    yx = _8688;
    std::shared_ptr< monty::ndarray< double,1 > > _8690;
    bool _8691 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slc.get());
    if (_8691)
    {
      _8690 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8690 = nullptr;
    }
    slc = _8690;
    std::shared_ptr< monty::ndarray< double,1 > > _8692;
    bool _8693 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->suc.get());
    if (_8693)
    {
      _8692 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8692 = nullptr;
    }
    suc = _8692;
    std::shared_ptr< monty::ndarray< double,1 > > _8694;
    bool _8695 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->y.get());
    if (_8695)
    {
      _8694 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->y);
    }
    else
    {
      _8694 = nullptr;
    }
    y = _8694;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _8696;
    bool _8697 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx.get());
    if (_8697)
    {
      _8696 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8696 = nullptr;
    }
    slx = _8696;
    std::shared_ptr< monty::ndarray< double,1 > > _8698;
    bool _8699 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux.get());
    if (_8699)
    {
      _8698 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8698 = nullptr;
    }
    sux = _8698;
    std::shared_ptr< monty::ndarray< double,1 > > _8700;
    bool _8701 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx.get());
    if (_8701)
    {
      _8700 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx);
    }
    else
    {
      _8700 = nullptr;
    }
    snx = _8700;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _436,int _437,int _438,int _439) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_436,_437,_438,_439); }void mosek::fusion::p_SolutionStruct::resize(int _436,int _437,int _438,int _439){
  if ((_439 < (int)0))
  {
    {
    }
  }
  else if((_439 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _439;
    }
  }
  else if((_439 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _440;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _439,(int)100 )))
      {
        {
          _440 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _440 = safe_add( _439,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_440);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_440);
      sol_numbarvar = _440;
    }
  }
  if ((_436 < (int)0))
  {
    {
    }
  }
  else if((_436 <= sol_numvar))
  {
    {
      sol_numvar = _436;
    }
  }
  else if((_436 <= (int)((xx)->size(0))))
  {
    {
      int _8702 = sol_numvar;
      int _8703 = _436;
      for (int _441 = _8702; _441 < _8703; ++_441)
      {
        {
          ((*slx)(_441)) = 0.0;
          ((*sux)(_441)) = 0.0;
          ((*xx)(_441)) = 0.0;
          ((*yx)(_441)) = 0.0;
        }
      }
      sol_numvar = _436;
    }
  }
  else
  {
    {
      int _442;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _436,(int)100 )))
      {
        {
          _442 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _442 = safe_add( _436,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _443 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__443(_443 ? _443->raw() : nullptr,_443 ? _443->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_443,(int)0,(int)((slx)->size(0)));
      slx = _443;
      std::shared_ptr< monty::ndarray< double,1 > > _444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__444(_444 ? _444->raw() : nullptr,_444 ? _444->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_444,(int)0,(int)((sux)->size(0)));
      sux = _444;
      std::shared_ptr< monty::ndarray< double,1 > > _445 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__445(_445 ? _445->raw() : nullptr,_445 ? _445->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_445,(int)0,(int)((xx)->size(0)));
      xx = _445;
      std::shared_ptr< monty::ndarray< double,1 > > _446 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__446(_446 ? _446->raw() : nullptr,_446 ? _446->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_446,(int)0,(int)((yx)->size(0)));
      yx = _446;
      {
        int _447 = sol_numvar;
        for(;(_447 < _436);++ _447)
        {
          {
            ((*slx)(_447)) = 0.0;
            ((*sux)(_447)) = 0.0;
            ((*xx)(_447)) = 0.0;
          }
        }
      }
      sol_numvar = _436;
    }
  }
  if ((_437 < (int)0))
  {
    {
    }
  }
  else if((_437 <= sol_numcon))
  {
    {
      sol_numcon = _437;
    }
  }
  else if((_437 <= (int)((xx)->size(0))))
  {
    {
      int _8704 = sol_numcon;
      int _8705 = _437;
      for (int _448 = _8704; _448 < _8705; ++_448)
      {
        {
          ((*slc)(_448)) = 0.0;
          ((*suc)(_448)) = 0.0;
          ((*xc)(_448)) = 0.0;
          ((*y)(_448)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  else
  {
    {
      int _449;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _437,(int)100 )))
      {
        {
          _449 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _449 = safe_add( _437,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _450 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__450(_450 ? _450->raw() : nullptr,_450 ? _450->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_450,(int)0,(int)((slc)->size(0)));
      slc = _450;
      std::shared_ptr< monty::ndarray< double,1 > > _451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__451(_451 ? _451->raw() : nullptr,_451 ? _451->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_451,(int)0,(int)((suc)->size(0)));
      suc = _451;
      std::shared_ptr< monty::ndarray< double,1 > > _452 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__452(_452 ? _452->raw() : nullptr,_452 ? _452->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_452,(int)0,(int)((xc)->size(0)));
      xc = _452;
      std::shared_ptr< monty::ndarray< double,1 > > _453 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__453(_453 ? _453->raw() : nullptr,_453 ? _453->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_453,(int)0,(int)((y)->size(0)));
      y = _453;
      int _8706 = sol_numcon;
      int _8707 = _437;
      for (int _454 = _8706; _454 < _8707; ++_454)
      {
        {
          ((*slc)(_454)) = 0.0;
          ((*suc)(_454)) = 0.0;
          ((*xc)(_454)) = 0.0;
          ((*y)(_454)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  if ((_438 < (int)0))
  {
    {
    }
  }
  else if((_438 <= sol_numcone))
  {
    {
      sol_numcone = _438;
    }
  }
  else if((_438 <= (int)((xx)->size(0))))
  {
    {
      int _8708 = sol_numcone;
      int _8709 = _438;
      for (int _455 = _8708; _455 < _8709; ++_455)
      {
        {
          ((*snx)(_455)) = 0.0;
        }
      }
      sol_numcone = _438;
    }
  }
  else
  {
    {
      int _456;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _438,(int)100 )))
      {
        {
          _456 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _456 = safe_add( _438,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _457 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_456)));
      _checked_ptr_1<double> _ptr__457(_457 ? _457->raw() : nullptr,_457 ? _457->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_457,(int)0,(int)((snx)->size(0)));
      snx = _457;
      {
        int _458 = sol_numcone;
        for(;(_458 < _438);++ _458)
        {
          {
            ((*snx)(_458)) = 0.0;
          }
        }
      }
      sol_numcone = _438;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _459) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_459); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _459){
  return isAcceptable(dstatus,_459);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_460); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460){
  return isAcceptable(pstatus,_460);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _461,mosek::fusion::AccSolutionStatus _462){
  if ((_462 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_461 == ::mosek::fusion::SolutionStatus::Optimal) || (_461 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){ return new mosek::fusion::ConNZStruct(_463,_464,_465,_466,_467,_468,_469); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_463,_464,_465,_466,_467,_468,_469); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    _checked_ptr_1<int> _ptr__464(_464 ? _464->raw() : nullptr, _464 ? _464->size(0) : 0);
    _checked_ptr_1<double> _ptr__465(_465 ? _465->raw() : nullptr, _465 ? _465->size(0) : 0);
    _checked_ptr_1<double> _ptr__466(_466 ? _466->raw() : nullptr, _466 ? _466->size(0) : 0);
    _checked_ptr_1<int> _ptr__467(_467 ? _467->raw() : nullptr, _467 ? _467->size(0) : 0);
    _checked_ptr_1<int> _ptr__468(_468 ? _468->raw() : nullptr, _468 ? _468->size(0) : 0);
    _checked_ptr_1<int> _ptr__469(_469 ? _469->raw() : nullptr, _469 ? _469->size(0) : 0);
    ptrb = _463;
    subj = _464;
    cof = _465;
    bfix = _466;
    barsubi = _467;
    barsubj = _468;
    barmidx = _469;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _470){ return new mosek::fusion::Model(_470); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _470) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_470); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _470){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_470);
    monty::rc_ptr< ::mosek::fusion::Model > _471 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_470)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_470)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_470)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8710;
    for (int _472 = (int)0, _8711 = (int)((mosek::fusion::p_Model::_get_impl(_470)->vars)->size(0)); _472 < _8711 ; ++_472)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8712;
      bool _8713 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get());
      if (_8713)
      {
        _8712 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8712 = nullptr;
      }
      _8710.push_back(_8712);
    }
    auto _8714 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8710.size()),_8710.begin(),_8710.end()));
    vars = _8714;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_470)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8715;
    for (int _473 = (int)0, _8716 = (int)((mosek::fusion::p_Model::_get_impl(_470)->barvars)->size(0)); _473 < _8716 ; ++_473)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8717;
      bool _8718 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get());
      if (_8718)
      {
        _8717 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8717 = nullptr;
      }
      _8715.push_back(_8717);
    }
    auto _8719 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8715.size()),_8715.begin(),_8715.end()));
    barvars = _8719;
    var_map = mosek::fusion::p_Model::_get_impl(_470)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_type);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8720;
    for (int _474 = (int)0, _8721 = (int)((mosek::fusion::p_Model::_get_impl(_470)->cons)->size(0)); _474 < _8721 ; ++_474)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _8722;
      bool _8723 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get());
      if (_8723)
      {
        _8722 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get())->__mosek_2fusion_2ModelConstraint__clone(_471);
      }
      else
      {
        _8722 = nullptr;
      }
      _8720.push_back(_8722);
    }
    auto _8724 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8720.size()),_8720.begin(),_8720.end()));
    cons = _8724;
    con_map = mosek::fusion::p_Model::_get_impl(_470)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    numparameter = mosek::fusion::p_Model::_get_impl(_470)->numparameter;
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _8725;
    bool _8726 = (NULL == mosek::fusion::p_Model::_get_impl(_470)->parameters.get());
    if (_8726)
    {
      _8725 = nullptr;
    }
    else
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8727;
      for (int _475 = (int)0, _8728 = (int)((mosek::fusion::p_Model::_get_impl(_470)->parameters)->size(0)); _475 < _8728 ; ++_475)
      {
        monty::rc_ptr< ::mosek::fusion::Parameter > _8729;
        bool _8730 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475)).get());
        if (_8730)
        {
          _8729 = ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475))->__mosek_2fusion_2Parameter__clone(_471);
        }
        else
        {
          _8729 = nullptr;
        }
        _8727.push_back(_8729);
      }
      auto _8731 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8727.size()),_8727.begin(),_8727.end()));
      _8725 = _8731;
    }
    parameters = _8725;
    par_map = mosek::fusion::p_Model::_get_impl(_470)->par_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    param_num = mosek::fusion::p_Model::_get_impl(_470)->param_num;
    param_value = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->param_value);
    natconmap_codenztop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenztop;
    natconmap_codeatomtop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeatomtop;
    natconmap_numparameterized = mosek::fusion::p_Model::_get_impl(_470)->natconmap_numparameterized;
    natconmap_coderowptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptrb);
    natconmap_coderowptre = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptre);
    natconmap_codenidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenidx);
    natconmap_codeptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeptr);
    natconmap_code = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_code);
    natconmap_cconst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_cconst);
    std::shared_ptr< monty::ndarray< long long,1 > > _8732;
    bool _8733 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx.get());
    if (_8733)
    {
      _8732 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx);
    }
    else
    {
      _8732 = nullptr;
    }
    natconmap_objcodenidx = _8732;
    std::shared_ptr< monty::ndarray< int,1 > > _8734;
    bool _8735 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr.get());
    if (_8735)
    {
      _8734 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr);
    }
    else
    {
      _8734 = nullptr;
    }
    natconmap_objcodeptr = _8734;
    std::shared_ptr< monty::ndarray< int,1 > > _8736;
    bool _8737 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode.get());
    if (_8737)
    {
      _8736 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode);
    }
    else
    {
      _8736 = nullptr;
    }
    natconmap_objcode = _8736;
    std::shared_ptr< monty::ndarray< double,1 > > _8738;
    bool _8739 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst.get());
    if (_8739)
    {
      _8738 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst);
    }
    else
    {
      _8738 = nullptr;
    }
    natconmap_objcconst = _8738;
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_470)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _476){ return new mosek::fusion::Model(_476); }mosek::fusion::Model::Model  (const std::string &  _476) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_476); }void mosek::fusion::p_Model::_initialize  (const std::string &  _476){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_476,std::string (""));
    model_name = _476;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8740;
    for (int _477 = (int)0, _8741 = (int)1024; _477 < _8741 ; ++_477)
    {
      _8740.push_back(nullptr);
    }
    auto _8742 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8740.size()),_8740.begin(),_8740.end()));
    vars = _8742;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptrb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptre = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8743;
    for (int _478 = (int)0, _8744 = (int)1024; _478 < _8744 ; ++_478)
    {
      _8743.push_back(nullptr);
    }
    auto _8745 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8743.size()),_8743.begin(),_8743.end()));
    cons = _8745;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    numparameter = (int)0;
    parameters = nullptr;
    par_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    param_num = (int)0;
    param_value = nullptr;
    natconmap_numparameterized = (int)0;
    natconmap_codeatomtop = (int)0;
    natconmap_codenztop = (int)0;
    natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_objcodenidx = nullptr;
    natconmap_objcodeptr = nullptr;
    natconmap_objcode = nullptr;
    natconmap_objcconst = nullptr;
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _479,std::shared_ptr< monty::ndarray< int,1 > > _480,std::shared_ptr< monty::ndarray< int,1 > > _481){
  _checked_ptr_1<int> _ptr__480(_480 ? _480->raw() : nullptr, _480 ? _480->size(0) : 0);
  _checked_ptr_1<int> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  return _479;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _482,const std::string & _483,std::shared_ptr< monty::ndarray< int,1 > > _484,std::shared_ptr< monty::ndarray< long long,1 > > _485){
  _checked_ptr_1<int> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  _checked_ptr_1<int> _ptr__484(_484 ? _484->raw() : nullptr, _484 ? _484->size(0) : 0);
  _checked_ptr_1<long long> _ptr__485(_485 ? _485->raw() : nullptr, _485 ? _485->size(0) : 0);
  task_format_con_names(_482,_483,_484,_485);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _486,const std::string & _487,std::shared_ptr< monty::ndarray< int,1 > > _488,std::shared_ptr< monty::ndarray< long long,1 > > _489){
  _checked_ptr_1<int> _ptr__486(_486 ? _486->raw() : nullptr, _486 ? _486->size(0) : 0);
  _checked_ptr_1<int> _ptr__488(_488 ? _488->raw() : nullptr, _488 ? _488->size(0) : 0);
  _checked_ptr_1<long long> _ptr__489(_489 ? _489->raw() : nullptr, _489 ? _489->size(0) : 0);
  task_format_var_names(_486,_487,_488,_489);
}
void mosek::fusion::p_Model::varname(int _490,const std::string & _491){
  task_var_name(_490,_491);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _492,std::shared_ptr< monty::ndarray< int,1 > > _493){
  _checked_ptr_1<int> _ptr__493(_493 ? _493->raw() : nullptr, _493 ? _493->size(0) : 0);
  int _494 = ((*natbarvarmap_ptr)(_492));
  int _495 = ((*natbarvarmap_num)(_492));
  int _8746 = (int)0;
  int _8747 = _495;
  for (int _496 = _8746; _496 < _8747; ++_496)
  {
    {
      _ptr__493[_496] = safe_add( _494,_496 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _497,std::shared_ptr< monty::ndarray< long long,1 > > _498){
  _checked_ptr_1<long long> _ptr__498(_498 ? _498->raw() : nullptr, _498 ? _498->size(0) : 0);
  int _499 = ((*natbarvarmap_ptr)(_497));
  int _500 = ((*natbarvarmap_num)(_497));
  int _501 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_497))));
  int _502 = (safe_mul( safe_mul( _500,_501 ),safe_add( _501,(int)1 ) ) / (int)2);
  long long _503 = ((*natbarvar_ptr)(_499));
  int _8748 = (int)0;
  int _8749 = _502;
  for (int _504 = _8748; _504 < _8749; ++_504)
  {
    {
      _ptr__498[_504] = safe_add( _503,_504 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _505,int _506){
  int _507 = (int)((natbarvar_idx)->size(0));
  int _508 = task_numbarvar();
  int _509 = (safe_mul( _506,safe_add( _506,(int)1 ) ) / (int)2);
  int _510 = safe_mul( _505,_509 );
  if ((safe_add( natbarvar_numbarvarelm,_510 ) >= _507))
  {
    {
      if ((_510 < _507))
      {
        {
          _510 = _507;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _507,_510 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _507,_510 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _507,_510 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _8750;
      bool _8751 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_8751)
      {
        _8750 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _8750 = (int)32;
      }
      int _511 = _8750;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_511);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _511,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _512 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_511)));
      int _8752 = (int)0;
      int _8753 = (int)((barvars)->size(0));
      for (int _513 = _8752; _513 < _8753; ++_513)
      {
        {
          ((*_512)(_513)) = ((*barvars)(_513));
        }
      }
      barvars = _512;
    }
  }
  {}
  if ((safe_add( _508,_505 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _8754;
      bool _8755 = (safe_add( _508,_505 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_8755)
      {
        _8754 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _8754 = safe_add( _508,_505 );
      }
      int _514 = _8754;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_514);
    }
  }
  {}
  if ((safe_add( _508,_505 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _8756;
      bool _8757 = (_505 > (int)((natbarvar_ptr)->size(0)));
      if (_8757)
      {
        _8756 = _505;
      }
      else
      {
        _8756 = (int)((natbarvar_ptr)->size(0));
      }
      int _515 = _8756;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_515 ),(int)1 ));
    }
  }
  {}
  int _8758 = (int)0;
  int _8759 = _505;
  for (int _516 = _8758; _516 < _8759; ++_516)
  {
    {
      ((*natbarvar_dim)(safe_add( _508,_516 ))) = _506;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _505;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_505 );
  int _517 = task_append_barvar(_506,_505);
  int _518 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _519 = ((*natbarvar_ptr)(_508));
    int _8760 = (int)0;
    int _8761 = _506;
    for (int _520 = _8760; _520 < _8761; ++_520)
    {
      {
        int _8762 = _520;
        int _8763 = _506;
        for (int _521 = _8762; _521 < _8763; ++_521)
        {
          {
            int _8764 = (int)0;
            int _8765 = _505;
            for (int _522 = _8764; _522 < _8765; ++_522)
            {
              {
                ((*natbarvar_idx)(safe_add( _519,safe_mul( _522,_509 ) ))) = safe_add( _518,_522 );
                ((*natbarvar_i)(safe_add( _519,safe_mul( _522,_509 ) ))) = _521;
                ((*natbarvar_j)(safe_add( _519,safe_mul( _522,_509 ) ))) = _520;
              }
            }
            ++ _519;
          }
        }
      }
    }
    int _8766 = (int)0;
    int _8767 = _505;
    for (int _523 = _8766; _523 < _8767; ++_523)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _518,_523 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _518,_523 ))),_509 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _505,_509 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _524){
  int _525 = natvarmap->alloc(_524);
  int _526 = safe_add( natvarmap->maxidx(_525),(int)1 );
  int _527 = natvarmap->capacity();
  int _528 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _527))
  {
    {
      int _529 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_527);
      int _8768 = _529;
      int _8769 = _527;
      for (int _530 = _8768; _530 < _8769; ++_530)
      {
        {
          ((*natvarmap_idx)(_530)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_527);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _528))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_528);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _531 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_528)));
      int _8770 = (int)0;
      int _8771 = (int)((vars)->size(0));
      for (int _532 = _8770; _532 < _8771; ++_532)
      {
        {
          ((*_531)(_532)) = ((*vars)(_532));
        }
      }
      int _8772 = (int)((vars)->size(0));
      int _8773 = (int)((_531)->size(0));
      for (int _533 = _8772; _533 < _8773; ++_533)
      {
        {
          ((*_531)(_533)) = nullptr;
        }
      }
      vars = _531;
    }
  }
  {}
  if ((task_numvar() < _526))
  {
    {
      task_append_var((_526 - task_numvar()));
    }
  }
  {}
  return _525;
}
void mosek::fusion::p_Model::natconmap_codealloc(int _534,int _535){
  int _536 = safe_add( _534,natconmap_codenztop );
  int _537 = safe_add( _535,natconmap_codeatomtop );
  if ((_536 > (int)((natconmap_codenidx)->size(0))))
  {
    {
      if ((_536 < safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) )))
      {
        {
          _536 = safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< long long,1 > > _538 = natconmap_codenidx;
      _checked_ptr_1<long long> _ptr__538(_538 ? _538->raw() : nullptr,_538 ? _538->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _539 = natconmap_codeptr;
      _checked_ptr_1<int> _ptr__539(_539 ? _539->raw() : nullptr,_539 ? _539->size(0) : 0);
      natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_536)));
      ::mosek::fusion::Utils::Tools::arraycopy(_538,(int)0,natconmap_codenidx,(int)0,(int)((_538)->size(0)));
      natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _536,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_539,(int)0,natconmap_codeptr,(int)0,(int)((_539)->size(0)));
    }
  }
  {}
  if ((_537 > (int)((natconmap_code)->size(0))))
  {
    {
      if ((_537 < safe_mul( (int)2,(int)((natconmap_code)->size(0)) )))
      {
        {
          _537 = safe_mul( (int)2,(int)((natconmap_code)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _540 = natconmap_code;
      _checked_ptr_1<int> _ptr__540(_540 ? _540->raw() : nullptr,_540 ? _540->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _541 = natconmap_cconst;
      _checked_ptr_1<double> _ptr__541(_541 ? _541->raw() : nullptr,_541 ? _541->size(0) : 0);
      natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_537)));
      ::mosek::fusion::Utils::Tools::arraycopy(_540,(int)0,natconmap_code,(int)0,(int)((_540)->size(0)));
      natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( _537,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_541,(int)0,natconmap_cconst,(int)0,(int)((_541)->size(0)));
    }
  }
  {}
  natconmap_codenztop += _534;
  natconmap_codeatomtop += _535;
}
int mosek::fusion::p_Model::natconmap_alloc(int _542){
  int _543 = natconmap->alloc(_542);
  int _544 = safe_add( natconmap->maxidx(_543),(int)1 );
  int _545 = natconmap->capacity();
  int _546 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _545))
  {
    {
      int _547 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_545);
      int _8774 = _547;
      int _8775 = _545;
      for (int _548 = _8774; _548 < _8775; ++_548)
      {
        {
          ((*natconmap_idx)(_548)) = (-(int)1);
        }
      }
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_545);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_545);
      natconmap_coderowptrb = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptrb,_545);
      natconmap_coderowptre = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptre,_545);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _546))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_546);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _549 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_546)));
      int _8776 = (int)0;
      int _8777 = (int)((cons)->size(0));
      for (int _550 = _8776; _550 < _8777; ++_550)
      {
        {
          ((*_549)(_550)) = ((*cons)(_550));
        }
      }
      int _8778 = (int)((cons)->size(0));
      int _8779 = _546;
      for (int _551 = _8778; _551 < _8779; ++_551)
      {
        {
          ((*_549)(_551)) = nullptr;
        }
      }
      cons = _549;
    }
  }
  {}
  if ((_544 > task_numcon()))
  {
    {
      task_append_con((_544 - task_numcon()));
    }
  }
  {}
  return _543;
}
int mosek::fusion::p_Model::natconemap_alloc(int _552){
  int _553 = natconemap->alloc(_552);
  int _554 = safe_add( natconemap->maxidx(_553),(int)1 );
  if ((_554 > task_numcone()))
  {
    {
      task_append_zerocones((_554 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _553;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _555){
  _checked_ptr_1<long long> _ptr__555(_555 ? _555->raw() : nullptr, _555 ? _555->size(0) : 0);
  int _556 = (int)0;
  int _8780 = (int)0;
  int _8781 = (int)((_555)->size(0));
  for (int _557 = _8780; _557 < _8781; ++_557)
  {
    {
      if ((_ptr__555[_557] > (int)0))
      {
        {
          ++ _556;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_556)));
  _checked_ptr_1<int> _ptr__558(_558 ? _558->raw() : nullptr,_558 ? _558->size(0) : 0);
  int _559 = (int)0;
  int _8782 = (int)0;
  int _8783 = (int)((_555)->size(0));
  for (int _560 = _8782; _560 < _8783; ++_560)
  {
    {
      if ((_ptr__555[_560] > (int)0))
      {
        {
          _ptr__558[_559] = (int)_ptr__555[_560];
          ++ _559;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_558);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _561){
  _checked_ptr_1<long long> _ptr__561(_561 ? _561->raw() : nullptr, _561 ? _561->size(0) : 0);
  int _562 = (int)0;
  int _8784 = (int)0;
  int _8785 = (int)((_561)->size(0));
  for (int _563 = _8784; _563 < _8785; ++_563)
  {
    {
      if ((_ptr__561[_563] > (int)0))
      {
        {
          ++ _562;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_562)));
  _checked_ptr_1<int> _ptr__564(_564 ? _564->raw() : nullptr,_564 ? _564->size(0) : 0);
  int _565 = (int)0;
  int _8786 = (int)0;
  int _8787 = (int)((_561)->size(0));
  for (int _566 = _8786; _566 < _8787; ++_566)
  {
    {
      if ((_ptr__561[_566] > (int)0))
      {
        {
          _ptr__564[_565] = (int)_ptr__561[_566];
          ++ _565;
        }
      }
      {}
    }
  }
  task_var_putintlist(_564);
}
void mosek::fusion::Model::putlicensewait  ( bool _567) { mosek::fusion::p_Model::putlicensewait(_567); }void mosek::fusion::p_Model::putlicensewait(bool _567){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_567);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _568) { mosek::fusion::p_Model::putlicensepath(_568); }void mosek::fusion::p_Model::putlicensepath(const std::string & _568){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_568);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _569) { mosek::fusion::p_Model::putlicensecode(_569); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _569){
  _checked_ptr_1<int> _ptr__569(_569 ? _569->raw() : nullptr, _569 ? _569->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_569);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _8788 = (int)0;
  int _8789 = (int)((vars)->size(0));
  for (int _570 = _8788; _570 < _8789; ++_570)
  {
    {
      ((*vars)(_570)) = nullptr;
    }
  }
  int _8790 = (int)0;
  int _8791 = (int)((cons)->size(0));
  for (int _571 = _8790; _571 < _8791; ++_571)
  {
    {
      ((*cons)(_571)) = nullptr;
    }
  }
  int _8792 = (int)0;
  int _8793 = (int)((barvars)->size(0));
  for (int _572 = _8792; _572 < _8793; ++_572)
  {
    {
      ((*barvars)(_572)) = nullptr;
    }
  }
  if ((NULL != parameters.get()))
  {
    {
      int _8794 = (int)0;
      int _8795 = (int)((parameters)->size(0));
      for (int _573 = _8794; _573 < _8795; ++_573)
      {
        {
          ((*parameters)(_573)) = nullptr;
        }
      }
    }
  }
  {}
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _574,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _575){
  if (((_574 < (int)0) || ((_574 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_574)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_574))))->elementName((long long)(((*natvarmap_idx)(_574))),_575);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579) { mosek::fusion::p_Model::_get_impl(this)->getConstraintDuals(_576,_577,_578,_579); }void mosek::fusion::p_Model::getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579){
  _checked_ptr_1<int> _ptr__577(_577 ? _577->raw() : nullptr, _577 ? _577->size(0) : 0);
  _checked_ptr_1<double> _ptr__578(_578 ? _578->raw() : nullptr, _578 ? _578->size(0) : 0);
  int _580 = (int)((_577)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _581 = getSolution_slx(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__581(_581 ? _581->raw() : nullptr,_581 ? _581->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _582 = getSolution_sux(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__582(_582 ? _582->raw() : nullptr,_582 ? _582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _583 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__583(_583 ? _583->raw() : nullptr,_583 ? _583->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _584 = getSolution_slc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr,_584 ? _584->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _585 = getSolution_suc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__585(_585 ? _585->raw() : nullptr,_585 ? _585->size(0) : 0);
  int _8796 = (int)0;
  int _8797 = _580;
  for (int _586 = _8796; _586 < _8797; ++_586)
  {
    {
      long long _587 = ((*natconmap_slackidx)(_ptr__577[_586]));
      if ((_587 < (int)0))
      {
        {
          long long _588 = (-safe_add( _587,(int)1 ));
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__583[_588];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__583[_588]);
            }
          }
        }
      }
      else if((_587 > (int)0))
      {
        {
          _ptr__578[safe_add( _579,_586 )] = (_ptr__581[(_587 - (int)1)] - _ptr__582[(_587 - (int)1)]);
        }
      }
      else
      {
        {
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__584[_ptr__577[_586]];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__585[_ptr__577[_586]]);
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_589,_590,_591,_592); }void mosek::fusion::p_Model::getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592){
  _checked_ptr_1<int> _ptr__590(_590 ? _590->raw() : nullptr, _590 ? _590->size(0) : 0);
  _checked_ptr_1<double> _ptr__591(_591 ? _591->raw() : nullptr, _591 ? _591->size(0) : 0);
  int _593 = (int)((_590)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8798;
  bool _8799 = _589;
  if (_8799)
  {
    _8798 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8798 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _594 = _8798;
  _checked_ptr_1<double> _ptr__594(_594 ? _594->raw() : nullptr,_594 ? _594->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8800;
  bool _8801 = _589;
  if (_8801)
  {
    _8800 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8800 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _595 = _8800;
  _checked_ptr_1<double> _ptr__595(_595 ? _595->raw() : nullptr,_595 ? _595->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8802;
  bool _8803 = _589;
  if (_8803)
  {
    _8802 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8802 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _596 = _8802;
  _checked_ptr_1<double> _ptr__596(_596 ? _596->raw() : nullptr,_596 ? _596->size(0) : 0);
  int _8804 = (int)0;
  int _8805 = _593;
  for (int _597 = _8804; _597 < _8805; ++_597)
  {
    {
      long long _598 = ((*natconmap_slackidx)(_ptr__590[_597]));
      if ((_598 < (int)0))
      {
        {
          long long _599 = (-safe_add( _598,(int)1 ));
          _ptr__591[safe_add( _592,_597 )] = _ptr__595[_599];
        }
      }
      else if((_598 > (int)0))
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__594[(_598 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__596[_ptr__590[_597]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_600,_601,_602,_603); }void mosek::fusion::p_Model::getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603){
  _checked_ptr_1<long long> _ptr__601(_601 ? _601->raw() : nullptr, _601 ? _601->size(0) : 0);
  _checked_ptr_1<double> _ptr__602(_602 ? _602->raw() : nullptr, _602 ? _602->size(0) : 0);
  int _604 = (int)((_601)->size(0));
  if (_600)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _605 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__605(_605 ? _605->raw() : nullptr,_605 ? _605->size(0) : 0);
      int _8806 = (int)0;
      int _8807 = _604;
      for (int _606 = _8806; _606 < _8807; ++_606)
      {
        {
          if ((_ptr__601[_606] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_606 )] = _ptr__605[_ptr__601[_606]];
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_606 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _607 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__607(_607 ? _607->raw() : nullptr,_607 ? _607->size(0) : 0);
      int _8808 = (int)0;
      int _8809 = _604;
      for (int _608 = _8808; _608 < _8809; ++_608)
      {
        {
          if ((_ptr__601[_608] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (-_ptr__607[_ptr__601[_608]]);
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_609,_610,_611,_612); }void mosek::fusion::p_Model::getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612){
  _checked_ptr_1<long long> _ptr__610(_610 ? _610->raw() : nullptr, _610 ? _610->size(0) : 0);
  _checked_ptr_1<double> _ptr__611(_611 ? _611->raw() : nullptr, _611 ? _611->size(0) : 0);
  int _613 = (int)((_610)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8810;
  bool _8811 = _609;
  if (_8811)
  {
    _8810 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8810 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _614 = _8810;
  _checked_ptr_1<double> _ptr__614(_614 ? _614->raw() : nullptr,_614 ? _614->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8812;
  bool _8813 = (natbarvar_numbarvarelm > (int)0);
  if (_8813)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _8814;
    bool _8815 = _609;
    if (_8815)
    {
      _8814 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _8814 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _8812 = _8814;
  }
  else
  {
    _8812 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _615 = _8812;
  _checked_ptr_1<double> _ptr__615(_615 ? _615->raw() : nullptr,_615 ? _615->size(0) : 0);
  int _8816 = (int)0;
  int _8817 = _613;
  for (int _616 = _8816; _616 < _8817; ++_616)
  {
    {
      if ((_ptr__610[_616] > (int)0))
      {
        {
          _ptr__611[safe_add( _612,_616 )] = _ptr__614[_ptr__610[_616]];
        }
      }
      else if((_ptr__610[_616] < (int)0))
      {
        {
          long long _617 = (-safe_add( _ptr__610[_616],(int)1 ));
          _ptr__611[safe_add( _612,_616 )] = _ptr__615[_617];
        }
      }
      else
      {
        {
          _ptr__611[safe_add( _612,_616 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_618,_619,_620); }void mosek::fusion::p_Model::setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620){
  _checked_ptr_1<long long> _ptr__619(_619 ? _619->raw() : nullptr, _619 ? _619->size(0) : 0);
  _checked_ptr_1<double> _ptr__620(_620 ? _620->raw() : nullptr, _620 ? _620->size(0) : 0);
  if (_618)
  {
    {
      int _621 = (int)0;
      int _8818 = (int)0;
      int _8819 = (int)((_619)->size(0));
      for (int _622 = _8818; _622 < _8819; ++_622)
      {
        {
          if ((_ptr__619[_622] >= (int)0))
          {
            {
              ++ _621;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _623 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_621)));
      _checked_ptr_1<int> _ptr__623(_623 ? _623->raw() : nullptr,_623 ? _623->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _8820;
      bool _8821 = (_621 == (int)((_619)->size(0)));
      if (_8821)
      {
        _8820 = _620;
      }
      else
      {
        _8820 = _620;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _624 = _8820;
      _checked_ptr_1<double> _ptr__624(_624 ? _624->raw() : nullptr,_624 ? _624->size(0) : 0);
      int _625 = (int)0;
      int _8822 = (int)0;
      int _8823 = (int)((_619)->size(0));
      for (int _626 = _8822; _626 < _8823; ++_626)
      {
        {
          if ((_ptr__619[_626] > (int)0))
          {
            {
              _ptr__623[_625] = (int)_ptr__619[_626];
              ++ _625;
            }
          }
          {}
        }
      }
      setSolution_xx(_623,_624);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _8824 = (int)0;
  int _8825 = (int)((vars)->size(0));
  for (int _627 = _8824; _627 < _8825; ++_627)
  {
    {
      if ((NULL != ((*vars)(_627)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_627)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8826 = (int)0;
  int _8827 = (int)((barvars)->size(0));
  for (int _628 = _8826; _628 < _8827; ++_628)
  {
    {
      if ((NULL != ((*barvars)(_628)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_628)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8828 = (int)0;
  int _8829 = (int)((cons)->size(0));
  for (int _629 = _8828; _629 < _8829; ++_629)
  {
    {
      if ((NULL != ((*cons)(_629)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_629)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTaskNoFlush(const std::string & _630) { mosek::fusion::p_Model::_get_impl(this)->writeTaskNoFlush(_630); }void mosek::fusion::p_Model::writeTaskNoFlush(const std::string & _630){
  _pubthis->flushNames();
  task_write(_630);
}
void mosek::fusion::Model :: writeTask(const std::string & _631) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_631); }void mosek::fusion::p_Model::writeTask(const std::string & _631){
  _pubthis->flushNames();
  flush_parameters();
  task_write(_631);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _632) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_632); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _632){
  return task_get_liinf(_632);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _633) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_633); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _633){
  return task_get_iinf(_633);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _634) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_634); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _634){
  return task_get_dinf(_634);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _635) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_635); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _635){
  task_setCallbackHandler(_635);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _636) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_636); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _636){
  task_setDataCallbackHandler(_636);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _637) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_637); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _637){
  task_setLogHandler(_637);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _638,double _639) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_638,_639); }void mosek::fusion::p_Model::setSolverParam(const std::string & _638,double _639){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_638,_639);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _640,int _641) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_640,_641); }void mosek::fusion::p_Model::setSolverParam(const std::string & _640,int _641){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_640,_641);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _642,const std::string & _643) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_642,_643); }void mosek::fusion::p_Model::setSolverParam(const std::string & _642,const std::string & _643){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_642,_643);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: optserverHost(const std::string & _644) { mosek::fusion::p_Model::_get_impl(this)->optserverHost(_644); }void mosek::fusion::p_Model::optserverHost(const std::string & _644){
  task_putoptserver_host(_644);
}
void mosek::fusion::Model :: solve(const std::string & _645,const std::string & _646) { mosek::fusion::p_Model::_get_impl(this)->solve(_645,_646); }void mosek::fusion::p_Model::solve(const std::string & _645,const std::string & _646){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(true,_645,_646);
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(false,std::string (""),std::string (""));
}
void mosek::fusion::p_Model::flush_parameters(){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      int _647 = task_numcon();
      std::shared_ptr< monty::ndarray< int,1 > > _648 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__648(_648 ? _648->raw() : nullptr,_648 ? _648->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _649 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__649(_649 ? _649->raw() : nullptr,_649 ? _649->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _650 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<double> _ptr__650(_650 ? _650->raw() : nullptr,_650 ? _650->size(0) : 0);
      int _651 = (int)0;
      int _8830 = (int)0;
      int _8831 = _647;
      for (int _652 = _8830; _652 < _8831; ++_652)
      {
        {
          int _653 = (((*natconmap_coderowptre)(_652)) - ((*natconmap_coderowptrb)(_652)));
          if ((_653 > (int)0))
          {
            {
              int _8832 = _651;
              int _8833 = safe_add( _651,_653 );
              for (int _654 = _8832; _654 < _8833; ++_654)
              {
                {
                  _ptr__648[_654] = _652;
                }
              }
              _651 += _653;
            }
          }
          {}
        }
      }
      evaluate_parameterized(xs,_647,natconmap_coderowptrb,natconmap_coderowptre,natconmap_codenidx,natconmap_codeptr,natconmap_code,natconmap_cconst,_649,_650);
      task_putaijlist(_648,_649,_650,(long long)(natconmap_numparameterized));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      int _655 = (int)((natconmap_objcodenidx)->size(0));
      std::shared_ptr< monty::ndarray< int,1 > > _656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_655)));
      _checked_ptr_1<int> _ptr__656(_656 ? _656->raw() : nullptr,_656 ? _656->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _657 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_655)));
      _checked_ptr_1<double> _ptr__657(_657 ? _657->raw() : nullptr,_657 ? _657->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _658 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      _checked_ptr_1<int> _ptr__658(_658 ? _658->raw() : nullptr,_658 ? _658->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _659 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((natconmap_objcodenidx)->size(0)))});
      _checked_ptr_1<int> _ptr__659(_659 ? _659->raw() : nullptr,_659 ? _659->size(0) : 0);
      evaluate_parameterized(xs,(int)1,_658,_659,natconmap_objcodenidx,natconmap_objcodeptr,natconmap_objcode,natconmap_objcconst,_656,_657);
      task_putclist(_656,_657);
    }
  }
  {}
}
void mosek::fusion::Model :: flushParameters() { mosek::fusion::p_Model::_get_impl(this)->flushParameters(); }void mosek::fusion::p_Model::flushParameters(){
  flush_parameters();
}
void mosek::fusion::p_Model::evaluate_parameterized(monty::rc_ptr< ::mosek::fusion::WorkStack > _660,int _661,std::shared_ptr< monty::ndarray< int,1 > > _662,std::shared_ptr< monty::ndarray< int,1 > > _663,std::shared_ptr< monty::ndarray< long long,1 > > _664,std::shared_ptr< monty::ndarray< int,1 > > _665,std::shared_ptr< monty::ndarray< int,1 > > _666,std::shared_ptr< monty::ndarray< double,1 > > _667,std::shared_ptr< monty::ndarray< int,1 > > _668,std::shared_ptr< monty::ndarray< double,1 > > _669){
  _checked_ptr_1<int> _ptr__662(_662 ? _662->raw() : nullptr, _662 ? _662->size(0) : 0);
  _checked_ptr_1<int> _ptr__663(_663 ? _663->raw() : nullptr, _663 ? _663->size(0) : 0);
  _checked_ptr_1<long long> _ptr__664(_664 ? _664->raw() : nullptr, _664 ? _664->size(0) : 0);
  _checked_ptr_1<int> _ptr__665(_665 ? _665->raw() : nullptr, _665 ? _665->size(0) : 0);
  _checked_ptr_1<int> _ptr__666(_666 ? _666->raw() : nullptr, _666 ? _666->size(0) : 0);
  _checked_ptr_1<double> _ptr__667(_667 ? _667->raw() : nullptr, _667 ? _667->size(0) : 0);
  _checked_ptr_1<int> _ptr__668(_668 ? _668->raw() : nullptr, _668 ? _668->size(0) : 0);
  _checked_ptr_1<double> _ptr__669(_669 ? _669->raw() : nullptr, _669 ? _669->size(0) : 0);
  int _670 = _660->allocf64((int)((_666)->size(0)));
  int _671 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _672 = mosek::fusion::p_WorkStack::_get_impl(_660)->f64;
  _checked_ptr_1<double> _ptr__672(_672 ? _672->raw() : nullptr,_672 ? _672->size(0) : 0);
  int _673 = (int)0;
  int _8834 = (int)0;
  int _8835 = _661;
  for (int _674 = _8834; _674 < _8835; ++_674)
  {
    {
      int _8836 = _ptr__662[_674];
      int _8837 = _ptr__663[_674];
      for (int _675 = _8836; _675 < _8837; ++_675)
      {
        {
          int _8838 = _ptr__665[_675];
          int _8839 = _ptr__665[safe_add( _675,(int)1 )];
          for (int _676 = _8838; _676 < _8839; ++_676)
          {
            {
              if ((_ptr__666[_676] == 0))
              {
                {
                }
              }
              else
              {
                {
                  if ((_ptr__666[_676] == 1))
                  {
                    {
                      _ptr__672[safe_add( _670,_671 )] = ((*param_value)((int)_ptr__667[_676]));
                      ++ _671;
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__666[_676] == 2))
                      {
                        {
                          _ptr__672[safe_add( _670,_671 )] = _ptr__667[_676];
                          ++ _671;
                        }
                      }
                      else
                      {
                        {
                          if ((_ptr__666[_676] == 3))
                          {
                            {
                              _ptr__672[(safe_add( _670,_671 ) - (int)2)] += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                              -- _671;
                            }
                          }
                          else
                          {
                            {
                              if ((_ptr__666[_676] == 4))
                              {
                                {
                                  _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (-_ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                }
                              }
                              else
                              {
                                {
                                  if ((_ptr__666[_676] == 5))
                                  {
                                    {
                                      _ptr__672[(safe_add( _670,_671 ) - (int)2)] *= _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                      -- _671;
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((_ptr__666[_676] == 6))
                                      {
                                        {
                                          _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (1.0 / _ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((_ptr__666[_676] == 8))
                                          {
                                            {
                                              double _677 = 0.0;
                                              int _8840 = (int)0;
                                              int _8841 = (int)_ptr__667[_676];
                                              for (int _678 = _8840; _678 < _8841; ++_678)
                                              {
                                                {
                                                  _677 += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                                  -- _671;
                                                }
                                              }
                                              _ptr__672[safe_add( _670,_671 )] = _677;
                                              ++ _671;
                                            }
                                          }
                                          else
                                          {
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _ptr__668[_673] = (int)_ptr__664[_675];
          _ptr__669[_673] = _ptr__672[_670];
          _671 = (int)0;
          ++ _673;
        }
      }
    }
  }
  _660->popf64((int)((_666)->size(0)));
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _679){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _680 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _681 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_680)));
      _checked_ptr_1<double> _ptr__681(_681 ? _681->raw() : nullptr,_681 ? _681->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _683 = __mosek_2fusion_2Model__get_sol_cache(_679,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx.get()))
          {
            {
              int _8842;
              bool _8843 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0)) <= _680);
              if (_8843)
              {
                _8842 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0));
              }
              else
              {
                _8842 = _680;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx,(int)0,_681,(int)0,_8842);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _682)
      {
        {
        }
      }
      int _8844;
      bool _8845 = ((int)((initsol_xx)->size(0)) <= _680);
      if (_8845)
      {
        _8844 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _8844 = _680;
      }
      int _684 = _8844;
      int _8846 = (int)0;
      int _8847 = _684;
      for (int _685 = _8846; _685 < _8847; ++_685)
      {
        {
          if (((*initsol_xx_flag)(_685)))
          {
            {
              _ptr__681[_685] = ((*initsol_xx)(_685));
            }
          }
          {}
        }
      }
      task_putxx_slice(_679,(int)0,_680,_681);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _686,bool _687,bool _688){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _689 = nullptr;
  mosek::fusion::SolutionType _690 = _686;
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _690 = solutionptr;
    }
  }
  {}
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _689 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _689 = sol_bas;
        }
      }
      else
      {
        {
          _689 = sol_itr;
        }
      }
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _689 = sol_itr;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _689 = sol_bas;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _689 = sol_itg;
    }
  }
  {}
  if ((NULL == _689.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_688 || ((_687 && _689->isPrimalAcceptable(acceptable_sol)) || ((!_687) && _689->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _689;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _691 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->pstatus;
          mosek::fusion::ProblemStatus _693 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->probstatus;
          if ((!_687))
          {
            {
              _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->dstatus;
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_692 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("at least Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_689 == sol_itr))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_689 == sol_bas))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_689 == sol_itg))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_693 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_691->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _694,bool _695){
  return __mosek_2fusion_2Model__get_sol_cache(_694,_695,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _696,std::shared_ptr< monty::ndarray< double,1 > > _697){
  _checked_ptr_1<int> _ptr__696(_696 ? _696->raw() : nullptr, _696 ? _696->size(0) : 0);
  _checked_ptr_1<double> _ptr__697(_697 ? _697->raw() : nullptr, _697 ? _697->size(0) : 0);
  ensure_initsol_xx();
  int _8848 = (int)0;
  int _8849 = (int)((_696)->size(0));
  for (int _698 = _8848; _698 < _8849; ++_698)
  {
    {
      ((*initsol_xx)(_ptr__696[_698])) = _ptr__697[_698];
      ((*initsol_xx_flag)(_ptr__696[_698])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _699 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      std::vector<bool> _8850;
      for (int _700 = (int)0, _8851 = _699; _700 < _8851 ; ++_700)
      {
        _8850.push_back(false);
      }
      auto _8852 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_8850.size()),_8850.begin(),_8850.end()));
      initsol_xx_flag = _8852;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _699))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _701 = initsol_xx;
      _checked_ptr_1<double> _ptr__701(_701 ? _701->raw() : nullptr,_701 ? _701->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _702 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_699)));
      ::mosek::fusion::Utils::Tools::arraycopy(_701,(int)0,initsol_xx,(int)0,_699);
      int _8853 = (int)0;
      int _8854 = _699;
      for (int _703 = _8853; _703 < _8854; ++_703)
      {
        {
          ((*initsol_xx_flag)(_703)) = ((*_702)(_703));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _704){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_704,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _705){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_705,true))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _706){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_706,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _707){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_707,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _708){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_708,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _709){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_709,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _710){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_710,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _711){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_711,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _712){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_712,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _713){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_713,false))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _714){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_714,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _715) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_715); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _715){
  solutionptr = _715;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_716); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716){
  acceptable_sol = _716;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _717) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_717); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _717){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _718 = nullptr;
  if ((_717 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _718 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _718 = sol_bas;
        }
      }
      else
      {
        {
          _718 = sol_itr;
        }
      }
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _718 = sol_itr;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _718 = sol_bas;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _718 = sol_itg;
    }
  }
  {}
  if ((NULL == _718.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_718)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _719) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_719); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _719){
  return getSolutionStatus(_719,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _720) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_720); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _720){
  return getSolutionStatus(_720,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _721,bool _722){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _724 = __mosek_2fusion_2Model__get_sol_cache(_721,_722,true);
      if (_722)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _723)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _725,monty::rc_ptr< ::mosek::fusion::Expression > _726){
  _checked_ptr_1<int> _ptr__725(_725 ? _725->raw() : nullptr, _725 ? _725->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_726)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _727 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _728 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _729 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _730 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _731 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _732 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _733 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _734 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _735 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _736 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _737 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _738 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _739 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _740 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__740(_740 ? _740->raw() : nullptr,_740 ? _740->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _741 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _742 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__742(_742 ? _742->raw() : nullptr,_742 ? _742->size(0) : 0);
  int _743 = (int)0;
  int _8855 = (int)0;
  int _8856 = _729;
  for (int _744 = _8855; _744 < _8856; ++_744)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__725[_744])) > (int)0))
      {
        {
          ++ _743;
        }
      }
      {}
    }
  }
  int _745 = _729;
  int _746 = safe_add( _730,_743 );
  std::shared_ptr< monty::ndarray< long long,1 > > _747 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _729,(int)1 ))));
  _checked_ptr_1<long long> _ptr__747(_747 ? _747->raw() : nullptr,_747 ? _747->size(0) : 0);
  int _8857 = (int)0;
  int _8858 = _729;
  for (int _748 = _8857; _748 < _8858; ++_748)
  {
    {
      int _8859 = _ptr__740[safe_add( _733,_748 )];
      int _8860 = _ptr__740[safe_add( safe_add( _733,_748 ),(int)1 )];
      for (int _749 = _8859; _749 < _8860; ++_749)
      {
        {
          if ((_ptr__741[safe_add( _735,_749 )] >= (int)0))
          {
            {
              ++ _ptr__747[safe_add( _748,(int)1 )];
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_748])) > (int)0))
      {
        {
          ++ _ptr__747[safe_add( _748,(int)1 )];
        }
      }
      {}
    }
  }
  int _8861 = (int)0;
  int _8862 = _729;
  for (int _750 = _8861; _750 < _8862; ++_750)
  {
    {
      _ptr__747[safe_add( _750,(int)1 )] += _ptr__747[_750];
    }
  }
  long long _751 = _ptr__747[_729];
  std::shared_ptr< monty::ndarray< int,1 > > _752 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_751)));
  _checked_ptr_1<int> _ptr__752(_752 ? _752->raw() : nullptr,_752 ? _752->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _753 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_751)));
  _checked_ptr_1<double> _ptr__753(_753 ? _753->raw() : nullptr,_753 ? _753->size(0) : 0);
  int _754 = (int)0;
  int _8863 = (int)0;
  int _8864 = _729;
  for (int _755 = _8863; _755 < _8864; ++_755)
  {
    {
      int _8865 = _ptr__740[safe_add( _733,_755 )];
      int _8866 = _ptr__740[safe_add( safe_add( _733,_755 ),(int)1 )];
      for (int _756 = _8865; _756 < _8866; ++_756)
      {
        {
          if ((_ptr__741[safe_add( _735,_756 )] >= (int)0))
          {
            {
              _ptr__752[_754] = (int)_ptr__741[safe_add( _735,_756 )];
              _ptr__753[_754] = _ptr__742[safe_add( _736,_756 )];
              ++ _754;
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_755])) > (int)0))
      {
        {
          _ptr__752[_754] = (int)(((*natconmap_slackidx)(_ptr__725[_755])) - (int)1);
          _ptr__753[_754] = (-1.0);
          ++ _754;
        }
      }
      {}
    }
  }
  task_putarowlist(_725,_747,_752,_753);
  if ((_732 == (int)0))
  {
    {
      int _8867 = (int)0;
      int _8868 = _729;
      for (int _757 = _8867; _757 < _8868; ++_757)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_757])) - ((*natconmap_coderowptrb)(_ptr__725[_757])));
          ((*natconmap_coderowptre)(_ptr__725[_757])) = ((*natconmap_coderowptrb)(_ptr__725[_757]));
        }
      }
    }
  }
  else
  {
    {
      bool _758 = true;
      int _759 = (int)0;
      int _760 = (int)0;
      int _8869 = (int)0;
      int _8870 = _729;
      for (int _761 = _8869; _761 < _8870; ++_761)
      {
        {
          int _8871 = _ptr__740[safe_add( _733,_761 )];
          int _8872 = _ptr__740[safe_add( safe_add( _733,_761 ),(int)1 )];
          for (int _762 = _8871; _762 < _8872; ++_762)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _760;
                  _759 += (_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]);
                }
              }
            }
          }
        }
      }
      int _763 = natconmap_codenztop;
      int _764 = natconmap_codeatomtop;
      natconmap_codealloc(_760,_759);
      int _765 = _764;
      int _766 = _763;
      int _8873 = (int)0;
      int _8874 = _729;
      for (int _767 = _8873; _767 < _8874; ++_767)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_767])) - ((*natconmap_coderowptrb)(_ptr__725[_767])));
          ((*natconmap_coderowptrb)(_ptr__725[_767])) = _766;
          int _8875 = _ptr__740[safe_add( _733,_767 )];
          int _8876 = _ptr__740[safe_add( safe_add( _733,_767 ),(int)1 )];
          for (int _768 = _8875; _768 < _8876; ++_768)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )] - _ptr__740[safe_add( _738,_768 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8877 = _ptr__740[safe_add( _738,_768 )];
                  int _8878 = _ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )];
                  for (int _769 = _8877; _769 < _8878; ++_769)
                  {
                    {
                      ((*natconmap_code)(_765)) = _ptr__740[safe_add( _737,_769 )];
                      ((*natconmap_cconst)(_765)) = _ptr__742[safe_add( _739,_769 )];
                      ++ _765;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _766,(int)1 ))) = _765;
                  ((*natconmap_codenidx)(_766)) = _ptr__741[safe_add( _735,_768 )];
                  _758 = (_ptr__741[safe_add( _735,_768 )] >= (int)0);
                  ++ _766;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__725[_767])) = _766;
        }
      }
      natconmap_numparameterized += _760;
      if ((!_758))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _770,monty::rc_ptr< ::mosek::fusion::Expression > _771,std::shared_ptr< monty::ndarray< int,1 > > _772){
  _checked_ptr_1<int> _ptr__770(_770 ? _770->raw() : nullptr, _770 ? _770->size(0) : 0);
  _checked_ptr_1<int> _ptr__772(_772 ? _772->raw() : nullptr, _772 ? _772->size(0) : 0);
  int _8879 = (int)0;
  int _8880 = (int)((_770)->size(0));
  for (int _773 = _8879; _773 < _8880; ++_773)
  {
    {
      if ((((*natconmap_coderowptrb)(_773)) < ((*natconmap_coderowptre)(_773))))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      {}
    }
  }
  int _774 = safe_mul( (int)((_770)->size(0)),(int)((_772)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _775 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_774)));
  _checked_ptr_1<double> _ptr__775(_775 ? _775->raw() : nullptr,_775 ? _775->size(0) : 0);
  std::vector<int> _8881;
  for (int _777 = (int)0, _8882 = (int)((_770)->size(0)); _777 < _8882 ; ++_777)
  {
    for (int _778 = (int)0, _8883 = (int)((_772)->size(0)); _778 < _8883 ; ++_778)
    {
      _8881.push_back(_ptr__770[_777]);
    }
  }
  auto _8884 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8881.size()),_8881.begin(),_8881.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _776 = _8884;
  _checked_ptr_1<int> _ptr__776(_776 ? _776->raw() : nullptr,_776 ? _776->size(0) : 0);
  std::vector<int> _8885;
  for (int _780 = (int)0, _8886 = (int)((_770)->size(0)); _780 < _8886 ; ++_780)
  {
    for (int _781 = (int)0, _8887 = (int)((_772)->size(0)); _781 < _8887 ; ++_781)
    {
      _8885.push_back(_ptr__772[_781]);
    }
  }
  auto _8888 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8885.size()),_8885.begin(),_8885.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _779 = _8888;
  _checked_ptr_1<int> _ptr__779(_779 ? _779->raw() : nullptr,_779 ? _779->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_771)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _782 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _783 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _784 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _785 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _786 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _787 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _788 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _789 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _790 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _791 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _792 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _793 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _794 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _795 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__795(_795 ? _795->raw() : nullptr,_795 ? _795->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _796 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__796(_796 ? _796->raw() : nullptr,_796 ? _796->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _797 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__797(_797 ? _797->raw() : nullptr,_797 ? _797->size(0) : 0);
  int _798 = (int)0;
  int _8889 = (int)0;
  int _8890 = _783;
  for (int _799 = _8889; _799 < _8890; ++_799)
  {
    {
      int _800 = _ptr__795[safe_add( _788,_799 )];
      int _801 = _ptr__795[safe_add( safe_add( _788,_799 ),(int)1 )];
      int _802 = _800;
      int _803 = (int)0;
      while ( ((_803 < (int)((_772)->size(0))) && (_802 < _801)) )
      {
        {
          if ((_ptr__772[_803] < _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _803;
            }
          }
          else if((_ptr__772[_803] > _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _802;
            }
          }
          else
          {
            {
              _ptr__775[safe_add( _798,_803 )] = _ptr__797[safe_add( _791,_802 )];
              ++ _803;
              ++ _802;
            }
          }
        }
      }
      _798 += (int)((_772)->size(0));
    }
  }
  task_putaijlist(_776,_779,_775,(long long)(_774));
  if ((_786 == (int)0))
  {
    {
      int _8891 = (int)0;
      int _8892 = _783;
      for (int _804 = _8891; _804 < _8892; ++_804)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_804])) - ((*natconmap_coderowptrb)(_ptr__770[_804])));
          ((*natconmap_coderowptre)(_ptr__770[_804])) = ((*natconmap_coderowptrb)(_ptr__770[_804]));
        }
      }
    }
  }
  else
  {
    {
      bool _805 = true;
      int _806 = (int)0;
      int _807 = (int)0;
      int _8893 = (int)0;
      int _8894 = _783;
      for (int _808 = _8893; _808 < _8894; ++_808)
      {
        {
          int _8895 = _ptr__795[safe_add( _788,_808 )];
          int _8896 = _ptr__795[safe_add( safe_add( _788,_808 ),(int)1 )];
          for (int _809 = _8895; _809 < _8896; ++_809)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _806;
                  _807 += (_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]);
                }
              }
            }
          }
        }
      }
      int _810 = natconmap_codenztop;
      int _811 = natconmap_codeatomtop;
      natconmap_codealloc(_806,_807);
      int _812 = _811;
      int _813 = _810;
      int _8897 = (int)0;
      int _8898 = _783;
      for (int _814 = _8897; _814 < _8898; ++_814)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_814])) - ((*natconmap_coderowptrb)(_ptr__770[_814])));
          ((*natconmap_coderowptrb)(_ptr__770[_814])) = _813;
          int _8899 = _ptr__795[safe_add( _788,_814 )];
          int _8900 = _ptr__795[safe_add( safe_add( _788,_814 ),(int)1 )];
          for (int _815 = _8899; _815 < _8900; ++_815)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )] - _ptr__795[safe_add( _793,_815 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8901 = _ptr__795[safe_add( _793,_815 )];
                  int _8902 = _ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )];
                  for (int _816 = _8901; _816 < _8902; ++_816)
                  {
                    {
                      ((*natconmap_code)(_812)) = _ptr__795[safe_add( _792,_816 )];
                      ((*natconmap_cconst)(_812)) = _ptr__797[safe_add( _794,_816 )];
                      ++ _812;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _813,(int)1 ))) = _812;
                  ((*natconmap_codenidx)(_813)) = _ptr__796[safe_add( _790,_815 )];
                  _805 = (_ptr__796[safe_add( _790,_815 )] >= (int)0);
                  ++ _813;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__770[_814])) = _813;
        }
      }
      natconmap_numparameterized += _806;
      if ((!_805))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_817,_818); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818){
  if ((_817->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  int _819 = _818->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _820 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
  _checked_ptr_1<long long> _ptr__820(_820 ? _820->raw() : nullptr,_820 ? _820->size(0) : 0);
  if ((_819 < _818->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _821 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
      _checked_ptr_1<long long> _ptr__821(_821 ? _821->raw() : nullptr,_821 ? _821->size(0) : 0);
      _818->inst((int)0,_821,(int)0,_820);
    }
  }
  else
  {
    {
      _818->inst((int)0,_820);
    }
  }
  int _8903 = (int)0;
  int _8904 = _819;
  for (int _822 = _8903; _822 < _8904; ++_822)
  {
    {
      if ((_ptr__820[_822] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _823 = true;
  int _8905 = (int)0;
  int _8906 = (_819 - (int)1);
  for (int _824 = _8905; _824 < _8906; ++_824)
  {
    {
      _823 = (_823 && (_ptr__820[_824] < _ptr__820[(_824 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _825 = nullptr;
  _checked_ptr_1<int> _ptr__825(_825 ? _825->raw() : nullptr,_825 ? _825->size(0) : 0);
  if (_823)
  {
    {
      std::vector<int> _8907;
      for (int _826 = (int)0, _8908 = _819; _826 < _8908 ; ++_826)
      {
        _8907.push_back((int)_ptr__820[_826]);
      }
      auto _8909 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8907.size()),_8907.begin(),_8907.end()));
      _825 = _8909;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _8910;
      for (int _828 = (-(int)1), _8911 = _819; _828 < _8911 ; ++_828)
      {
        _8910.push_back(_828);
      }
      auto _8912 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8910.size()),_8910.begin(),_8910.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _827 = _8912;
      _checked_ptr_1<long long> _ptr__827(_827 ? _827->raw() : nullptr,_827 ? _827->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_827,_820,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_819));
      std::vector<int> _8913;
      for (int _829 = (int)0, _8914 = _819; _829 < _8914 ; ++_829)
      {
        _8913.push_back((int)_ptr__820[_ptr__827[_829]]);
      }
      auto _8915 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8913.size()),_8913.begin(),_8913.end()));
      _825 = _8915;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  int _830 = (int)((_825)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _831 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_830)));
  _checked_ptr_1<double> _ptr__831(_831 ? _831->raw() : nullptr,_831 ? _831->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _832 = _825;
  _checked_ptr_1<int> _ptr__832(_832 ? _832->raw() : nullptr,_832 ? _832->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_817)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  {
  }
  int _833 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _834 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _835 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _836 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _837 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _838 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _839 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _840 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _841 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _842 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _843 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _844 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _845 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  {
  }
  if ((_837 > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _846 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__846(_846 ? _846->raw() : nullptr,_846 ? _846->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _847 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__847(_847 ? _847->raw() : nullptr,_847 ? _847->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _848 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__848(_848 ? _848->raw() : nullptr,_848 ? _848->size(0) : 0);
  int _849 = (int)0;
  int _8916 = (int)0;
  int _8917 = _834;
  for (int _850 = _8916; _850 < _8917; ++_850)
  {
    {
      int _851 = _ptr__846[safe_add( _839,_850 )];
      int _852 = _ptr__846[safe_add( safe_add( _839,_850 ),(int)1 )];
      int _853 = _851;
      int _854 = (int)0;
      while ( ((_854 < (int)((_825)->size(0))) && (_853 < _852)) )
      {
        {
          if ((_ptr__825[_854] < _ptr__847[safe_add( _841,_853 )]))
          {
            {
              ++ _854;
            }
          }
          else if((_ptr__825[_854] > _ptr__847[safe_add( _841,_853 )]))
          {
            {
              ++ _853;
            }
          }
          else
          {
            {
              _ptr__831[safe_add( _849,_854 )] = _ptr__848[safe_add( _842,_853 )];
              ++ _854;
              ++ _853;
            }
          }
        }
      }
      _849 += (int)((_825)->size(0));
    }
  }
  task_putclist(_832,_831);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_unchecked(const std::string & _855,std::shared_ptr< monty::ndarray< int,1 > > _856,std::shared_ptr< monty::ndarray< long long,1 > > _857){
  _checked_ptr_1<int> _ptr__856(_856 ? _856->raw() : nullptr, _856 ? _856->size(0) : 0);
  _checked_ptr_1<long long> _ptr__857(_857 ? _857->raw() : nullptr, _857 ? _857->size(0) : 0);
  if ((((int)((_855).size()) > (int)0) && par_map->hasItem(_855)))
  {
    {
      throw ::mosek::fusion::NameError(std::string ("Duplicate parameter name"));
    }
  }
  {}
  long long _858 = ::mosek::fusion::p_Set::size(_856);
  int _8918;
  bool _8919 = (NULL != _857.get());
  if (_8919)
  {
    _8918 = (int)((_857)->size(0));
  }
  else
  {
    _8918 = (int)_858;
  }
  int _859 = _8918;
  if ((NULL == param_value.get()))
  {
    {
      param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_859)));
    }
  }
  else
  {
    {
      if ((safe_add( param_num,_859 ) > (int)((param_value)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _860 = param_value;
          _checked_ptr_1<double> _ptr__860(_860 ? _860->raw() : nullptr,_860 ? _860->size(0) : 0);
          int _8920;
          bool _8921 = (safe_mul( (int)2,(int)((_860)->size(0)) ) > safe_add( (int)((_860)->size(0)),_859 ));
          if (_8921)
          {
            _8920 = safe_mul( (int)2,(int)((_860)->size(0)) );
          }
          else
          {
            _8920 = safe_add( (int)((_860)->size(0)),_859 );
          }
          int _861 = _8920;
          param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_861)));
          if ((param_num > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_860,(int)0,param_value,(int)0,param_num);
            }
          }
          {}
        }
      }
      {}
    }
  }
  std::vector<int> _8922;
  for (int _863 = (int)0, _8923 = (int)_859; _863 < _8923 ; ++_863)
  {
    _8922.push_back(safe_add( param_num,_863 ));
  }
  auto _8924 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8922.size()),_8922.begin(),_8922.end()));
  monty::rc_ptr< ::mosek::fusion::ParameterImpl > _862 = ::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::Model::t(_pubthis),_856,_857,_8924);
  param_num += _859;
  if (((int)((_855).size()) > (int)0))
  {
    {
      if (((NULL == parameters.get()) || (numparameter == (int)((parameters)->size(0)))))
      {
        {
          std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _864 = parameters;
          std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8925;
          for (int _865 = (int)0, _8926 = safe_add( safe_mul( numparameter,(int)2 ),(int)64 ); _865 < _8926 ; ++_865)
          {
            _8925.push_back(nullptr);
          }
          auto _8927 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8925.size()),_8925.begin(),_8925.end()));
          parameters = _8927;
          int _8928 = (int)0;
          int _8929 = numparameter;
          for (int _866 = _8928; _866 < _8929; ++_866)
          {
            {
              ((*parameters)(_866)) = ((*_864)(_866));
            }
          }
        }
      }
      {}
      ((*parameters)(numparameter)) = (_862).as<::mosek::fusion::Parameter>();
      par_map->setItem(_855,numparameter);
      numparameter += (int)1;
    }
  }
  {}
  return (_862).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _867,std::shared_ptr< monty::ndarray< int,1 > > _868,std::shared_ptr< monty::ndarray< long long,1 > > _869){
  _checked_ptr_1<int> _ptr__868(_868 ? _868->raw() : nullptr, _868 ? _868->size(0) : 0);
  _checked_ptr_1<long long> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  bool _870 = true;
  int _871 = (int)((_868)->size(0));
  if (((NULL != _869.get()) && ((int)((_869)->size(0)) > (int)0)))
  {
    {
      bool _872 = (_ptr__869[((int)((_869)->size(0)) - (int)1)] < ::mosek::fusion::p_Set::size(_868));
      int _8930 = (int)1;
      int _8931 = (int)((_869)->size(0));
      for (int _873 = _8930; _873 < _8931; ++_873)
      {
        {
          _872 = (_872 && (_ptr__869[(_873 - (int)1)] < _ptr__869[_873]));
        }
      }
      if ((!_872))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Unordered sparsity pattern"));
        }
      }
      {}
    }
  }
  {}
  return __mosek_2fusion_2Model__parameter_unchecked(_867,_868,_869);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _874,std::shared_ptr< monty::ndarray< int,1 > > _875,std::shared_ptr< monty::ndarray< int,2 > > _876){
  _checked_ptr_1<int> _ptr__875(_875 ? _875->raw() : nullptr, _875 ? _875->size(0) : 0);
  int _877 = (int)((_876)->size(0));
  int _878 = (int)((_876)->size(1));
  if (((int)((_875)->size(0)) != _878))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid sparsity"));
    }
  }
  {}
  if ((NULL == _876.get()))
  {
    {
      return __mosek_2fusion_2Model__parameter_unchecked(_874,_875,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _879 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_877)));
      _checked_ptr_1<long long> _ptr__879(_879 ? _879->raw() : nullptr,_879 ? _879->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_878)));
      _checked_ptr_1<long long> _ptr__880(_880 ? _880->raw() : nullptr,_880 ? _880->size(0) : 0);
      _ptr__880[(_878 - (int)1)] = (int)1;
      int _8932 = (int)1;
      int _8933 = _878;
      for (int _881 = _8932; _881 < _8933; ++_881)
      {
        {
          _ptr__880[((_878 - (int)1) - _881)] = safe_mul( _ptr__880[(_878 - _881)],_ptr__875[(_878 - _881)] );
        }
      }
      int _8934 = (int)0;
      int _8935 = _877;
      for (int _882 = _8934; _882 < _8935; ++_882)
      {
        {
          _ptr__879[_882] = (int)0;
          int _8936 = (int)0;
          int _8937 = _878;
          for (int _883 = _8936; _883 < _8937; ++_883)
          {
            {
              _ptr__879[_882] += safe_mul( ((*_876)(_882,_883)),_ptr__880[_883] );
            }
          }
        }
      }
      return __mosek_2fusion_2Model__parameter_(_874,_875,_879);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_884); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _884) { return __mosek_2fusion_2Model__parameter(_884); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _884){
  std::shared_ptr< monty::ndarray< long long,1 > > _885 = nullptr;
  _checked_ptr_1<long long> _ptr__885(_885 ? _885->raw() : nullptr,_885 ? _885->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_884,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_885);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _886,int _887,int _888,int _889) { return __mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889){
  std::shared_ptr< monty::ndarray< long long,1 > > _890 = nullptr;
  _checked_ptr_1<long long> _ptr__890(_890 ? _890->raw() : nullptr,_890 ? _890->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_886,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_887),(int)(_888),(int)(_889)}),_890);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_891,_892,_893); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _891,int _892,int _893) { return __mosek_2fusion_2Model__parameter(_891,_892,_893); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893){
  std::shared_ptr< monty::ndarray< long long,1 > > _894 = nullptr;
  _checked_ptr_1<long long> _ptr__894(_894 ? _894->raw() : nullptr,_894 ? _894->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_891,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_892),(int)(_893)}),_894);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _895,int _896) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_895,_896); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _895,int _896) { return __mosek_2fusion_2Model__parameter(_895,_896); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _895,int _896){
  std::shared_ptr< monty::ndarray< long long,1 > > _897 = nullptr;
  _checked_ptr_1<long long> _ptr__897(_897 ? _897->raw() : nullptr,_897 ? _897->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_895,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_896)}),_897);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_898,_899); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return __mosek_2fusion_2Model__parameter(_898,_899); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899){
  _checked_ptr_1<int> _ptr__899(_899 ? _899->raw() : nullptr, _899 ? _899->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _900 = nullptr;
  _checked_ptr_1<long long> _ptr__900(_900 ? _900->raw() : nullptr,_900 ? _900->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_898,_899,_900);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_901,_902,_903); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return __mosek_2fusion_2Model__parameter(_901,_902,_903); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903){
  _checked_ptr_1<int> _ptr__902(_902 ? _902->raw() : nullptr, _902 ? _902->size(0) : 0);
  _checked_ptr_1<long long> _ptr__903(_903 ? _903->raw() : nullptr, _903 ? _903->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_901,_902,_903);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_904,_905,_906); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return __mosek_2fusion_2Model__parameter(_904,_905,_906); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906){
  _checked_ptr_1<int> _ptr__905(_905 ? _905->raw() : nullptr, _905 ? _905->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_904,_905,_906);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter() { return __mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(){
  std::shared_ptr< monty::ndarray< long long,1 > > _907 = nullptr;
  _checked_ptr_1<long long> _ptr__907(_907 ? _907->raw() : nullptr,_907 ? _907->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_907);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _908,int _909,int _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_908,_909,_910); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _908,int _909,int _910) { return __mosek_2fusion_2Model__parameter(_908,_909,_910); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _908,int _909,int _910){
  std::shared_ptr< monty::ndarray< long long,1 > > _911 = nullptr;
  _checked_ptr_1<long long> _ptr__911(_911 ? _911->raw() : nullptr,_911 ? _911->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_908),(int)(_909),(int)(_910)}),_911);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _912,int _913) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_912,_913); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _912,int _913) { return __mosek_2fusion_2Model__parameter(_912,_913); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _912,int _913){
  std::shared_ptr< monty::ndarray< long long,1 > > _914 = nullptr;
  _checked_ptr_1<long long> _ptr__914(_914 ? _914->raw() : nullptr,_914 ? _914->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_912),(int)(_913)}),_914);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _915) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_915); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _915) { return __mosek_2fusion_2Model__parameter(_915); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _915){
  std::shared_ptr< monty::ndarray< long long,1 > > _916 = nullptr;
  _checked_ptr_1<long long> _ptr__916(_916 ? _916->raw() : nullptr,_916 ? _916->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_915)}),_916);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_917); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return __mosek_2fusion_2Model__parameter(_917); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917){
  _checked_ptr_1<int> _ptr__917(_917 ? _917->raw() : nullptr, _917 ? _917->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _918 = nullptr;
  _checked_ptr_1<long long> _ptr__918(_918 ? _918->raw() : nullptr,_918 ? _918->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_917,_918);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_919,_920); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return __mosek_2fusion_2Model__parameter(_919,_920); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920){
  _checked_ptr_1<int> _ptr__919(_919 ? _919->raw() : nullptr, _919 ? _919->size(0) : 0);
  _checked_ptr_1<long long> _ptr__920(_920 ? _920->raw() : nullptr, _920 ? _920->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_919,_920);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_921,_922); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return __mosek_2fusion_2Model__parameter(_921,_922); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922){
  _checked_ptr_1<int> _ptr__921(_921 ? _921->raw() : nullptr, _921 ? _921->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_921,_922);
}
void mosek::fusion::p_Model::objective_(const std::string & _923,mosek::fusion::ObjectiveSense _924,monty::rc_ptr< ::mosek::fusion::Expression > _925){
  task_putobjectivename(_923);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _926 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _927 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::ExprDense > _928 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_925)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _928->eval(_926,_927,xs);
  _926->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _929 = mosek::fusion::p_WorkStack::_get_impl(_926)->i32;
  _checked_ptr_1<int> _ptr__929(_929 ? _929->raw() : nullptr,_929 ? _929->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _930 = mosek::fusion::p_WorkStack::_get_impl(_926)->i64;
  _checked_ptr_1<long long> _ptr__930(_930 ? _930->raw() : nullptr,_930 ? _930->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _931 = mosek::fusion::p_WorkStack::_get_impl(_926)->f64;
  _checked_ptr_1<double> _ptr__931(_931 ? _931->raw() : nullptr,_931 ? _931->size(0) : 0);
  int _932 = mosek::fusion::p_WorkStack::_get_impl(_926)->nd;
  int _933 = mosek::fusion::p_WorkStack::_get_impl(_926)->nelem;
  int _934 = mosek::fusion::p_WorkStack::_get_impl(_926)->nnz;
  bool _935 = mosek::fusion::p_WorkStack::_get_impl(_926)->hassp;
  int _936 = mosek::fusion::p_WorkStack::_get_impl(_926)->ncodeatom;
  int _937 = mosek::fusion::p_WorkStack::_get_impl(_926)->ptr_base;
  int _938 = mosek::fusion::p_WorkStack::_get_impl(_926)->shape_base;
  int _939 = mosek::fusion::p_WorkStack::_get_impl(_926)->nidxs_base;
  int _940 = mosek::fusion::p_WorkStack::_get_impl(_926)->cof_base;
  int _941 = mosek::fusion::p_WorkStack::_get_impl(_926)->code_base;
  int _942 = mosek::fusion::p_WorkStack::_get_impl(_926)->codeptr_base;
  int _943 = mosek::fusion::p_WorkStack::_get_impl(_926)->cconst_base;
  long long _944 = (long long)1;
  int _8938 = (int)0;
  int _8939 = _932;
  for (int _945 = _8938; _945 < _8939; ++_945)
  {
    {
      _932 *= _ptr__929[safe_add( _938,_945 )];
    }
  }
  if ((_944 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((_933 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _946 = (int)0;
  int _947 = (int)0;
  int _8940 = (int)0;
  int _8941 = _934;
  for (int _948 = _8940; _948 < _8941; ++_948)
  {
    {
      if ((_ptr__930[safe_add( _939,_948 )] < (int)0))
      {
        {
          ++ _947;
        }
      }
      else if((_ptr__930[safe_add( _939,_948 )] >= (int)0))
      {
        {
          ++ _946;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_946)));
  _checked_ptr_1<int> _ptr__949(_949 ? _949->raw() : nullptr,_949 ? _949->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _950 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_946)));
  _checked_ptr_1<double> _ptr__950(_950 ? _950->raw() : nullptr,_950 ? _950->size(0) : 0);
  {
    int _951 = (int)0;
    int _8942 = (int)0;
    int _8943 = _934;
    for (int _952 = _8942; _952 < _8943; ++_952)
    {
      {
        if ((_ptr__930[safe_add( _939,_952 )] >= (int)0))
        {
          {
            _ptr__949[_951] = (int)_ptr__930[safe_add( _939,_952 )];
            _ptr__950[_951] = _ptr__931[safe_add( _940,_952 )];
            ++ _951;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_924 == ::mosek::fusion::ObjectiveSense::Maximize),_949,_950,0.0);
  if ((_947 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__953(_953 ? _953->raw() : nullptr,_953 ? _953->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _954 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__954(_954 ? _954->raw() : nullptr,_954 ? _954->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__955(_955 ? _955->raw() : nullptr,_955 ? _955->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _956 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_947)));
      _checked_ptr_1<double> _ptr__956(_956 ? _956->raw() : nullptr,_956 ? _956->size(0) : 0);
      int _8944 = (int)0;
      int _8945 = _947;
      for (int _957 = _8944; _957 < _8945; ++_957)
      {
        {
          long long _958 = (-safe_add( _ptr__930[safe_add( _939,_957 )],(int)1 ));
          _ptr__953[_957] = ((*natbarvar_idx)(_958));
          _ptr__954[_957] = ((*natbarvar_i)(_958));
          _ptr__955[_957] = ((*natbarvar_j)(_958));
          double _8946;
          bool _8947 = (_ptr__954[_957] == _ptr__955[_957]);
          if (_8947)
          {
            _8946 = _ptr__931[safe_add( _940,_957 )];
          }
          else
          {
            _8946 = (0.5 * _ptr__931[safe_add( _940,_957 )]);
          }
          _ptr__956[_957] = _8946;
        }
      }
      task_putbarc(_953,_954,_955,_956);
    }
  }
  {}
  if ((_936 == (int)0))
  {
    {
      int _8948 = (int)0;
      int _8949 = _933;
      for (int _959 = _8948; _959 < _8949; ++_959)
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
    }
  }
  else
  {
    {
      bool _960 = true;
      int _961 = (int)0;
      int _962 = (int)0;
      int _8950 = _ptr__929[_937];
      int _8951 = _ptr__929[safe_add( _937,(int)1 )];
      for (int _963 = _8950; _963 < _8951; ++_963)
      {
        {
          if ((((_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _962;
              _961 += (_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]);
            }
          }
        }
      }
      if ((_962 > (int)0))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _964 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_962)));
          _checked_ptr_1<long long> _ptr__964(_964 ? _964->raw() : nullptr,_964 ? _964->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _965 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _962,(int)1 ))));
          _checked_ptr_1<int> _ptr__965(_965 ? _965->raw() : nullptr,_965 ? _965->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _966 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_961)));
          _checked_ptr_1<int> _ptr__966(_966 ? _966->raw() : nullptr,_966 ? _966->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _967 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_961)));
          _checked_ptr_1<double> _ptr__967(_967 ? _967->raw() : nullptr,_967 ? _967->size(0) : 0);
          {
            int _968 = (int)0;
            int _969 = (int)0;
            int _8952 = _ptr__929[_937];
            int _8953 = _ptr__929[safe_add( _937,(int)1 )];
            for (int _970 = _8952; _970 < _8953; ++_970)
            {
              {
                if ((((_ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )] - _ptr__929[safe_add( _942,_970 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 2))))
                {
                  {
                  }
                }
                else
                {
                  {
                    int _8954 = _ptr__929[safe_add( _942,_970 )];
                    int _8955 = _ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )];
                    for (int _971 = _8954; _971 < _8955; ++_971)
                    {
                      {
                        _ptr__966[_968] = _ptr__929[safe_add( _941,_971 )];
                        _ptr__967[_968] = _ptr__931[safe_add( _943,_971 )];
                        ++ _968;
                      }
                    }
                    _ptr__965[safe_add( _969,(int)1 )] = _968;
                    _ptr__964[_969] = _ptr__930[safe_add( _939,_970 )];
                    _960 = (_ptr__964[_969] >= (int)0);
                    ++ _969;
                  }
                }
              }
            }
          }
          natconmap_objcodenidx = _964;
          natconmap_objcodeptr = _965;
          natconmap_objcode = _966;
          natconmap_objcconst = _967;
        }
      }
      else
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
      if ((!_960))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: objective(double _972) { mosek::fusion::p_Model::_get_impl(this)->objective(_972); }void mosek::fusion::p_Model::objective(double _972){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_972));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _973,double _974) { mosek::fusion::p_Model::_get_impl(this)->objective(_973,_974); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _973,double _974){
  objective_(std::string (""),_973,::mosek::fusion::p_Expr::constTerm(_974));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976) { mosek::fusion::p_Model::_get_impl(this)->objective(_975,_976); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976){
  objective_(std::string (""),_975,_976);
}
void mosek::fusion::Model :: objective(const std::string & _977,double _978) { mosek::fusion::p_Model::_get_impl(this)->objective(_977,_978); }void mosek::fusion::p_Model::objective(const std::string & _977,double _978){
  objective_(_977,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_978));
}
void mosek::fusion::Model :: objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981) { mosek::fusion::p_Model::_get_impl(this)->objective(_979,_980,_981); }void mosek::fusion::p_Model::objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981){
  objective_(_979,_980,::mosek::fusion::p_Expr::constTerm(_981));
}
void mosek::fusion::Model :: objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984) { mosek::fusion::p_Model::_get_impl(this)->objective(_982,_983,_984); }void mosek::fusion::p_Model::objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984){
  objective_(_982,_983,_984);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_985,_986); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return __mosek_2fusion_2Model__constraint(_985,_986); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_985,_986);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_987,_988,_989); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return __mosek_2fusion_2Model__constraint(_987,_988,_989); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989){
  return __mosek_2fusion_2Model__constraint_(_987,_988,_989);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_990,_991); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return __mosek_2fusion_2Model__constraint(_990,_991); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_990,_991);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_992,_993,_994); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return __mosek_2fusion_2Model__constraint(_992,_993,_994); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994){
  return __mosek_2fusion_2Model__constraint_(_992,_993,_994);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_995,_996); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return __mosek_2fusion_2Model__constraint(_995,_996); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_995,_996);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_997,_998,_999); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return __mosek_2fusion_2Model__constraint(_997,_998,_999); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999){
  return __mosek_2fusion_2Model__constraint_(_997,_998,_999);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1000,_1001); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return __mosek_2fusion_2Model__constraint(_1000,_1001); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1000,_1001);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return __mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004){
  return __mosek_2fusion_2Model__constraint_(_1002,_1003,_1004);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1005,_1006); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return __mosek_2fusion_2Model__constraint(_1005,_1006); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1005,_1006);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return __mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009){
  return __mosek_2fusion_2Model__constraint_(_1007,_1008,_1009);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1010); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return __mosek_2fusion_2Model__variable(_1010); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_1010)->shape,_1010);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1011,_1012,_1013); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return __mosek_2fusion_2Model__variable(_1011,_1012,_1013); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1012),(int)((safe_mul( _1011,safe_add( _1011,(int)1 ) ) / (int)2))}),_1013);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1014,_1015); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return __mosek_2fusion_2Model__variable(_1014,_1015); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1014,safe_add( _1014,(int)1 ) ) / (int)2))}),_1015);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1016,_1017); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return __mosek_2fusion_2Model__variable(_1016,_1017); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017){
  return __mosek_2fusion_2Model__variable_(_1016,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1017);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return __mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021){
  return __mosek_2fusion_2Model__variable_(_1018,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1020),(int)((safe_mul( _1019,safe_add( _1019,(int)1 ) ) / (int)2))}),_1021);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1022,_1023,_1024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return __mosek_2fusion_2Model__variable(_1022,_1023,_1024); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024){
  return __mosek_2fusion_2Model__variable_(_1022,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1023,safe_add( _1023,(int)1 ) ) / (int)2))}),_1024);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1025,_1026,_1027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return __mosek_2fusion_2Model__variable(_1025,_1026,_1027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027){
  _checked_ptr_1<int> _ptr__1026(_1026 ? _1026->raw() : nullptr, _1026 ? _1026->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1025,_1026,_1027);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return __mosek_2fusion_2Model__variable(_1028); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_1028)->shape,_1028)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1029,_1030,_1031); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return __mosek_2fusion_2Model__variable(_1029,_1030,_1031); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1030),(int)(_1029),(int)(_1029)}),_1031)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1032,_1033); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return __mosek_2fusion_2Model__variable(_1032,_1033); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1032),(int)(_1032)}),_1033)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1034,_1035); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return __mosek_2fusion_2Model__variable(_1034,_1035); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035){
  return (__mosek_2fusion_2Model__variable_(_1034,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1035)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return __mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039){
  return (__mosek_2fusion_2Model__variable_(_1036,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1038),(int)(_1037),(int)(_1037)}),_1039)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1040,_1041,_1042); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return __mosek_2fusion_2Model__variable(_1040,_1041,_1042); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042){
  return (__mosek_2fusion_2Model__variable_(_1040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1041),(int)(_1041)}),_1042)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1043,_1044,_1045); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return __mosek_2fusion_2Model__variable(_1043,_1044,_1045); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045){
  _checked_ptr_1<int> _ptr__1044(_1044 ? _1044->raw() : nullptr, _1044 ? _1044->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_1043,_1044,_1045)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1046); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return __mosek_2fusion_2Model__variable(_1046); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1046);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1047); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return __mosek_2fusion_2Model__variable(_1047); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1047);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1048); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return __mosek_2fusion_2Model__variable(_1048); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1048);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1049,_1050); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return __mosek_2fusion_2Model__variable(_1049,_1050); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050){
  _checked_ptr_1<int> _ptr__1049(_1049 ? _1049->raw() : nullptr, _1049 ? _1049->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1049,_1050);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1051,_1052); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return __mosek_2fusion_2Model__variable(_1051,_1052); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052){
  _checked_ptr_1<int> _ptr__1051(_1051 ? _1051->raw() : nullptr, _1051 ? _1051->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_1051,_1052);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1053,_1054); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return __mosek_2fusion_2Model__variable(_1053,_1054); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054){
  _checked_ptr_1<int> _ptr__1053(_1053 ? _1053->raw() : nullptr, _1053 ? _1053->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1053,_1054);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1055); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return __mosek_2fusion_2Model__variable(_1055); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055){
  _checked_ptr_1<int> _ptr__1055(_1055 ? _1055->raw() : nullptr, _1055 ? _1055->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1055,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1056,_1057); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return __mosek_2fusion_2Model__variable(_1056,_1057); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1056)}),_1057);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1058,_1059); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return __mosek_2fusion_2Model__variable(_1058,_1059); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1058)}),_1059);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1060,_1061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return __mosek_2fusion_2Model__variable(_1060,_1061); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1060)}),_1061);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1062) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1062); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1062) { return __mosek_2fusion_2Model__variable(_1062); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1062){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1062)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1063,_1064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return __mosek_2fusion_2Model__variable(_1063,_1064); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064){
  return __mosek_2fusion_2Model__variable_(_1063,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1064);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1065,_1066); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return __mosek_2fusion_2Model__variable(_1065,_1066); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066){
  return __mosek_2fusion_2Model__ranged_variable(_1065,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1066);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1067,_1068); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return __mosek_2fusion_2Model__variable(_1067,_1068); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068){
  return __mosek_2fusion_2Model__variable_(_1067,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1068);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1069,_1070,_1071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return __mosek_2fusion_2Model__variable(_1069,_1070,_1071); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071){
  _checked_ptr_1<int> _ptr__1070(_1070 ? _1070->raw() : nullptr, _1070 ? _1070->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1069,_1070,_1071);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1072,_1073,_1074); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return __mosek_2fusion_2Model__variable(_1072,_1073,_1074); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074){
  _checked_ptr_1<int> _ptr__1073(_1073 ? _1073->raw() : nullptr, _1073 ? _1073->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_1072,_1073,_1074);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1075,_1076,_1077); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return __mosek_2fusion_2Model__variable(_1075,_1076,_1077); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077){
  _checked_ptr_1<int> _ptr__1076(_1076 ? _1076->raw() : nullptr, _1076 ? _1076->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1075,_1076,_1077);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1078,_1079); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return __mosek_2fusion_2Model__variable(_1078,_1079); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079){
  _checked_ptr_1<int> _ptr__1079(_1079 ? _1079->raw() : nullptr, _1079 ? _1079->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1078,_1079,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1080,_1081,_1082); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return __mosek_2fusion_2Model__variable(_1080,_1081,_1082); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082){
  return __mosek_2fusion_2Model__variable_(_1080,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1081)}),_1082);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1083,_1084,_1085); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return __mosek_2fusion_2Model__variable(_1083,_1084,_1085); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085){
  return __mosek_2fusion_2Model__ranged_variable(_1083,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1084)}),_1085);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1086,_1087,_1088); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return __mosek_2fusion_2Model__variable(_1086,_1087,_1088); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088){
  return __mosek_2fusion_2Model__variable_(_1086,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1087)}),_1088);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1089,int _1090) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1089,_1090); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1089,int _1090) { return __mosek_2fusion_2Model__variable(_1089,_1090); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1089,int _1090){
  return __mosek_2fusion_2Model__variable_(_1089,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1090)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1091) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1091); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1091) { return __mosek_2fusion_2Model__variable(_1091); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1091){
  return __mosek_2fusion_2Model__variable_(_1091,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
void mosek::fusion::p_Model::removeConstraintBlock(int _1092){
  int _1093 = natconmap->blocksize(_1092);
  std::shared_ptr< monty::ndarray< int,1 > > _1094 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1093)));
  _checked_ptr_1<int> _ptr__1094(_1094 ? _1094->raw() : nullptr,_1094 ? _1094->size(0) : 0);
  if ((((*natconmap_slackidx)(_ptr__1094[(int)0])) != (int)0))
  {
    {
      int _1095 = ((*natvarmap_idx)(((*natconmap_slackidx)(_ptr__1094[(int)0]))));
      removeVariableBlock((long long)(_1095));
    }
  }
  {}
  natconmap->get(_1092,_1094,(int)0);
  natconmap->free(_1092);
  int _8956 = (int)0;
  int _8957 = _1093;
  for (int _1096 = _8956; _1096 < _8957; ++_1096)
  {
    {
      ((*natconmap_blockid)(_ptr__1094[_1096])) = (-(int)1);
      ((*natconmap_slackidx)(_ptr__1094[_1096])) = (int)0;
      ((*natconmap_idx)(_ptr__1094[_1096])) = (-(int)1);
      if ((((*natconmap_coderowptrb)(_ptr__1094[_1096])) < ((*natconmap_coderowptre)(_ptr__1094[_1096]))))
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__1094[_1096])) - ((*natconmap_coderowptrb)(_ptr__1094[_1096])));
          ((*natconmap_coderowptrb)(_ptr__1094[_1096])) = ((*natconmap_coderowptre)(_ptr__1094[_1096]));
        }
      }
      {}
    }
  }
  task_con_putboundlist_fr(_1094);
  task_cleararowlist(_1094);
}
void mosek::fusion::p_Model::removeVariableBlock(long long _1097){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("Cannot remove variables in parameterized model"));
    }
  }
  {}
  if ((_1097 < (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("PSD variables cannot be removed"));
    }
  }
  else
  {
    {
      int _1098 = (int)_1097;
      int _1099 = natvarmap->blocksize(_1098);
      std::shared_ptr< monty::ndarray< int,1 > > _1100 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1099)));
      _checked_ptr_1<int> _ptr__1100(_1100 ? _1100->raw() : nullptr,_1100 ? _1100->size(0) : 0);
      natvarmap->get(_1098,_1100,(int)0);
      natvarmap->free(_1098);
      if ((((*natvarmap_type)(_1098)) > (int)5))
      {
        {
          int _1101 = (((*natvarmap_type)(_1098)) - (int)6);
          int _1102 = natconemap->blocksize(_1101);
          std::shared_ptr< monty::ndarray< int,1 > > _1103 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1102)));
          _checked_ptr_1<int> _ptr__1103(_1103 ? _1103->raw() : nullptr,_1103 ? _1103->size(0) : 0);
          natconemap->get(_1101,_1103,(int)0);
          natconemap->free(_1101);
          ((*natconemap_dim)(_1101)) = (int)0;
          task_clear_cones(_1103);
        }
      }
      {}
      ((*natvarmap_type)(_1098)) = (int)0;
      int _8958 = (int)0;
      int _8959 = _1099;
      for (int _1104 = _8958; _1104 < _8959; ++_1104)
      {
        {
          ((*natvarmap_blockid)(_1104)) = (-(int)1);
          ((*natvarmap_idx)(_1104)) = (-(int)1);
        }
      }
      task_var_putboundlist_fr(_1100);
      task_clearacollist(_1100);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _1105,std::shared_ptr< monty::ndarray< int,1 > > _1106,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1107){
  _checked_ptr_1<int> _ptr__1106(_1106 ? _1106->raw() : nullptr, _1106 ? _1106->size(0) : 0);
  if ((((int)((_1105).size()) > (int)0) && hasVariable(_1105)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1105)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _8960;
  bool _8961 = (NULL != _1106.get());
  if (_8961)
  {
    _8960 = _1106;
  }
  else
  {
    _8960 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1108 = _8960;
  _checked_ptr_1<int> _ptr__1108(_1108 ? _1108->raw() : nullptr,_1108 ? _1108->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape,_1108))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1108.get()))
  {
    {
      _1108 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1108.update(_1108 ? _1108->raw() : nullptr, _1108 ? _1108->size(0) : 0);
    }
  }
  {}
  int _1109 = (int)((_1108)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1110 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1109)));
  _checked_ptr_1<int> _ptr__1110(_1110 ? _1110->raw() : nullptr,_1110 ? _1110->size(0) : 0);
  if ((_1109 > (int)0))
  {
    {
      _ptr__1110[(_1109 - (int)1)] = (int)1;
      int _8962 = (int)1;
      int _8963 = _1109;
      for (int _1111 = _8962; _1111 < _8963; ++_1111)
      {
        {
          _ptr__1110[((_1109 - _1111) - (int)1)] = safe_mul( _ptr__1110[(_1109 - _1111)],_ptr__1108[(_1109 - _1111)] );
        }
      }
    }
  }
  {}
  int _1112 = (int)1;
  int _8964 = (int)0;
  int _8965 = (int)((_1108)->size(0));
  for (int _1113 = _8964; _1113 < _8965; ++_1113)
  {
    {
      _1112 *= _ptr__1108[_1113];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1114 = nullptr;
  _checked_ptr_1<long long> _ptr__1114(_1114 ? _1114->raw() : nullptr,_1114 ? _1114->size(0) : 0);
  if ((NULL != _1114.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1)) != _1109))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _1114 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(0)))));
      _ptr__1114.update(_1114 ? _1114->raw() : nullptr, _1114 ? _1114->size(0) : 0);
      int _8966 = (int)0;
      int _8967 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(0));
      for (int _1115 = _8966; _1115 < _8967; ++_1115)
      {
        {
          int _8968 = (int)0;
          int _8969 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1));
          for (int _1116 = _8968; _1116 < _8969; ++_1116)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1116)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1116)) >= _ptr__1108[_1116])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _1117 = (int)0;
          int _8970 = (int)0;
          int _8971 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1));
          for (int _1118 = _8970; _1118 < _8971; ++_1118)
          {
            {
              _1117 += safe_mul( _ptr__1110[_1118],((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1118)) );
            }
          }
          _ptr__1114[_1115] = _1117;
        }
      }
    }
  }
  {}
  int _8972;
  bool _8973 = (NULL != _1114.get());
  if (_8973)
  {
    _8972 = (int)((_1114)->size(0));
  }
  else
  {
    _8972 = _1112;
  }
  int _1119 = _8972;
  std::shared_ptr< monty::ndarray< double,1 > > _1120;
  _checked_ptr_1<double> _ptr__1120(_1120 ? _1120->raw() : nullptr,_1120 ? _1120->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1121;
  _checked_ptr_1<double> _ptr__1121(_1121 ? _1121->raw() : nullptr,_1121 ? _1121->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1107)->scalable)
  {
    {
      std::vector<double> _8974;
      for (int _1122 = (int)0, _8975 = _1119; _1122 < _8975 ; ++_1122)
      {
        _8974.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->lb)((int)0)));
      }
      auto _8976 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8974.size()),_8974.begin(),_8974.end()));
      _1120 = _8976;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
      std::vector<double> _8977;
      for (int _1123 = (int)0, _8978 = _1119; _1123 < _8978 ; ++_1123)
      {
        _8977.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->ub)((int)0)));
      }
      auto _8979 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8977.size()),_8977.begin(),_8977.end()));
      _1121 = _8979;
      _ptr__1121.update(_1121 ? _1121->raw() : nullptr, _1121 ? _1121->size(0) : 0);
    }
  }
  else
  {
    {
      _1120 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->lb;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
      _1121 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->ub;
      _ptr__1121.update(_1121 ? _1121->raw() : nullptr, _1121 ? _1121->size(0) : 0);
    }
  }
  int _1124 = natvarmap_alloc(_1119);
  std::shared_ptr< monty::ndarray< int,1 > > _1125 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1124))));
  _checked_ptr_1<int> _ptr__1125(_1125 ? _1125->raw() : nullptr,_1125 ? _1125->size(0) : 0);
  natvarmap->get(_1124,_1125,(int)0);
  int _8980 = (int)0;
  int _8981 = _1119;
  for (int _1126 = _8980; _1126 < _8981; ++_1126)
  {
    {
      ((*natvarmap_idx)(_ptr__1125[_1126])) = _1124;
    }
  }
  task_var_putboundlist_ra(_1125,_1120,_1121);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _1127 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_1105,(long long)(_1124),_1108,_1114,_1125);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1107)->cardinal_flag)
  {
    {
      task_var_putintlist(_1125);
    }
  }
  {}
  ((*vars)(_1124)) = (_1127).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1105).size()) > (int)0))
  {
    {
      var_map->setItem(_1105,_1124);
    }
  }
  {}
  return _1127;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1128,std::shared_ptr< monty::ndarray< int,1 > > _1129,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1130){
  _checked_ptr_1<int> _ptr__1129(_1129 ? _1129->raw() : nullptr, _1129 ? _1129->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _8982;
  bool _8983 = (NULL != _1129.get());
  if (_8983)
  {
    _8982 = _1129;
  }
  else
  {
    _8982 = mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1131 = _8982;
  _checked_ptr_1<int> _ptr__1131(_1131 ? _1131->raw() : nullptr,_1131 ? _1131->size(0) : 0);
  if ((((int)((_1128).size()) > (int)0) && hasVariable(_1128)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1128)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _1131.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape.get()) && (!::mosek::fusion::p_Set::match(_1131,mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_1130->getAxis() >= (int)((_1131)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _8984;
  bool _8985 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape.get());
  if (_8985)
  {
    _8984 = _1130->getAxis();
  }
  else
  {
    _8984 = ((int)((_1131)->size(0)) - (int)1);
  }
  int _1132 = _8984;
  int _1133 = _ptr__1131[_1132];
  int _1134 = (int)((_1131)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1135 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1134)));
  _checked_ptr_1<int> _ptr__1135(_1135 ? _1135->raw() : nullptr,_1135 ? _1135->size(0) : 0);
  _ptr__1135[(_1134 - (int)1)] = (int)1;
  int _8986 = (int)1;
  int _8987 = _1134;
  for (int _1136 = _8986; _1136 < _8987; ++_1136)
  {
    {
      _ptr__1135[((_1134 - _1136) - (int)1)] = safe_mul( _ptr__1135[(_1134 - _1136)],_ptr__1131[(_1134 - _1136)] );
    }
  }
  int _1137 = _ptr__1131[(int)0];
  int _8988 = (int)1;
  int _8989 = (int)((_1131)->size(0));
  for (int _1138 = _8988; _1138 < _8989; ++_1138)
  {
    {
      _1137 *= _ptr__1131[_1138];
    }
  }
  int _1139 = (int)1;
  int _8990 = (int)0;
  int _8991 = _1132;
  for (int _1140 = _8990; _1140 < _8991; ++_1140)
  {
    {
      _1139 *= _ptr__1131[_1140];
    }
  }
  int _1141 = (int)1;
  int _8992 = safe_add( _1132,(int)1 );
  int _8993 = _1134;
  for (int _1142 = _8992; _1142 < _8993; ++_1142)
  {
    {
      _1141 *= _ptr__1131[_1142];
    }
  }
  int _1143 = safe_mul( _1139,_1141 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InQCone) && (_1133 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1133 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1133 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1133 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1133 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1133 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _1144 = natvarmap_alloc(_1137);
  int _1145 = natconemap_alloc(_1143);
  ((*natvarmap_type)(_1144)) = safe_add( _1145,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _1146 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1144))));
  _checked_ptr_1<int> _ptr__1146(_1146 ? _1146->raw() : nullptr,_1146 ? _1146->size(0) : 0);
  natvarmap->get(_1144,_1146,(int)0);
  int _8994 = (int)0;
  int _8995 = _1137;
  for (int _1147 = _8994; _1147 < _8995; ++_1147)
  {
    {
      ((*natvarmap_idx)(_ptr__1146[_1147])) = _1144;
    }
  }
  task_var_putboundlist_fr(_1146);
  if (mosek::fusion::p_ConeDomain::_get_impl(_1130)->int_flag)
  {
    {
      task_var_putintlist(_1146);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1148 = _1146;
  _checked_ptr_1<int> _ptr__1148(_1148 ? _1148->raw() : nullptr,_1148 ? _1148->size(0) : 0);
  if ((_1132 < ((int)((_1131)->size(0)) - (int)1)))
  {
    {
      _1148 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1146)->size(0)))));
      _ptr__1148.update(_1148 ? _1148->raw() : nullptr, _1148 ? _1148->size(0) : 0);
      int _1149 = (int)0;
      int _8996 = (int)0;
      int _8997 = _1139;
      for (int _1150 = _8996; _1150 < _8997; ++_1150)
      {
        {
          int _8998 = (int)0;
          int _8999 = _1141;
          for (int _1151 = _8998; _1151 < _8999; ++_1151)
          {
            {
              int _9000 = (int)0;
              int _9001 = _1133;
              for (int _1152 = _9000; _1152 < _9001; ++_1152)
              {
                {
                  _ptr__1148[_1149] = _ptr__1146[safe_add( safe_mul( safe_add( safe_mul( _1150,_1133 ),_1152 ),_1141 ),_1151 )];
                  ++ _1149;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1153 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1143)));
  _checked_ptr_1<int> _ptr__1153(_1153 ? _1153->raw() : nullptr,_1153 ? _1153->size(0) : 0);
  natconemap->get(_1145,_1153,(int)0);
  ((*natconemap_dim)(_1145)) = _1133;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1153,_1133,_1143,_1148);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_1153,_1133,_1143,_1148);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_1153,_1133,_1143,_1148);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _9002;
                  for (int _1154 = (int)0, _9003 = _1143; _1154 < _9003 ; ++_1154)
                  {
                    _9002.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1130)->alpha);
                  }
                  auto _9004 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9002.size()),_9002.begin(),_9002.end()));
                  task_put_ppowcones(_1153,_1133,_1143,_1148,_9004);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_1153,_1133,_1143,_1148);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _9005;
                          for (int _1155 = (int)0, _9006 = _1143; _1155 < _9006 ; ++_1155)
                          {
                            _9005.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1130)->alpha);
                          }
                          auto _9007 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9005.size()),_9005.begin(),_9005.end()));
                          task_put_dpowcones(_1153,_1133,_1143,_1148,_9007);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _9008 = (int)0;
  int _9009 = (int)((_1153)->size(0));
  for (int _1156 = _9008; _1156 < _9009; ++_1156)
  {
    {
      task_cone_name(_ptr__1153[_1156],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__1153[_1156])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _1157 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_1128,_1144,_1131,_1146);
  ((*vars)(_1144)) = (_1157).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1128).size()) > (int)0))
  {
    {
      var_map->setItem(_1128,_1144);
    }
  }
  {}
  return (_1157).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1158,std::shared_ptr< monty::ndarray< int,1 > > _1159,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1160){
  _checked_ptr_1<int> _ptr__1159(_1159 ? _1159->raw() : nullptr, _1159 ? _1159->size(0) : 0);
  if ((((int)((_1158).size()) > (int)0) && hasVariable(_1158)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1158)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9010;
  bool _9011 = (NULL != _1159.get());
  if (_9011)
  {
    _9010 = _1159;
  }
  else
  {
    _9010 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1161 = _9010;
  _checked_ptr_1<int> _ptr__1161(_1161 ? _1161->raw() : nullptr,_1161 ? _1161->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape,_1161))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1161.get()))
  {
    {
      _1161 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1161.update(_1161 ? _1161->raw() : nullptr, _1161 ? _1161->size(0) : 0);
    }
  }
  {}
  int _1162 = (int)((_1161)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1163 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1162)));
  _checked_ptr_1<int> _ptr__1163(_1163 ? _1163->raw() : nullptr,_1163 ? _1163->size(0) : 0);
  if ((_1162 > (int)0))
  {
    {
      _ptr__1163[(_1162 - (int)1)] = (int)1;
      int _9012 = (int)1;
      int _9013 = _1162;
      for (int _1164 = _9012; _1164 < _9013; ++_1164)
      {
        {
          _ptr__1163[((_1162 - _1164) - (int)1)] = safe_mul( _ptr__1163[(_1162 - _1164)],_ptr__1161[(_1162 - _1164)] );
        }
      }
    }
  }
  {}
  int _1165 = (int)1;
  int _9014 = (int)0;
  int _9015 = (int)((_1161)->size(0));
  for (int _1166 = _9014; _1166 < _9015; ++_1166)
  {
    {
      _1165 *= _ptr__1161[_1166];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1167 = nullptr;
  _checked_ptr_1<long long> _ptr__1167(_1167 ? _1167->raw() : nullptr,_1167 ? _1167->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1168 = nullptr;
  _checked_ptr_1<int> _ptr__1168(_1168 ? _1168->raw() : nullptr,_1168 ? _1168->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1160)->empty)
  {
    {
      _1167 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__1167.update(_1167 ? _1167->raw() : nullptr, _1167 ? _1167->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity)->size(1)) != _1162))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _1169 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity)->size(0));
      _1167 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1169)));
      _ptr__1167.update(_1167 ? _1167->raw() : nullptr, _1167 ? _1167->size(0) : 0);
      {
        bool _1170 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _1171 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity;
        int _9016 = (int)0;
        int _9017 = _1169;
        for (int _1172 = _9016; _1172 < _9017; ++_1172)
        {
          {
            int _9018 = (int)0;
            int _9019 = (int)((_1171)->size(1));
            for (int _1173 = _9018; _1173 < _9019; ++_1173)
            {
              {
                _1170 = (_1170 || ((((*_1171)(_1172,_1173)) < (int)0) || (((*_1171)(_1172,_1173)) >= _ptr__1161[_1173])));
              }
            }
            if ((!_1170))
            {
              {
                long long _1174 = (int)0;
                int _9020 = (int)0;
                int _9021 = (int)((_1171)->size(1));
                for (int _1175 = _9020; _1175 < _9021; ++_1175)
                {
                  {
                    _1174 += safe_mul( _ptr__1163[_1175],((*_1171)(_1172,_1175)) );
                  }
                }
                _ptr__1167[_1172] = _1174;
              }
            }
            {}
          }
        }
        if (_1170)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _1176 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity;
      int _1177 = (int)0;
      int _9022 = (int)0;
      int _9023 = _1162;
      for (int _1178 = _9022; _1178 < _9023; ++_1178)
      {
        {
          if ((_1177 < _ptr__1161[_1178]))
          {
            {
              _1177 = _ptr__1161[_1178];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1179 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
      _checked_ptr_1<int> _ptr__1179(_1179 ? _1179->raw() : nullptr,_1179 ? _1179->size(0) : 0);
      int _9024 = (int)0;
      int _9025 = _1169;
      for (int _1180 = _9024; _1180 < _9025; ++_1180)
      {
        {
          _ptr__1179[_1180] = _1180;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1181 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
      _checked_ptr_1<int> _ptr__1181(_1181 ? _1181->raw() : nullptr,_1181 ? _1181->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1182 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1177,(int)1 ))));
      _checked_ptr_1<int> _ptr__1182(_1182 ? _1182->raw() : nullptr,_1182 ? _1182->size(0) : 0);
      int _9026 = (int)0;
      int _9027 = _1162;
      for (int _1183 = _9026; _1183 < _9027; ++_1183)
      {
        {
          {
            int _1184 = ((_1162 - _1183) - (int)1);
            int _9028 = (int)0;
            int _9029 = safe_add( _ptr__1161[_1184],(int)1 );
            for (int _1185 = _9028; _1185 < _9029; ++_1185)
            {
              {
                _ptr__1182[_1185] = (int)0;
              }
            }
            int _9030 = (int)0;
            int _9031 = _1169;
            for (int _1186 = _9030; _1186 < _9031; ++_1186)
            {
              {
                ++ _ptr__1182[safe_add( ((*_1176)(_1186,_1184)),(int)1 )];
              }
            }
            int _9032 = (int)0;
            int _9033 = _ptr__1161[_1184];
            for (int _1187 = _9032; _1187 < _9033; ++_1187)
            {
              {
                _ptr__1182[safe_add( _1187,(int)1 )] += _ptr__1182[_1187];
              }
            }
            int _9034 = (int)0;
            int _9035 = _1169;
            for (int _1188 = _9034; _1188 < _9035; ++_1188)
            {
              {
                int _1189 = _ptr__1179[_1188];
                _ptr__1181[_ptr__1182[((*_1176)(_1189,_1184))]] = _1189;
                ++ _ptr__1182[((*_1176)(_1189,_1184))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _1190 = _1179;
          _checked_ptr_1<int> _ptr__1190(_1190 ? _1190->raw() : nullptr,_1190 ? _1190->size(0) : 0);
          _1179 = _1181;
          _ptr__1179.update(_1179 ? _1179->raw() : nullptr, _1179 ? _1179->size(0) : 0);
          _1181 = _1190;
          _ptr__1181.update(_1181 ? _1181->raw() : nullptr, _1181 ? _1181->size(0) : 0);
        }
      }
      int _9036 = (int)0;
      int _9037 = _1169;
      for (int _1191 = _9036; _1191 < _9037; ++_1191)
      {
        {
          int _1192 = _ptr__1179[_1191];
          long long _1193 = (int)0;
          int _9038 = (int)0;
          int _9039 = _1162;
          for (int _1194 = _9038; _1194 < _9039; ++_1194)
          {
            {
              _1193 += safe_mul( _ptr__1163[_1194],((*_1176)(_1192,_1194)) );
            }
          }
          _ptr__1167[_1191] = _1193;
        }
      }
    }
  }
  {}
  int _9040;
  bool _9041 = (NULL != _1167.get());
  if (_9041)
  {
    _9040 = (int)((_1167)->size(0));
  }
  else
  {
    _9040 = _1165;
  }
  int _1195 = _9040;
  std::shared_ptr< monty::ndarray< double,1 > > _1196 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1195)));
  _checked_ptr_1<double> _ptr__1196(_1196 ? _1196->raw() : nullptr,_1196 ? _1196->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)->size(0)) == (int)1))
      {
        {
          int _9042 = (int)0;
          int _9043 = _1195;
          for (int _1197 = _9042; _1197 < _9043; ++_1197)
          {
            {
              _ptr__1196[_1197] = ((*mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)->size(0)) == _1195))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd,(int)0,_1196,(int)0,_1195);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1198 = natvarmap_alloc(_1195);
  std::shared_ptr< monty::ndarray< int,1 > > _1199 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1198))));
  _checked_ptr_1<int> _ptr__1199(_1199 ? _1199->raw() : nullptr,_1199 ? _1199->size(0) : 0);
  natvarmap->get(_1198,_1199,(int)0);
  int _9044 = (int)0;
  int _9045 = _1195;
  for (int _1200 = _9044; _1200 < _9045; ++_1200)
  {
    {
      ((*natvarmap_idx)(_ptr__1199[_1200])) = _1198;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1199);
      ((*natvarmap_type)(_1198)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1201 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_1158,(long long)(_1198),_1161,_1167,_1199);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1160)->cardinal_flag)
  {
    {
      task_var_putintlist(_1199);
    }
  }
  {}
  ((*vars)(_1198)) = (_1201).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1158).size()) > (int)0))
  {
    {
      var_map->setItem(_1158,_1198);
    }
  }
  {}
  return (_1201).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1202,std::shared_ptr< monty::ndarray< int,1 > > _1203,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1204){
  _checked_ptr_1<int> _ptr__1203(_1203 ? _1203->raw() : nullptr, _1203 ? _1203->size(0) : 0);
  if ((((int)((_1202).size()) > (int)0) && hasVariable(_1202)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1202)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9046;
  bool _9047 = (NULL != _1203.get());
  if (_9047)
  {
    _9046 = _1203;
  }
  else
  {
    _9046 = mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1205 = _9046;
  _checked_ptr_1<int> _ptr__1205(_1205 ? _1205->raw() : nullptr,_1205 ? _1205->size(0) : 0);
  if ((NULL == _1205.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if(((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape,_1205))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1206 = (int)((_1205)->size(0));
  int _9048;
  bool _9049 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape.get());
  if (_9049)
  {
    _9048 = mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->conedim;
  }
  else
  {
    _9048 = (_1206 - (int)1);
  }
  int _1207 = _9048;
  if (((_1207 < (int)0) || (_1207 >= _1206)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1208 = _ptr__1205[_1207];
  int _1209 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1208 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1209,safe_add( _1209,(int)1 ) ) / (int)2) != _1208))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1210 = (int)1;
  int _1211 = _ptr__1205[_1207];
  int _1212 = (int)1;
  int _9050 = (int)0;
  int _9051 = _1207;
  for (int _1213 = _9050; _1213 < _9051; ++_1213)
  {
    {
      _1212 *= _ptr__1205[_1213];
    }
  }
  int _9052 = safe_add( _1207,(int)1 );
  int _9053 = _1206;
  for (int _1214 = _9052; _1214 < _9053; ++_1214)
  {
    {
      _1210 *= _ptr__1205[_1214];
    }
  }
  int _1215 = safe_mul( _1212,_1210 );
  int _1216 = safe_mul( _1215,_1208 );
  int _1217 = natbarvarmap_alloc(_1215,_1209);
  std::shared_ptr< monty::ndarray< int,1 > > _1218 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1215)));
  _checked_ptr_1<int> _ptr__1218(_1218 ? _1218->raw() : nullptr,_1218 ? _1218->size(0) : 0);
  natbarvarmap_get(_1217,_1218);
  std::shared_ptr< monty::ndarray< long long,1 > > _1219 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1215,_1211 ))));
  _checked_ptr_1<long long> _ptr__1219(_1219 ? _1219->raw() : nullptr,_1219 ? _1219->size(0) : 0);
  {
    int _1220 = (int)0;
    int _9054 = (int)0;
    int _9055 = _1212;
    for (int _1221 = _9054; _1221 < _9055; ++_1221)
    {
      {
        int _9056 = (int)0;
        int _9057 = _1208;
        for (int _1222 = _9056; _1222 < _9057; ++_1222)
        {
          {
            int _9058 = (int)0;
            int _9059 = _1210;
            for (int _1223 = _9058; _1223 < _9059; ++_1223)
            {
              {
                _ptr__1219[_1220] = safe_add( ((*natbarvar_ptr)(_ptr__1218[safe_add( safe_mul( _1221,_1210 ),_1223 )])),_1222 );
                ++ _1220;
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1224 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1202,_1217,_1205,_1207,_1219);
  ((*barvars)(_1217)) = (_1224).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1202).size()) > (int)0))
  {
    {
      var_map->setItem(_1202,(-safe_add( _1217,(int)1 )));
    }
  }
  {}
  return (_1224).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1225,std::shared_ptr< monty::ndarray< int,1 > > _1226,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1227){
  _checked_ptr_1<int> _ptr__1226(_1226 ? _1226->raw() : nullptr, _1226 ? _1226->size(0) : 0);
  if ((((int)((_1225).size()) > (int)0) && hasVariable(_1225)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1225)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1228 = _1226;
  _checked_ptr_1<int> _ptr__1228(_1228 ? _1228->raw() : nullptr,_1228 ? _1228->size(0) : 0);
  if ((NULL == _1228.get()))
  {
    {
      _1228 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->shape;
      _ptr__1228.update(_1228 ? _1228->raw() : nullptr, _1228 ? _1228->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1228.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1229 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim1;
  int _1230 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim2;
  int _1231 = (int)((_1228)->size(0));
  int _1232 = _ptr__1228[_1229];
  if ((_1229 > _1230))
  {
    {
      int _1233 = _1229;
      _1229 = _1230;
      _1230 = _1233;
    }
  }
  {}
  if (((_1229 == _1230) || ((_1229 < (int)0) || (_1230 >= _1231))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1228[_1229] != _ptr__1228[_1230]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1234 = (int)1;
  int _9060 = (int)0;
  int _9061 = _1229;
  for (int _1235 = _9060; _1235 < _9061; ++_1235)
  {
    {
      _1234 *= _ptr__1228[_1235];
    }
  }
  int _9062 = safe_add( _1229,(int)1 );
  int _9063 = _1230;
  for (int _1236 = _9062; _1236 < _9063; ++_1236)
  {
    {
      _1234 *= _ptr__1228[_1236];
    }
  }
  int _9064 = safe_add( _1230,(int)1 );
  int _9065 = _1231;
  for (int _1237 = _9064; _1237 < _9065; ++_1237)
  {
    {
      _1234 *= _ptr__1228[_1237];
    }
  }
  int _1238 = (safe_mul( safe_mul( _1234,_1232 ),safe_add( _1232,(int)1 ) ) / (int)2);
  int _1239 = natbarvarmap_alloc(_1234,_1232);
  std::shared_ptr< monty::ndarray< long long,1 > > _1240 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1238)));
  _checked_ptr_1<long long> _ptr__1240(_1240 ? _1240->raw() : nullptr,_1240 ? _1240->size(0) : 0);
  natbarvar_get(_1239,_1240);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1241 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1225,_1239,_1228,mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim2,_1240);
  ((*barvars)(_1239)) = (_1241).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1225).size()) > (int)0))
  {
    {
      var_map->setItem(_1225,(-safe_add( _1239,(int)1 )));
    }
  }
  {}
  return (_1241).as<::mosek::fusion::SymmetricVariable>();
}
void mosek::fusion::p_Model::replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _1242,std::shared_ptr< monty::ndarray< int,1 > > _1243,int _1244,int _1245,int _1246,int _1247,int _1248){
  _checked_ptr_1<int> _ptr__1243(_1243 ? _1243->raw() : nullptr, _1243 ? _1243->size(0) : 0);
  int _1249 = (int)((_1243)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1250 = mosek::fusion::p_WorkStack::_get_impl(_1242)->i32;
  _checked_ptr_1<int> _ptr__1250(_1250 ? _1250->raw() : nullptr,_1250 ? _1250->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1251 = mosek::fusion::p_WorkStack::_get_impl(_1242)->i64;
  _checked_ptr_1<long long> _ptr__1251(_1251 ? _1251->raw() : nullptr,_1251 ? _1251->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1252 = mosek::fusion::p_WorkStack::_get_impl(_1242)->f64;
  _checked_ptr_1<double> _ptr__1252(_1252 ? _1252->raw() : nullptr,_1252 ? _1252->size(0) : 0);
  bool _1253 = true;
  int _1254 = (int)0;
  int _1255 = (int)0;
  int _9066 = (int)0;
  int _9067 = _1249;
  for (int _1256 = _9066; _1256 < _9067; ++_1256)
  {
    {
      int _9068 = _ptr__1250[safe_add( _1244,_1256 )];
      int _9069 = _ptr__1250[safe_add( safe_add( _1244,_1256 ),(int)1 )];
      for (int _1257 = _9068; _1257 < _9069; ++_1257)
      {
        {
          if ((((_ptr__1250[safe_add( safe_add( _1246,_1257 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1257 )]) == (int)1) && ((_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1257 )] )] == 10) || (_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1257 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _1254;
              _1255 += (_ptr__1250[safe_add( safe_add( _1246,_1257 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1257 )]);
            }
          }
        }
      }
    }
  }
  int _1258 = natconmap_codenztop;
  int _1259 = natconmap_codeatomtop;
  natconmap_codealloc(_1254,_1255);
  int _9070 = (int)0;
  int _9071 = _1249;
  for (int _1260 = _9070; _1260 < _9071; ++_1260)
  {
    {
      ((*natconmap_coderowptrb)(_ptr__1243[_1260])) = _1258;
      int _9072 = _ptr__1250[safe_add( _1244,_1260 )];
      int _9073 = _ptr__1250[safe_add( safe_add( _1244,_1260 ),(int)1 )];
      for (int _1261 = _9072; _1261 < _9073; ++_1261)
      {
        {
          if ((((_ptr__1250[safe_add( safe_add( _1246,_1261 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1261 )]) == (int)1) && ((_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1261 )] )] == 10) || (_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1261 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              int _9074 = _ptr__1250[safe_add( _1246,_1261 )];
              int _9075 = _ptr__1250[safe_add( safe_add( _1246,_1261 ),(int)1 )];
              for (int _1262 = _9074; _1262 < _9075; ++_1262)
              {
                {
                  ((*natconmap_code)(_1259)) = _ptr__1250[safe_add( _1247,_1262 )];
                  ((*natconmap_cconst)(_1259)) = _ptr__1252[safe_add( _1248,_1262 )];
                  ++ _1259;
                }
              }
              ((*natconmap_codeptr)(safe_add( _1258,(int)1 ))) = _1259;
              ((*natconmap_codenidx)(_1258)) = _ptr__1251[safe_add( _1245,_1261 )];
              _1253 = (_ptr__1251[safe_add( _1245,_1261 )] >= (int)0);
              ++ _1258;
            }
          }
        }
      }
      ((*natconmap_coderowptre)(_ptr__1243[_1260])) = _1258;
    }
  }
  natconmap_numparameterized += _1254;
  if ((!_1253))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1263,monty::rc_ptr< ::mosek::fusion::Expression > _1264,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1265){
  if ((((int)((_1263).size()) > (int)0) && hasConstraint(_1263)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1263)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1265)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1266 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1264)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1266->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1267 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1267(_1267 ? _1267->raw() : nullptr,_1267 ? _1267->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1268 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1268(_1268 ? _1268->raw() : nullptr,_1268 ? _1268->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1269 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1269(_1269 ? _1269->raw() : nullptr,_1269 ? _1269->size(0) : 0);
  int _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1275 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1276 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1277 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1278 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1279 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1280 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1281 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape)->size(0)) != _1270))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _9076 = (int)0;
          int _9077 = _1270;
          for (int _1282 = _9076; _1282 < _9077; ++_1282)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape)(_1282)) != _ptr__1267[safe_add( _1271,_1282 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1283 = (int)1;
  int _9078 = (int)0;
  int _9079 = _1270;
  for (int _1284 = _9078; _1284 < _9079; ++_1284)
  {
    {
      _1283 *= _ptr__1267[safe_add( _1271,_1284 )];
    }
  }
  int _1285 = natconmap_alloc(_1283);
  std::shared_ptr< monty::ndarray< int,1 > > _1286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1283)));
  _checked_ptr_1<int> _ptr__1286(_1286 ? _1286->raw() : nullptr,_1286 ? _1286->size(0) : 0);
  natconmap->get(_1285,_1286,(int)0);
  int _9080 = (int)0;
  int _9081 = _1283;
  for (int _1287 = _9080; _1287 < _9081; ++_1287)
  {
    {
      ((*natconmap_idx)(_ptr__1286[_1287])) = _1285;
      ((*natconmap_slackidx)(_ptr__1286[_1287])) = (int)0;
    }
  }
  ((*natconmap_type)(_1285)) = (int)4;
  putarows(_1286,rs,_1272,_1273,_1276,_1277,_1278,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1288 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1288(_1288 ? _1288->raw() : nullptr,_1288 ? _1288->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1289 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1289(_1289 ? _1289->raw() : nullptr,_1289 ? _1289->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1290 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->lb;
  _checked_ptr_1<double> _ptr__1290(_1290 ? _1290->raw() : nullptr,_1290 ? _1290->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1291 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->ub;
  _checked_ptr_1<double> _ptr__1291(_1291 ? _1291->raw() : nullptr,_1291 ? _1291->size(0) : 0);
  bool _1292 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->empty;
  bool _1293 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1294 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->sparsity;
  {
    if (_1293)
    {
      {
        int _9082 = (int)0;
        int _9083 = _1283;
        for (int _1295 = _9082; _1295 < _9083; ++_1295)
        {
          {
            _ptr__1288[_1295] = _ptr__1290[(int)0];
            _ptr__1289[_1295] = _ptr__1291[(int)0];
          }
        }
      }
    }
    else if(_1292)
    {
      {
      }
    }
    else if((NULL != _1294.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1270)));
        _checked_ptr_1<int> _ptr__1296(_1296 ? _1296->raw() : nullptr,_1296 ? _1296->size(0) : 0);
        _ptr__1296[(_1270 - (int)1)] = (int)1;
        int _9084 = (int)1;
        int _9085 = _1270;
        for (int _1297 = _9084; _1297 < _9085; ++_1297)
        {
          {
            _ptr__1296[((_1270 - _1297) - (int)1)] = safe_mul( _ptr__1296[(_1270 - _1297)],_ptr__1267[(safe_add( _1271,_1270 ) - _1297)] );
          }
        }
        int _9086 = (int)0;
        int _9087 = (int)((_1290)->size(0));
        for (int _1298 = _9086; _1298 < _9087; ++_1298)
        {
          {
            int _1299 = (int)0;
            int _9088 = (int)0;
            int _9089 = _1270;
            for (int _1300 = _9088; _1300 < _9089; ++_1300)
            {
              {
                _1299 += safe_mul( _ptr__1296[_1300],((*_1294)(_1298,_1300)) );
              }
            }
            _ptr__1288[_1299] = _ptr__1290[_1298];
            _ptr__1289[_1299] = _ptr__1291[_1298];
          }
        }
      }
    }
    else
    {
      {
        int _9090 = (int)0;
        int _9091 = _1283;
        for (int _1301 = _9090; _1301 < _9091; ++_1301)
        {
          {
            _ptr__1288[_1301] = _ptr__1290[_1301];
            _ptr__1289[_1301] = _ptr__1291[_1301];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1286,_1288,_1289);
  if ((_1274 == (int)0))
  {
    {
      int _9092 = (int)0;
      int _9093 = _1272;
      for (int _1302 = _9092; _1302 < _9093; ++_1302)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1286[_1302])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1286[_1302])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1303 = true;
      int _1304 = (int)0;
      int _1305 = (int)0;
      int _9094 = (int)0;
      int _9095 = _1272;
      for (int _1306 = _9094; _1306 < _9095; ++_1306)
      {
        {
          int _9096 = _ptr__1267[safe_add( _1276,_1306 )];
          int _9097 = _ptr__1267[safe_add( safe_add( _1276,_1306 ),(int)1 )];
          for (int _1307 = _9096; _1307 < _9097; ++_1307)
          {
            {
              if ((((_ptr__1267[safe_add( safe_add( _1279,_1307 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1307 )]) == (int)1) && ((_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1307 )] )] == 10) || (_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1307 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1304;
                  _1305 += (_ptr__1267[safe_add( safe_add( _1279,_1307 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1307 )]);
                }
              }
            }
          }
        }
      }
      int _1308 = natconmap_codenztop;
      int _1309 = natconmap_codeatomtop;
      natconmap_codealloc(_1304,_1305);
      int _1310 = _1309;
      int _1311 = _1308;
      int _9098 = (int)0;
      int _9099 = _1272;
      for (int _1312 = _9098; _1312 < _9099; ++_1312)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1286[_1312])) = _1311;
          if ((_1304 > (int)0))
          {
            {
              int _9100 = _ptr__1267[safe_add( _1276,_1312 )];
              int _9101 = _ptr__1267[safe_add( safe_add( _1276,_1312 ),(int)1 )];
              for (int _1313 = _9100; _1313 < _9101; ++_1313)
              {
                {
                  if ((((_ptr__1267[safe_add( safe_add( _1279,_1313 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1313 )]) == (int)1) && ((_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1313 )] )] == 10) || (_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1313 )] )] == 2))))
                  {
                    {
                    }
                  }
                  else
                  {
                    {
                      int _9102 = _ptr__1267[safe_add( _1279,_1313 )];
                      int _9103 = _ptr__1267[safe_add( safe_add( _1279,_1313 ),(int)1 )];
                      for (int _1314 = _9102; _1314 < _9103; ++_1314)
                      {
                        {
                          ((*natconmap_code)(_1310)) = _ptr__1267[safe_add( _1280,_1314 )];
                          ((*natconmap_cconst)(_1310)) = _ptr__1269[safe_add( _1281,_1314 )];
                          ++ _1310;
                        }
                      }
                      ((*natconmap_codeptr)(safe_add( _1311,(int)1 ))) = _1310;
                      ((*natconmap_codenidx)(_1311)) = _ptr__1268[safe_add( _1277,_1313 )];
                      _1303 = (_ptr__1268[safe_add( _1277,_1313 )] >= (int)0);
                      ++ _1311;
                    }
                  }
                }
              }
              natconmap_numparameterized += _1304;
            }
          }
          {}
          ((*natconmap_coderowptre)(_ptr__1286[_1312])) = _1311;
        }
      }
      if ((!_1303))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<int> _9104;
  for (int _1316 = (int)0, _9105 = _1270; _1316 < _9105 ; ++_1316)
  {
    _9104.push_back(_ptr__1267[safe_add( _1271,_1316 )]);
  }
  auto _9106 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9104.size()),_9104.begin(),_9104.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1315 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1263,_9106,_1286,_1285);
  ((*cons)(_1285)) = (_1315).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1263).size()) > (int)0))
  {
    {
      con_map->setItem(_1263,_1285);
    }
  }
  {}
  return _1315;
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1317,monty::rc_ptr< ::mosek::fusion::WorkStack > _1318,int _1319,int _1320,int _1321,int _1322,int _1323,std::shared_ptr< monty::ndarray< int,1 > > _1324){
  _checked_ptr_1<int> _ptr__1317(_1317 ? _1317->raw() : nullptr, _1317 ? _1317->size(0) : 0);
  _checked_ptr_1<int> _ptr__1324(_1324 ? _1324->raw() : nullptr, _1324 ? _1324->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1325 = mosek::fusion::p_WorkStack::_get_impl(_1318)->i32;
  _checked_ptr_1<int> _ptr__1325(_1325 ? _1325->raw() : nullptr,_1325 ? _1325->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1326 = mosek::fusion::p_WorkStack::_get_impl(_1318)->i64;
  _checked_ptr_1<long long> _ptr__1326(_1326 ? _1326->raw() : nullptr,_1326 ? _1326->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1327 = mosek::fusion::p_WorkStack::_get_impl(_1318)->f64;
  _checked_ptr_1<double> _ptr__1327(_1327 ? _1327->raw() : nullptr,_1327 ? _1327->size(0) : 0);
  int _1328 = (int)0;
  int _1329 = (int)0;
  int _1330 = (int)0;
  int _9107 = (int)0;
  int _9108 = _1319;
  for (int _1331 = _9107; _1331 < _9108; ++_1331)
  {
    {
      int _1332 = _ptr__1325[safe_add( _1321,_1331 )];
      int _1333 = _ptr__1325[safe_add( safe_add( _1321,_1331 ),(int)1 )];
      int _1334 = _1332;
      while ( ((_1334 < _1333) && (_ptr__1326[safe_add( _1322,_1334 )] < (int)0)) )
      {
        {
          int _1335 = ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1334 )],(int)1 ))));
          int _1336 = _1334;
          ++ _1334;
          while ( ((_1334 < _1333) && ((_ptr__1326[safe_add( _1322,_1334 )] < (int)0) && (_1335 == ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1334 )],(int)1 ))))))) )
          {
            {
              ++ _1334;
            }
          }
          ++ _1329;
        }
      }
      _1330 += (_1334 - _1332);
      _1328 += (_1333 - _1334);
    }
  }
  _1328 += _1319;
  if ((NULL != _1324.get()))
  {
    {
      _1328 += _1319;
    }
  }
  {}
  int _1337 = (int)((_1317)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1337,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1338(_1338 ? _1338->raw() : nullptr,_1338 ? _1338->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1339 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1328)));
  _checked_ptr_1<int> _ptr__1339(_1339 ? _1339->raw() : nullptr,_1339 ? _1339->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1340 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1328)));
  _checked_ptr_1<double> _ptr__1340(_1340 ? _1340->raw() : nullptr,_1340 ? _1340->size(0) : 0);
  if ((NULL != _1324.get()))
  {
    {
      int _1341 = (int)0;
      int _9109 = (int)0;
      int _9110 = _1319;
      for (int _1342 = _9109; _1342 < _9110; ++_1342)
      {
        {
          int _1343 = (int)0;
          int _9111 = _ptr__1325[safe_add( _1321,_1342 )];
          int _9112 = _ptr__1325[safe_add( safe_add( _1321,_1342 ),(int)1 )];
          for (int _1344 = _9111; _1344 < _9112; ++_1344)
          {
            {
              if ((_ptr__1326[safe_add( _1322,_1344 )] >= (int)0))
              {
                {
                  _ptr__1339[safe_add( _1341,_1343 )] = (int)_ptr__1326[safe_add( _1322,_1344 )];
                  _ptr__1340[safe_add( _1341,_1343 )] = _ptr__1327[safe_add( _1323,_1344 )];
                  ++ _1343;
                }
              }
              {}
            }
          }
          _ptr__1339[safe_add( _1341,_1343 )] = _ptr__1324[_1342];
          _ptr__1340[safe_add( _1341,_1343 )] = (-1.0);
          ++ _1343;
          _ptr__1338[safe_add( _1342,(int)1 )] = safe_add( _ptr__1338[_1342],_1343 );
          _1341 += _1343;
        }
      }
    }
  }
  else
  {
    {
      int _1345 = (int)0;
      int _9113 = (int)0;
      int _9114 = _1319;
      for (int _1346 = _9113; _1346 < _9114; ++_1346)
      {
        {
          int _1347 = (int)0;
          int _9115 = _ptr__1325[safe_add( _1321,_1346 )];
          int _9116 = _ptr__1325[safe_add( safe_add( _1321,_1346 ),(int)1 )];
          for (int _1348 = _9115; _1348 < _9116; ++_1348)
          {
            {
              if ((_ptr__1326[safe_add( _1322,_1348 )] >= (int)0))
              {
                {
                  _ptr__1339[safe_add( _1345,_1347 )] = (int)_ptr__1326[safe_add( _1322,_1348 )];
                  _ptr__1340[safe_add( _1345,_1347 )] = _ptr__1327[safe_add( _1323,_1348 )];
                  ++ _1347;
                }
              }
              {}
            }
          }
          _ptr__1338[safe_add( _1346,(int)1 )] = safe_add( _ptr__1338[_1346],_1347 );
          _1345 += _1347;
        }
      }
    }
  }
  task_putarowlist(_1317,_1338,_1339,_1340);
  if ((_1329 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1349 = _1317;
      _checked_ptr_1<int> _ptr__1349(_1349 ? _1349->raw() : nullptr,_1349 ? _1349->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1350 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1337,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1350(_1350 ? _1350->raw() : nullptr,_1350 ? _1350->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1351(_1351 ? _1351->raw() : nullptr,_1351 ? _1351->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1352(_1352 ? _1352->raw() : nullptr,_1352 ? _1352->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1329)));
      _checked_ptr_1<long long> _ptr__1353(_1353 ? _1353->raw() : nullptr,_1353 ? _1353->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1354 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1330)));
      _checked_ptr_1<int> _ptr__1354(_1354 ? _1354->raw() : nullptr,_1354 ? _1354->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1355 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1330)));
      _checked_ptr_1<int> _ptr__1355(_1355 ? _1355->raw() : nullptr,_1355 ? _1355->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1356 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1330)));
      _checked_ptr_1<double> _ptr__1356(_1356 ? _1356->raw() : nullptr,_1356 ? _1356->size(0) : 0);
      int _1357 = (int)0;
      int _1358 = (int)0;
      int _9117 = (int)0;
      int _9118 = _1337;
      for (int _1359 = _9117; _1359 < _9118; ++_1359)
      {
        {
          int _1360 = _ptr__1325[safe_add( _1321,_1359 )];
          int _1361 = _ptr__1325[safe_add( safe_add( _1321,_1359 ),(int)1 )];
          while ( ((_1360 < _1361) && (_ptr__1326[safe_add( _1322,_1360 )] < (int)0)) )
          {
            {
              int _1362 = _1360;
              int _1363 = ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
              while ( ((_1360 < _1361) && ((_ptr__1326[safe_add( _1322,_1360 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 )))) == _1363))) )
              {
                {
                  _ptr__1354[_1358] = ((*natbarvar_i)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
                  _ptr__1355[_1358] = ((*natbarvar_j)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
                  if ((_ptr__1354[_1358] == _ptr__1355[_1358]))
                  {
                    {
                      _ptr__1356[_1358] = _ptr__1327[safe_add( _1323,_1360 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1356[_1358] = (0.5 * _ptr__1327[safe_add( _1323,_1360 )]);
                    }
                  }
                  ++ _1358;
                  ++ _1360;
                }
              }
              _ptr__1351[_1357] = _1363;
              _ptr__1352[_1357] = ((*natbarvar_dim)(_1363));
              _ptr__1353[_1357] = (_1360 - _1362);
              ++ _1357;
            }
          }
          _1360 = _1361;
          _ptr__1350[safe_add( _1359,(int)1 )] = _1357;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1364 = task_appendsymmatlist(_1352,_1353,_1354,_1355,_1356);
      _checked_ptr_1<long long> _ptr__1364(_1364 ? _1364->raw() : nullptr,_1364 ? _1364->size(0) : 0);
      task_putbararowlist(_1349,_1350,_1351,_1364);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1365,monty::rc_ptr< ::mosek::fusion::Expression > _1366,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1367){
  std::shared_ptr< monty::ndarray< int,1 > > _1368 = _1366->getShape();
  _checked_ptr_1<int> _ptr__1368(_1368 ? _1368->raw() : nullptr,_1368 ? _1368->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1367)->shape.get()) && (!::mosek::fusion::p_Set::match(_1368,mosek::fusion::p_PSDDomain::_get_impl(_1367)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1369;
  int _1370;
  int _1371;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1367)->axisIsSet)
  {
    {
      _1369 = (mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2);
      int _9119;
      bool _9120 = _1369;
      if (_9120)
      {
        _9119 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1;
      }
      else
      {
        _9119 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2;
      }
      _1371 = _9119;
      int _9121;
      bool _9122 = _1369;
      if (_9122)
      {
        _9121 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2;
      }
      else
      {
        _9121 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1;
      }
      _1370 = _9121;
    }
  }
  else
  {
    {
      _1369 = true;
      _1371 = ((int)((_1368)->size(0)) - (int)2);
      _1370 = ((int)((_1368)->size(0)) - (int)1);
    }
  }
  if (((_1370 >= (int)((_1368)->size(0))) || (_ptr__1368[_1371] != _ptr__1368[_1370])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _9123;
  bool _9124 = (mosek::fusion::p_PSDDomain::_get_impl(_1367)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_9124)
  {
    _9123 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1371,_1370,_1366).as<::mosek::fusion::Expression>();
  }
  else
  {
    _9123 = _1366;
  }
  monty::rc_ptr< ::mosek::fusion::ExprOptimizeCode > _1372 = ::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1371,_1370,_9123)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1372->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1373 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1373(_1373 ? _1373->raw() : nullptr,_1373 ? _1373->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1374 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1374(_1374 ? _1374->raw() : nullptr,_1374 ? _1374->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1375 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1375(_1375 ? _1375->raw() : nullptr,_1375 ? _1375->size(0) : 0);
  int _1376 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1377 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1378 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1379 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1380 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1381 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1382 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1383 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1384 = mosek::fusion::p_WorkStack::_get_impl(rs)->sp_base;
  int _1385 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1386 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1387 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1388 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  int _1389 = _ptr__1368[_1370];
  int _1390 = (safe_mul( _1389,safe_add( _1389,(int)1 ) ) / (int)2);
  int _9125 = (int)0;
  int _9126 = _1376;
  for (int _1391 = _9125; _1391 < _9126; ++_1391)
  {
    {
      if (((_1391 != _1371) && (_1391 != _1370)))
      {
        {
          _1390 *= _ptr__1368[_1391];
        }
      }
      {}
    }
  }
  int _1392 = natconmap_alloc(_1390);
  std::shared_ptr< monty::ndarray< int,1 > > _1393 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1390)));
  _checked_ptr_1<int> _ptr__1393(_1393 ? _1393->raw() : nullptr,_1393 ? _1393->size(0) : 0);
  natconmap->get(_1392,_1393,(int)0);
  putarows(_1393,rs,_1377,_1378,_1382,_1383,_1385,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< int,1 > > _1394 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1394(_1394 ? _1394->raw() : nullptr,_1394 ? _1394->size(0) : 0);
  int _9127 = (int)0;
  int _9128 = _1371;
  for (int _1395 = _9127; _1395 < _9128; ++_1395)
  {
    {
      _ptr__1394[(int)0] *= _ptr__1368[_1395];
    }
  }
  _ptr__1394[(int)1] = _ptr__1368[_1371];
  int _9129 = safe_add( _1371,(int)1 );
  int _9130 = _1370;
  for (int _1396 = _9129; _1396 < _9130; ++_1396)
  {
    {
      _ptr__1394[(int)2] *= _ptr__1368[_1396];
    }
  }
  _ptr__1394[(int)3] = _ptr__1368[_1370];
  int _9131 = safe_add( _1370,(int)1 );
  int _9132 = _1376;
  for (int _1397 = _9131; _1397 < _9132; ++_1397)
  {
    {
      _ptr__1394[(int)4] *= _ptr__1368[_1397];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1398(_1398 ? _1398->raw() : nullptr,_1398 ? _1398->size(0) : 0);
  _ptr__1398[(int)4] = (int)1;
  int _9133 = (int)1;
  int _9134 = (int)5;
  for (int _1399 = _9133; _1399 < _9134; ++_1399)
  {
    {
      _ptr__1398[(((int)5 - _1399) - (int)1)] = safe_mul( _ptr__1398[((int)5 - _1399)],_ptr__1394[((int)5 - _1399)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1400 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1390)));
  _checked_ptr_1<double> _ptr__1400(_1400 ? _1400->raw() : nullptr,_1400 ? _1400->size(0) : 0);
  if ((!_1379))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _9135 = (int)0;
      int _9136 = _1377;
      for (int _1401 = _9135; _1401 < _9136; ++_1401)
      {
        {
          _ptr__1400[_1401] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1393,_1400);
  int _1402 = safe_mul( safe_mul( _ptr__1394[(int)0],_ptr__1394[(int)2] ),_ptr__1394[(int)4] );
  int _1403 = _ptr__1394[(int)1];
  int _1404 = natbarvarmap_alloc(_1402,_1403);
  std::shared_ptr< monty::ndarray< int,1 > > _1405 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1402)));
  _checked_ptr_1<int> _ptr__1405(_1405 ? _1405->raw() : nullptr,_1405 ? _1405->size(0) : 0);
  natbarvarmap_get(_1404,_1405);
  std::vector<int> _9137;
  for (int _1407 = (int)0, _9138 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1407 < _9138 ; ++_1407)
  {
    _9137.push_back(_1403);
  }
  auto _9139 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9137.size()),_9137.begin(),_9137.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1406 = _9139;
  _checked_ptr_1<int> _ptr__1406(_1406 ? _1406->raw() : nullptr,_1406 ? _1406->size(0) : 0);
  std::vector<long long> _9140;
  for (int _1409 = (int)0, _9141 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1409 < _9141 ; ++_1409)
  {
    _9140.push_back((int)1);
  }
  auto _9142 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9140.size()),_9140.begin(),_9140.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1408 = _9142;
  _checked_ptr_1<long long> _ptr__1408(_1408 ? _1408->raw() : nullptr,_1408 ? _1408->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1410 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1410(_1410 ? _1410->raw() : nullptr,_1410 ? _1410->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1411 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1411(_1411 ? _1411->raw() : nullptr,_1411 ? _1411->size(0) : 0);
  std::vector<double> _9143;
  for (int _1413 = (int)0, _9144 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1413 < _9144 ; ++_1413)
  {
    _9143.push_back((-0.5));
  }
  auto _9145 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9143.size()),_9143.begin(),_9143.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1412 = _9145;
  _checked_ptr_1<double> _ptr__1412(_1412 ? _1412->raw() : nullptr,_1412 ? _1412->size(0) : 0);
  int _9146 = (int)1;
  int _9147 = safe_add( _1403,(int)1 );
  for (int _1414 = _9146; _1414 < _9147; ++_1414)
  {
    {
      _ptr__1412[((safe_mul( _1414,safe_add( _1414,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  {
    int _1415 = (int)0;
    int _9148 = (int)0;
    int _9149 = _1403;
    for (int _1416 = _9148; _1416 < _9149; ++_1416)
    {
      {
        int _9150 = (int)0;
        int _9151 = safe_add( _1416,(int)1 );
        for (int _1417 = _9150; _1417 < _9151; ++_1417)
        {
          {
            _ptr__1410[_1415] = _1416;
            _ptr__1411[_1415] = _1417;
            ++ _1415;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1418 = task_appendsymmatlist(_1406,_1408,_1410,_1411,_1412);
  _checked_ptr_1<long long> _ptr__1418(_1418 ? _1418->raw() : nullptr,_1418 ? _1418->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1419 = _1393;
  _checked_ptr_1<int> _ptr__1419(_1419 ? _1419->raw() : nullptr,_1419 ? _1419->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1420 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1390)));
  _checked_ptr_1<int> _ptr__1420(_1420 ? _1420->raw() : nullptr,_1420 ? _1420->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1421 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1390)));
  _checked_ptr_1<long long> _ptr__1421(_1421 ? _1421->raw() : nullptr,_1421 ? _1421->size(0) : 0);
  {
    int _1422 = (int)0;
    if (_1369)
    {
      {
        int _9152 = (int)0;
        int _9153 = _ptr__1394[(int)0];
        for (int _1423 = _9152; _1423 < _9153; ++_1423)
        {
          {
            int _9154 = (int)0;
            int _9155 = _ptr__1394[(int)1];
            for (int _1424 = _9154; _1424 < _9155; ++_1424)
            {
              {
                int _9156 = (int)0;
                int _9157 = _ptr__1394[(int)2];
                for (int _1425 = _9156; _1425 < _9157; ++_1425)
                {
                  {
                    int _9158 = (int)0;
                    int _9159 = safe_add( _1424,(int)1 );
                    for (int _1426 = _9158; _1426 < _9159; ++_1426)
                    {
                      {
                        int _9160 = (int)0;
                        int _9161 = _ptr__1394[(int)4];
                        for (int _1427 = _9160; _1427 < _9161; ++_1427)
                        {
                          {
                            _ptr__1421[_1422] = _ptr__1418[safe_add( (safe_mul( _1424,safe_add( _1424,(int)1 ) ) / (int)2),_1426 )];
                            _ptr__1420[_1422] = _ptr__1405[safe_add( safe_mul( safe_add( safe_mul( _1423,_ptr__1394[(int)2] ),_1425 ),_ptr__1394[(int)4] ),_1427 )];
                            ((*natconmap_slackidx)(_ptr__1393[_1422])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1420[_1422])),(safe_mul( _1424,safe_add( _1424,(int)1 ) ) / (int)2) ),_1426 )) - (int)1);
                            ++ _1422;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _9162 = (int)0;
        int _9163 = _ptr__1394[(int)0];
        for (int _1428 = _9162; _1428 < _9163; ++_1428)
        {
          {
            int _9164 = (int)0;
            int _9165 = _ptr__1394[(int)1];
            for (int _1429 = _9164; _1429 < _9165; ++_1429)
            {
              {
                int _9166 = (int)0;
                int _9167 = _ptr__1394[(int)2];
                for (int _1430 = _9166; _1430 < _9167; ++_1430)
                {
                  {
                    int _9168 = _1429;
                    int _9169 = _ptr__1394[(int)1];
                    for (int _1431 = _9168; _1431 < _9169; ++_1431)
                    {
                      {
                        int _9170 = (int)0;
                        int _9171 = _ptr__1394[(int)4];
                        for (int _1432 = _9170; _1432 < _9171; ++_1432)
                        {
                          {
                            _ptr__1421[_1422] = _ptr__1418[safe_add( (safe_mul( _1431,safe_add( _1431,(int)1 ) ) / (int)2),_1429 )];
                            _ptr__1420[_1422] = _ptr__1405[safe_add( safe_mul( safe_add( safe_mul( _1428,_ptr__1394[(int)2] ),_1430 ),_ptr__1394[(int)4] ),_1432 )];
                            ((*natconmap_slackidx)(_ptr__1393[_1422])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1420[_1422])),(safe_mul( _1431,safe_add( _1431,(int)1 ) ) / (int)2) ),_1429 )) - (int)1);
                            ++ _1422;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1419,_1420,_1421);
  ((*natconmap_type)(_1392)) = (-safe_add( _1404,(int)1 ));
  if ((_1380 == (int)0))
  {
    {
      int _9172 = (int)0;
      int _9173 = _1377;
      for (int _1433 = _9172; _1433 < _9173; ++_1433)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1393[_1433])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1393[_1433])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1434 = true;
      int _1435 = (int)0;
      int _1436 = (int)0;
      int _9174 = (int)0;
      int _9175 = _1377;
      for (int _1437 = _9174; _1437 < _9175; ++_1437)
      {
        {
          int _9176 = _ptr__1373[safe_add( _1382,_1437 )];
          int _9177 = _ptr__1373[safe_add( safe_add( _1382,_1437 ),(int)1 )];
          for (int _1438 = _9176; _1438 < _9177; ++_1438)
          {
            {
              if ((((_ptr__1373[safe_add( safe_add( _1386,_1438 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1438 )]) == (int)1) && ((_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1438 )] )] == 10) || (_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1438 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1435;
                  _1436 += (_ptr__1373[safe_add( safe_add( _1386,_1438 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1438 )]);
                }
              }
            }
          }
        }
      }
      int _1439 = natconmap_codenztop;
      int _1440 = natconmap_codeatomtop;
      natconmap_codealloc(_1435,_1436);
      int _1441 = _1440;
      int _1442 = _1439;
      int _9178 = (int)0;
      int _9179 = _1377;
      for (int _1443 = _9178; _1443 < _9179; ++_1443)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1393[_1443])) = _1442;
          int _9180 = _ptr__1373[safe_add( _1382,_1443 )];
          int _9181 = _ptr__1373[safe_add( safe_add( _1382,_1443 ),(int)1 )];
          for (int _1444 = _9180; _1444 < _9181; ++_1444)
          {
            {
              if ((((_ptr__1373[safe_add( safe_add( _1386,_1444 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1444 )]) == (int)1) && ((_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1444 )] )] == 10) || (_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1444 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9182 = _ptr__1373[safe_add( _1386,_1444 )];
                  int _9183 = _ptr__1373[safe_add( safe_add( _1386,_1444 ),(int)1 )];
                  for (int _1445 = _9182; _1445 < _9183; ++_1445)
                  {
                    {
                      ((*natconmap_code)(_1441)) = _ptr__1373[safe_add( _1387,_1445 )];
                      ((*natconmap_cconst)(_1441)) = _ptr__1375[safe_add( _1388,_1445 )];
                      ++ _1441;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1442,(int)1 ))) = _1441;
                  ((*natconmap_codenidx)(_1442)) = _ptr__1374[safe_add( _1383,_1444 )];
                  _1434 = (_ptr__1374[safe_add( _1383,_1444 )] >= (int)0);
                  ++ _1442;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1393[_1443])) = _1442;
        }
      }
      natconmap_numparameterized += _1435;
      if ((!_1434))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9184;
  for (int _1447 = (int)0, _9185 = _1390; _1447 < _9185 ; ++_1447)
  {
    _9184.push_back(((*natconmap_slackidx)(_ptr__1393[_1447])));
  }
  auto _9186 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9184.size()),_9184.begin(),_9184.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1446 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1365,_1392,_1368,_1371,_1370,_9186,_1393);
  ((*cons)(_1392)) = (_1446).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1365).size()) > (int)0))
  {
    {
      con_map->setItem(_1365,_1392);
    }
  }
  {}
  return (_1446).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1448,monty::rc_ptr< ::mosek::fusion::Expression > _1449,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1450){
  if ((((int)((_1448).size()) > (int)0) && hasConstraint(_1448)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1448)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1448).size()) > (int)0) && hasConstraint(_1448)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1448)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1451 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1449)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1451->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1452 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1452(_1452 ? _1452->raw() : nullptr,_1452 ? _1452->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1453 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1453(_1453 ? _1453->raw() : nullptr,_1453 ? _1453->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1454 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1454(_1454 ? _1454->raw() : nullptr,_1454 ? _1454->size(0) : 0);
  int _1455 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1456 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1457 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1458 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1459 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1460 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1461 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1462 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1463 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1464 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1465 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1466 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9187;
  for (int _1468 = (int)0, _9188 = _1455; _1468 < _9188 ; ++_1468)
  {
    _9187.push_back(_ptr__1452[safe_add( _1460,_1468 )]);
  }
  auto _9189 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9187.size()),_9187.begin(),_9187.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1467 = _9189;
  _checked_ptr_1<int> _ptr__1467(_1467 ? _1467->raw() : nullptr,_1467 ? _1467->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape.get()) && (!::mosek::fusion::p_Set::match(_1467,mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1469 = (int)1;
  int _9190 = (int)0;
  int _9191 = _1455;
  for (int _1470 = _9190; _1470 < _9191; ++_1470)
  {
    {
      _1469 *= _ptr__1467[_1470];
    }
  }
  int _9192;
  bool _9193 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape.get());
  if (_9193)
  {
    _9192 = mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->conedim;
  }
  else
  {
    _9192 = ((int)((_1467)->size(0)) - (int)1);
  }
  int _1471 = _9192;
  int _1472 = _ptr__1467[_1471];
  int _1473 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1472 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1473,safe_add( _1473,(int)1 ) ) / (int)2) != _1472))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1474 = (int)1;
  int _9194 = (int)0;
  int _9195 = _1471;
  for (int _1475 = _9194; _1475 < _9195; ++_1475)
  {
    {
      _1474 *= _ptr__1467[_1475];
    }
  }
  int _1476 = (int)1;
  int _9196 = safe_add( _1471,(int)1 );
  int _9197 = _1455;
  for (int _1477 = _9196; _1477 < _9197; ++_1477)
  {
    {
      _1476 *= _ptr__1467[_1477];
    }
  }
  int _1478 = safe_mul( _1474,_1476 );
  int _1479 = natconmap_alloc(_1469);
  std::shared_ptr< monty::ndarray< int,1 > > _1480 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1469)));
  _checked_ptr_1<int> _ptr__1480(_1480 ? _1480->raw() : nullptr,_1480 ? _1480->size(0) : 0);
  natconmap->get(_1479,_1480,(int)0);
  putarows(_1480,rs,_1456,_1457,_1461,_1462,_1463,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  int _1481 = natbarvarmap_alloc(_1478,_1473);
  std::shared_ptr< monty::ndarray< int,1 > > _1482 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1478)));
  _checked_ptr_1<int> _ptr__1482(_1482 ? _1482->raw() : nullptr,_1482 ? _1482->size(0) : 0);
  natbarvarmap_get(_1481,_1482);
  ((*barvars)(_1481)) = nullptr;
  int _1483 = safe_mul( safe_mul( _1472,_1474 ),_1476 );
  std::vector<int> _9198;
  for (int _1485 = (int)0, _9199 = _1483; _1485 < _9199 ; ++_1485)
  {
    _9198.push_back(_1473);
  }
  auto _9200 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9198.size()),_9198.begin(),_9198.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1484 = _9200;
  _checked_ptr_1<int> _ptr__1484(_1484 ? _1484->raw() : nullptr,_1484 ? _1484->size(0) : 0);
  std::vector<long long> _9201;
  for (int _1487 = (int)0, _9202 = _1483; _1487 < _9202 ; ++_1487)
  {
    _9201.push_back((int)1);
  }
  auto _9203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9201.size()),_9201.begin(),_9201.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1486 = _9203;
  _checked_ptr_1<long long> _ptr__1486(_1486 ? _1486->raw() : nullptr,_1486 ? _1486->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1488 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1483)));
  _checked_ptr_1<double> _ptr__1488(_1488 ? _1488->raw() : nullptr,_1488 ? _1488->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1489 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1489(_1489 ? _1489->raw() : nullptr,_1489 ? _1489->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1490 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1490(_1490 ? _1490->raw() : nullptr,_1490 ? _1490->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1491 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1491(_1491 ? _1491->raw() : nullptr,_1491 ? _1491->size(0) : 0);
  {
    int _1492 = (int)0;
    int _9204 = (int)0;
    int _9205 = _1474;
    for (int _1493 = _9204; _1493 < _9205; ++_1493)
    {
      {
        int _1494 = (int)0;
        int _9206 = (int)0;
        int _9207 = _1473;
        for (int _1495 = _9206; _1495 < _9207; ++_1495)
        {
          {
            int _9208 = _1495;
            int _9209 = _1473;
            for (int _1496 = _9208; _1496 < _9209; ++_1496)
            {
              {
                int _9210 = (int)0;
                int _9211 = _1476;
                for (int _1497 = _9210; _1497 < _9211; ++_1497)
                {
                  {
                    _ptr__1491[_1492] = _ptr__1482[safe_add( safe_mul( _1493,_1476 ),_1497 )];
                    _ptr__1489[_1492] = _1496;
                    _ptr__1490[_1492] = _1495;
                    double _9212;
                    bool _9213 = (_1496 == _1495);
                    if (_9213)
                    {
                      _9212 = (-1.0);
                    }
                    else
                    {
                      _9212 = (-0.5);
                    }
                    _ptr__1488[_1492] = _9212;
                    ((*natconmap_slackidx)(_ptr__1480[_1492])) = ((-safe_add( ((*natbarvar_ptr)(_ptr__1482[safe_add( safe_mul( _1493,_1476 ),_1497 )])),_1494 )) - (int)1);
                    ++ _1492;
                  }
                }
                ++ _1494;
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1479)) = (-safe_add( _1481,(int)1 ));
    int _9214 = (int)0;
    int _9215 = _1469;
    for (int _1498 = _9214; _1498 < _9215; ++_1498)
    {
      {
        ((*natconmap_blockid)(_ptr__1480[_1498])) = _1479;
        ((*natconmap_idx)(_ptr__1480[_1498])) = _1498;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1499 = task_appendsymmatlist(_1484,_1486,_1489,_1490,_1488);
  _checked_ptr_1<long long> _ptr__1499(_1499 ? _1499->raw() : nullptr,_1499 ? _1499->size(0) : 0);
  task_putbaraijlist(_1480,_1491,_1499);
  task_con_putboundlist_fx(_1480,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1469))));
  if ((_1459 == (int)0))
  {
    {
      int _9216 = (int)0;
      int _9217 = _1456;
      for (int _1500 = _9216; _1500 < _9217; ++_1500)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1480[_1500])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1480[_1500])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1501 = true;
      int _1502 = (int)0;
      int _1503 = (int)0;
      int _9218 = (int)0;
      int _9219 = _1456;
      for (int _1504 = _9218; _1504 < _9219; ++_1504)
      {
        {
          int _9220 = _ptr__1452[safe_add( _1461,_1504 )];
          int _9221 = _ptr__1452[safe_add( safe_add( _1461,_1504 ),(int)1 )];
          for (int _1505 = _9220; _1505 < _9221; ++_1505)
          {
            {
              if ((((_ptr__1452[safe_add( safe_add( _1464,_1505 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1505 )]) == (int)1) && ((_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1505 )] )] == 10) || (_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1505 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1502;
                  _1503 += (_ptr__1452[safe_add( safe_add( _1464,_1505 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1505 )]);
                }
              }
            }
          }
        }
      }
      int _1506 = natconmap_codenztop;
      int _1507 = natconmap_codeatomtop;
      natconmap_codealloc(_1502,_1503);
      int _1508 = _1507;
      int _1509 = _1506;
      int _9222 = (int)0;
      int _9223 = _1456;
      for (int _1510 = _9222; _1510 < _9223; ++_1510)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1480[_1510])) = _1509;
          int _9224 = _ptr__1452[safe_add( _1461,_1510 )];
          int _9225 = _ptr__1452[safe_add( safe_add( _1461,_1510 ),(int)1 )];
          for (int _1511 = _9224; _1511 < _9225; ++_1511)
          {
            {
              if ((((_ptr__1452[safe_add( safe_add( _1464,_1511 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1511 )]) == (int)1) && ((_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1511 )] )] == 10) || (_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1511 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9226 = _ptr__1452[safe_add( _1464,_1511 )];
                  int _9227 = _ptr__1452[safe_add( safe_add( _1464,_1511 ),(int)1 )];
                  for (int _1512 = _9226; _1512 < _9227; ++_1512)
                  {
                    {
                      ((*natconmap_code)(_1508)) = _ptr__1452[safe_add( _1465,_1512 )];
                      ((*natconmap_cconst)(_1508)) = _ptr__1454[safe_add( _1466,_1512 )];
                      ++ _1508;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1509,(int)1 ))) = _1508;
                  ((*natconmap_codenidx)(_1509)) = _ptr__1453[safe_add( _1462,_1511 )];
                  _1501 = (_ptr__1453[safe_add( _1462,_1511 )] >= (int)0);
                  ++ _1509;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1480[_1510])) = _1509;
        }
      }
      natconmap_numparameterized += _1502;
      if ((!_1501))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9228;
  for (int _1514 = (int)0, _9229 = _1469; _1514 < _9229 ; ++_1514)
  {
    _9228.push_back(((*natconmap_slackidx)(_ptr__1480[_1514])));
  }
  auto _9230 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9228.size()),_9228.begin(),_9228.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1513 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1448,_1479,_1467,_1471,_1480,_9230);
  ((*cons)(_1479)) = (_1513).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1448).size()) > (int)0))
  {
    {
      con_map->setItem(_1448,_1479);
    }
  }
  {}
  return (_1513).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1515,monty::rc_ptr< ::mosek::fusion::Expression > _1516,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1517){
  if ((((int)((_1515).size()) > (int)0) && hasConstraint(_1515)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1515)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1515).size()) > (int)0) && hasConstraint(_1515)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1515)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1517)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1518 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1516)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1518->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1519 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1519(_1519 ? _1519->raw() : nullptr,_1519 ? _1519->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1520 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1520(_1520 ? _1520->raw() : nullptr,_1520 ? _1520->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1521 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1521(_1521 ? _1521->raw() : nullptr,_1521 ? _1521->size(0) : 0);
  int _1522 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1523 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1524 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1525 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1526 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1527 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1528 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1529 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1530 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1531 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1532 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1533 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9231;
  for (int _1535 = (int)0, _9232 = _1522; _1535 < _9232 ; ++_1535)
  {
    _9231.push_back(_ptr__1519[safe_add( _1523,_1535 )]);
  }
  auto _9233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9231.size()),_9231.begin(),_9231.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1534 = _9233;
  _checked_ptr_1<int> _ptr__1534(_1534 ? _1534->raw() : nullptr,_1534 ? _1534->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1517)->shape.get()) && (!::mosek::fusion::p_Set::match(_1534,mosek::fusion::p_ConeDomain::_get_impl(_1517)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _9234;
  bool _9235 = _1517->axisIsSet();
  if (_9235)
  {
    _9234 = _1517->getAxis();
  }
  else
  {
    _9234 = (_1522 - (int)1);
  }
  int _1536 = _9234;
  int _1537 = _ptr__1534[_1536];
  int _1538 = (int)1;
  int _1539 = (int)1;
  int _1540 = (int)1;
  {
    int _9236 = (int)0;
    int _9237 = _1522;
    for (int _1541 = _9236; _1541 < _9237; ++_1541)
    {
      {
        _1540 *= _ptr__1534[_1541];
      }
    }
    int _9238 = (int)0;
    int _9239 = _1536;
    for (int _1542 = _9238; _1542 < _9239; ++_1542)
    {
      {
        _1539 *= _ptr__1534[_1542];
      }
    }
    int _9240 = safe_add( _1536,(int)1 );
    int _9241 = _1522;
    for (int _1543 = _9240; _1543 < _9241; ++_1543)
    {
      {
        _1538 *= _ptr__1534[_1543];
      }
    }
  }
  int _1544 = safe_mul( _1539,_1538 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InQCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1537 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1537 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1537 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1545 = natvarmap_alloc(_1540);
  std::shared_ptr< monty::ndarray< int,1 > > _1546 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1540)));
  _checked_ptr_1<int> _ptr__1546(_1546 ? _1546->raw() : nullptr,_1546 ? _1546->size(0) : 0);
  natvarmap->get(_1545,_1546,(int)0);
  int _1547 = natconemap_alloc(_1544);
  int _9242 = (int)0;
  int _9243 = _1540;
  for (int _1548 = _9242; _1548 < _9243; ++_1548)
  {
    {
      ((*natvarmap_idx)(_ptr__1546[_1548])) = _1545;
    }
  }
  task_var_putboundlist_fr(_1546);
  std::shared_ptr< monty::ndarray< int,1 > > _9244;
  bool _9245 = (_1536 < ((int)((_1534)->size(0)) - (int)1));
  if (_9245)
  {
    _9244 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1546)->size(0)))));
  }
  else
  {
    _9244 = _1546;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1549 = _9244;
  _checked_ptr_1<int> _ptr__1549(_1549 ? _1549->raw() : nullptr,_1549 ? _1549->size(0) : 0);
  if ((_1536 < ((int)((_1534)->size(0)) - (int)1)))
  {
    {
      int _1550 = (int)0;
      int _9246 = (int)0;
      int _9247 = _1539;
      for (int _1551 = _9246; _1551 < _9247; ++_1551)
      {
        {
          int _9248 = (int)0;
          int _9249 = _1538;
          for (int _1552 = _9248; _1552 < _9249; ++_1552)
          {
            {
              int _9250 = (int)0;
              int _9251 = _1537;
              for (int _1553 = _9250; _1553 < _9251; ++_1553)
              {
                {
                  _ptr__1549[_1550] = _ptr__1546[safe_add( safe_mul( safe_add( safe_mul( _1551,_1537 ),_1553 ),_1538 ),_1552 )];
                  ++ _1550;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1554 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1544)));
  _checked_ptr_1<int> _ptr__1554(_1554 ? _1554->raw() : nullptr,_1554 ? _1554->size(0) : 0);
  natconemap->get(_1547,_1554,(int)0);
  ((*natconemap_dim)(_1547)) = _1537;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _9252;
      for (int _1555 = (int)0, _9253 = _1544; _1555 < _9253 ; ++_1555)
      {
        _9252.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1517)->alpha);
      }
      auto _9254 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9252.size()),_9252.begin(),_9252.end()));
      task_put_ppowcones(_1554,_1537,_1544,_1549,_9254);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _9255;
      for (int _1556 = (int)0, _9256 = _1544; _1556 < _9256 ; ++_1556)
      {
        _9255.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1517)->alpha);
      }
      auto _9257 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9255.size()),_9255.begin(),_9255.end()));
      task_put_dpowcones(_1554,_1537,_1544,_1549,_9257);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1545)) = nullptr;
  int _1557 = natconmap_alloc(_1540);
  std::shared_ptr< monty::ndarray< int,1 > > _1558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1540)));
  _checked_ptr_1<int> _ptr__1558(_1558 ? _1558->raw() : nullptr,_1558 ? _1558->size(0) : 0);
  natconmap->get(_1557,_1558,(int)0);
  ((*natconmap_type)(_1557)) = safe_add( _1545,(int)6 );
  {
    int _9258 = (int)0;
    int _9259 = _1540;
    for (int _1559 = _9258; _1559 < _9259; ++_1559)
    {
      {
        ((*natconmap_slackidx)(_ptr__1558[_1559])) = safe_add( _ptr__1546[_1559],(int)1 );
      }
    }
    int _9260 = (int)0;
    int _9261 = _1540;
    for (int _1560 = _9260; _1560 < _9261; ++_1560)
    {
      {
        ((*natconmap_blockid)(_ptr__1558[_1560])) = _1557;
      }
    }
    int _9262 = (int)0;
    int _9263 = _1540;
    for (int _1561 = _9262; _1561 < _9263; ++_1561)
    {
      {
        ((*natconmap_idx)(_ptr__1558[_1561])) = _1561;
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1562 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1540)));
  _checked_ptr_1<double> _ptr__1562(_1562 ? _1562->raw() : nullptr,_1562 ? _1562->size(0) : 0);
  task_con_putboundlist_fx(_1558,_1562);
  putarows(_1558,rs,_1524,_1525,_1528,_1529,_1530,_1546);
  if ((_1526 == (int)0))
  {
    {
      int _9264 = (int)0;
      int _9265 = _1524;
      for (int _1563 = _9264; _1563 < _9265; ++_1563)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1558[_1563])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1558[_1563])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1564 = true;
      int _1565 = (int)0;
      int _1566 = (int)0;
      int _9266 = (int)0;
      int _9267 = _1524;
      for (int _1567 = _9266; _1567 < _9267; ++_1567)
      {
        {
          int _9268 = _ptr__1519[safe_add( _1528,_1567 )];
          int _9269 = _ptr__1519[safe_add( safe_add( _1528,_1567 ),(int)1 )];
          for (int _1568 = _9268; _1568 < _9269; ++_1568)
          {
            {
              if ((((_ptr__1519[safe_add( safe_add( _1532,_1568 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1568 )]) == (int)1) && ((_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1568 )] )] == 10) || (_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1568 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1565;
                  _1566 += (_ptr__1519[safe_add( safe_add( _1532,_1568 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1568 )]);
                }
              }
            }
          }
        }
      }
      int _1569 = natconmap_codenztop;
      int _1570 = natconmap_codeatomtop;
      natconmap_codealloc(_1565,_1566);
      int _1571 = _1570;
      int _1572 = _1569;
      int _9270 = (int)0;
      int _9271 = _1524;
      for (int _1573 = _9270; _1573 < _9271; ++_1573)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1558[_1573])) = _1572;
          int _9272 = _ptr__1519[safe_add( _1528,_1573 )];
          int _9273 = _ptr__1519[safe_add( safe_add( _1528,_1573 ),(int)1 )];
          for (int _1574 = _9272; _1574 < _9273; ++_1574)
          {
            {
              if ((((_ptr__1519[safe_add( safe_add( _1532,_1574 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1574 )]) == (int)1) && ((_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1574 )] )] == 10) || (_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1574 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9274 = _ptr__1519[safe_add( _1532,_1574 )];
                  int _9275 = _ptr__1519[safe_add( safe_add( _1532,_1574 ),(int)1 )];
                  for (int _1575 = _9274; _1575 < _9275; ++_1575)
                  {
                    {
                      ((*natconmap_code)(_1571)) = _ptr__1519[safe_add( _1531,_1575 )];
                      ((*natconmap_cconst)(_1571)) = _ptr__1521[safe_add( _1533,_1575 )];
                      ++ _1571;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1572,(int)1 ))) = _1571;
                  ((*natconmap_codenidx)(_1572)) = _ptr__1520[safe_add( _1529,_1574 )];
                  _1564 = (_ptr__1520[safe_add( _1529,_1574 )] >= (int)0);
                  ++ _1572;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1558[_1573])) = _1572;
        }
      }
      natconmap_numparameterized += _1565;
      if ((!_1564))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1576 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1515,_1517,_1534,_1557,_1558,_1546);
  ((*cons)(_1557)) = (_1576).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1515).size()) > (int)0))
  {
    {
      con_map->setItem(_1515,_1557);
    }
  }
  {}
  return (_1576).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1577,monty::rc_ptr< ::mosek::fusion::Expression > _1578,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1579){
  if ((((int)((_1577).size()) > (int)0) && hasConstraint(_1577)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1577)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1579)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1580 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1578)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1580->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1581 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1581(_1581 ? _1581->raw() : nullptr,_1581 ? _1581->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1582 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1582(_1582 ? _1582->raw() : nullptr,_1582 ? _1582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1583 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1583(_1583 ? _1583->raw() : nullptr,_1583 ? _1583->size(0) : 0);
  int _1584 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1585 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1586 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1587 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1588 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1589 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1590 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1591 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1592 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1593 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1594 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1595 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9276;
  for (int _1597 = (int)0, _9277 = _1584; _1597 < _9277 ; ++_1597)
  {
    _9276.push_back(_ptr__1581[safe_add( _1589,_1597 )]);
  }
  auto _9278 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9276.size()),_9276.begin(),_9276.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1596 = _9278;
  _checked_ptr_1<int> _ptr__1596(_1596 ? _1596->raw() : nullptr,_1596 ? _1596->size(0) : 0);
  int _1598 = (int)1;
  int _9279 = (int)0;
  int _9280 = _1584;
  for (int _1599 = _9279; _1599 < _9280; ++_1599)
  {
    {
      _1598 *= _ptr__1596[_1599];
    }
  }
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1579)->shape.get()) && (!::mosek::fusion::p_Set::match(_1596,mosek::fusion::p_LinearDomain::_get_impl(_1579)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _1600;
  _checked_ptr_1<double> _ptr__1600(_1600 ? _1600->raw() : nullptr,_1600 ? _1600->size(0) : 0);
  int _1601 = natconmap_alloc(_1598);
  std::shared_ptr< monty::ndarray< int,1 > > _1602 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1598)));
  _checked_ptr_1<int> _ptr__1602(_1602 ? _1602->raw() : nullptr,_1602 ? _1602->size(0) : 0);
  natconmap->get(_1601,_1602,(int)0);
  putarows(_1602,rs,_1585,_1586,_1590,_1591,_1592,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1603 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->sparsity;
    bool _1604 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1605 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->bnd;
    _checked_ptr_1<double> _ptr__1605(_1605 ? _1605->raw() : nullptr,_1605 ? _1605->size(0) : 0);
    bool _1606 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->scalable;
    {
      if ((NULL == _1605.get()))
      {
        {
          std::vector<double> _9281;
          for (int _1607 = (int)0, _9282 = (int)((_1602)->size(0)); _1607 < _9282 ; ++_1607)
          {
            _9281.push_back(0.0);
          }
          auto _9283 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9281.size()),_9281.begin(),_9281.end()));
          _1600 = _9283;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else if(_1606)
      {
        {
          std::vector<double> _9284;
          for (int _1608 = (int)0, _9285 = (int)((_1602)->size(0)); _1608 < _9285 ; ++_1608)
          {
            _9284.push_back(_ptr__1605[(int)0]);
          }
          auto _9286 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9284.size()),_9284.begin(),_9284.end()));
          _1600 = _9286;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else if((NULL != _1603.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1609 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1584)));
          _checked_ptr_1<int> _ptr__1609(_1609 ? _1609->raw() : nullptr,_1609 ? _1609->size(0) : 0);
          _ptr__1609[(_1584 - (int)1)] = (int)1;
          int _9287 = (int)1;
          int _9288 = _1584;
          for (int _1610 = _9287; _1610 < _9288; ++_1610)
          {
            {
              _ptr__1609[((_1584 - _1610) - (int)1)] = safe_mul( _ptr__1609[(_1584 - _1610)],_ptr__1596[(_1584 - _1610)] );
            }
          }
          _1600 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1602)->size(0)))));
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
          int _9289 = (int)0;
          int _9290 = (int)((_1603)->size(0));
          for (int _1611 = _9289; _1611 < _9290; ++_1611)
          {
            {
              int _1612 = (int)0;
              int _9291 = (int)0;
              int _9292 = _1584;
              for (int _1613 = _9291; _1613 < _9292; ++_1613)
              {
                {
                  _1612 += safe_mul( _ptr__1609[_1613],((*_1603)(_1611,_1613)) );
                }
              }
              _ptr__1600[_1612] = _ptr__1605[_1611];
            }
          }
        }
      }
      else if(_1604)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1614 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1584)));
          _checked_ptr_1<int> _ptr__1614(_1614 ? _1614->raw() : nullptr,_1614 ? _1614->size(0) : 0);
          _ptr__1614[(_1584 - (int)1)] = (int)1;
          int _9293 = (int)1;
          int _9294 = _1584;
          for (int _1615 = _9293; _1615 < _9294; ++_1615)
          {
            {
              _ptr__1614[((_1584 - _1615) - (int)1)] = safe_mul( _ptr__1614[(_1584 - _1615)],_ptr__1596[(_1584 - _1615)] );
            }
          }
          _1600 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1602)->size(0)))));
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else
      {
        {
          std::vector<double> _9295;
          for (int _1616 = (int)0, _9296 = (int)((_1602)->size(0)); _1616 < _9296 ; ++_1616)
          {
            _9295.push_back(_ptr__1605[_1616]);
          }
          auto _9297 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9295.size()),_9295.begin(),_9295.end()));
          _1600 = _9297;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
    }
  }
  int _9298 = (int)0;
  int _9299 = _1598;
  for (int _1617 = _9298; _1617 < _9299; ++_1617)
  {
    {
      ((*natconmap_idx)(_ptr__1602[_1617])) = _1601;
      ((*natconmap_slackidx)(_ptr__1602[_1617])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1601)) = (int)1;
      task_con_putboundlist_fr(_1602);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1601)) = (int)3;
      task_con_putboundlist_up(_1602,_1600);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1601)) = (int)2;
      task_con_putboundlist_lo(_1602,_1600);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1601)) = (int)5;
      task_con_putboundlist_fx(_1602,_1600);
    }
  }
  {}
  if ((_1588 == (int)0))
  {
    {
      int _9300 = (int)0;
      int _9301 = _1585;
      for (int _1618 = _9300; _1618 < _9301; ++_1618)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1602[_1618])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1602[_1618])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      replace_row_code(rs,_1602,_1590,_1591,_1593,_1594,_1595);
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1619 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1577,_1601,_1596,_1602);
  ((*cons)(_1601)) = (_1619).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1577).size()) > (int)0))
  {
    {
      con_map->setItem(_1577,_1601);
    }
  }
  {}
  return (_1619).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasParameter(const std::string & _1620) { return mosek::fusion::p_Model::_get_impl(this)->hasParameter(_1620); }bool mosek::fusion::p_Model::hasParameter(const std::string & _1620){
  return par_map->hasItem(_1620);
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1621) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1621); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1621){
  return con_map->hasItem(_1621);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1622) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1622); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1622){
  return var_map->hasItem(_1622);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__getParameter(const std::string & _1623) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getParameter(_1623); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::getParameter(const std::string &  _1623) { return __mosek_2fusion_2Model__getParameter(_1623); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__getParameter(const std::string & _1623){
  return ((*parameters)(par_map->getItem(_1623)));
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1624) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1624) { return __mosek_2fusion_2Model__getConstraint(_1624); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1624){
  return (((*cons)(_1624))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1625) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1625); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1625) { return __mosek_2fusion_2Model__getConstraint(_1625); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1625){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9302;
  bool _9303 = con_map->hasItem(_1625);
  if (_9303)
  {
    _9302 = ((*cons)(con_map->getItem(_1625)));
  }
  else
  {
    _9302 = nullptr;
  }
  return (_9302).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1626) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1626); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1626) { return __mosek_2fusion_2Model__getVariable(_1626); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1626){
  return (((*vars)(_1626))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1627) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1627); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1627) { return __mosek_2fusion_2Model__getVariable(_1627); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1627){
  if (var_map->hasItem(_1627))
  {
    {
      int _1628 = var_map->getItem(_1627);
      if ((_1628 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1628,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1628))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1629){
  _checked_ptr_1<int> _ptr__1629(_1629 ? _1629->raw() : nullptr, _1629 ? _1629->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1630 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1629)->size(0)))));
  _checked_ptr_1<double> _ptr__1630(_1630 ? _1630->raw() : nullptr,_1630 ? _1630->size(0) : 0);
  int _9304 = (int)0;
  int _9305 = (int)((_1629)->size(0));
  for (int _1631 = _9304; _1631 < _9305; ++_1631)
  {
    {
      _ptr__1630[_1631] = ((*param_value)(_ptr__1629[_1631]));
    }
  }
  return _1630;
}
void mosek::fusion::p_Model::setParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1632,std::shared_ptr< monty::ndarray< double,1 > > _1633){
  _checked_ptr_1<int> _ptr__1632(_1632 ? _1632->raw() : nullptr, _1632 ? _1632->size(0) : 0);
  _checked_ptr_1<double> _ptr__1633(_1633 ? _1633->raw() : nullptr, _1633 ? _1633->size(0) : 0);
  int _9306 = (int)0;
  int _9307 = (int)((_1632)->size(0));
  for (int _1634 = _9306; _1634 < _9307; ++_1634)
  {
    {
      ((*param_value)(_ptr__1632[_1634])) = _ptr__1633[_1634];
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_objcconst.reset();natconmap_objcode.reset();natconmap_objcodeptr.reset();natconmap_objcodenidx.reset();natconmap_cconst.reset();natconmap_code.reset();natconmap_codeptr.reset();natconmap_codenidx.reset();natconmap_coderowptre.reset();natconmap_coderowptrb.reset();param_value.reset();par_map.reset();parameters.reset();natconmap_type.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638){ return new mosek::fusion::SliceVariable(_1635,_1636,_1637,_1638); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1635,_1636,_1637,_1638); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1636(_1636 ? _1636->raw() : nullptr, _1636 ? _1636->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1637(_1637 ? _1637->raw() : nullptr, _1637 ? _1637->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1638(_1638 ? _1638->raw() : nullptr, _1638 ? _1638->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1635,_1636,_1637,_1638);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1638;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1637;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1636;
  }
}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639){ return new mosek::fusion::SliceVariable(_1639); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1639); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1639,_1639->__mosek_2fusion_2BaseVariable__getModel());
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_SliceVariable::_get_impl(_1639)->nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = mosek::fusion::p_SliceVariable::_get_impl(_1639)->sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = mosek::fusion::p_SliceVariable::_get_impl(_1639)->shape;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641){ return new mosek::fusion::SymRangedVariable(_1640,_1641); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1640,_1641); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1640,_1641);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647){ return new mosek::fusion::SymRangedVariable(_1642,_1643,_1644,_1645,_1646,_1647); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1642,_1643,_1644,_1645,_1646,_1647); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1646(_1646 ? _1646->raw() : nullptr, _1646 ? _1646->size(0) : 0);
    _checked_ptr_1<int> _ptr__1647(_1647 ? _1647->raw() : nullptr, _1647 ? _1647->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1642,_1643,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1645),(int)(_1645)}),_1644,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1645,_1646),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1645,_1646,_1647));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1643;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1647;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1646;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1645;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1648,std::shared_ptr< monty::ndarray< double,1 > > _1649){
  _checked_ptr_1<double> _ptr__1649(_1649 ? _1649->raw() : nullptr, _1649 ? _1649->size(0) : 0);
  dual_lu(_1648,_1649,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1650,std::shared_ptr< monty::ndarray< double,1 > > _1651){
  _checked_ptr_1<double> _ptr__1651(_1651 ? _1651->raw() : nullptr, _1651 ? _1651->size(0) : 0);
  dual_lu(_1650,_1651,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1652 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9308 = (int)0;
          int _9309 = (int)((nativeidxs)->size(0));
          for (int _1653 = _9308; _1653 < _9309; ++_1653)
          {
            {
              std::string _9310;
              bool _9311 = ((int)((name).size()) == (int)0);
              if (_9311)
              {
                _9310 = std::string ("");
              }
              else
              {
                _9310 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1653 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1653 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1652.get())->varname(((*nativeidxs)(_1653)),_9310);
            }
          }
        }
      }
      else
      {
        {
          int _9312 = (int)0;
          int _9313 = (int)((sparsity)->size(0));
          for (int _1654 = _9312; _1654 < _9313; ++_1654)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1652.get())->varname(((*nativeidxs)(_1654)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1654)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1654)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1655){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1655)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1656,std::shared_ptr< monty::ndarray< long long,1 > > _1657,std::shared_ptr< monty::ndarray< int,1 > > _1658){
  _checked_ptr_1<long long> _ptr__1657(_1657 ? _1657->raw() : nullptr, _1657 ? _1657->size(0) : 0);
  _checked_ptr_1<int> _ptr__1658(_1658 ? _1658->raw() : nullptr, _1658 ? _1658->size(0) : 0);
  if ((NULL == _1657.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1659 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1656,_1656 ))));
      _checked_ptr_1<long long> _ptr__1659(_1659 ? _1659->raw() : nullptr,_1659 ? _1659->size(0) : 0);
      int _1660 = (int)0;
      {
        int _9314 = (int)0;
        int _9315 = _1656;
        for (int _1661 = _9314; _1661 < _9315; ++_1661)
        {
          {
            _ptr__1659[safe_add( safe_mul( _1661,_1656 ),_1661 )] = safe_add( _ptr__1658[_1660],(int)1 );
            ++ _1660;
            int _9316 = safe_add( _1661,(int)1 );
            int _9317 = _1656;
            for (int _1662 = _9316; _1662 < _9317; ++_1662)
            {
              {
                _ptr__1659[safe_add( safe_mul( _1661,_1656 ),_1662 )] = safe_add( _ptr__1658[_1660],(int)1 );
                _ptr__1659[safe_add( safe_mul( _1662,_1656 ),_1661 )] = safe_add( _ptr__1658[_1660],(int)1 );
                ++ _1660;
              }
            }
          }
        }
      }
      return _1659;
    }
  }
  else
  {
    {
      int _1663 = (int)0;
      {
        int _9318 = (int)0;
        int _9319 = (int)((_1657)->size(0));
        for (int _1664 = _9318; _1664 < _9319; ++_1664)
        {
          {
            int _9320;
            bool _9321 = ((_ptr__1657[_1664] % safe_add( _1656,(int)1 )) == (int)0);
            if (_9321)
            {
              _9320 = (int)1;
            }
            else
            {
              _9320 = (int)2;
            }
            _1663 += _9320;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1665 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1663)));
      _checked_ptr_1<long long> _ptr__1665(_1665 ? _1665->raw() : nullptr,_1665 ? _1665->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1666 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1663)));
      _checked_ptr_1<long long> _ptr__1666(_1666 ? _1666->raw() : nullptr,_1666 ? _1666->size(0) : 0);
      {
        int _1667 = (int)0;
        int _9322 = (int)0;
        int _9323 = (int)((_1657)->size(0));
        for (int _1668 = _9322; _1668 < _9323; ++_1668)
        {
          {
            long long _1669 = (_ptr__1657[_1668] / _1656);
            long long _1670 = (_ptr__1657[_1668] % _1656);
            _ptr__1665[_1667] = _ptr__1657[_1668];
            _ptr__1666[_1667] = safe_add( _ptr__1658[_1668],(int)1 );
            ++ _1667;
            if ((_1669 != _1670))
            {
              {
                _ptr__1665[_1667] = safe_add( safe_mul( _1670,_1656 ),_1669 );
                _ptr__1666[_1667] = safe_add( _ptr__1658[_1668],(int)1 );
                ++ _1667;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9324;
      for (int _1672 = (int)0, _9325 = _1663; _1672 < _9325 ; ++_1672)
      {
        _9324.push_back(_1672);
      }
      auto _9326 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9324.size()),_9324.begin(),_9324.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1671 = _9326;
      _checked_ptr_1<long long> _ptr__1671(_1671 ? _1671->raw() : nullptr,_1671 ? _1671->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1671,_1665,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1663));
      std::vector<long long> _9327;
      for (int _1673 = (int)0, _9328 = _1663; _1673 < _9328 ; ++_1673)
      {
        _9327.push_back(_ptr__1666[_ptr__1671[_1673]]);
      }
      auto _9329 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9327.size()),_9327.begin(),_9327.end()));
      return _9329;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1674,std::shared_ptr< monty::ndarray< long long,1 > > _1675){
  _checked_ptr_1<long long> _ptr__1675(_1675 ? _1675->raw() : nullptr, _1675 ? _1675->size(0) : 0);
  if ((NULL == _1675.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1676 = (int)0;
      {
        int _9330 = (int)0;
        int _9331 = (int)((_1675)->size(0));
        for (int _1677 = _9330; _1677 < _9331; ++_1677)
        {
          {
            int _9332;
            bool _9333 = ((_ptr__1675[_1677] % safe_add( _1674,(int)1 )) == (int)0);
            if (_9333)
            {
              _9332 = (int)1;
            }
            else
            {
              _9332 = (int)2;
            }
            _1676 += _9332;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1678 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1676)));
      _checked_ptr_1<long long> _ptr__1678(_1678 ? _1678->raw() : nullptr,_1678 ? _1678->size(0) : 0);
      {
        int _1679 = (int)0;
        int _9334 = (int)0;
        int _9335 = (int)((_1675)->size(0));
        for (int _1680 = _9334; _1680 < _9335; ++_1680)
        {
          {
            long long _1681 = (_ptr__1675[_1680] / _1674);
            long long _1682 = (_ptr__1675[_1680] % _1674);
            _ptr__1678[_1679] = _ptr__1675[_1680];
            ++ _1679;
            if ((_1681 != _1682))
            {
              {
                _ptr__1678[_1679] = safe_add( safe_mul( _1682,_1674 ),_1681 );
                ++ _1679;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9336;
      for (int _1684 = (int)0, _9337 = _1676; _1684 < _9337 ; ++_1684)
      {
        _9336.push_back(_1684);
      }
      auto _9338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9336.size()),_9336.begin(),_9336.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1683 = _9338;
      _checked_ptr_1<long long> _ptr__1683(_1683 ? _1683->raw() : nullptr,_1683 ? _1683->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1683,_1678,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1676));
      std::vector<long long> _9339;
      for (int _1685 = (int)0, _9340 = _1676; _1685 < _9340 ; ++_1685)
      {
        _9339.push_back(_ptr__1678[_ptr__1683[_1685]]);
      }
      auto _9341 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9339.size()),_9339.begin(),_9339.end()));
      return _9341;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690){ return new mosek::fusion::BoundInterfaceVariable(_1686,_1687,_1688,_1689,_1690); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1686,_1687,_1688,_1689,_1690); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1687(_1687 ? _1687->raw() : nullptr, _1687 ? _1687->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1688(_1688 ? _1688->raw() : nullptr, _1688 ? _1688->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1689(_1689 ? _1689->raw() : nullptr, _1689 ? _1689->size(0) : 0);
    mosek::fusion::p_SliceVariable::_initialize(_1686,_1687,_1688,_1689);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1690;
  }
}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692){ return new mosek::fusion::BoundInterfaceVariable(_1691,_1692); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1691,_1692); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceVariable::_initialize(_1691);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1692;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceVariable :: dual() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1693 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__1693(_1693 ? _1693->raw() : nullptr,_1693 ? _1693->size(0) : 0);
  dual_lu((int)0,_1693,islower);
  return _1693;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__transpose() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__transpose(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696){
  _checked_ptr_1<int> _ptr__1694(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
  _checked_ptr_1<int> _ptr__1695(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
  _checked_ptr_1<int> _ptr__1696(_1696 ? _1696->raw() : nullptr, _1696 ? _1696->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1694,_1695,_1696))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698){
  _checked_ptr_1<int> _ptr__1697(_1697 ? _1697->raw() : nullptr, _1697 ? _1697->size(0) : 0);
  _checked_ptr_1<int> _ptr__1698(_1698 ? _1698->raw() : nullptr, _1698 ? _1698->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1697,_1698))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1699))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700){
  _checked_ptr_1<int> _ptr__1700(_1700 ? _1700->raw() : nullptr, _1700 ? _1700->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1700))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1701) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1701){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(_1701))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag(int _1702) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag(int _1702) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag(int _1702) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(int _1702){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(_1702))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704){
  _checked_ptr_1<int> _ptr__1703(_1703 ? _1703->raw() : nullptr, _1703 ? _1703->size(0) : 0);
  _checked_ptr_1<int> _ptr__1704(_1704 ? _1704->raw() : nullptr, _1704 ? _1704->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1703,_1704))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(int _1705,int _1706) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(int _1705,int _1706) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(int _1705,int _1706) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(int _1705,int _1706){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1705,_1706))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__from_(monty::rc_ptr< ::mosek::fusion::Variable > _1707){
  std::shared_ptr< monty::ndarray< int,1 > > _1708 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__1708(_1708 ? _1708->raw() : nullptr,_1708 ? _1708->size(0) : 0);
  int _1709 = _1707->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1710 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1709)));
  _checked_ptr_1<long long> _ptr__1710(_1710 ? _1710->raw() : nullptr,_1710 ? _1710->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1711 = nullptr;
  _checked_ptr_1<long long> _ptr__1711(_1711 ? _1711->raw() : nullptr,_1711 ? _1711->size(0) : 0);
  if ((_1707->getSize() == _1709))
  {
    {
      _1707->inst((int)0,_1710);
    }
  }
  else
  {
    {
      _1711 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1709)));
      _ptr__1711.update(_1711 ? _1711->raw() : nullptr, _1711 ? _1711->size(0) : 0);
      _1707->inst((int)0,_1711,(int)0,_1710);
    }
  }
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_1707->__mosek_2fusion_2Variable__getModel(),_1708,_1711,_1710,islower);
}
void mosek::fusion::p_BoundInterfaceVariable::destroy(){}void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713){ return new mosek::fusion::RangedVariable(_1712,_1713); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1712,_1713); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1712,_1713);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1712)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1712)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1712)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1712)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1712)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719){ return new mosek::fusion::RangedVariable(_1714,_1715,_1716,_1717,_1718,_1719); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1714,_1715,_1716,_1717,_1718,_1719); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1717(_1717 ? _1717->raw() : nullptr, _1717 ? _1717->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1718(_1718 ? _1718->raw() : nullptr, _1718 ? _1718->size(0) : 0);
    _checked_ptr_1<int> _ptr__1719(_1719 ? _1719->raw() : nullptr, _1719 ? _1719->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1714,_1715,_1717,_1716,_1718,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1719));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1719;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1718;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1715;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1717;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1720,_1721); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721) { return __mosek_2fusion_2RangedVariable__elementDesc(_1720,_1721); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721){
  _pubthis->elementName(_1720,_1721);
  _1721->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1721;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1722 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1723 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1723->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9342 = (int)1;
          int _9343 = _pubthis->getND();
          for (int _1724 = _9342; _1724 < _9343; ++_1724)
          {
            {
              _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1724);
            }
          }
        }
      }
      {}
      _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1722.get())->varnames(nativeidxs,_1723->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1725,std::shared_ptr< monty::ndarray< double,1 > > _1726){
  _checked_ptr_1<double> _ptr__1726(_1726 ? _1726->raw() : nullptr, _1726 ? _1726->size(0) : 0);
  dual_lu(_1725,_1726,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1727,std::shared_ptr< monty::ndarray< double,1 > > _1728){
  _checked_ptr_1<double> _ptr__1728(_1728 ? _1728->raw() : nullptr, _1728 ? _1728->size(0) : 0);
  dual_lu(_1727,_1728,true);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__upperBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__upperBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::upperBoundVar() { return __mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__upperBoundVar(){
  std::vector<long long> _9344;
  for (int _1729 = (int)0, _9345 = (int)((nativeidxs)->size(0)); _1729 < _9345 ; ++_1729)
  {
    _9344.push_back(((*nativeidxs)(_1729)));
  }
  auto _9346 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9344.size()),_9344.begin(),_9344.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9346,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__lowerBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__lowerBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::lowerBoundVar() { return __mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__lowerBoundVar(){
  std::vector<long long> _9347;
  for (int _1730 = (int)0, _9348 = (int)((nativeidxs)->size(0)); _1730 < _9348 ; ++_1730)
  {
    _9347.push_back(((*nativeidxs)(_1730)));
  }
  auto _9349 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9347.size()),_9347.begin(),_9347.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9349,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1731){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1731)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1732){
  _checked_ptr_1<int> _ptr__1732(_1732 ? _1732->raw() : nullptr, _1732 ? _1732->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1733 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1732)->size(0)))));
  _checked_ptr_1<long long> _ptr__1733(_1733 ? _1733->raw() : nullptr,_1733 ? _1733->size(0) : 0);
  int _9350 = (int)0;
  int _9351 = (int)((_1732)->size(0));
  for (int _1734 = _9350; _1734 < _9351; ++_1734)
  {
    {
      _ptr__1733[_1734] = _ptr__1732[_1734];
    }
  }
  return _1733;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736){ return new mosek::fusion::LinearPSDVariable(_1735,_1736); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1735,_1736); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1735,_1736);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742){ return new mosek::fusion::LinearPSDVariable(_1737,_1738,_1739,_1740,_1741,_1742); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1737,_1738,_1739,_1740,_1741,_1742); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1740(_1740 ? _1740->raw() : nullptr, _1740 ? _1740->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1742(_1742 ? _1742->raw() : nullptr, _1742 ? _1742->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1737,_1738,_1740,_1739,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1742));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1738;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1741;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1739;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1740;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1742;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1743 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9352 = (int)1;
  int _9353 = (int)((shape)->size(0));
  for (int _1744 = _9352; _1744 < _9353; ++_1744)
  {
    {
      _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1744)));
    }
  }
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1743->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1745) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1745); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1745){
  _checked_ptr_1<long long> _ptr__1745(_1745 ? _1745->raw() : nullptr, _1745 ? _1745->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1746) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1746); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1746){
  _checked_ptr_1<long long> _ptr__1746(_1746 ? _1746->raw() : nullptr, _1746 ? _1746->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1747){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1747)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1748){
  _checked_ptr_1<long long> _ptr__1748(_1748 ? _1748->raw() : nullptr, _1748 ? _1748->size(0) : 0);
  std::vector<long long> _9354;
  for (int _1749 = (int)0, _9355 = (int)((_1748)->size(0)); _1749 < _9355 ; ++_1749)
  {
    _9354.push_back((-safe_add( _ptr__1748[_1749],(int)1 )));
  }
  auto _9356 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9354.size()),_9354.begin(),_9354.end()));
  return _9356;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751){ return new mosek::fusion::PSDVariable(_1750,_1751); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1750,_1751); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1750,_1751);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1750)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1750)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1750)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1750)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1750)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1750)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758){ return new mosek::fusion::PSDVariable(_1752,_1753,_1754,_1755,_1756,_1757,_1758); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1752,_1753,_1754,_1755,_1756,_1757,_1758); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1755(_1755 ? _1755->raw() : nullptr, _1755 ? _1755->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1758(_1758 ? _1758->raw() : nullptr, _1758 ? _1758->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1752,_1753,_1755,_1754,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1755,_1756,_1757,_1758));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1754;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1758;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1753;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1755;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1756;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1757;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1759 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9357 = (int)1;
  int _9358 = (int)((shape)->size(0));
  for (int _1760 = _9357; _1760 < _9358; ++_1760)
  {
    {
      _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1760)));
    }
  }
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1759->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1761,_1762); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762) { return __mosek_2fusion_2PSDVariable__elementDesc(_1761,_1762); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762){
  _pubthis->elementName(_1761,_1762);
  _1762->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1762;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1763){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1763)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1764,int _1765,int _1766,std::shared_ptr< monty::ndarray< long long,1 > > _1767){
  _checked_ptr_1<int> _ptr__1764(_1764 ? _1764->raw() : nullptr, _1764 ? _1764->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1767(_1767 ? _1767->raw() : nullptr, _1767 ? _1767->size(0) : 0);
  int _1768 = (int)((_1764)->size(0));
  bool _1769 = (_1765 < _1766);
  int _9359;
  bool _9360 = _1769;
  if (_9360)
  {
    _9359 = _1765;
  }
  else
  {
    _9359 = _1766;
  }
  int _1770 = _9359;
  int _9361;
  bool _9362 = (!_1769);
  if (_9362)
  {
    _9361 = _1765;
  }
  else
  {
    _9361 = _1766;
  }
  int _1771 = _9361;
  int _1772 = (int)1;
  int _9363 = (int)0;
  int _9364 = _1770;
  for (int _1773 = _9363; _1773 < _9364; ++_1773)
  {
    {
      _1772 *= _ptr__1764[_1773];
    }
  }
  int _1774 = _ptr__1764[_1770];
  int _1775 = (int)1;
  int _9365 = safe_add( _1770,(int)1 );
  int _9366 = _1771;
  for (int _1776 = _9365; _1776 < _9366; ++_1776)
  {
    {
      _1775 *= _ptr__1764[_1776];
    }
  }
  int _1777 = _ptr__1764[_1771];
  int _1778 = (int)1;
  int _9367 = safe_add( _1771,(int)1 );
  int _9368 = _1768;
  for (int _1779 = _9367; _1779 < _9368; ++_1779)
  {
    {
      _1778 *= _ptr__1764[_1779];
    }
  }
  int _1780 = safe_mul( safe_mul( safe_mul( safe_mul( _1772,_1774 ),_1775 ),_1777 ),_1778 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1781 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1780)));
  _checked_ptr_1<long long> _ptr__1781(_1781 ? _1781->raw() : nullptr,_1781 ? _1781->size(0) : 0);
  int _1782 = _1778;
  int _1783 = safe_mul( _1782,_1777 );
  int _1784 = safe_mul( _1783,_1775 );
  int _1785 = safe_mul( _1784,_1784 );
  {
    int _1786 = (int)0;
    int _9369 = (int)0;
    int _9370 = _1772;
    for (int _1787 = _9369; _1787 < _9370; ++_1787)
    {
      {
        int _9371 = (int)0;
        int _9372 = _1777;
        for (int _1788 = _9371; _1788 < _9372; ++_1788)
        {
          {
            int _9373 = (int)0;
            int _9374 = _1775;
            for (int _1789 = _9373; _1789 < _9374; ++_1789)
            {
              {
                int _9375 = _1788;
                int _9376 = _1774;
                for (int _1790 = _9375; _1790 < _9376; ++_1790)
                {
                  {
                    int _9377 = (int)0;
                    int _9378 = _1778;
                    for (int _1791 = _9377; _1791 < _9378; ++_1791)
                    {
                      {
                        _ptr__1781[safe_add( safe_add( safe_add( safe_add( safe_mul( _1787,_1785 ),safe_mul( _1790,_1784 ) ),safe_mul( _1789,_1783 ) ),safe_mul( _1788,_1782 ) ),_1791 )] = (-safe_add( _ptr__1767[_1786],(int)1 ));
                        _ptr__1781[safe_add( safe_add( safe_add( safe_add( safe_mul( _1787,_1785 ),safe_mul( _1788,_1784 ) ),safe_mul( _1789,_1783 ) ),safe_mul( _1790,_1782 ) ),_1791 )] = (-safe_add( _ptr__1767[_1786],(int)1 ));
                        ++ _1786;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1781;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793){ return new mosek::fusion::SymLinearVariable(_1792,_1793); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1792,_1793); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1792,_1793);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799){ return new mosek::fusion::SymLinearVariable(_1794,_1795,_1796,_1797,_1798,_1799); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1794,_1795,_1796,_1797,_1798,_1799); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1798(_1798 ? _1798->raw() : nullptr, _1798 ? _1798->size(0) : 0);
    _checked_ptr_1<int> _ptr__1799(_1799 ? _1799->raw() : nullptr, _1799 ? _1799->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1794,_1795,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1797),(int)(_1797)}),_1796,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1797,_1798),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1797,_1798,_1799));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1795;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1799;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1798;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1797;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1800 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9379 = (int)0;
          int _9380 = (int)((nativeidxs)->size(0));
          for (int _1801 = _9379; _1801 < _9380; ++_1801)
          {
            {
              std::string _9381;
              bool _9382 = ((int)((name).size()) == (int)0);
              if (_9382)
              {
                _9381 = std::string ("");
              }
              else
              {
                _9381 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1801 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1801 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1800.get())->varname(((*nativeidxs)(_1801)),_9381);
            }
          }
        }
      }
      else
      {
        {
          int _9383 = (int)0;
          int _9384 = (int)((sparsity)->size(0));
          for (int _1802 = _9383; _1802 < _9384; ++_1802)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1800.get())->varname(((*nativeidxs)(_1802)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1802)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1802)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1803){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1803)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1804,std::shared_ptr< monty::ndarray< long long,1 > > _1805,std::shared_ptr< monty::ndarray< int,1 > > _1806){
  _checked_ptr_1<long long> _ptr__1805(_1805 ? _1805->raw() : nullptr, _1805 ? _1805->size(0) : 0);
  _checked_ptr_1<int> _ptr__1806(_1806 ? _1806->raw() : nullptr, _1806 ? _1806->size(0) : 0);
  if ((NULL == _1805.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1807 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1804,_1804 ))));
      _checked_ptr_1<long long> _ptr__1807(_1807 ? _1807->raw() : nullptr,_1807 ? _1807->size(0) : 0);
      int _1808 = (int)0;
      {
        int _9385 = (int)0;
        int _9386 = _1804;
        for (int _1809 = _9385; _1809 < _9386; ++_1809)
        {
          {
            _ptr__1807[safe_add( safe_mul( _1809,_1804 ),_1809 )] = safe_add( _ptr__1806[_1808],(int)1 );
            ++ _1808;
            int _9387 = safe_add( _1809,(int)1 );
            int _9388 = _1804;
            for (int _1810 = _9387; _1810 < _9388; ++_1810)
            {
              {
                _ptr__1807[safe_add( safe_mul( _1809,_1804 ),_1810 )] = safe_add( _ptr__1806[_1808],(int)1 );
                _ptr__1807[safe_add( safe_mul( _1810,_1804 ),_1809 )] = safe_add( _ptr__1806[_1808],(int)1 );
                ++ _1808;
              }
            }
          }
        }
      }
      return _1807;
    }
  }
  else
  {
    {
      int _1811 = (int)0;
      {
        int _9389 = (int)0;
        int _9390 = (int)((_1805)->size(0));
        for (int _1812 = _9389; _1812 < _9390; ++_1812)
        {
          {
            int _9391;
            bool _9392 = ((_ptr__1805[_1812] % safe_add( _1804,(int)1 )) == (int)0);
            if (_9392)
            {
              _9391 = (int)1;
            }
            else
            {
              _9391 = (int)2;
            }
            _1811 += _9391;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1813 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1811)));
      _checked_ptr_1<long long> _ptr__1813(_1813 ? _1813->raw() : nullptr,_1813 ? _1813->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1814 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1811)));
      _checked_ptr_1<long long> _ptr__1814(_1814 ? _1814->raw() : nullptr,_1814 ? _1814->size(0) : 0);
      {
        int _1815 = (int)0;
        int _9393 = (int)0;
        int _9394 = (int)((_1805)->size(0));
        for (int _1816 = _9393; _1816 < _9394; ++_1816)
        {
          {
            long long _1817 = (_ptr__1805[_1816] / _1804);
            long long _1818 = (_ptr__1805[_1816] % _1804);
            _ptr__1813[_1815] = _ptr__1805[_1816];
            _ptr__1814[_1815] = safe_add( _ptr__1806[_1816],(int)1 );
            ++ _1815;
            if ((_1817 != _1818))
            {
              {
                _ptr__1813[_1815] = safe_add( safe_mul( _1818,_1804 ),_1817 );
                _ptr__1814[_1815] = safe_add( _ptr__1806[_1816],(int)1 );
                ++ _1815;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9395;
      for (int _1820 = (int)0, _9396 = _1811; _1820 < _9396 ; ++_1820)
      {
        _9395.push_back(_1820);
      }
      auto _9397 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9395.size()),_9395.begin(),_9395.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1819 = _9397;
      _checked_ptr_1<long long> _ptr__1819(_1819 ? _1819->raw() : nullptr,_1819 ? _1819->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1819,_1813,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1811));
      std::vector<long long> _9398;
      for (int _1821 = (int)0, _9399 = _1811; _1821 < _9399 ; ++_1821)
      {
        _9398.push_back(_ptr__1814[_ptr__1819[_1821]]);
      }
      auto _9400 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9398.size()),_9398.begin(),_9398.end()));
      return _9400;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1822,std::shared_ptr< monty::ndarray< long long,1 > > _1823){
  _checked_ptr_1<long long> _ptr__1823(_1823 ? _1823->raw() : nullptr, _1823 ? _1823->size(0) : 0);
  if ((NULL == _1823.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1824 = (int)0;
      {
        int _9401 = (int)0;
        int _9402 = (int)((_1823)->size(0));
        for (int _1825 = _9401; _1825 < _9402; ++_1825)
        {
          {
            int _9403;
            bool _9404 = ((_ptr__1823[_1825] % safe_add( _1822,(int)1 )) == (int)0);
            if (_9404)
            {
              _9403 = (int)1;
            }
            else
            {
              _9403 = (int)2;
            }
            _1824 += _9403;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1826 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1824)));
      _checked_ptr_1<long long> _ptr__1826(_1826 ? _1826->raw() : nullptr,_1826 ? _1826->size(0) : 0);
      {
        int _1827 = (int)0;
        int _9405 = (int)0;
        int _9406 = (int)((_1823)->size(0));
        for (int _1828 = _9405; _1828 < _9406; ++_1828)
        {
          {
            long long _1829 = (_ptr__1823[_1828] / _1822);
            long long _1830 = (_ptr__1823[_1828] % _1822);
            _ptr__1826[_1827] = _ptr__1823[_1828];
            ++ _1827;
            if ((_1829 != _1830))
            {
              {
                _ptr__1826[_1827] = safe_add( safe_mul( _1830,_1822 ),_1829 );
                ++ _1827;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9407;
      for (int _1832 = (int)0, _9408 = _1824; _1832 < _9408 ; ++_1832)
      {
        _9407.push_back(_1832);
      }
      auto _9409 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9407.size()),_9407.begin(),_9407.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1831 = _9409;
      _checked_ptr_1<long long> _ptr__1831(_1831 ? _1831->raw() : nullptr,_1831 ? _1831->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1831,_1826,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1824));
      std::vector<long long> _9410;
      for (int _1833 = (int)0, _9411 = _1824; _1833 < _9411 ; ++_1833)
      {
        _9410.push_back(_ptr__1826[_ptr__1831[_1833]]);
      }
      auto _9412 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9410.size()),_9410.begin(),_9410.end()));
      return _9412;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835){ return new mosek::fusion::LinearVariable(_1834,_1835); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1834,_1835); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1834,_1835);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1834)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1834)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1834)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1834)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1834)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841){ return new mosek::fusion::LinearVariable(_1836,_1837,_1838,_1839,_1840,_1841); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1836,_1837,_1838,_1839,_1840,_1841); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1839(_1839 ? _1839->raw() : nullptr, _1839 ? _1839->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1840(_1840 ? _1840->raw() : nullptr, _1840 ? _1840->size(0) : 0);
    _checked_ptr_1<int> _ptr__1841(_1841 ? _1841->raw() : nullptr, _1841 ? _1841->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1836,_1837,_1839,_1838,_1840,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1841));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1837;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1841;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1840;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1839;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1842 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1842->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9413 = (int)1;
      int _9414 = (int)((shape)->size(0));
      for (int _1843 = _9413; _1843 < _9414; ++_1843)
      {
        {
          _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1843)));
        }
      }
    }
  }
  {}
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sparsity.get()))
  {
    {
      _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1842->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1844 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1845 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1845->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9415 = (int)1;
          int _9416 = _pubthis->getND();
          for (int _1846 = _9415; _1846 < _9416; ++_1846)
          {
            {
              _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1846);
            }
          }
        }
      }
      {}
      _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9417;
      bool _9418 = (_pubthis->getND() > (int)0);
      if (_9418)
      {
        _9417 = _pubthis->getShape();
      }
      else
      {
        _9417 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1844.get())->varnames(nativeidxs,_1845->toString(),_9417,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1847){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1847)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1848){
  _checked_ptr_1<int> _ptr__1848(_1848 ? _1848->raw() : nullptr, _1848 ? _1848->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1849 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1848)->size(0)))));
  _checked_ptr_1<long long> _ptr__1849(_1849 ? _1849->raw() : nullptr,_1849 ? _1849->size(0) : 0);
  int _9419 = (int)0;
  int _9420 = (int)((_1848)->size(0));
  for (int _1850 = _9419; _1850 < _9420; ++_1850)
  {
    {
      _ptr__1849[_1850] = _ptr__1848[_1850];
    }
  }
  return _1849;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852){ return new mosek::fusion::ConicVariable(_1851,_1852); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1851,_1852); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1851,_1852);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1851)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1851)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1851)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1851)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1851)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1851)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857){ return new mosek::fusion::ConicVariable(_1853,_1854,_1855,_1856,_1857); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1853,_1854,_1855,_1856,_1857); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1856(_1856 ? _1856->raw() : nullptr, _1856 ? _1856->size(0) : 0);
    _checked_ptr_1<int> _ptr__1857(_1857 ? _1857->raw() : nullptr, _1857 ? _1857->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1853,_1854,_1856,_1855,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1857));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1854;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1855;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1856;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1857;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1858 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9421 = (int)1;
  int _9422 = (int)((shape)->size(0));
  for (int _1859 = _9421; _1859 < _9422; ++_1859)
  {
    {
      _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1859)));
    }
  }
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1858->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1860 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1861 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _9423 = (int)1;
      int _9424 = _pubthis->getND();
      for (int _1862 = _9423; _1862 < _9424; ++_1862)
      {
        {
          _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1862);
        }
      }
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9425;
      bool _9426 = (_pubthis->getND() > (int)0);
      if (_9426)
      {
        _9425 = _pubthis->getShape();
      }
      else
      {
        _9425 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1860.get())->varnames(nativeidxs,_1861->toString(),_9425,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1863){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1863)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1864){
  _checked_ptr_1<int> _ptr__1864(_1864 ? _1864->raw() : nullptr, _1864 ? _1864->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1865 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1864)->size(0)))));
  _checked_ptr_1<long long> _ptr__1865(_1865 ? _1865->raw() : nullptr,_1865 ? _1865->size(0) : 0);
  int _9427 = (int)0;
  int _9428 = (int)((_1864)->size(0));
  for (int _1866 = _9427; _1866 < _9428; ++_1866)
  {
    {
      _ptr__1865[_1866] = _ptr__1864[_1866];
    }
  }
  return _1865;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1867,    monty::rc_ptr< ::mosek::fusion::Model > _1868){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1867,_1868);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1867)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1867)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1867)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1867)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1867)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1869,    const std::string &  _1870,    std::shared_ptr< monty::ndarray< int,1 > > _1871,    long long _1872,    std::shared_ptr< monty::ndarray< long long,1 > > _1873,    std::shared_ptr< monty::ndarray< long long,1 > > _1874){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1871(_1871 ? _1871->raw() : nullptr, _1871 ? _1871->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1873(_1873 ? _1873->raw() : nullptr, _1873 ? _1873->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1874(_1874 ? _1874->raw() : nullptr, _1874 ? _1874->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1869,_1871,_1873,_1874);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1870;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1872;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1871;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1873;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1874;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1875,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1876) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1875,_1876); }void mosek::fusion::p_ModelVariable::elementName(long long _1875,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1876){
  std::string _9429;
  bool _9430 = ((int)((name).size()) == (int)0);
  if (_9430)
  {
    _9429 = std::string ("_");
  }
  else
  {
    _9429 = name;
  }
  _1876->__mosek_2fusion_2Utils_2StringBuffer__a(_9429)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1875))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::ModelVariable :: remove() { mosek::fusion::p_ModelVariable::_get_impl(this)->remove(); }void mosek::fusion::p_ModelVariable::remove(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->removeVariableBlock(varid);
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1878){ return new mosek::fusion::NilVariable(_1878); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1878) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1878); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1878){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1878(_1878 ? _1878->raw() : nullptr, _1878 ? _1878->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1878),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _9431;
    for (int _1879 = (int)0, _9432 = (int)((_1878)->size(0)); _1879 < _9432 ; ++_1879)
    {
      _9431.push_back(_ptr__1878[_1879]);
    }
    auto _9433 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9431.size()),_9431.begin(),_9431.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _9433;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1880,_1881); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881) { return __mosek_2fusion_2NilVariable__elementDesc(_1880,_1881); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881){
  return _1881;
}
void mosek::fusion::NilVariable :: elementName(long long _1882,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1883) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1882,_1883); }void mosek::fusion::p_NilVariable::elementName(long long _1882,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1883){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885,std::shared_ptr< monty::ndarray< long long,1 > > _1886) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1884,_1885,_1886); }int mosek::fusion::p_NilVariable::inst(int _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885,std::shared_ptr< monty::ndarray< long long,1 > > _1886){
  _checked_ptr_1<long long> _ptr__1885(_1885 ? _1885->raw() : nullptr, _1885 ? _1885->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1886(_1886 ? _1886->raw() : nullptr, _1886 ? _1886->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1887,std::shared_ptr< monty::ndarray< long long,1 > > _1888) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1887,_1888); }void mosek::fusion::p_NilVariable::inst(int _1887,std::shared_ptr< monty::ndarray< long long,1 > > _1888){
  _checked_ptr_1<long long> _ptr__1888(_1888 ? _1888->raw() : nullptr, _1888 ? _1888->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1889,bool _1890) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1889,_1890); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1889,bool _1890){
  _checked_ptr_1<double> _ptr__1889(_1889 ? _1889->raw() : nullptr, _1889 ? _1889->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1891,std::shared_ptr< monty::ndarray< double,1 > > _1892,bool _1893) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1891,_1892,_1893); }void mosek::fusion::p_NilVariable::values(int _1891,std::shared_ptr< monty::ndarray< double,1 > > _1892,bool _1893){
  _checked_ptr_1<double> _ptr__1892(_1892 ? _1892->raw() : nullptr, _1892 ? _1892->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894){
  _checked_ptr_1<int> _ptr__1894(_1894 ? _1894->raw() : nullptr, _1894 ? _1894->size(0) : 0);
  std::vector<int> _9434;
  for (int _1895 = (int)0, _9435 = (int)((shape)->size(0)); _1895 < _9435 ; ++_1895)
  {
    _9434.push_back((int)1);
  }
  auto _9436 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9434.size()),_9434.begin(),_9434.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9436)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1896) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1896){
  std::vector<int> _9437;
  for (int _1897 = (int)0, _9438 = (int)((shape)->size(0)); _1897 < _9438 ; ++_1897)
  {
    _9437.push_back((int)1);
  }
  auto _9439 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9437.size()),_9437.begin(),_9437.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9439)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899){
  _checked_ptr_1<int> _ptr__1898(_1898 ? _1898->raw() : nullptr, _1898 ? _1898->size(0) : 0);
  _checked_ptr_1<int> _ptr__1899(_1899 ? _1899->raw() : nullptr, _1899 ? _1899->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1898)->size(0))) || ((int)((shape)->size(0)) != (int)((_1899)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _9440 = (int)0;
  int _9441 = (int)((_1898)->size(0));
  for (int _1900 = _9440; _1900 < _9441; ++_1900)
  {
    {
      if (((_ptr__1899[_1900] > _ptr__1898[_1900]) || ((_ptr__1898[_1900] < (int)0) || (_ptr__1899[_1900] >= ((*shape)(_1900))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _9442;
  for (int _1901 = (int)0, _9443 = (int)((shape)->size(0)); _1901 < _9443 ; ++_1901)
  {
    _9442.push_back((_ptr__1899[_1901] - _ptr__1898[_1901]));
  }
  auto _9444 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9442.size()),_9442.begin(),_9442.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9444)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1902,int _1903) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1902,int _1903){
  if (((_1903 > _1902) || ((_1902 < (int)0) || (_1903 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1903 - _1902))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1904,    monty::rc_ptr< ::mosek::fusion::Model > _1905){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1905;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1904)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1904)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1904)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1906,    std::shared_ptr< monty::ndarray< int,1 > > _1907,    std::shared_ptr< monty::ndarray< long long,1 > > _1908,    std::shared_ptr< monty::ndarray< long long,1 > > _1909){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1907(_1907 ? _1907->raw() : nullptr, _1907 ? _1907->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1908(_1908 ? _1908->raw() : nullptr, _1908 ? _1908->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1909(_1909 ? _1909->raw() : nullptr, _1909 ? _1909->size(0) : 0);
    model = _1906;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1907;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1908;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1909;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1910 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1910->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9445 = (int)1;
      int _9446 = (int)((shape)->size(0));
      for (int _1911 = _9445; _1911 < _9446; ++_1911)
      {
        {
          _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1911)));
        }
      }
    }
  }
  {}
  _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1910->toString();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913,monty::rc_ptr< ::mosek::fusion::WorkStack > _1914) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1912,_1913,_1914); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913,monty::rc_ptr< ::mosek::fusion::WorkStack > _1914){
  int _1915 = (int)((nativeidxs)->size(0));
  int _1916 = _1915;
  int _1917 = (int)((shape)->size(0));
  bool _1918 = (NULL != sparsity.get());
  _1912->alloc_expr(_1917,_1916,_1915,_1918);
  int _1919 = mosek::fusion::p_WorkStack::_get_impl(_1912)->ptr_base;
  int _1920 = mosek::fusion::p_WorkStack::_get_impl(_1912)->nidxs_base;
  int _1921 = mosek::fusion::p_WorkStack::_get_impl(_1912)->sp_base;
  int _1922 = mosek::fusion::p_WorkStack::_get_impl(_1912)->cof_base;
  int _1923 = mosek::fusion::p_WorkStack::_get_impl(_1912)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1924 = mosek::fusion::p_WorkStack::_get_impl(_1912)->i32;
  _checked_ptr_1<int> _ptr__1924(_1924 ? _1924->raw() : nullptr,_1924 ? _1924->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1925 = mosek::fusion::p_WorkStack::_get_impl(_1912)->i64;
  _checked_ptr_1<long long> _ptr__1925(_1925 ? _1925->raw() : nullptr,_1925 ? _1925->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1926 = mosek::fusion::p_WorkStack::_get_impl(_1912)->f64;
  _checked_ptr_1<double> _ptr__1926(_1926 ? _1926->raw() : nullptr,_1926 ? _1926->size(0) : 0);
  int _9447 = (int)0;
  int _9448 = _1917;
  for (int _1927 = _9447; _1927 < _9448; ++_1927)
  {
    {
      _ptr__1924[safe_add( _1923,_1927 )] = ((*shape)(_1927));
    }
  }
  {
    int _9449 = (int)0;
    int _9450 = safe_add( _1915,(int)1 );
    for (int _1928 = _9449; _1928 < _9450; ++_1928)
    {
      {
        _ptr__1924[safe_add( _1919,_1928 )] = _1928;
      }
    }
    int _9451 = (int)0;
    int _9452 = _1915;
    for (int _1929 = _9451; _1929 < _9452; ++_1929)
    {
      {
        _ptr__1925[safe_add( _1920,_1929 )] = ((*nativeidxs)(_1929));
      }
    }
    if (_1918)
    {
      {
        int _9453 = (int)0;
        int _9454 = _1915;
        for (int _1930 = _9453; _1930 < _9454; ++_1930)
        {
          {
            _ptr__1925[safe_add( _1921,_1930 )] = ((*sparsity)(_1930));
          }
        }
      }
    }
    {}
    int _9455 = (int)0;
    int _9456 = _1915;
    for (int _1931 = _9455; _1931 < _9456; ++_1931)
    {
      {
        _ptr__1926[safe_add( _1922,_1931 )] = 1.0;
      }
    }
  }
}
void mosek::fusion::BaseVariable :: remove() { mosek::fusion::p_BaseVariable::_get_impl(this)->remove(); }void mosek::fusion::p_BaseVariable::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original variables can be removed"));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1932,int _1933) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1932,_1933); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1932,int _1933) { return __mosek_2fusion_2BaseVariable__fromTril(_1932,_1933); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1932,int _1933){
  if (((_1932 < (int)0) || (_1932 >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension"));
    }
  }
  else if((((*shape)(_1932)) != (safe_mul( _1933,safe_add( _1933,(int)1 ) ) / (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  {}
  int _1934 = (int)1;
  int _9457 = (int)0;
  int _9458 = _1932;
  for (int _1935 = _9457; _1935 < _9458; ++_1935)
  {
    {
      _1934 *= ((*shape)(_1935));
    }
  }
  int _1936 = ((*shape)(_1932));
  int _1937 = (int)1;
  int _9459 = safe_add( _1932,(int)1 );
  int _9460 = (int)((shape)->size(0));
  for (int _1938 = _9459; _1938 < _9460; ++_1938)
  {
    {
      _1937 *= ((*shape)(_1938));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1939 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((shape)->size(0)),(int)1 ))));
  _checked_ptr_1<int> _ptr__1939(_1939 ? _1939->raw() : nullptr,_1939 ? _1939->size(0) : 0);
  int _9461 = (int)0;
  int _9462 = _1932;
  for (int _1940 = _9461; _1940 < _9462; ++_1940)
  {
    {
      _ptr__1939[_1940] = ((*shape)(_1940));
    }
  }
  _ptr__1939[_1932] = _1933;
  _ptr__1939[safe_add( _1932,(int)1 )] = _1933;
  int _9463 = safe_add( _1932,(int)1 );
  int _9464 = (int)((shape)->size(0));
  for (int _1941 = _9463; _1941 < _9464; ++_1941)
  {
    {
      _ptr__1939[safe_add( _1941,(int)1 )] = ((*shape)(_1941));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1942 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( safe_mul( safe_mul( _1934,_1933 ),_1933 ),_1937 ))));
      _checked_ptr_1<long long> _ptr__1942(_1942 ? _1942->raw() : nullptr,_1942 ? _1942->size(0) : 0);
      int _1943 = (int)0;
      int _9465 = (int)0;
      int _9466 = _1934;
      for (int _1944 = _9465; _1944 < _9466; ++_1944)
      {
        {
          int _9467 = (int)0;
          int _9468 = _1933;
          for (int _1945 = _9467; _1945 < _9468; ++_1945)
          {
            {
              int _9469 = (int)0;
              int _9470 = _1933;
              for (int _1946 = _9469; _1946 < _9470; ++_1946)
              {
                {
                  int _9471 = (int)0;
                  int _9472 = _1937;
                  for (int _1947 = _9471; _1947 < _9472; ++_1947)
                  {
                    {
                      if ((_1945 >= _1946))
                      {
                        {
                          _ptr__1942[_1943] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1944,_1936 ),_1937 ),safe_mul( safe_add( (safe_mul( _1945,safe_add( _1945,(int)1 ) ) / (int)2),_1946 ),_1937 ) ),_1947 )));
                        }
                      }
                      else
                      {
                        {
                          _ptr__1942[_1943] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1944,_1936 ),_1937 ),safe_mul( safe_add( (safe_mul( _1946,safe_add( _1946,(int)1 ) ) / (int)2),_1945 ),_1937 ) ),_1947 )));
                        }
                      }
                      ++ _1943;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1939,nullptr,_1942)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1948 = (int)0;
      int _9473 = (int)0;
      int _9474 = (int)((sparsity)->size(0));
      for (int _1949 = _9473; _1949 < _9474; ++_1949)
      {
        {
          long long _1950 = ((((*sparsity)(_1949)) / _1937) % _1936);
          int _1951 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1950 ) ),safe_add( (int)1,safe_mul( (int)2,_1950 ) ) )))) / (int)4);
          long long _1952 = (((*sparsity)(_1949)) - (safe_mul( _1951,safe_add( _1951,(int)1 ) ) / (int)2));
          if ((_1951 == _1952))
          {
            {
              _1948 += (int)1;
            }
          }
          else
          {
            {
              _1948 += (int)2;
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1953 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1953(_1953 ? _1953->raw() : nullptr,_1953 ? _1953->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1954 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1954(_1954 ? _1954->raw() : nullptr,_1954 ? _1954->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1955 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1955(_1955 ? _1955->raw() : nullptr,_1955 ? _1955->size(0) : 0);
      int _9475 = (int)0;
      int _9476 = _1948;
      for (int _1956 = _9475; _1956 < _9476; ++_1956)
      {
        {
          _ptr__1955[_1956] = _1956;
        }
      }
      int _1957 = (int)0;
      int _9477 = (int)0;
      int _9478 = (int)((sparsity)->size(0));
      for (int _1958 = _9477; _1958 < _9478; ++_1958)
      {
        {
          long long _1959 = (((*sparsity)(_1958)) / safe_mul( _1936,_1937 ));
          long long _1960 = ((((*sparsity)(_1958)) / _1937) % _1936);
          long long _1961 = (((*sparsity)(_1958)) % _1937);
          int _1962 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1960 ) ),safe_add( (int)1,safe_mul( (int)2,_1960 ) ) )))) / (int)4);
          long long _1963 = (((*sparsity)(_1958)) - (safe_mul( _1962,safe_add( _1962,(int)1 ) ) / (int)2));
          if ((_1962 == _1963))
          {
            {
              _ptr__1953[_1957] = ((*nativeidxs)(_1958));
              _ptr__1954[_1957] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1962,_1933 ),_1963 ),_1937 ) ),_1961 );
              _1957 += (int)1;
            }
          }
          else
          {
            {
              _ptr__1953[_1957] = ((*nativeidxs)(_1958));
              _ptr__1953[safe_add( _1957,(int)1 )] = ((*nativeidxs)(_1958));
              _ptr__1954[_1957] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1962,_1933 ),_1963 ),_1937 ) ),_1961 );
              _ptr__1954[safe_add( _1957,(int)1 )] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1963,_1933 ),_1962 ),_1937 ) ),_1961 );
              _1957 += (int)2;
            }
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_1955,_1953,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1948));
      std::vector<long long> _9479;
      for (int _1964 = (int)0, _9480 = _1948; _1964 < _9480 ; ++_1964)
      {
        _9479.push_back(_ptr__1954[_ptr__1955[_1964]]);
      }
      auto _9481 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9479.size()),_9479.begin(),_9479.end()));
      std::vector<long long> _9482;
      for (int _1965 = (int)0, _9483 = _1948; _1965 < _9483 ; ++_1965)
      {
        _9482.push_back(_ptr__1953[_ptr__1955[_1965]]);
      }
      auto _9484 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9482.size()),_9482.begin(),_9482.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1939,_9481,_9484)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1966) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1966); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1966) { return __mosek_2fusion_2BaseVariable__fromTril(_1966); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__fromTril(int _1966) { return __mosek_2fusion_2BaseVariable__fromTril(_1966); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1966){
  return _pubthis->__mosek_2fusion_2BaseVariable__fromTril((int)0,_1966);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril(int _1967,int _1968) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(_1967,_1968); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril(int _1967,int _1968) { return __mosek_2fusion_2BaseVariable__tril(_1967,_1968); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(int _1967,int _1968){
  if (((_1967 < (int)0) || ((_1967 >= _1968) || (_1968 >= (int)((shape)->size(0))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension specification"));
    }
  }
  else
  {
    {
      if ((((*shape)(_1967)) != ((*shape)(_1968))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Operation only valid for square variables"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((shape)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__1969(_1969 ? _1969->raw() : nullptr,_1969 ? _1969->size(0) : 0);
  int _9485 = (int)0;
  int _9486 = _1967;
  for (int _1970 = _9485; _1970 < _9486; ++_1970)
  {
    {
      _ptr__1969[_1970] = ((*shape)(_1970));
    }
  }
  _ptr__1969[_1967] = (safe_mul( ((*shape)(_1967)),safe_add( ((*shape)(_1967)),(int)1 ) ) / (int)2);
  int _9487 = safe_add( _1967,(int)1 );
  int _9488 = _1968;
  for (int _1971 = _9487; _1971 < _9488; ++_1971)
  {
    {
      _ptr__1969[_1971] = ((*shape)(_1971));
    }
  }
  int _9489 = safe_add( _1968,(int)1 );
  int _9490 = (int)((shape)->size(0));
  for (int _1972 = _9489; _1972 < _9490; ++_1972)
  {
    {
      _ptr__1969[(_1972 - (int)1)] = ((*shape)(_1972));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      int _1973 = (int)1;
      int _9491 = (int)0;
      int _9492 = _1967;
      for (int _1974 = _9491; _1974 < _9492; ++_1974)
      {
        {
          _1973 *= ((*shape)(_1974));
        }
      }
      int _1975 = ((*shape)(_1967));
      int _1976 = (int)1;
      int _9493 = safe_add( _1967,(int)1 );
      int _9494 = _1968;
      for (int _1977 = _9493; _1977 < _9494; ++_1977)
      {
        {
          _1976 *= ((*shape)(_1977));
        }
      }
      int _1978 = ((*shape)(_1968));
      int _1979 = (int)1;
      int _9495 = safe_add( _1968,(int)1 );
      int _9496 = (int)((shape)->size(0));
      for (int _1980 = _9495; _1980 < _9496; ++_1980)
      {
        {
          _1979 *= ((*shape)(_1980));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1981 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((safe_mul( safe_mul( safe_mul( safe_mul( _1973,_1976 ),_1979 ),_1975 ),safe_add( _1975,(int)1 ) ) / (int)2))));
      _checked_ptr_1<long long> _ptr__1981(_1981 ? _1981->raw() : nullptr,_1981 ? _1981->size(0) : 0);
      int _1982 = (int)0;
      int _9497 = (int)0;
      int _9498 = _1973;
      for (int _1983 = _9497; _1983 < _9498; ++_1983)
      {
        {
          int _9499 = (int)0;
          int _9500 = _1975;
          for (int _1984 = _9499; _1984 < _9500; ++_1984)
          {
            {
              int _9501 = (int)0;
              int _9502 = safe_add( _1984,(int)1 );
              for (int _1985 = _9501; _1985 < _9502; ++_1985)
              {
                {
                  int _9503 = (int)0;
                  int _9504 = _1976;
                  for (int _1986 = _9503; _1986 < _9504; ++_1986)
                  {
                    {
                      int _9505 = (int)0;
                      int _9506 = _1979;
                      for (int _1987 = _9505; _1987 < _9506; ++_1987)
                      {
                        {
                          _ptr__1981[_1982] = ((*nativeidxs)(safe_add( _1987,safe_mul( _1979,safe_add( _1985,safe_mul( _1978,safe_add( _1986,safe_mul( _1976,safe_add( _1984,safe_mul( _1975,_1983 ) ) ) ) ) ) ) )));
                          _1982 += (int)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1969,nullptr,_1981)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1988 = (int)1;
      int _9507 = (int)0;
      int _9508 = _1967;
      for (int _1989 = _9507; _1989 < _9508; ++_1989)
      {
        {
          _1988 *= ((*shape)(_1989));
        }
      }
      int _1990 = ((*shape)(_1967));
      int _1991 = (int)1;
      int _9509 = safe_add( _1967,(int)1 );
      int _9510 = _1968;
      for (int _1992 = _9509; _1992 < _9510; ++_1992)
      {
        {
          _1991 *= ((*shape)(_1992));
        }
      }
      int _1993 = ((*shape)(_1968));
      int _1994 = (int)1;
      int _9511 = safe_add( _1968,(int)1 );
      int _9512 = (int)((shape)->size(0));
      for (int _1995 = _9511; _1995 < _9512; ++_1995)
      {
        {
          _1994 *= ((*shape)(_1995));
        }
      }
      int _1996 = (int)1;
      int _1997 = _1994;
      int _1998 = safe_mul( _1997,_1993 );
      int _1999 = safe_mul( _1998,_1991 );
      int _2000 = safe_mul( _1999,_1990 );
      int _2001 = (int)0;
      int _9513 = (int)0;
      int _9514 = (int)((sparsity)->size(0));
      for (int _2002 = _9513; _2002 < _9514; ++_2002)
      {
        {
          if ((((((*sparsity)(_2002)) / _1999) % _1990) >= ((((*sparsity)(_2002)) / _1997) % _1993)))
          {
            {
              ++ _2001;
            }
          }
          {}
        }
      }
      int _2003 = (int)1;
      int _2004 = _1994;
      int _2005 = safe_mul( _2004,_1991 );
      int _2006 = (safe_mul( safe_mul( _2005,_1990 ),safe_add( _1990,(int)1 ) ) / (int)2);
      std::shared_ptr< monty::ndarray< long long,1 > > _2007 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2007(_2007 ? _2007->raw() : nullptr,_2007 ? _2007->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2008 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2008(_2008 ? _2008->raw() : nullptr,_2008 ? _2008->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2009 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2009(_2009 ? _2009->raw() : nullptr,_2009 ? _2009->size(0) : 0);
      int _2010 = (int)0;
      {
        int _9515 = (int)0;
        int _9516 = (int)((sparsity)->size(0));
        for (int _2011 = _9515; _2011 < _9516; ++_2011)
        {
          {
            if ((((((*sparsity)(_2011)) / _1999) % _1990) >= ((((*sparsity)(_2011)) / _1997) % _1993)))
            {
              {
                long long _2012 = (((*sparsity)(_2011)) / _2000);
                long long _2013 = ((((*sparsity)(_2011)) / _1999) % _1990);
                long long _2014 = ((((*sparsity)(_2011)) / _1998) % _1991);
                long long _2015 = ((((*sparsity)(_2011)) / _1997) % _1993);
                long long _2016 = ((((*sparsity)(_2011)) / _1996) % _1994);
                _ptr__2008[_2010] = ((*nativeidxs)(_2011));
                _ptr__2009[_2010] = safe_add( safe_add( safe_add( safe_mul( _2006,_2012 ),safe_mul( _2005,safe_add( (safe_mul( _2013,safe_add( _2013,(int)1 ) ) / (int)2),_2015 ) ) ),safe_mul( _2004,_2014 ) ),safe_mul( _2003,_2016 ) );
                ++ _2010;
              }
            }
            {}
          }
        }
        int _9517 = (int)0;
        int _9518 = _2001;
        for (int _2017 = _9517; _2017 < _9518; ++_2017)
        {
          {
            _ptr__2007[_2017] = _2017;
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2007,_2008,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2001));
      std::shared_ptr< monty::ndarray< long long,1 > > _2018 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2018(_2018 ? _2018->raw() : nullptr,_2018 ? _2018->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2019 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2019(_2019 ? _2019->raw() : nullptr,_2019 ? _2019->size(0) : 0);
      int _9519 = (int)0;
      int _9520 = _2001;
      for (int _2020 = _9519; _2020 < _9520; ++_2020)
      {
        {
          _ptr__2018[_2020] = _ptr__2008[_ptr__2007[_2020]];
        }
      }
      int _9521 = (int)0;
      int _9522 = _2001;
      for (int _2021 = _9521; _2021 < _9522; ++_2021)
      {
        {
          _ptr__2019[_2021] = _ptr__2009[_ptr__2007[_2021]];
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1969,_2019,_2018)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril() { return __mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__tril() { return __mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(){
  return _pubthis->__mosek_2fusion_2BaseVariable__tril((int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2022,int _2023,int _2024) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2022,int _2023,int _2024) { return __mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2022,int _2023,int _2024) { return __mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2022,int _2023,int _2024){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2022),(int)(_2023),(int)(_2024)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2025,int _2026) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2025,int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2025,int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2025,int _2026){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2025),(int)(_2026)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2027) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2027){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2027)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return __mosek_2fusion_2BaseVariable__reshape(_2028); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return __mosek_2fusion_2BaseVariable__reshape(_2028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028){
  _checked_ptr_1<int> _ptr__2028(_2028 ? _2028->raw() : nullptr, _2028 ? _2028->size(0) : 0);
  long long _2029 = (int)1;
  int _9523 = (int)0;
  int _9524 = (int)((_2028)->size(0));
  for (int _2030 = _9523; _2030 < _9524; ++_2030)
  {
    {
      if ((_ptr__2028[_2030] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _2029 *= _ptr__2028[_2030];
    }
  }
  if ((_2029 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _9525;
  for (int _2031 = (int)0, _9526 = (int)((_2028)->size(0)); _2031 < _9526 ; ++_2031)
  {
    _9525.push_back(_ptr__2028[_2031]);
  }
  auto _9527 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9525.size()),_9525.begin(),_9525.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_9527,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2032) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2032); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2032){
  _checked_ptr_1<double> _ptr__2032(_2032 ? _2032->raw() : nullptr, _2032 ? _2032->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_2032)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_2032);
    }
  }
  else
  {
    {
      if (((int)((_2032)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _9528;
      for (int _2034 = (int)0, _9529 = (int)((nativeidxs)->size(0)); _2034 < _9529 ; ++_2034)
      {
        _9528.push_back(_ptr__2032[((*sparsity)(_2034))]);
      }
      auto _9530 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9528.size()),_9528.begin(),_9528.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _2033 = _9530;
      _checked_ptr_1<double> _ptr__2033(_2033 ? _2033->raw() : nullptr,_2033 ? _2033->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_2033);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _2035) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_2035); }int mosek::fusion::p_BaseVariable::getDim(int _2035){
  return ((*shape)(_2035));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _2036 = (long long)1;
  int _9531 = (int)0;
  int _9532 = (int)((shape)->size(0));
  for (int _2037 = _9531; _2037 < _9532; ++_2037)
  {
    {
      _2036 *= ((*shape)(_2037));
    }
  }
  return _2036;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2038 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2038(_2038 ? _2038->raw() : nullptr,_2038 ? _2038->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_2038,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2039 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2039(_2039 ? _2039->raw() : nullptr,_2039 ? _2039->size(0) : 0);
      int _9533 = (int)0;
      int _9534 = (int)((nativeidxs)->size(0));
      for (int _2040 = _9533; _2040 < _9534; ++_2040)
      {
        {
          _ptr__2039[((*sparsity)(_2040))] = _ptr__2038[_2040];
        }
      }
      _2038 = _2039;
      _ptr__2038.update(_2038 ? _2038->raw() : nullptr, _2038 ? _2038->size(0) : 0);
    }
  }
  {}
  return _2038;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2041 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2041(_2041 ? _2041->raw() : nullptr,_2041 ? _2041->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_2041,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2042 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2042(_2042 ? _2042->raw() : nullptr,_2042 ? _2042->size(0) : 0);
      int _9535 = (int)0;
      int _9536 = (int)((nativeidxs)->size(0));
      for (int _2043 = _9535; _2043 < _9536; ++_2043)
      {
        {
          _ptr__2042[((*sparsity)(_2043))] = _ptr__2041[_2043];
        }
      }
      _2041 = _2042;
      _ptr__2041.update(_2041 ? _2041->raw() : nullptr, _2041 ? _2041->size(0) : 0);
    }
  }
  {}
  return _2041;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2044 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__2044(_2044 ? _2044->raw() : nullptr,_2044 ? _2044->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _9537;
      bool _9538 = (NULL == sparsity.get());
      if (_9538)
      {
        _9537 = nullptr;
      }
      else
      {
        _9537 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2045 = _9537;
      _checked_ptr_1<long long> _ptr__2045(_2045 ? _2045->raw() : nullptr,_2045 ? _2045->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _2046 = (int)0;
          int _9539 = (int)0;
          int _9540 = ((*shape)((int)1));
          for (int _2047 = _9539; _2047 < _9540; ++_2047)
          {
            {
              int _9541 = (int)0;
              int _9542 = ((*shape)((int)0));
              for (int _2048 = _9541; _2048 < _9542; ++_2048)
              {
                {
                  _ptr__2044[_2046] = ((*nativeidxs)(safe_add( safe_mul( _2048,((*shape)((int)1)) ),_2047 )));
                  ++ _2046;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2049 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__2049(_2049 ? _2049->raw() : nullptr,_2049 ? _2049->size(0) : 0);
          int _2050 = ((*shape)((int)0));
          int _2051 = ((*shape)((int)1));
          int _9543 = (int)0;
          int _9544 = (int)((sparsity)->size(0));
          for (int _2052 = _9543; _2052 < _9544; ++_2052)
          {
            {
              ++ _ptr__2049[safe_add( (((*sparsity)(_2052)) % _2051),(int)1 )];
            }
          }
          int _9545 = (int)0;
          int _9546 = _2051;
          for (int _2053 = _9545; _2053 < _9546; ++_2053)
          {
            {
              _ptr__2049[safe_add( _2053,(int)1 )] += _ptr__2049[_2053];
            }
          }
          int _9547 = (int)0;
          int _9548 = (int)((sparsity)->size(0));
          for (int _2054 = _9547; _2054 < _9548; ++_2054)
          {
            {
              long long _2055 = (((*sparsity)(_2054)) % _2051);
              _ptr__2044[_ptr__2049[_2055]] = ((*nativeidxs)(_2054));
              _ptr__2045[_ptr__2049[_2055]] = safe_add( (((*sparsity)(_2054)) / _2051),safe_mul( (((*sparsity)(_2054)) % _2051),_2050 ) );
              ++ _ptr__2049[_2055];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_2045,_2044)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2056,int _2057,int _2058) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2056,int _2057,int _2058) { return __mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2056,int _2057,int _2058) { return __mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2056,int _2057,int _2058){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2056),(int)(_2057),(int)(_2058)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2059,int _2060) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2059,_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2059,int _2060) { return __mosek_2fusion_2BaseVariable__index(_2059,_2060); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2059,int _2060) { return __mosek_2fusion_2BaseVariable__index(_2059,_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2059,int _2060){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2059),(int)(_2060)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return __mosek_2fusion_2BaseVariable__index(_2061); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return __mosek_2fusion_2BaseVariable__index(_2061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061){
  _checked_ptr_1<int> _ptr__2061(_2061 ? _2061->raw() : nullptr, _2061 ? _2061->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _2062 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_2061)->size(0)))));
  int _9549 = (int)0;
  int _9550 = (int)((_2061)->size(0));
  for (int _2063 = _9549; _2063 < _9550; ++_2063)
  {
    {
      ((*_2062)((int)0,_2063)) = _ptr__2061[_2063];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2062)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2064) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2064) { return __mosek_2fusion_2BaseVariable__index(_2064); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2064) { return __mosek_2fusion_2BaseVariable__index(_2064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2064){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2064)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return __mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return __mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067){
  _checked_ptr_1<int> _ptr__2065(_2065 ? _2065->raw() : nullptr, _2065 ? _2065->size(0) : 0);
  _checked_ptr_1<int> _ptr__2066(_2066 ? _2066->raw() : nullptr, _2066 ? _2066->size(0) : 0);
  _checked_ptr_1<int> _ptr__2067(_2067 ? _2067->raw() : nullptr, _2067 ? _2067->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_2065)->size(0)) != (int)((_2066)->size(0))) || ((int)((_2065)->size(0)) != (int)((_2067)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2068 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2065)->size(0)),(int)3)));
  int _9551 = (int)0;
  int _9552 = (int)((_2065)->size(0));
  for (int _2069 = _9551; _2069 < _9552; ++_2069)
  {
    {
      ((*_2068)(_2069,(int)0)) = _ptr__2065[_2069];
      ((*_2068)(_2069,(int)1)) = _ptr__2066[_2069];
      ((*_2068)(_2069,(int)2)) = _ptr__2067[_2069];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2068);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2070,_2071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return __mosek_2fusion_2BaseVariable__pick(_2070,_2071); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return __mosek_2fusion_2BaseVariable__pick(_2070,_2071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071){
  _checked_ptr_1<int> _ptr__2070(_2070 ? _2070->raw() : nullptr, _2070 ? _2070->size(0) : 0);
  _checked_ptr_1<int> _ptr__2071(_2071 ? _2071->raw() : nullptr, _2071 ? _2071->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_2070)->size(0)) != (int)((_2071)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2072 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2070)->size(0)),(int)2)));
  int _9553 = (int)0;
  int _9554 = (int)((_2070)->size(0));
  for (int _2073 = _9553; _2073 < _9554; ++_2073)
  {
    {
      ((*_2072)(_2073,(int)0)) = _ptr__2070[_2073];
      ((*_2072)(_2073,(int)1)) = _ptr__2071[_2073];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2072);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2074); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return __mosek_2fusion_2BaseVariable__pick(_2074); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return __mosek_2fusion_2BaseVariable__pick(_2074); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074){
  if (((int)((shape)->size(0)) != (int)((_2074)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2075 = false;
  int _9555 = (int)0;
  int _9556 = (int)((_2074)->size(0));
  for (int _2076 = _9555; _2076 < _9556; ++_2076)
  {
    {
      int _9557 = (int)0;
      int _9558 = (int)((_2074)->size(1));
      for (int _2077 = _9557; _2077 < _9558; ++_2077)
      {
        {
          if (((((*_2074)(_2076,_2077)) < (int)0) || (((*_2074)(_2076,_2077)) >= ((*shape)(_2077)))))
          {
            {
              _2075 = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_2075)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _2078 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2079 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2078)));
  _checked_ptr_1<long long> _ptr__2079(_2079 ? _2079->raw() : nullptr,_2079 ? _2079->size(0) : 0);
  _ptr__2079[(_2078 - (int)1)] = (int)1;
  int _9559 = (int)1;
  int _9560 = _2078;
  for (int _2080 = _9559; _2080 < _9560; ++_2080)
  {
    {
      _ptr__2079[((_2078 - _2080) - (int)1)] = safe_mul( _ptr__2079[(_2078 - _2080)],((*shape)((_2078 - _2080))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2081 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2074)->size(0)))});
  _checked_ptr_1<int> _ptr__2081(_2081 ? _2081->raw() : nullptr,_2081 ? _2081->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2082;
  _checked_ptr_1<long long> _ptr__2082(_2082 ? _2082->raw() : nullptr,_2082 ? _2082->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2083 = nullptr;
  _checked_ptr_1<long long> _ptr__2083(_2083 ? _2083->raw() : nullptr,_2083 ? _2083->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _2082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2074)->size(0)))));
      _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
      {
        int _9561 = (int)0;
        int _9562 = (int)((_2074)->size(0));
        for (int _2084 = _9561; _2084 < _9562; ++_2084)
        {
          {
            long long _2085 = (long long)0;
            int _9563 = (int)0;
            int _9564 = _2078;
            for (int _2086 = _9563; _2086 < _9564; ++_2086)
            {
              {
                _2085 += safe_mul( _ptr__2079[_2086],((*_2074)(_2084,_2086)) );
              }
            }
            _ptr__2082[_2084] = ((*nativeidxs)(_2085));
          }
        }
      }
    }
  }
  else
  {
    {
      int _2087 = (int)0;
      int _9565 = (int)0;
      int _9566 = (int)((_2074)->size(0));
      for (int _2088 = _9565; _2088 < _9566; ++_2088)
      {
        {
          long long _2089 = (long long)0;
          int _9567 = (int)0;
          int _9568 = _2078;
          for (int _2090 = _9567; _2090 < _9568; ++_2090)
          {
            {
              _2089 += safe_mul( _ptr__2079[_2090],((*_2074)(_2088,_2090)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2089) >= (int)0))
          {
            {
              ++ _2087;
            }
          }
          {}
        }
      }
      _2082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2087)));
      _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
      _2083 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2087)));
      _ptr__2083.update(_2083 ? _2083->raw() : nullptr, _2083 ? _2083->size(0) : 0);
      {
        int _2091 = (int)0;
        int _9569 = (int)0;
        int _9570 = (int)((_2074)->size(0));
        for (int _2092 = _9569; _2092 < _9570; ++_2092)
        {
          {
            long long _2093 = (long long)0;
            int _9571 = (int)0;
            int _9572 = _2078;
            for (int _2094 = _9571; _2094 < _9572; ++_2094)
            {
              {
                _2093 += safe_mul( _ptr__2079[_2094],((*_2074)(_2092,_2094)) );
              }
            }
            int _2095 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2093);
            if ((_2095 >= (int)0))
            {
              {
                _ptr__2082[_2091] = ((*nativeidxs)(_2095));
                _ptr__2083[_2091] = _2092;
                ++ _2091;
              }
            }
            {}
          }
        }
      }
      if ((_2087 == (int)((_2074)->size(0))))
      {
        {
          _2083 = nullptr;
          _ptr__2083.update(_2083 ? _2083->raw() : nullptr, _2083 ? _2083->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2081,_2083,_2082)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2096); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return __mosek_2fusion_2BaseVariable__pick(_2096); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return __mosek_2fusion_2BaseVariable__pick(_2096); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096){
  _checked_ptr_1<int> _ptr__2096(_2096 ? _2096->raw() : nullptr, _2096 ? _2096->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2097 = false;
  int _9573 = (int)0;
  int _9574 = (int)((_2096)->size(0));
  for (int _2098 = _9573; _2098 < _9574; ++_2098)
  {
    {
      if (((_ptr__2096[_2098] < (int)0) || (_ptr__2096[_2098] >= ((*shape)((int)0)))))
      {
        {
          _2097 = true;
        }
      }
      {}
    }
  }
  if (_2097)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _2099;
  _checked_ptr_1<long long> _ptr__2099(_2099 ? _2099->raw() : nullptr,_2099 ? _2099->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2100 = nullptr;
  _checked_ptr_1<long long> _ptr__2100(_2100 ? _2100->raw() : nullptr,_2100 ? _2100->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _9575;
      for (int _2101 = (int)0, _9576 = (int)((_2096)->size(0)); _2101 < _9576 ; ++_2101)
      {
        _9575.push_back(((*nativeidxs)(_ptr__2096[_2101])));
      }
      auto _9577 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9575.size()),_9575.begin(),_9575.end()));
      _2099 = _9577;
      _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
    }
  }
  else
  {
    {
      int _2102 = (int)0;
      int _9578 = (int)0;
      int _9579 = (int)((_2096)->size(0));
      for (int _2103 = _9578; _2103 < _9579; ++_2103)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2096[_2103])) >= (int)0))
          {
            {
              ++ _2102;
            }
          }
          {}
        }
      }
      _2099 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2102)));
      _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
      _2100 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2102)));
      _ptr__2100.update(_2100 ? _2100->raw() : nullptr, _2100 ? _2100->size(0) : 0);
      int _2104 = (int)0;
      int _9580 = (int)0;
      int _9581 = (int)((_2096)->size(0));
      for (int _2105 = _9580; _2105 < _9581; ++_2105)
      {
        {
          int _2106 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2096[_2105]));
          if ((_2106 >= (int)0))
          {
            {
              _ptr__2100[_2104] = _2105;
              _ptr__2099[_2104] = ((*nativeidxs)(_2106));
              ++ _2104;
            }
          }
          {}
        }
      }
      if ((_2102 == (int)((_2096)->size(0))))
      {
        {
          _2100 = nullptr;
          _ptr__2100.update(_2100 ? _2100->raw() : nullptr, _2100 ? _2100->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2096)->size(0)))}),_2100,_2099)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _2107) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _2107) { return __mosek_2fusion_2BaseVariable__antidiag(_2107); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _2107) { return __mosek_2fusion_2BaseVariable__antidiag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _2107){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_2107 >= ((*shape)((int)1))) || ((-_2107) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2107 >= (int)0))
  {
    {
      int _9582;
      bool _9583 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2107));
      if (_9583)
      {
        _9582 = ((*shape)((int)0));
      }
      else
      {
        _9582 = (((*shape)((int)1)) - _2107);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _2107))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9582);
    }
  }
  else
  {
    {
      int _9584;
      bool _9585 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2107 ));
      if (_9585)
      {
        _9584 = ((*shape)((int)1));
      }
      else
      {
        _9584 = safe_add( ((*shape)((int)0)),_2107 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2107)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9584);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9586;
  bool _9587 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9587)
  {
    _9586 = ((*shape)((int)0));
  }
  else
  {
    _9586 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9586);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _2108) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_2108); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _2108) { return __mosek_2fusion_2BaseVariable__diag(_2108); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _2108) { return __mosek_2fusion_2BaseVariable__diag(_2108); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _2108){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_2108 >= ((*shape)((int)1))) || ((-_2108) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2108 >= (int)0))
  {
    {
      int _9588;
      bool _9589 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2108));
      if (_9589)
      {
        _9588 = ((*shape)((int)0));
      }
      else
      {
        _9588 = (((*shape)((int)1)) - _2108);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_2108)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9588);
    }
  }
  else
  {
    {
      int _9590;
      bool _9591 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2108 ));
      if (_9591)
      {
        _9590 = ((*shape)((int)1));
      }
      else
      {
        _9590 = safe_add( ((*shape)((int)0)),_2108 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2108)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9590);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9592;
  bool _9593 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9593)
  {
    _9592 = ((*shape)((int)0));
  }
  else
  {
    _9592 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9592);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _2109,std::shared_ptr< monty::ndarray< int,1 > > _2110,int _2111){
  _checked_ptr_1<int> _ptr__2109(_2109 ? _2109->raw() : nullptr, _2109 ? _2109->size(0) : 0);
  _checked_ptr_1<int> _ptr__2110(_2110 ? _2110->raw() : nullptr, _2110 ? _2110->size(0) : 0);
  int _2112 = (int)((shape)->size(0));
  if (((_2112 != (int)((_2109)->size(0))) || (_2112 != (int)((_2110)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _9594 = (int)0;
  int _9595 = _2112;
  for (int _2113 = _9594; _2113 < _9595; ++_2113)
  {
    {
      if (((_ptr__2109[_2113] < (int)0) || (_ptr__2109[_2113] >= ((*shape)(_2113)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _2114 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2112)));
  _checked_ptr_1<long long> _ptr__2114(_2114 ? _2114->raw() : nullptr,_2114 ? _2114->size(0) : 0);
  _ptr__2114[(_2112 - (int)1)] = (int)1;
  int _9596 = (int)1;
  int _9597 = _2112;
  for (int _2115 = _9596; _2115 < _9597; ++_2115)
  {
    {
      _ptr__2114[((_2112 - _2115) - (int)1)] = safe_mul( _ptr__2114[(_2112 - _2115)],((*shape)((_2112 - _2115))) );
    }
  }
  long long _2116 = (long long)0;
  int _9598 = (int)0;
  int _9599 = (int)((_2110)->size(0));
  for (int _2117 = _9598; _2117 < _9599; ++_2117)
  {
    {
      _2116 += safe_mul( _ptr__2109[_2117],_ptr__2114[_2117] );
    }
  }
  long long _2118 = (long long)0;
  int _9600 = (int)0;
  int _9601 = (int)((_2110)->size(0));
  for (int _2119 = _9600; _2119 < _9601; ++_2119)
  {
    {
      _2118 += safe_mul( _ptr__2110[_2119],_ptr__2114[_2119] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2120 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2111)));
      _checked_ptr_1<long long> _ptr__2120(_2120 ? _2120->raw() : nullptr,_2120 ? _2120->size(0) : 0);
      int _9602 = (int)0;
      int _9603 = _2111;
      for (int _2121 = _9602; _2121 < _9603; ++_2121)
      {
        {
          _ptr__2120[_2121] = ((*nativeidxs)(safe_add( _2116,safe_mul( _2118,_2121 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2111)}),nullptr,_2120)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2122 = (int)0;
      int _9604 = (int)0;
      int _9605 = _2111;
      for (int _2123 = _9604; _2123 < _9605; ++_2123)
      {
        {
          long long _2124 = safe_add( _2116,safe_mul( _2118,_2123 ) );
          int _2125 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2124);
          if ((_2125 >= (int)0))
          {
            {
              ++ _2122;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2126 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2122)));
      _checked_ptr_1<long long> _ptr__2126(_2126 ? _2126->raw() : nullptr,_2126 ? _2126->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2127 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2122)));
      _checked_ptr_1<long long> _ptr__2127(_2127 ? _2127->raw() : nullptr,_2127 ? _2127->size(0) : 0);
      int _2128 = (int)0;
      int _9606 = (int)0;
      int _9607 = _2111;
      for (int _2129 = _9606; _2129 < _9607; ++_2129)
      {
        {
          _ptr__2126[_2129] = ((*nativeidxs)(safe_add( _2116,safe_mul( _2118,_2129 ) )));
          long long _2130 = safe_add( _2116,safe_mul( _2118,_2129 ) );
          int _2131 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2130);
          if ((_2131 >= (int)0))
          {
            {
              _ptr__2127[_2128] = _2129;
              _ptr__2126[_2128] = ((*nativeidxs)(_2131));
              ++ _2128;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2111)}),_2127,_2126)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2132,_2133); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return __mosek_2fusion_2BaseVariable__slice(_2132,_2133); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return __mosek_2fusion_2BaseVariable__slice(_2132,_2133); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133){
  _checked_ptr_1<int> _ptr__2132(_2132 ? _2132->raw() : nullptr, _2132 ? _2132->size(0) : 0);
  _checked_ptr_1<int> _ptr__2133(_2133 ? _2133->raw() : nullptr, _2133 ? _2133->size(0) : 0);
  if (((int)((_2132)->size(0)) != (int)((_2133)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_2132)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _9608 = (int)0;
      int _9609 = (int)((shape)->size(0));
      for (int _2134 = _9608; _2134 < _9609; ++_2134)
      {
        {
          if (((_ptr__2132[_2134] < (int)0) || (_ptr__2133[_2134] > ((*shape)(_2134)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__2132[_2134] > _ptr__2133[_2134]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _2135 = (int)((shape)->size(0));
      std::vector<int> _9610;
      for (int _2137 = (int)0, _9611 = _2135; _2137 < _9611 ; ++_2137)
      {
        _9610.push_back((_ptr__2133[_2137] - _ptr__2132[_2137]));
      }
      auto _9612 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9610.size()),_9610.begin(),_9610.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2136 = _9612;
      _checked_ptr_1<int> _ptr__2136(_2136 ? _2136->raw() : nullptr,_2136 ? _2136->size(0) : 0);
      int _2138 = (int)1;
      int _9613 = (int)0;
      int _9614 = _2135;
      for (int _2139 = _9613; _2139 < _9614; ++_2139)
      {
        {
          _2138 *= (_ptr__2133[_2139] - _ptr__2132[_2139]);
        }
      }
      if ((_2138 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _2140 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _2141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2135)));
          _checked_ptr_1<int> _ptr__2141(_2141 ? _2141->raw() : nullptr,_2141 ? _2141->size(0) : 0);
          int _9615 = (int)0;
          int _9616 = (int)((sparsity)->size(0));
          for (int _2142 = _9615; _2142 < _9616; ++_2142)
          {
            {
              long long _2143 = ((*sparsity)(_2142));
              int _9617 = (int)1;
              int _9618 = _2135;
              for (int _2144 = _9617; _2144 < _9618; ++_2144)
              {
                {
                  _ptr__2141[(_2135 - _2144)] = (int)(_2143 % ((*shape)((_2135 - _2144))));
                  _2143 /= ((*shape)((_2135 - _2144)));
                }
              }
              _ptr__2141[(int)0] = (int)_2143;
              int _2145 = (int)0;
              while ( ((_ptr__2141[_2145] >= _ptr__2132[_2145]) && (_ptr__2141[_2145] < _ptr__2133[_2145])) )
              {
                {
                  ++ _2145;
                }
              }
              if ((_2145 == _2135))
              {
                {
                  ++ _2140;
                }
              }
              {}
            }
          }
          int _2146 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _2147 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2140)));
          _checked_ptr_1<long long> _ptr__2147(_2147 ? _2147->raw() : nullptr,_2147 ? _2147->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2148 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2140)));
          _checked_ptr_1<long long> _ptr__2148(_2148 ? _2148->raw() : nullptr,_2148 ? _2148->size(0) : 0);
          int _9619 = (int)0;
          int _9620 = (int)((sparsity)->size(0));
          for (int _2149 = _9619; _2149 < _9620; ++_2149)
          {
            {
              long long _2150 = ((*sparsity)(_2149));
              int _9621 = (int)1;
              int _9622 = _2135;
              for (int _2151 = _9621; _2151 < _9622; ++_2151)
              {
                {
                  _ptr__2141[(_2135 - _2151)] = (int)(_2150 % ((*shape)((_2135 - _2151))));
                  _2150 /= ((*shape)((_2135 - _2151)));
                }
              }
              _ptr__2141[(int)0] = (int)_2150;
              int _2152 = (int)0;
              while ( ((_ptr__2141[_2152] >= _ptr__2132[_2152]) && (_ptr__2141[_2152] < _ptr__2133[_2152])) )
              {
                {
                  ++ _2152;
                }
              }
              if ((_2152 == _2135))
              {
                {
                  _ptr__2147[_2146] = ((*nativeidxs)(_2149));
                  int _2153 = (int)0;
                  int _9623 = (int)0;
                  int _9624 = _2135;
                  for (int _2154 = _9623; _2154 < _9624; ++_2154)
                  {
                    {
                      _2153 = safe_add( safe_mul( _2153,_ptr__2136[_2154] ),(_ptr__2141[_2154] - _ptr__2132[_2154]) );
                    }
                  }
                  _ptr__2148[_2146] = _2153;
                  ++ _2146;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2136,_2148,_2147)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2155 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2138)));
          _checked_ptr_1<long long> _ptr__2155(_2155 ? _2155->raw() : nullptr,_2155 ? _2155->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2156 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2135)));
            _checked_ptr_1<int> _ptr__2156(_2156 ? _2156->raw() : nullptr,_2156 ? _2156->size(0) : 0);
            _ptr__2156[(_2135 - (int)1)] = (int)1;
            int _9625 = (int)1;
            int _9626 = _2135;
            for (int _2157 = _9625; _2157 < _9626; ++_2157)
            {
              {
                _ptr__2156[((_2135 - _2157) - (int)1)] = safe_mul( _ptr__2156[(_2135 - _2157)],((*shape)((_2135 - _2157))) );
              }
            }
            int _2158 = (int)0;
            int _9627 = (int)0;
            int _9628 = _2135;
            for (int _2159 = _9627; _2159 < _9628; ++_2159)
            {
              {
                _2158 += safe_mul( _ptr__2132[_2159],_ptr__2156[_2159] );
              }
            }
            std::vector<int> _9629;
            for (int _2161 = (int)0, _9630 = _2135; _2161 < _9630 ; ++_2161)
            {
              _9629.push_back(_2158);
            }
            auto _9631 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9629.size()),_9629.begin(),_9629.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2160 = _9631;
            _checked_ptr_1<int> _ptr__2160(_2160 ? _2160->raw() : nullptr,_2160 ? _2160->size(0) : 0);
            std::vector<int> _9632;
            for (int _2163 = (int)0, _9633 = _2135; _2163 < _9633 ; ++_2163)
            {
              _9632.push_back(_ptr__2132[_2163]);
            }
            auto _9634 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9632.size()),_9632.begin(),_9632.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2162 = _9634;
            _checked_ptr_1<int> _ptr__2162(_2162 ? _2162->raw() : nullptr,_2162 ? _2162->size(0) : 0);
            int _9635 = (int)0;
            int _9636 = _2138;
            for (int _2164 = _9635; _2164 < _9636; ++_2164)
            {
              {
                _ptr__2155[_2164] = ((*nativeidxs)(_ptr__2160[(_2135 - (int)1)]));
                _ptr__2162[(_2135 - (int)1)] += (int)1;
                _ptr__2160[(_2135 - (int)1)] += _ptr__2156[(_2135 - (int)1)];
                if ((_ptr__2162[(_2135 - (int)1)] >= _ptr__2133[(_2135 - (int)1)]))
                {
                  {
                    int _2165 = (_2135 - (int)1);
                    while ( ((_2165 > (int)0) && (_ptr__2162[_2165] >= _ptr__2133[_2165])) )
                    {
                      {
                        _ptr__2162[_2165] = _ptr__2132[_2165];
                        _ptr__2162[(_2165 - (int)1)] += (int)1;
                        _ptr__2160[(_2165 - (int)1)] += _ptr__2156[(_2165 - (int)1)];
                        -- _2165;
                      }
                    }
                    int _9637 = safe_add( _2165,(int)1 );
                    int _9638 = _2135;
                    for (int _2166 = _9637; _2166 < _9638; ++_2166)
                    {
                      {
                        _ptr__2160[_2166] = _ptr__2160[_2165];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2136,nullptr,_2155)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _2167,int _2168) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2167,_2168); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _2167,int _2168) { return __mosek_2fusion_2BaseVariable__slice(_2167,_2168); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _2167,int _2168) { return __mosek_2fusion_2BaseVariable__slice(_2167,_2168); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _2167,int _2168){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2167 == (int)0) && (_2168 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_2167 < (int)0) || (_2168 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2167 > _2168))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_2167 == _2168))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _2169 = (_2168 - _2167);
      int _2170 = (int)0;
      int _2171 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2167));
      int _2172 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2168));
      std::vector<long long> _9639;
      for (int _2173 = _2171, _9640 = _2172; _2173 < _9640 ; ++_2173)
      {
        _9639.push_back((((*sparsity)(_2173)) - _2167));
      }
      auto _9641 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9639.size()),_9639.begin(),_9639.end()));
      std::vector<long long> _9642;
      for (int _2174 = _2171, _9643 = _2172; _2174 < _9643 ; ++_2174)
      {
        _9642.push_back(((*nativeidxs)(_2174)));
      }
      auto _9644 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9642.size()),_9642.begin(),_9642.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2169)}),_9641,_9644)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2175 = (_2168 - _2167);
      std::shared_ptr< monty::ndarray< long long,1 > > _2176 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2175)));
      _checked_ptr_1<long long> _ptr__2176(_2176 ? _2176->raw() : nullptr,_2176 ? _2176->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_2167,_2176,(int)0,_2175);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2175)}),nullptr,_2176)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _2177,std::shared_ptr< monty::ndarray< long long,1 > > _2178,int _2179,std::shared_ptr< monty::ndarray< long long,1 > > _2180) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2177,_2178,_2179,_2180); }int mosek::fusion::p_BaseVariable::inst(int _2177,std::shared_ptr< monty::ndarray< long long,1 > > _2178,int _2179,std::shared_ptr< monty::ndarray< long long,1 > > _2180){
  _checked_ptr_1<long long> _ptr__2178(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2180(_2180 ? _2180->raw() : nullptr, _2180 ? _2180->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2181 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<long long> _ptr__2181(_2181 ? _2181->raw() : nullptr,_2181 ? _2181->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2182 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<long long> _ptr__2182(_2182 ? _2182->raw() : nullptr,_2182 ? _2182->size(0) : 0);
  if ((NULL == _2182.get()))
  {
    {
      int _9645 = (int)0;
      int _9646 = (int)((_2181)->size(0));
      for (int _2183 = _9645; _2183 < _9646; ++_2183)
      {
        {
          _ptr__2178[safe_add( _2183,_2177 )] = _2183;
          _ptr__2180[safe_add( _2183,_2179 )] = _ptr__2181[_2183];
        }
      }
    }
  }
  else
  {
    {
      int _9647 = (int)0;
      int _9648 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _2184 = _9647; _2184 < _9648; ++_2184)
      {
        {
          _ptr__2178[safe_add( _2177,_2184 )] = _ptr__2182[_2184];
          _ptr__2180[safe_add( _2184,_2179 )] = _ptr__2181[_2184];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _2185,std::shared_ptr< monty::ndarray< long long,1 > > _2186) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2185,_2186); }void mosek::fusion::p_BaseVariable::inst(int _2185,std::shared_ptr< monty::ndarray< long long,1 > > _2186){
  _checked_ptr_1<long long> _ptr__2186(_2186 ? _2186->raw() : nullptr, _2186 ? _2186->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _9649 = (int)0;
      int _9650 = (int)((nativeidxs)->size(0));
      for (int _2187 = _9649; _2187 < _9650; ++_2187)
      {
        {
          _ptr__2186[safe_add( _2185,_2187 )] = ((*nativeidxs)(_2187));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2188 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__2188(_2188 ? _2188->raw() : nullptr,_2188 ? _2188->size(0) : 0);
      int _2189 = (int)1;
      int _9651 = (int)0;
      int _9652 = (int)((_2188)->size(0));
      for (int _2190 = _9651; _2190 < _9652; ++_2190)
      {
        {
          _2189 *= _ptr__2188[_2190];
        }
      }
      int _9653 = (int)0;
      int _9654 = _2189;
      for (int _2191 = _9653; _2191 < _9654; ++_2191)
      {
        {
          _ptr__2186[safe_add( _2185,_2191 )] = (int)0;
        }
      }
      int _9655 = (int)0;
      int _9656 = (int)((sparsity)->size(0));
      for (int _2192 = _9655; _2192 < _9656; ++_2192)
      {
        {
          _ptr__2186[safe_add( _2185,((*sparsity)(_2192)) )] = ((*nativeidxs)(_2192));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2193,bool _2194) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_2193,_2194); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2193,bool _2194){
  _checked_ptr_1<double> _ptr__2193(_2193 ? _2193->raw() : nullptr, _2193 ? _2193->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2194,nativeidxs,_2193);
    }
  }
  else
  {
    {
      int _2195 = (int)1;
      int _9657 = (int)0;
      int _9658 = (int)((shape)->size(0));
      for (int _2196 = _9657; _2196 < _9658; ++_2196)
      {
        {
          _2195 *= ((*shape)(_2196));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2197 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2195)));
      _checked_ptr_1<long long> _ptr__2197(_2197 ? _2197->raw() : nullptr,_2197 ? _2197->size(0) : 0);
      int _9659 = (int)0;
      int _9660 = (int)((nativeidxs)->size(0));
      for (int _2198 = _9659; _2198 < _9660; ++_2198)
      {
        {
          _ptr__2197[((*sparsity)(_2198))] = ((*nativeidxs)(_2198));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2194,_2197,_2193);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _2199,std::shared_ptr< monty::ndarray< double,1 > > _2200,bool _2201){
  _checked_ptr_1<double> _ptr__2200(_2200 ? _2200->raw() : nullptr, _2200 ? _2200->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_2201,nativeidxs,_2200,_2199);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2202 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2202(_2202 ? _2202->raw() : nullptr,_2202 ? _2202->size(0) : 0);
      int _9661 = (int)0;
      int _9662 = (int)((sparsity)->size(0));
      for (int _2203 = _9661; _2203 < _9662; ++_2203)
      {
        {
          _ptr__2202[((*sparsity)(_2203))] = ((*nativeidxs)(_2203));
        }
      }
      model->getVariableDuals(_2201,_2202,_2200,_2199);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _2204,std::shared_ptr< monty::ndarray< double,1 > > _2205,bool _2206) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2204,_2205,_2206); }void mosek::fusion::p_BaseVariable::values(int _2204,std::shared_ptr< monty::ndarray< double,1 > > _2205,bool _2206){
  _checked_ptr_1<double> _ptr__2205(_2205 ? _2205->raw() : nullptr, _2205 ? _2205->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_2206,nativeidxs,_2205,_2204);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2207 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2207(_2207 ? _2207->raw() : nullptr,_2207 ? _2207->size(0) : 0);
      int _9663 = (int)0;
      int _9664 = (int)((sparsity)->size(0));
      for (int _2208 = _9663; _2208 < _9664; ++_2208)
      {
        {
          _ptr__2207[((*sparsity)(_2208))] = ((*nativeidxs)(_2208));
        }
      }
      model->getVariableValues(_2206,_2207,_2205,_2204);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::fromTril(int _2216) { return __mosek_2fusion_2Variable__fromTril(_2216); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::tril() { return __mosek_2fusion_2Variable__tril(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2217,int _2218,int _2219) { return __mosek_2fusion_2Variable__reshape(_2217,_2218,_2219); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2220,int _2221) { return __mosek_2fusion_2Variable__reshape(_2220,_2221); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2222) { return __mosek_2fusion_2Variable__reshape(_2222); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2223) { return __mosek_2fusion_2Variable__reshape(_2223); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2229,std::shared_ptr< monty::ndarray< int,1 > > _2230,std::shared_ptr< monty::ndarray< int,1 > > _2231) { return __mosek_2fusion_2Variable__pick(_2229,_2230,_2231); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2232,std::shared_ptr< monty::ndarray< int,1 > > _2233) { return __mosek_2fusion_2Variable__pick(_2232,_2233); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _2235) { return __mosek_2fusion_2Variable__pick(_2235); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2235) { return __mosek_2fusion_2Variable__pick(_2235); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _2236) { return __mosek_2fusion_2Variable__antidiag(_2236); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _2237) { return __mosek_2fusion_2Variable__diag(_2237); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _2238) { return __mosek_2fusion_2Variable__index(_2238); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _2238) { return __mosek_2fusion_2Variable__index(_2238); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2239,int _2240,int _2241) { return __mosek_2fusion_2Variable__index(_2239,_2240,_2241); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2242,int _2243) { return __mosek_2fusion_2Variable__index(_2242,_2243); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _2244) { return __mosek_2fusion_2Variable__index(_2244); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2244) { return __mosek_2fusion_2Variable__index(_2244); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _2245,std::shared_ptr< monty::ndarray< int,1 > > _2246) { return __mosek_2fusion_2Variable__slice(_2245,_2246); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2245,std::shared_ptr< monty::ndarray< int,1 > > _2246) { return __mosek_2fusion_2Variable__slice(_2245,_2246); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _2247,int _2248) { return __mosek_2fusion_2Variable__slice(_2247,_2248); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _2247,int _2248) { return __mosek_2fusion_2Variable__slice(_2247,_2248); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _2249) { return mosek::fusion::p_Var::empty(_2249); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _2249){
  _checked_ptr_1<int> _ptr__2249(_2249 ? _2249->raw() : nullptr, _2249 ? _2249->size(0) : 0);
  int _9665 = (int)0;
  int _9666 = (int)((_2249)->size(0));
  for (int _2250 = _9665; _2250 < _9666; ++_2250)
  {
    {
      if ((_ptr__2249[_2250] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2249)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _2251) { return mosek::fusion::p_Var::compress(_2251); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _2251){
  std::shared_ptr< monty::ndarray< int,1 > > _2252 = _2251->getShape();
  _checked_ptr_1<int> _ptr__2252(_2252 ? _2252->raw() : nullptr,_2252 ? _2252->size(0) : 0);
  int _2253 = (int)((_2252)->size(0));
  int _2254 = (int)0;
  int _9667 = (int)0;
  int _9668 = _2253;
  for (int _2255 = _9667; _2255 < _9668; ++_2255)
  {
    {
      if ((_ptr__2252[_2255] != (int)1))
      {
        {
          ++ _2254;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2256 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2254)));
  _checked_ptr_1<int> _ptr__2256(_2256 ? _2256->raw() : nullptr,_2256 ? _2256->size(0) : 0);
  {
    int _2257 = (int)0;
    int _9669 = (int)0;
    int _9670 = _2253;
    for (int _2258 = _9669; _2258 < _9670; ++_2258)
    {
      {
        if ((_ptr__2252[_2258] != (int)1))
        {
          {
            _ptr__2256[_2257] = _ptr__2252[_2258];
            ++ _2257;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_2251,_2256);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2259,    int _2260) { return mosek::fusion::p_Var::reshape(_2259,_2260); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2259,int _2260){
  return ::mosek::fusion::p_Var::reshape(_2259,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2260)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2261,    int _2262,    int _2263) { return mosek::fusion::p_Var::reshape(_2261,_2262,_2263); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2261,int _2262,int _2263){
  return ::mosek::fusion::p_Var::reshape(_2261,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2262),(int)(_2263)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _2264) { return mosek::fusion::p_Var::flatten(_2264); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _2264){
  return ::mosek::fusion::p_Var::reshape(_2264,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_2264->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2265,    std::shared_ptr< monty::ndarray< int,1 > > _2266) { return mosek::fusion::p_Var::reshape(_2265,_2266); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2265,std::shared_ptr< monty::ndarray< int,1 > > _2266){
  _checked_ptr_1<int> _ptr__2266(_2266 ? _2266->raw() : nullptr, _2266 ? _2266->size(0) : 0);
  return _2265->__mosek_2fusion_2Variable__reshape(_2266);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _2267,std::shared_ptr< monty::ndarray< int,1 > > _2268){
  _checked_ptr_1<int> _ptr__2268(_2268 ? _2268->raw() : nullptr, _2268 ? _2268->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2269;
  _checked_ptr_1<long long> _ptr__2269(_2269 ? _2269->raw() : nullptr,_2269 ? _2269->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2270;
  _checked_ptr_1<long long> _ptr__2270(_2270 ? _2270->raw() : nullptr,_2270 ? _2270->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2271 = _2267->getShape();
  _checked_ptr_1<int> _ptr__2271(_2271 ? _2271->raw() : nullptr,_2271 ? _2271->size(0) : 0);
  int _2272 = (int)((_2271)->size(0));
  int _2273 = (int)1;
  int _9671 = (int)0;
  int _9672 = _2272;
  for (int _2274 = _9671; _2274 < _9672; ++_2274)
  {
    {
      _2273 *= _ptr__2271[_2274];
    }
  }
  int _2275 = _2267->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2276 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2272)));
  _checked_ptr_1<long long> _ptr__2276(_2276 ? _2276->raw() : nullptr,_2276 ? _2276->size(0) : 0);
  _ptr__2276[(_2272 - (int)1)] = (int)1;
  int _9673 = (int)1;
  int _9674 = _2272;
  for (int _2277 = _9673; _2277 < _9674; ++_2277)
  {
    {
      _ptr__2276[((_2272 - _2277) - (int)1)] = safe_mul( _ptr__2276[(_2272 - _2277)],_ptr__2271[_ptr__2268[(_2272 - _2277)]] );
    }
  }
  if ((_2275 < _2273))
  {
    {
      _2269 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2270 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
      _2267->inst((int)0,_2269,(int)0,_2270);
    }
  }
  else
  {
    {
      _2269 = nullptr;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2270 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
      _2267->inst((int)0,_2270);
    }
  }
  if ((NULL == _2269.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2278 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _checked_ptr_1<long long> _ptr__2278(_2278 ? _2278->raw() : nullptr,_2278 ? _2278->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2279 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2272)));
        _checked_ptr_1<int> _ptr__2279(_2279 ? _2279->raw() : nullptr,_2279 ? _2279->size(0) : 0);
        int _9675 = (int)0;
        int _9676 = _2275;
        for (int _2280 = _9675; _2280 < _9676; ++_2280)
        {
          {
            int _2281 = _2280;
            int _9677 = (int)0;
            int _9678 = _2272;
            for (int _2282 = _9677; _2282 < _9678; ++_2282)
            {
              {
                _ptr__2279[((_2272 - _2280) - (int)1)] = (_2281 % _ptr__2271[((_2272 - _2280) - (int)1)]);
                _2281 /= _ptr__2271[((_2272 - _2280) - (int)1)];
              }
            }
            int _2283 = (int)0;
            int _9679 = (int)0;
            int _9680 = _2272;
            for (int _2284 = _9679; _2284 < _9680; ++_2284)
            {
              {
                _2283 += (int)safe_mul( _ptr__2279[_ptr__2268[_2284]],_ptr__2276[_2284] );
              }
            }
            _ptr__2278[_2283] = _ptr__2270[_2280];
          }
        }
      }
      _2270 = _2278;
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2285 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _checked_ptr_1<long long> _ptr__2285(_2285 ? _2285->raw() : nullptr,_2285 ? _2285->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2272)));
        _checked_ptr_1<int> _ptr__2286(_2286 ? _2286->raw() : nullptr,_2286 ? _2286->size(0) : 0);
        int _9681 = (int)0;
        int _9682 = _2275;
        for (int _2287 = _9681; _2287 < _9682; ++_2287)
        {
          {
            int _2288 = _2287;
            int _9683 = (int)0;
            int _9684 = _2272;
            for (int _2289 = _9683; _2289 < _9684; ++_2289)
            {
              {
                _ptr__2286[((_2272 - _2287) - (int)1)] = (_2288 % _ptr__2271[((_2272 - _2287) - (int)1)]);
                _2288 /= _ptr__2271[((_2272 - _2287) - (int)1)];
              }
            }
            int _2290 = (int)0;
            int _9685 = (int)0;
            int _9686 = _2272;
            for (int _2291 = _9685; _2291 < _9686; ++_2291)
            {
              {
                _2290 += (int)safe_mul( _ptr__2286[_ptr__2268[_2291]],_ptr__2276[_2291] );
              }
            }
            _ptr__2285[_2287] = _2290;
          }
        }
      }
      std::vector<long long> _9687;
      for (int _2293 = (int)0, _9688 = _2275; _2293 < _9688 ; ++_2293)
      {
        _9687.push_back(_2293);
      }
      auto _9689 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9687.size()),_9687.begin(),_9687.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2292 = _9689;
      _checked_ptr_1<long long> _ptr__2292(_2292 ? _2292->raw() : nullptr,_2292 ? _2292->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2292,_2285,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2275));
      std::vector<long long> _9690;
      for (int _2294 = (int)0, _9691 = _2275; _2294 < _9691 ; ++_2294)
      {
        _9690.push_back(_ptr__2269[_ptr__2292[_2294]]);
      }
      auto _9692 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9690.size()),_9690.begin(),_9690.end()));
      _2269 = _9692;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      std::vector<long long> _9693;
      for (int _2295 = (int)0, _9694 = _2275; _2295 < _9694 ; ++_2295)
      {
        _9693.push_back(_ptr__2270[_ptr__2292[_2295]]);
      }
      auto _9695 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9693.size()),_9693.begin(),_9693.end()));
      _2270 = _9695;
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
    }
  }
  std::vector<int> _9696;
  for (int _2296 = (int)0, _9697 = _2272; _2296 < _9697 ; ++_2296)
  {
    _9696.push_back(_ptr__2271[_ptr__2268[_2296]]);
  }
  auto _9698 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9696.size()),_9696.begin(),_9696.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2267->__mosek_2fusion_2Variable__getModel(),_9698,_2269,_2270)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2297,    int _2298) { return mosek::fusion::p_Var::hrepeat(_2297,_2298); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2297,int _2298){
  return ::mosek::fusion::p_Var::drepeat(_2297,(int)1,_2298);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2299,    int _2300) { return mosek::fusion::p_Var::vrepeat(_2299,_2300); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2299,int _2300){
  return ::mosek::fusion::p_Var::drepeat(_2299,(int)0,_2300);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2301,    int _2302) { return mosek::fusion::p_Var::repeat(_2301,_2302); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2301,int _2302){
  return ::mosek::fusion::p_Var::drepeat(_2301,(int)0,_2302);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2303,    int _2304,    int _2305) { return mosek::fusion::p_Var::repeat(_2303,_2304,_2305); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2303,int _2304,int _2305){
  return ::mosek::fusion::p_Var::drepeat(_2303,_2304,_2305);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2306,int _2307,int _2308){
  if ((_2308 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_2308 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_2308 == (int)1))
  {
    {
      return _2306;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _2309 = _2306->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _2310 = _2306->getShape();
      _checked_ptr_1<int> _ptr__2310(_2310 ? _2310->raw() : nullptr,_2310 ? _2310->size(0) : 0);
      int _2311 = (int)((_2310)->size(0));
      if (((_2307 < (int)0) || (_2307 > _2311)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _2312 = ::mosek::fusion::p_Set::size(_2310);
      int _2313 = _2306->numInst();
      int _2314 = safe_mul( _2313,_2308 );
      int _2315 = (int)1;
      int _9699 = (int)0;
      int _9700 = _2307;
      for (int _2316 = _9699; _2316 < _9700; ++_2316)
      {
        {
          _2315 *= _ptr__2310[_2316];
        }
      }
      int _9701;
      bool _9702 = (_2307 < _2311);
      if (_9702)
      {
        _9701 = _ptr__2310[_2307];
      }
      else
      {
        _9701 = (int)1;
      }
      int _2317 = _9701;
      int _2318 = safe_mul( _2317,_2308 );
      int _2319 = (int)1;
      int _9703 = safe_add( _2307,(int)1 );
      int _9704 = _2311;
      for (int _2320 = _9703; _2320 < _9704; ++_2320)
      {
        {
          _2319 *= _ptr__2310[_2320];
        }
      }
      int _9705;
      bool _9706 = (_2307 < _2311);
      if (_9706)
      {
        _9705 = _2311;
      }
      else
      {
        _9705 = safe_add( _2307,(int)1 );
      }
      int _2321 = _9705;
      std::shared_ptr< monty::ndarray< int,1 > > _2322 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2321)));
      _checked_ptr_1<int> _ptr__2322(_2322 ? _2322->raw() : nullptr,_2322 ? _2322->size(0) : 0);
      int _9707 = (int)0;
      int _9708 = _2311;
      for (int _2323 = _9707; _2323 < _9708; ++_2323)
      {
        {
          _ptr__2322[_2323] = _ptr__2310[_2323];
        }
      }
      int _9709 = _2311;
      int _9710 = _2321;
      for (int _2324 = _9709; _2324 < _9710; ++_2324)
      {
        {
          _ptr__2322[_2324] = (int)1;
        }
      }
      _ptr__2322[_2307] = _2318;
      if ((_2313 < _2312))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2325 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2325(_2325 ? _2325->raw() : nullptr,_2325 ? _2325->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2326 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2326(_2326 ? _2326->raw() : nullptr,_2326 ? _2326->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2327 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2314)));
          _checked_ptr_1<long long> _ptr__2327(_2327 ? _2327->raw() : nullptr,_2327 ? _2327->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2328 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2314)));
          _checked_ptr_1<long long> _ptr__2328(_2328 ? _2328->raw() : nullptr,_2328 ? _2328->size(0) : 0);
          _2306->inst((int)0,_2326,(int)0,_2325);
          {
            int _2329 = safe_mul( _2318,_2319 );
            int _2330 = safe_mul( _2317,_2319 );
            int _2331 = _2319;
            if ((_2307 == (int)0))
            {
              {
                int _2332 = (int)0;
                int _9711 = (int)0;
                int _9712 = _2308;
                for (int _2333 = _9711; _2333 < _9712; ++_2333)
                {
                  {
                    int _9713 = (int)0;
                    int _9714 = _2313;
                    for (int _2334 = _9713; _2334 < _9714; ++_2334)
                    {
                      {
                        _ptr__2328[_2332] = safe_add( _ptr__2326[_2334],safe_mul( _2333,_2312 ) );
                        _ptr__2327[_2332] = _ptr__2325[_2334];
                        ++ _2332;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_2328,_2327)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_2307 >= _2311))
            {
              {
                int _2335 = (int)0;
                int _9715 = (int)0;
                int _9716 = _2313;
                for (int _2336 = _9715; _2336 < _9716; ++_2336)
                {
                  {
                    int _9717 = (int)0;
                    int _9718 = _2308;
                    for (int _2337 = _9717; _2337 < _9718; ++_2337)
                    {
                      {
                        _ptr__2328[_2335] = safe_add( safe_mul( _ptr__2326[_2336],_2308 ),_2337 );
                        _ptr__2327[_2335] = _ptr__2325[_2336];
                        ++ _2335;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_2328,_2327)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _2338 = (int)0;
                int _9719 = (int)0;
                int _9720 = _2313;
                for (int _2339 = _9719; _2339 < _9720; ++_2339)
                {
                  {
                    long long _2340 = (_ptr__2326[_2339] / _2330);
                    long long _2341 = ((_ptr__2326[_2339] / _2331) % _2317);
                    long long _2342 = (_ptr__2326[_2339] % _2319);
                    int _9721 = (int)0;
                    int _9722 = _2308;
                    for (int _2343 = _9721; _2343 < _9722; ++_2343)
                    {
                      {
                        _ptr__2328[_2338] = safe_add( safe_add( safe_mul( _2340,_2329 ),safe_mul( safe_add( _2341,safe_mul( _2317,_2343 ) ),_2319 ) ),_2342 );
                        _ptr__2327[_2338] = _ptr__2325[_2339];
                        ++ _2338;
                      }
                    }
                  }
                }
                int _2344 = (int)1;
                int _9723 = (int)0;
                int _9724 = _2321;
                for (int _2345 = _9723; _2345 < _9724; ++_2345)
                {
                  {
                    if ((_2344 < _ptr__2322[_2345]))
                    {
                      {
                        _2344 = _ptr__2322[_2345];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _2346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2314)));
                _checked_ptr_1<int> _ptr__2346(_2346 ? _2346->raw() : nullptr,_2346 ? _2346->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _2347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2314)));
                _checked_ptr_1<int> _ptr__2347(_2347 ? _2347->raw() : nullptr,_2347 ? _2347->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _2348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2344,(int)1 ))));
                  _checked_ptr_1<int> _ptr__2348(_2348 ? _2348->raw() : nullptr,_2348 ? _2348->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _2349 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2321)));
                  _checked_ptr_1<long long> _ptr__2349(_2349 ? _2349->raw() : nullptr,_2349 ? _2349->size(0) : 0);
                  _ptr__2349[(_2321 - (int)1)] = (int)1;
                  int _9725 = (int)1;
                  int _9726 = _2321;
                  for (int _2350 = _9725; _2350 < _9726; ++_2350)
                  {
                    {
                      _ptr__2349[((_2321 - _2350) - (int)1)] = safe_mul( _ptr__2349[(_2321 - _2350)],_ptr__2322[(_2321 - _2350)] );
                    }
                  }
                  int _9727 = (int)0;
                  int _9728 = _2314;
                  for (int _2351 = _9727; _2351 < _9728; ++_2351)
                  {
                    {
                      _ptr__2346[_2351] = _2351;
                    }
                  }
                  int _9729 = (int)0;
                  int _9730 = _2321;
                  for (int _2352 = _9729; _2352 < _9730; ++_2352)
                  {
                    {
                      int _2353 = ((_2321 - _2352) - (int)1);
                      int _9731 = (int)0;
                      int _9732 = safe_add( _ptr__2322[_2353],(int)1 );
                      for (int _2354 = _9731; _2354 < _9732; ++_2354)
                      {
                        {
                          _ptr__2348[_2354] = (int)0;
                        }
                      }
                      int _9733 = (int)0;
                      int _9734 = _2314;
                      for (int _2355 = _9733; _2355 < _9734; ++_2355)
                      {
                        {
                          ++ _ptr__2348[safe_add( ((_ptr__2328[_2355] / _ptr__2349[_2353]) % _ptr__2322[_2353]),(int)1 )];
                        }
                      }
                      int _9735 = (int)0;
                      int _9736 = _ptr__2322[_2353];
                      for (int _2356 = _9735; _2356 < _9736; ++_2356)
                      {
                        {
                          _ptr__2348[safe_add( _2356,(int)1 )] += _ptr__2348[_2356];
                        }
                      }
                      int _9737 = (int)0;
                      int _9738 = _2314;
                      for (int _2357 = _9737; _2357 < _9738; ++_2357)
                      {
                        {
                          int _2358 = _ptr__2346[_2357];
                          long long _2359 = ((_ptr__2328[_2358] / _ptr__2349[_2353]) % _ptr__2322[_2353]);
                          _ptr__2347[_ptr__2348[_2359]] = _2358;
                          ++ _ptr__2348[_2359];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _2360 = _2346;
                      _checked_ptr_1<int> _ptr__2360(_2360 ? _2360->raw() : nullptr,_2360 ? _2360->size(0) : 0);
                      _2346 = _2347;
                      _ptr__2346.update(_2346 ? _2346->raw() : nullptr, _2346 ? _2346->size(0) : 0);
                      _2347 = _2360;
                      _ptr__2347.update(_2347 ? _2347->raw() : nullptr, _2347 ? _2347->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _9739;
                for (int _2361 = (int)0, _9740 = _2314; _2361 < _9740 ; ++_2361)
                {
                  _9739.push_back(_ptr__2328[_ptr__2346[_2361]]);
                }
                auto _9741 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9739.size()),_9739.begin(),_9739.end()));
                std::vector<long long> _9742;
                for (int _2362 = (int)0, _9743 = _2314; _2362 < _9743 ; ++_2362)
                {
                  _9742.push_back(_ptr__2327[_ptr__2346[_2362]]);
                }
                auto _9744 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9742.size()),_9742.begin(),_9742.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_9741,_9744)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2363 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2363(_2363 ? _2363->raw() : nullptr,_2363 ? _2363->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2364 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _2313,_2308 ))));
          _checked_ptr_1<long long> _ptr__2364(_2364 ? _2364->raw() : nullptr,_2364 ? _2364->size(0) : 0);
          _2306->inst((int)0,_2363);
          int _2365 = safe_mul( _2318,_2319 );
          int _2366 = _2319;
          int _2367 = (int)0;
          int _9745 = (int)0;
          int _9746 = _2315;
          for (int _2368 = _9745; _2368 < _9746; ++_2368)
          {
            {
              int _9747 = (int)0;
              int _9748 = _2317;
              for (int _2369 = _9747; _2369 < _9748; ++_2369)
              {
                {
                  int _9749 = (int)0;
                  int _9750 = _2319;
                  for (int _2370 = _9749; _2370 < _9750; ++_2370)
                  {
                    {
                      int _9751 = (int)0;
                      int _9752 = _2308;
                      for (int _2371 = _9751; _2371 < _9752; ++_2371)
                      {
                        {
                          _ptr__2364[safe_add( safe_add( safe_mul( _2368,_2365 ),safe_mul( safe_add( _2369,safe_mul( _2371,_2317 ) ),_2366 ) ),_2370 )] = _ptr__2363[_2367];
                        }
                      }
                      ++ _2367;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,nullptr,_2364)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2372) { return mosek::fusion::p_Var::stack(_2372); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2372){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9753;
  for (int _2373 = (int)0, _9754 = (int)((_2372)->size(0)); _2373 < _9754 ; ++_2373)
  {
    _9753.push_back(::mosek::fusion::p_Var::dstack(((*_2372)(_2373)),(int)1));
  }
  auto _9755 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9753.size()),_9753.begin(),_9753.end()));
  return ::mosek::fusion::p_Var::dstack(_9755,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2374,    monty::rc_ptr< ::mosek::fusion::Variable > _2375,    monty::rc_ptr< ::mosek::fusion::Variable > _2376) { return mosek::fusion::p_Var::vstack(_2374,_2375,_2376); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2374,monty::rc_ptr< ::mosek::fusion::Variable > _2375,monty::rc_ptr< ::mosek::fusion::Variable > _2376){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2374.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2375.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2376.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2377,    monty::rc_ptr< ::mosek::fusion::Variable > _2378) { return mosek::fusion::p_Var::vstack(_2377,_2378); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2377,monty::rc_ptr< ::mosek::fusion::Variable > _2378){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2377.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2378.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2379) { return mosek::fusion::p_Var::vstack(_2379); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2379){
  return ::mosek::fusion::p_Var::dstack(_2379,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2380,    monty::rc_ptr< ::mosek::fusion::Variable > _2381,    monty::rc_ptr< ::mosek::fusion::Variable > _2382) { return mosek::fusion::p_Var::hstack(_2380,_2381,_2382); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2380,monty::rc_ptr< ::mosek::fusion::Variable > _2381,monty::rc_ptr< ::mosek::fusion::Variable > _2382){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2380.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2381.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2382.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2383,    monty::rc_ptr< ::mosek::fusion::Variable > _2384) { return mosek::fusion::p_Var::hstack(_2383,_2384); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2383,monty::rc_ptr< ::mosek::fusion::Variable > _2384){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2383.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2384.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2385) { return mosek::fusion::p_Var::hstack(_2385); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2385){
  return ::mosek::fusion::p_Var::dstack(_2385,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2386,    monty::rc_ptr< ::mosek::fusion::Variable > _2387,    monty::rc_ptr< ::mosek::fusion::Variable > _2388,    int _2389) { return mosek::fusion::p_Var::stack(_2386,_2387,_2388,_2389); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2386,monty::rc_ptr< ::mosek::fusion::Variable > _2387,monty::rc_ptr< ::mosek::fusion::Variable > _2388,int _2389){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2386.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2387.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2388.get())}),_2389);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2390,    monty::rc_ptr< ::mosek::fusion::Variable > _2391,    int _2392) { return mosek::fusion::p_Var::stack(_2390,_2391,_2392); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2390,monty::rc_ptr< ::mosek::fusion::Variable > _2391,int _2392){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2390.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2391.get())}),_2392);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2393,    int _2394) { return mosek::fusion::p_Var::stack(_2393,_2394); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2393,int _2394){
  int _2395 = _2394;
  int _9756 = (int)0;
  int _9757 = (int)((_2393)->size(0));
  for (int _2396 = _9756; _2396 < _9757; ++_2396)
  {
    {
      if ((_2395 < ((*_2393)(_2396))->getND()))
      {
        {
          _2395 = ((*_2393)(_2396))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2393,_2394);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2397,    int _2398) { return mosek::fusion::p_Var::promote(_2397,_2398); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2397,int _2398){
  if ((_2398 > _2397->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2399 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2398)));
      _checked_ptr_1<int> _ptr__2399(_2399 ? _2399->raw() : nullptr,_2399 ? _2399->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2400 = _2397->getShape();
      _checked_ptr_1<int> _ptr__2400(_2400 ? _2400->raw() : nullptr,_2400 ? _2400->size(0) : 0);
      int _9758 = (int)0;
      int _9759 = (int)((_2400)->size(0));
      for (int _2401 = _9758; _2401 < _9759; ++_2401)
      {
        {
          _ptr__2399[_2401] = _ptr__2400[_2401];
        }
      }
      int _9760 = (int)((_2400)->size(0));
      int _9761 = _2398;
      for (int _2402 = _9760; _2402 < _9761; ++_2402)
      {
        {
          _ptr__2399[_2402] = (int)1;
        }
      }
      return _2397->__mosek_2fusion_2Variable__reshape(_2399);
    }
  }
  else
  {
    {
      return _2397;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2403,int _2404){
  if ((_2404 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2405 = nullptr;
  {
    int _9762 = (int)0;
    int _9763 = (int)((_2403)->size(0));
    for (int _2406 = _9762; _2406 < _9763; ++_2406)
    {
      {
        if ((NULL == _2405.get()))
        {
          {
            _2405 = ((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel() != _2405)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2407 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9764;
            bool _9765 = ((int)((mosek::fusion::p_Model::_get_impl(_2405.get())->getName()).size()) > (int)0);
            if (_9765)
            {
              _9764 = mosek::fusion::p_Model::_get_impl(_2405.get())->getName();
            }
            else
            {
              _9764 = std::string ("?");
            }
            std::string _2408 = _9764;
            std::string _9766;
            bool _9767 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_9767)
            {
              _9766 = mosek::fusion::p_Model::_get_impl(((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _9766 = std::string ("?");
            }
            std::string _2409 = _9766;
            _2407->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2408)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2409)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2407->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2403)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2403)->size(0)) == (int)1))
  {
    {
      return ((*_2403)((int)0));
    }
  }
  else
  {
    {
      int _2410 = (int)((_2403)->size(0));
      std::vector<int> _9768;
      for (int _2412 = (int)0, _9769 = _2410; _2412 < _9769 ; ++_2412)
      {
        _9768.push_back(((*_2403)(_2412))->numInst());
      }
      auto _9770 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9768.size()),_9768.begin(),_9768.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2411 = _9770;
      _checked_ptr_1<int> _ptr__2411(_2411 ? _2411->raw() : nullptr,_2411 ? _2411->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _9771;
      for (int _2414 = (int)0, _9772 = _2410; _2414 < _9772 ; ++_2414)
      {
        _9771.push_back(((*_2403)(_2414))->getShape());
      }
      auto _9773 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_9771.size()),_9771.begin(),_9771.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2413 = _9773;
      std::vector<int> _9774;
      for (int _2416 = (int)0, _9775 = _2410; _2416 < _9775 ; ++_2416)
      {
        _9774.push_back((int)((((*_2413)(_2416)))->size(0)));
      }
      auto _9776 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9774.size()),_9774.begin(),_9774.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2415 = _9776;
      _checked_ptr_1<int> _ptr__2415(_2415 ? _2415->raw() : nullptr,_2415 ? _2415->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2417 = ((*_2413)((int)0));
      _checked_ptr_1<int> _ptr__2417(_2417 ? _2417->raw() : nullptr,_2417 ? _2417->size(0) : 0);
      int _2418 = _ptr__2415[(int)0];
      int _2419 = (int)0;
      int _9777 = (int)0;
      int _9778 = _2410;
      for (int _2420 = _9777; _2420 < _9778; ++_2420)
      {
        {
          _2419 += _ptr__2411[_2420];
        }
      }
      int _2421 = safe_add( _2404,(int)1 );
      int _9779 = (int)0;
      int _9780 = _2410;
      for (int _2422 = _9779; _2422 < _9780; ++_2422)
      {
        {
          if ((_2421 < _ptr__2415[_2422]))
          {
            {
              _2421 = _ptr__2415[_2422];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2423 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2421)));
      _checked_ptr_1<int> _ptr__2423(_2423 ? _2423->raw() : nullptr,_2423 ? _2423->size(0) : 0);
      int _9781 = (int)0;
      int _9782 = _2418;
      for (int _2424 = _9781; _2424 < _9782; ++_2424)
      {
        {
          _ptr__2423[_2424] = _ptr__2417[_2424];
        }
      }
      int _9783 = _2418;
      int _9784 = _2421;
      for (int _2425 = _9783; _2425 < _9784; ++_2425)
      {
        {
          _ptr__2423[_2425] = (int)1;
        }
      }
      _ptr__2423[_2404] = (int)0;
      int _9785 = (int)0;
      int _9786 = _2410;
      for (int _2426 = _9785; _2426 < _9786; ++_2426)
      {
        {
          int _9787;
          bool _9788 = ((int)((((*_2413)(_2426)))->size(0)) > _2404);
          if (_9788)
          {
            _9787 = ((*((*_2413)(_2426)))(_2404));
          }
          else
          {
            _9787 = (int)1;
          }
          _ptr__2423[_2404] += _9787;
        }
      }
      int _9789 = (int)0;
      int _9790 = _2410;
      for (int _2427 = _9789; _2427 < _9790; ++_2427)
      {
        {
          int _9791 = (int)0;
          int _9792 = (int)((((*_2413)(_2427)))->size(0));
          for (int _2428 = _9791; _2428 < _9792; ++_2428)
          {
            {
              if (((_2428 != _2404) && (((*((*_2413)(_2427)))(_2428)) != _ptr__2423[_2428])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _9793 = (int)((((*_2413)(_2427)))->size(0));
          int _9794 = _2421;
          for (int _2429 = _9793; _2429 < _9794; ++_2429)
          {
            {
              if (((_2429 != _2404) && ((int)1 != _ptr__2423[_2429])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2430 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2419)));
      _checked_ptr_1<long long> _ptr__2430(_2430 ? _2430->raw() : nullptr,_2430 ? _2430->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2431 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2419)));
      _checked_ptr_1<long long> _ptr__2431(_2431 ? _2431->raw() : nullptr,_2431 ? _2431->size(0) : 0);
      std::vector<int> _9795;
      for (int _2433 = (int)0, _9796 = (int)((_2403)->size(0)); _2433 < _9796 ; ++_2433)
      {
        int _9797;
        bool _9798 = (_2404 < (int)((((*_2413)(_2433)))->size(0)));
        if (_9798)
        {
          _9797 = ((*((*_2413)(_2433)))(_2404));
        }
        else
        {
          _9797 = (int)1;
        }
        _9795.push_back(_9797);
      }
      auto _9799 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9795.size()),_9795.begin(),_9795.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2432 = _9799;
      _checked_ptr_1<int> _ptr__2432(_2432 ? _2432->raw() : nullptr,_2432 ? _2432->size(0) : 0);
      int _2434 = (int)1;
      int _9800 = (int)0;
      int _9801 = _2404;
      for (int _2435 = _9800; _2435 < _9801; ++_2435)
      {
        {
          int _9802;
          bool _9803 = (_2435 < (int)((_2417)->size(0)));
          if (_9803)
          {
            _9802 = _ptr__2417[_2435];
          }
          else
          {
            _9802 = (int)1;
          }
          _2434 *= _9802;
        }
      }
      int _2436 = (int)0;
      int _9804 = (int)0;
      int _9805 = _2410;
      for (int _2437 = _9804; _2437 < _9805; ++_2437)
      {
        {
          _2436 += _ptr__2432[_2437];
        }
      }
      int _2438 = (int)1;
      int _9806 = safe_add( _2404,(int)1 );
      int _9807 = (int)((_2417)->size(0));
      for (int _2439 = _9806; _2439 < _9807; ++_2439)
      {
        {
          _2438 *= _ptr__2417[_2439];
        }
      }
      if ((_2434 == (int)1))
      {
        {
          int _2440 = (int)0;
          long long _2441 = (int)0;
          int _9808 = (int)0;
          int _9809 = _2410;
          for (int _2442 = _9808; _2442 < _9809; ++_2442)
          {
            {
              ((*_2403)(_2442))->inst(_2440,_2431,_2440,_2430);
              int _9810 = (int)0;
              int _9811 = _ptr__2411[_2442];
              for (int _2443 = _9810; _2443 < _9811; ++_2443)
              {
                {
                  _ptr__2431[_2440] += _2441;
                  ++ _2440;
                }
              }
              _2441 += ::mosek::fusion::p_Set::size(((*_2413)(_2442)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9812;
          bool _9813 = (_2419 < safe_mul( safe_mul( _2434,_2436 ),_2438 ));
          if (_9813)
          {
            _9812 = _2431;
          }
          else
          {
            _9812 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2405,_2423,_9812,_2430)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2444 = (int)0;
          int _9814 = (int)0;
          int _9815 = _2410;
          for (int _2445 = _9814; _2445 < _9815; ++_2445)
          {
            {
              _2444 += ((*_2403)(_2445))->inst(_2444,_2431,_2444,_2430);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2446 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2419)));
          _checked_ptr_1<int> _ptr__2446(_2446 ? _2446->raw() : nullptr,_2446 ? _2446->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2447 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2419)));
          _checked_ptr_1<int> _ptr__2447(_2447 ? _2447->raw() : nullptr,_2447 ? _2447->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2448 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2410)));
          _checked_ptr_1<int> _ptr__2448(_2448 ? _2448->raw() : nullptr,_2448 ? _2448->size(0) : 0);
          int _9816 = (int)0;
          int _9817 = (_2410 - (int)1);
          for (int _2449 = _9816; _2449 < _9817; ++_2449)
          {
            {
              _ptr__2448[safe_add( _2449,(int)1 )] = safe_add( _ptr__2448[_2449],_ptr__2432[_2449] );
            }
          }
          int _9818 = (int)0;
          int _9819 = _2419;
          for (int _2450 = _9818; _2450 < _9819; ++_2450)
          {
            {
              _ptr__2446[_2450] = _2450;
            }
          }
          int _2451 = (int)0;
          int _9820 = (int)0;
          int _9821 = _2410;
          for (int _2452 = _9820; _2452 < _9821; ++_2452)
          {
            {
              int _9822 = (int)0;
              int _9823 = _ptr__2411[_2452];
              for (int _2453 = _9822; _2453 < _9823; ++_2453)
              {
                {
                  long long _2454 = (_ptr__2431[_2451] / safe_mul( _ptr__2432[_2452],_2438 ));
                  long long _2455 = ((_ptr__2431[_2451] / _2438) % _ptr__2432[_2452]);
                  long long _2456 = (_ptr__2431[_2451] % _2438);
                  _ptr__2431[_2451] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2454,_2436 ),_2455 ),_ptr__2448[_2452] ),_2438 ),_2456 );
                  ++ _2451;
                }
              }
            }
          }
          int _2457 = (int)1;
          int _9824 = (int)0;
          int _9825 = _2421;
          for (int _2458 = _9824; _2458 < _9825; ++_2458)
          {
            {
              int _9826;
              bool _9827 = (_2457 < _ptr__2423[_2458]);
              if (_9827)
              {
                _9826 = _ptr__2423[_2458];
              }
              else
              {
                _9826 = _2457;
              }
              _2457 = _9826;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2459 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2421)));
          _checked_ptr_1<long long> _ptr__2459(_2459 ? _2459->raw() : nullptr,_2459 ? _2459->size(0) : 0);
          _ptr__2459[(_2421 - (int)1)] = (int)1;
          int _9828 = (int)1;
          int _9829 = _2421;
          for (int _2460 = _9828; _2460 < _9829; ++_2460)
          {
            {
              _ptr__2459[((_2421 - _2460) - (int)1)] = safe_mul( _ptr__2459[(_2421 - _2460)],_ptr__2423[(_2421 - _2460)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2461 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2457,(int)1 ))));
          _checked_ptr_1<int> _ptr__2461(_2461 ? _2461->raw() : nullptr,_2461 ? _2461->size(0) : 0);
          int _9830 = (int)0;
          int _9831 = _2421;
          for (int _2462 = _9830; _2462 < _9831; ++_2462)
          {
            {
              int _2463 = ((_2421 - _2462) - (int)1);
              int _9832 = (int)0;
              int _9833 = safe_add( _ptr__2423[_2463],(int)1 );
              for (int _2464 = _9832; _2464 < _9833; ++_2464)
              {
                {
                  _ptr__2461[_2464] = (int)0;
                }
              }
              int _9834 = (int)0;
              int _9835 = _2419;
              for (int _2465 = _9834; _2465 < _9835; ++_2465)
              {
                {
                  ++ _ptr__2461[safe_add( ((_ptr__2431[_2465] / _ptr__2459[_2463]) % _ptr__2423[_2463]),(int)1 )];
                }
              }
              int _9836 = (int)0;
              int _9837 = _ptr__2423[_2463];
              for (int _2466 = _9836; _2466 < _9837; ++_2466)
              {
                {
                  _ptr__2461[safe_add( _2466,(int)1 )] += _ptr__2461[_2466];
                }
              }
              int _9838 = (int)0;
              int _9839 = _2419;
              for (int _2467 = _9838; _2467 < _9839; ++_2467)
              {
                {
                  int _2468 = _ptr__2446[_2467];
                  long long _2469 = ((_ptr__2431[_2468] / _ptr__2459[_2463]) % _ptr__2423[_2463]);
                  _ptr__2447[_ptr__2461[_2469]] = _2468;
                  ++ _ptr__2461[_2469];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2470 = _2446;
              _checked_ptr_1<int> _ptr__2470(_2470 ? _2470->raw() : nullptr,_2470 ? _2470->size(0) : 0);
              _2446 = _2447;
              _ptr__2446.update(_2446 ? _2446->raw() : nullptr, _2446 ? _2446->size(0) : 0);
              _2447 = _2470;
              _ptr__2447.update(_2447 ? _2447->raw() : nullptr, _2447 ? _2447->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9840;
          bool _9841 = (_2419 < safe_mul( safe_mul( _2434,_2436 ),_2438 ));
          if (_9841)
          {
            std::vector<long long> _9842;
            for (int _2471 = (int)0, _9843 = _2419; _2471 < _9843 ; ++_2471)
            {
              _9842.push_back(_ptr__2431[_ptr__2446[_2471]]);
            }
            auto _9844 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9842.size()),_9842.begin(),_9842.end()));
            _9840 = _9844;
          }
          else
          {
            _9840 = nullptr;
          }
          std::vector<long long> _9845;
          for (int _2472 = (int)0, _9846 = _2419; _2472 < _9846 ; ++_2472)
          {
            _9845.push_back(_ptr__2430[_ptr__2446[_2472]]);
          }
          auto _9847 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9845.size()),_9845.begin(),_9845.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2405,_2423,_9840,_9847)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474){ return new mosek::fusion::LinearPSDConstraint(_2473,_2474); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2473,_2474); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2473,_2474);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481){ return new mosek::fusion::LinearPSDConstraint(_2475,_2476,_2477,_2478,_2479,_2480,_2481); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2475,_2476,_2477,_2478,_2479,_2480,_2481); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2478(_2478 ? _2478->raw() : nullptr, _2478 ? _2478->size(0) : 0);
    _checked_ptr_1<int> _ptr__2480(_2480 ? _2480->raw() : nullptr, _2480 ? _2480->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2481(_2481 ? _2481->raw() : nullptr, _2481 ? _2481->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2475,_2476,_2478,_2480,_2477);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2477;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2481;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2480;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2479;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2478;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2482,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2483){
  std::shared_ptr< monty::ndarray< int,1 > > _2484 = ::mosek::fusion::p_Set::idxtokey(shape,_2482);
  _checked_ptr_1<int> _ptr__2484(_2484 ? _2484->raw() : nullptr,_2484 ? _2484->size(0) : 0);
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2484[(int)0]);
  int _9848 = (int)1;
  int _9849 = (int)((_2484)->size(0));
  for (int _2485 = _9848; _2485 < _9849; ++_2485)
  {
    {
      _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2484[_2485]);
    }
  }
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9850 = (int)1;
  int _9851 = (int)((_2484)->size(0));
  for (int _2486 = _9850; _2486 < _9851; ++_2486)
  {
    {
      _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2486)));
    }
  }
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2487){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2487)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489){ return new mosek::fusion::PSDConstraint(_2488,_2489); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2488,_2489); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2488,_2489);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497){ return new mosek::fusion::PSDConstraint(_2490,_2491,_2492,_2493,_2494,_2495,_2496,_2497); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2490,_2491,_2492,_2493,_2494,_2495,_2496,_2497); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2493(_2493 ? _2493->raw() : nullptr, _2493 ? _2493->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2496(_2496 ? _2496->raw() : nullptr, _2496 ? _2496->size(0) : 0);
    _checked_ptr_1<int> _ptr__2497(_2497 ? _2497->raw() : nullptr, _2497 ? _2497->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2490,_2491,_2493,::mosek::fusion::p_PSDConstraint::computenidxs(_2493,_2494,_2495,_2497),_2492);
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2492;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2497;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2496;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2491;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2493;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2494;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2495;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2498){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2498)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2499,int _2500,int _2501,std::shared_ptr< monty::ndarray< int,1 > > _2502){
  _checked_ptr_1<int> _ptr__2499(_2499 ? _2499->raw() : nullptr, _2499 ? _2499->size(0) : 0);
  _checked_ptr_1<int> _ptr__2502(_2502 ? _2502->raw() : nullptr, _2502 ? _2502->size(0) : 0);
  int _2503 = (int)((_2499)->size(0));
  bool _2504 = (_2500 < _2501);
  int _9852;
  bool _9853 = _2504;
  if (_9853)
  {
    _9852 = _2500;
  }
  else
  {
    _9852 = _2501;
  }
  int _2505 = _9852;
  int _9854;
  bool _9855 = _2504;
  if (_9855)
  {
    _9854 = _2501;
  }
  else
  {
    _9854 = _2500;
  }
  int _2506 = _9854;
  std::shared_ptr< monty::ndarray< int,1 > > _2507 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2507(_2507 ? _2507->raw() : nullptr,_2507 ? _2507->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2508 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2508(_2508 ? _2508->raw() : nullptr,_2508 ? _2508->size(0) : 0);
  int _2509 = (int)1;
  int _9856 = (int)0;
  int _9857 = (int)((_2499)->size(0));
  for (int _2510 = _9856; _2510 < _9857; ++_2510)
  {
    {
      _2509 *= _ptr__2499[_2510];
    }
  }
  int _9858 = (int)0;
  int _9859 = _2505;
  for (int _2511 = _9858; _2511 < _9859; ++_2511)
  {
    {
      _ptr__2507[(int)0] *= _ptr__2499[_2511];
    }
  }
  _ptr__2507[(int)1] = _ptr__2499[_2505];
  int _9860 = safe_add( _2505,(int)1 );
  int _9861 = _2506;
  for (int _2512 = _9860; _2512 < _9861; ++_2512)
  {
    {
      _ptr__2507[(int)2] *= _ptr__2499[_2512];
    }
  }
  _ptr__2507[(int)3] = _ptr__2499[_2506];
  int _9862 = safe_add( _2506,(int)1 );
  int _9863 = _2503;
  for (int _2513 = _9862; _2513 < _9863; ++_2513)
  {
    {
      _ptr__2507[(int)4] *= _ptr__2499[_2513];
    }
  }
  _ptr__2508[(int)4] = (int)1;
  int _9864 = (int)1;
  int _9865 = (int)5;
  for (int _2514 = _9864; _2514 < _9865; ++_2514)
  {
    {
      _ptr__2508[(((int)5 - _2514) - (int)1)] = safe_mul( _ptr__2508[((int)5 - _2514)],_ptr__2507[((int)5 - _2514)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2515 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2509)));
  _checked_ptr_1<int> _ptr__2515(_2515 ? _2515->raw() : nullptr,_2515 ? _2515->size(0) : 0);
  int _2516 = (int)0;
  if (_2504)
  {
    {
      int _9866 = (int)0;
      int _9867 = _ptr__2507[(int)0];
      for (int _2517 = _9866; _2517 < _9867; ++_2517)
      {
        {
          int _9868 = (int)0;
          int _9869 = _ptr__2507[(int)1];
          for (int _2518 = _9868; _2518 < _9869; ++_2518)
          {
            {
              int _9870 = (int)0;
              int _9871 = _ptr__2507[(int)2];
              for (int _2519 = _9870; _2519 < _9871; ++_2519)
              {
                {
                  int _9872 = _2518;
                  int _9873 = _ptr__2507[(int)1];
                  for (int _2520 = _9872; _2520 < _9873; ++_2520)
                  {
                    {
                      int _9874 = (int)0;
                      int _9875 = _ptr__2507[(int)4];
                      for (int _2521 = _9874; _2521 < _9875; ++_2521)
                      {
                        {
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2517,_ptr__2508[(int)0] ),safe_mul( _2518,_ptr__2508[(int)1] ) ),safe_mul( _2519,_ptr__2508[(int)2] ) ),safe_mul( _2520,_ptr__2508[(int)3] ) ),safe_mul( _2521,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2517,_ptr__2508[(int)0] ),safe_mul( _2520,_ptr__2508[(int)1] ) ),safe_mul( _2519,_ptr__2508[(int)2] ) ),safe_mul( _2518,_ptr__2508[(int)3] ) ),safe_mul( _2521,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          ++ _2516;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _9876 = (int)0;
      int _9877 = _ptr__2507[(int)0];
      for (int _2522 = _9876; _2522 < _9877; ++_2522)
      {
        {
          int _9878 = (int)0;
          int _9879 = _ptr__2507[(int)1];
          for (int _2523 = _9878; _2523 < _9879; ++_2523)
          {
            {
              int _9880 = (int)0;
              int _9881 = _ptr__2507[(int)2];
              for (int _2524 = _9880; _2524 < _9881; ++_2524)
              {
                {
                  int _9882 = (int)0;
                  int _9883 = safe_add( _2523,(int)1 );
                  for (int _2525 = _9882; _2525 < _9883; ++_2525)
                  {
                    {
                      int _9884 = (int)0;
                      int _9885 = _ptr__2507[(int)4];
                      for (int _2526 = _9884; _2526 < _9885; ++_2526)
                      {
                        {
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2522,_ptr__2508[(int)0] ),safe_mul( _2523,_ptr__2508[(int)1] ) ),safe_mul( _2524,_ptr__2508[(int)2] ) ),safe_mul( _2525,_ptr__2508[(int)3] ) ),safe_mul( _2526,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2522,_ptr__2508[(int)0] ),safe_mul( _2525,_ptr__2508[(int)1] ) ),safe_mul( _2524,_ptr__2508[(int)2] ) ),safe_mul( _2523,_ptr__2508[(int)3] ) ),safe_mul( _2526,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          ++ _2516;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2515;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527){ return new mosek::fusion::ConstraintCache(_2527); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2527); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9886;
    bool _9887 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subj.get());
    if (_9887)
    {
      _9886 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subj);
    }
    else
    {
      _9886 = nullptr;
    }
    subj = _9886;
    std::shared_ptr< monty::ndarray< int,1 > > _9888;
    bool _9889 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subi.get());
    if (_9889)
    {
      _9888 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subi);
    }
    else
    {
      _9888 = nullptr;
    }
    subi = _9888;
    std::shared_ptr< monty::ndarray< double,1 > > _9890;
    bool _9891 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->cof.get());
    if (_9891)
    {
      _9890 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->cof);
    }
    else
    {
      _9890 = nullptr;
    }
    cof = _9890;
    std::shared_ptr< monty::ndarray< double,1 > > _9892;
    bool _9893 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->bfix.get());
    if (_9893)
    {
      _9892 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->bfix);
    }
    else
    {
      _9892 = nullptr;
    }
    bfix = _9892;
    std::shared_ptr< monty::ndarray< double,1 > > _9894;
    bool _9895 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_cof.get());
    if (_9895)
    {
      _9894 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_cof);
    }
    else
    {
      _9894 = nullptr;
    }
    buffer_cof = _9894;
    std::shared_ptr< monty::ndarray< int,1 > > _9896;
    bool _9897 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subj.get());
    if (_9897)
    {
      _9896 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subj);
    }
    else
    {
      _9896 = nullptr;
    }
    buffer_subj = _9896;
    std::shared_ptr< monty::ndarray< int,1 > > _9898;
    bool _9899 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subi.get());
    if (_9899)
    {
      _9898 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subi);
    }
    else
    {
      _9898 = nullptr;
    }
    buffer_subi = _9898;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9900;
    bool _9901 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubi.get());
    if (_9901)
    {
      _9900 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubi);
    }
    else
    {
      _9900 = nullptr;
    }
    barsubi = _9900;
    std::shared_ptr< monty::ndarray< int,1 > > _9902;
    bool _9903 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubj.get());
    if (_9903)
    {
      _9902 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubj);
    }
    else
    {
      _9902 = nullptr;
    }
    barsubj = _9902;
    std::shared_ptr< monty::ndarray< int,1 > > _9904;
    bool _9905 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barmatidx.get());
    if (_9905)
    {
      _9904 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barmatidx);
    }
    else
    {
      _9904 = nullptr;
    }
    barmatidx = _9904;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534){ return new mosek::fusion::ConstraintCache(_2528,_2529,_2530,_2531,_2532,_2533,_2534); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2528,_2529,_2530,_2531,_2532,_2533,_2534); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2528(_2528 ? _2528->raw() : nullptr, _2528 ? _2528->size(0) : 0);
    _checked_ptr_1<double> _ptr__2529(_2529 ? _2529->raw() : nullptr, _2529 ? _2529->size(0) : 0);
    _checked_ptr_1<int> _ptr__2530(_2530 ? _2530->raw() : nullptr, _2530 ? _2530->size(0) : 0);
    _checked_ptr_1<double> _ptr__2531(_2531 ? _2531->raw() : nullptr, _2531 ? _2531->size(0) : 0);
    _checked_ptr_1<int> _ptr__2532(_2532 ? _2532->raw() : nullptr, _2532 ? _2532->size(0) : 0);
    _checked_ptr_1<int> _ptr__2533(_2533 ? _2533->raw() : nullptr, _2533 ? _2533->size(0) : 0);
    _checked_ptr_1<int> _ptr__2534(_2534 ? _2534->raw() : nullptr, _2534 ? _2534->size(0) : 0);
    nrows = ((int)((_2528)->size(0)) - (int)1);
    nnz = _ptr__2528[((int)((_2528)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2531.get()))
    {
      {
        bfix = _2531;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2532.get()) && ((NULL != _2533.get()) && (NULL != _2534.get()))))
    {
      {
        nbarnz = (int)((_2532)->size(0));
        if ((nbarnz > (int)((_2533)->size(0))))
        {
          {
            nbarnz = (int)((_2533)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2534)->size(0))))
        {
          {
            nbarnz = (int)((_2534)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2532,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2533,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2534,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2530,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2529,(long long)0,cof,(long long)0,nnz);
    int _9906 = (int)0;
    int _9907 = nrows;
    for (int _2535 = _9906; _2535 < _9907; ++_2535)
    {
      {
        long long _9908 = _ptr__2528[_2535];
        long long _9909 = _ptr__2528[safe_add( _2535,(int)1 )];
        for (long long _2536 = _9908; _2536 < _9909; ++_2536)
        {
          {
            ((*subi)(_2536)) = _2535;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2537){
  _checked_ptr_1<double> _ptr__2537(_2537 ? _2537->raw() : nullptr, _2537 ? _2537->size(0) : 0);
  int _9910 = (int)0;
  int _9911 = nrows;
  for (int _2538 = _9910; _2538 < _9911; ++_2538)
  {
    {
      ((*bfix)(_2538)) = (((*bfix)(_2538)) + _ptr__2537[_2538]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _9912;
  for (long long _2540 = (long long)0, _9913 = nbarnz; _2540 < _9913 ; ++_2540)
  {
    _9912.push_back(_2540);
  }
  auto _9914 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9912.size()),_9912.begin(),_9912.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2539 = _9914;
  _checked_ptr_1<long long> _ptr__2539(_2539 ? _2539->raw() : nullptr,_2539 ? _2539->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2539,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2539,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2541 = barsubi;
      _checked_ptr_1<int> _ptr__2541(_2541 ? _2541->raw() : nullptr,_2541 ? _2541->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2542 = barsubj;
      _checked_ptr_1<int> _ptr__2542(_2542 ? _2542->raw() : nullptr,_2542 ? _2542->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2543 = barmatidx;
      _checked_ptr_1<int> _ptr__2543(_2543 ? _2543->raw() : nullptr,_2543 ? _2543->size(0) : 0);
      std::vector<int> _9915;
      for (long long _2544 = (int)0, _9916 = nbarnz; _2544 < _9916 ; ++_2544)
      {
        _9915.push_back(_ptr__2541[_ptr__2539[_2544]]);
      }
      auto _9917 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9915.size()),_9915.begin(),_9915.end()));
      barsubi = _9917;
      std::vector<int> _9918;
      for (long long _2545 = (int)0, _9919 = nbarnz; _2545 < _9919 ; ++_2545)
      {
        _9918.push_back(_ptr__2542[_ptr__2539[_2545]]);
      }
      auto _9920 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9918.size()),_9918.begin(),_9918.end()));
      barsubj = _9920;
      std::vector<int> _9921;
      for (long long _2546 = (int)0, _9922 = nbarnz; _2546 < _9922 ; ++_2546)
      {
        _9921.push_back(_ptr__2543[_ptr__2539[_2546]]);
      }
      auto _9923 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9921.size()),_9921.begin(),_9921.end()));
      barmatidx = _9923;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2547,std::shared_ptr< monty::ndarray< int,1 > > _2548,std::shared_ptr< monty::ndarray< int,1 > > _2549){
  _checked_ptr_1<int> _ptr__2547(_2547 ? _2547->raw() : nullptr, _2547 ? _2547->size(0) : 0);
  _checked_ptr_1<int> _ptr__2548(_2548 ? _2548->raw() : nullptr, _2548 ? _2548->size(0) : 0);
  _checked_ptr_1<int> _ptr__2549(_2549 ? _2549->raw() : nullptr, _2549 ? _2549->size(0) : 0);
  if ((NULL != _2547.get()))
  {
    {
      int _2550 = (int)((_2547)->size(0));
      if (((int)((_2547)->size(0)) <= safe_add( nbarnz,_2550 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2551 = barsubi;
          _checked_ptr_1<int> _ptr__2551(_2551 ? _2551->raw() : nullptr,_2551 ? _2551->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2552 = barsubj;
          _checked_ptr_1<int> _ptr__2552(_2552 ? _2552->raw() : nullptr,_2552 ? _2552->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2553 = barmatidx;
          _checked_ptr_1<int> _ptr__2553(_2553 ? _2553->raw() : nullptr,_2553 ? _2553->size(0) : 0);
          long long _9924;
          bool _9925 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2550 ));
          if (_9925)
          {
            _9924 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _9924 = safe_add( nbarnz,safe_mul( _2550,(int)2 ) );
          }
          long long _2554 = _9924;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2551,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2552,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2553,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2547,(long long)((int)0),barsubi,nbarnz,(long long)(_2550));
      ::mosek::fusion::Utils::Tools::arraycopy(_2548,(long long)((int)0),barsubj,nbarnz,(long long)(_2550));
      ::mosek::fusion::Utils::Tools::arraycopy(_2549,(long long)((int)0),barmatidx,nbarnz,(long long)(_2550));
      nbarnz += _2550;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2555,std::shared_ptr< monty::ndarray< int,1 > > _2556,std::shared_ptr< monty::ndarray< double,1 > > _2557,std::shared_ptr< monty::ndarray< double,1 > > _2558){
  _checked_ptr_1<long long> _ptr__2555(_2555 ? _2555->raw() : nullptr, _2555 ? _2555->size(0) : 0);
  _checked_ptr_1<int> _ptr__2556(_2556 ? _2556->raw() : nullptr, _2556 ? _2556->size(0) : 0);
  _checked_ptr_1<double> _ptr__2557(_2557 ? _2557->raw() : nullptr, _2557 ? _2557->size(0) : 0);
  _checked_ptr_1<double> _ptr__2558(_2558 ? _2558->raw() : nullptr, _2558 ? _2558->size(0) : 0);
  long long _2559 = safe_add( nunordered,_ptr__2555[nrows] );
  long long _2560 = _ptr__2555[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2561;
  _checked_ptr_1<int> _ptr__2561(_2561 ? _2561->raw() : nullptr,_2561 ? _2561->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2562;
  _checked_ptr_1<int> _ptr__2562(_2562 ? _2562->raw() : nullptr,_2562 ? _2562->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2563;
  _checked_ptr_1<double> _ptr__2563(_2563 ? _2563->raw() : nullptr,_2563 ? _2563->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2559)))
  {
    {
      _2561 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2559)));
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2559)));
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
      _2563 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2559)));
      _ptr__2563.update(_2563 ? _2563->raw() : nullptr, _2563 ? _2563->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2561,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2562,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2563,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2561 = buffer_subi;
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = buffer_subj;
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
      _2563 = buffer_cof;
      _ptr__2563.update(_2563 ? _2563->raw() : nullptr, _2563 ? _2563->size(0) : 0);
    }
  }
  int _9926 = (int)0;
  int _9927 = nrows;
  for (int _2564 = _9926; _2564 < _9927; ++_2564)
  {
    {
      long long _9928 = _ptr__2555[_2564];
      long long _9929 = _ptr__2555[safe_add( _2564,(int)1 )];
      for (long long _2565 = _9928; _2565 < _9929; ++_2565)
      {
        {
          _ptr__2561[safe_add( nunordered,_2565 )] = _2564;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2556,(long long)0,_2562,nunordered,_2560);
  ::mosek::fusion::Utils::Tools::arraycopy(_2557,(long long)0,_2563,nunordered,_2560);
  buffer_subi = _2561;
  buffer_subj = _2562;
  buffer_cof = _2563;
  if ((NULL != _2558.get()))
  {
    {
      int _9930 = (int)0;
      int _9931 = nrows;
      for (int _2566 = _9930; _2566 < _9931; ++_2566)
      {
        {
          ((*bfix)(_2566)) = (((*bfix)(_2566)) + _ptr__2558[_2566]);
        }
      }
    }
  }
  {}
  nunordered = _2559;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2567,std::shared_ptr< monty::ndarray< int,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569,std::shared_ptr< monty::ndarray< double,1 > > _2570) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2567,_2568,_2569,_2570); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2567,std::shared_ptr< monty::ndarray< int,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569,std::shared_ptr< monty::ndarray< double,1 > > _2570){
  _checked_ptr_1<long long> _ptr__2567(_2567 ? _2567->raw() : nullptr, _2567 ? _2567->size(0) : 0);
  _checked_ptr_1<int> _ptr__2568(_2568 ? _2568->raw() : nullptr, _2568 ? _2568->size(0) : 0);
  _checked_ptr_1<double> _ptr__2569(_2569 ? _2569->raw() : nullptr, _2569 ? _2569->size(0) : 0);
  _checked_ptr_1<double> _ptr__2570(_2570 ? _2570->raw() : nullptr, _2570 ? _2570->size(0) : 0);
  if ((((int)((_2567)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2570.get()) && ((int)((_2570)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2567,_2568,_2569,_2570);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< int,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573,std::shared_ptr< monty::ndarray< double,1 > > _2574) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2571,_2572,_2573,_2574); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< int,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573,std::shared_ptr< monty::ndarray< double,1 > > _2574){
  _checked_ptr_1<int> _ptr__2571(_2571 ? _2571->raw() : nullptr, _2571 ? _2571->size(0) : 0);
  _checked_ptr_1<int> _ptr__2572(_2572 ? _2572->raw() : nullptr, _2572 ? _2572->size(0) : 0);
  _checked_ptr_1<double> _ptr__2573(_2573 ? _2573->raw() : nullptr, _2573 ? _2573->size(0) : 0);
  _checked_ptr_1<double> _ptr__2574(_2574 ? _2574->raw() : nullptr, _2574 ? _2574->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2575 = nullptr;
  _checked_ptr_1<long long> _ptr__2575(_2575 ? _2575->raw() : nullptr,_2575 ? _2575->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2574.get())))
  {
    {
      int _9932 = (int)0;
      int _9933 = nrows;
      for (int _2576 = _9932; _2576 < _9933; ++_2576)
      {
        {
          _ptr__2574[_2576] = ((*bfix)(_2576));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2577 = false;
  {
    int _2578 = (int)1;
    while ( ((_2578 < nunordered) && ((((*buffer_subi)((_2578 - (int)1))) < ((*buffer_subi)(_2578))) || ((((*buffer_subi)((_2578 - (int)1))) == ((*buffer_subi)(_2578))) && (((*buffer_subj)((_2578 - (int)1))) <= ((*buffer_subj)(_2578)))))) )
    {
      {
        ++ _2578;
      }
    }
    _2577 = (_2578 == nunordered);
  }
  if ((!_2577))
  {
    {
      std::vector<long long> _9934;
      for (long long _2579 = (int)0, _9935 = nunordered; _2579 < _9935 ; ++_2579)
      {
        _9934.push_back(_2579);
      }
      auto _9936 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9934.size()),_9934.begin(),_9934.end()));
      _2575 = _9936;
      _ptr__2575.update(_2575 ? _2575->raw() : nullptr, _2575 ? _2575->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2575,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2580 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2581 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<int> _ptr__2581(_2581 ? _2581->raw() : nullptr,_2581 ? _2581->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2582 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<int> _ptr__2582(_2582 ? _2582->raw() : nullptr,_2582 ? _2582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2583 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<double> _ptr__2583(_2583 ? _2583->raw() : nullptr,_2583 ? _2583->size(0) : 0);
  long long _2584 = (long long)0;
  if (_2577)
  {
    {
      long long _2585 = (long long)0;
      int _2586 = (int)0;
      long long _2587 = nunordered;
      long long _2588 = _2580;
      int _2589 = (int)0;
      int _2590 = (int)0;
      while ( ((_2590 < _2588) && (_2589 < _2587)) )
      {
        {
          if (((((*subi)(_2590)) < ((*buffer_subi)(_2589))) || ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) < ((*buffer_subj)(_2589))))))
          {
            {
              _ptr__2581[_2586] = ((*subi)(_2590));
              _ptr__2582[_2586] = ((*subj)(_2590));
              _ptr__2583[_2586] = ((*cof)(_2590));
              ++ _2590;
              ++ _2586;
            }
          }
          else if(((((*subi)(_2590)) > ((*buffer_subi)(_2589))) || ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) > ((*buffer_subj)(_2589))))))
          {
            {
              _ptr__2581[_2586] = ((*buffer_subi)(_2589));
              _ptr__2582[_2586] = ((*buffer_subj)(_2589));
              _ptr__2583[_2586] = ((*buffer_cof)(_2589));
              _ptr__2571[_2584] = _ptr__2581[_2586];
              _ptr__2572[_2584] = _ptr__2582[_2586];
              _ptr__2573[_2584] = _ptr__2583[_2586];
              ++ _2584;
              ++ _2589;
              ++ _2586;
            }
          }
          else
          {
            {
              _ptr__2581[_2586] = ((*subi)(_2590));
              _ptr__2582[_2586] = ((*subj)(_2590));
              _ptr__2583[_2586] = ((*cof)(_2590));
              while ( ((_2590 < (int)((subi)->size(0))) && ((_2589 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) == ((*buffer_subj)(_2589)))))) )
              {
                {
                  _ptr__2583[_2586] = (_ptr__2583[_2586] + ((*buffer_cof)(_2589)));
                  ++ _2589;
                }
              }
              _ptr__2571[_2584] = _ptr__2581[_2586];
              _ptr__2572[_2584] = _ptr__2582[_2586];
              _ptr__2573[_2584] = _ptr__2583[_2586];
              ++ _2584;
              ++ _2590;
              ++ _2586;
            }
          }
        }
      }
      while ( (_2590 < _2588) )
      {
        {
          _ptr__2581[_2586] = ((*subi)(_2590));
          _ptr__2582[_2586] = ((*subj)(_2590));
          _ptr__2583[_2586] = ((*cof)(_2590));
          ++ _2590;
          ++ _2586;
        }
      }
      while ( (_2589 < _2587) )
      {
        {
          _ptr__2581[_2586] = ((*buffer_subi)(_2589));
          _ptr__2582[_2586] = ((*buffer_subj)(_2589));
          _ptr__2583[_2586] = ((*buffer_cof)(_2589));
          _ptr__2571[_2584] = _ptr__2581[_2586];
          _ptr__2572[_2584] = _ptr__2582[_2586];
          _ptr__2573[_2584] = _ptr__2583[_2586];
          ++ _2584;
          ++ _2589;
          ++ _2586;
        }
      }
      nnz = _2586;
    }
  }
  else
  {
    {
      long long _2591 = (long long)0;
      int _2592 = (int)0;
      long long _2593 = nunordered;
      long long _2594 = _2580;
      int _2595 = (int)0;
      int _2596 = (int)0;
      while ( ((_2596 < _2594) && (_2595 < _2593)) )
      {
        {
          if (((((*subi)(_2596)) < ((*buffer_subi)(_ptr__2575[_2595]))) || ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) < ((*buffer_subj)(_ptr__2575[_2595]))))))
          {
            {
              _ptr__2581[_2592] = ((*subi)(_2596));
              _ptr__2582[_2592] = ((*subj)(_2596));
              _ptr__2583[_2592] = ((*cof)(_2596));
              ++ _2596;
              ++ _2592;
            }
          }
          else if(((((*subi)(_2596)) > ((*buffer_subi)(_ptr__2575[_2595]))) || ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) > ((*buffer_subj)(_ptr__2575[_2595]))))))
          {
            {
              _ptr__2581[_2592] = ((*buffer_subi)(_ptr__2575[_2595]));
              _ptr__2582[_2592] = ((*buffer_subj)(_ptr__2575[_2595]));
              _ptr__2583[_2592] = ((*buffer_cof)(_ptr__2575[_2595]));
              _ptr__2571[_2584] = _ptr__2581[_2592];
              _ptr__2572[_2584] = _ptr__2582[_2592];
              _ptr__2573[_2584] = _ptr__2583[_2592];
              ++ _2584;
              ++ _2595;
              ++ _2592;
            }
          }
          else
          {
            {
              _ptr__2581[_2592] = ((*subi)(_2596));
              _ptr__2582[_2592] = ((*subj)(_2596));
              _ptr__2583[_2592] = ((*cof)(_2596));
              while ( ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) == ((*buffer_subj)(_ptr__2575[_2595])))) )
              {
                {
                  _ptr__2583[_2592] = (_ptr__2583[_2592] + ((*buffer_cof)(_ptr__2575[_2595])));
                  ++ _2595;
                }
              }
              _ptr__2571[_2584] = _ptr__2581[_2592];
              _ptr__2572[_2584] = _ptr__2582[_2592];
              _ptr__2573[_2584] = _ptr__2583[_2592];
              ++ _2584;
              ++ _2596;
              ++ _2592;
            }
          }
        }
      }
      nnz = _2592;
    }
  }
  subi = _2581;
  subj = _2582;
  cof = _2583;
  nunordered = (long long)0;
  return _2584;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600){ return new mosek::fusion::BoundInterfaceConstraint(_2597,_2598,_2599,_2600); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2597,_2598,_2599,_2600); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2598(_2598 ? _2598->raw() : nullptr, _2598 ? _2598->size(0) : 0);
    _checked_ptr_1<int> _ptr__2599(_2599 ? _2599->raw() : nullptr, _2599 ? _2599->size(0) : 0);
    mosek::fusion::p_SliceConstraint::_initialize(_2597,_2598,_2599);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2600;
  }
}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602){ return new mosek::fusion::BoundInterfaceConstraint(_2601,_2602); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2601,_2602); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceConstraint::_initialize(_2601);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2602;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceConstraint :: dual() { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceConstraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2603 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2603(_2603 ? _2603->raw() : nullptr,_2603 ? _2603->size(0) : 0);
  dual_lu((int)0,_2603,islower);
  return _2603;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605){
  _checked_ptr_1<int> _ptr__2604(_2604 ? _2604->raw() : nullptr, _2604 ? _2604->size(0) : 0);
  _checked_ptr_1<int> _ptr__2605(_2605 ? _2605->raw() : nullptr, _2605 ? _2605->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2606 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2604,_2605);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2606)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(int _2607,int _2608) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(int _2607,int _2608) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(int _2607,int _2608) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(int _2607,int _2608){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2609 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2607,_2608);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2609)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610){
  _checked_ptr_1<int> _ptr__2610(_2610 ? _2610->raw() : nullptr, _2610 ? _2610->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2611 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2610);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2611)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(int _2612) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(int _2612) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(int _2612) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(int _2612){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2613 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2612);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2613)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__from_(monty::rc_ptr< ::mosek::fusion::Constraint > _2614){
  monty::rc_ptr< ::mosek::fusion::Constraint > _9937 = _2614;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::SliceConstraint*>(_9937.get()))
  {
    ::mosek::fusion::SliceConstraint::t _2615 (dynamic_cast<::mosek::fusion::SliceConstraint*>(_9937.get()));
    {
      return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_2615,islower);
    }
  }
  else
  {
    mosek::fusion::Constraint::t _2616 = _9937;
    {
      return nullptr;
    }
  }
}
void mosek::fusion::p_BoundInterfaceConstraint::destroy(){}void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617){ return new mosek::fusion::SliceConstraint(_2617); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2617); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2617,_2617->__mosek_2fusion_2Constraint__getModel());
  }
}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620){ return new mosek::fusion::SliceConstraint(_2618,_2619,_2620); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2618,_2619,_2620); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2619(_2619 ? _2619->raw() : nullptr, _2619 ? _2619->size(0) : 0);
    _checked_ptr_1<int> _ptr__2620(_2620 ? _2620->raw() : nullptr, _2620 ? _2620->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2618,_2619,_2620);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2621 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2621->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2621->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623){ return new mosek::fusion::RangedConstraint(_2622,_2623); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2622,_2623); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2622,_2623);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2622)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2622)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628){ return new mosek::fusion::RangedConstraint(_2624,_2625,_2626,_2627,_2628); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2624,_2625,_2626,_2627,_2628); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2626(_2626 ? _2626->raw() : nullptr, _2626 ? _2626->size(0) : 0);
    _checked_ptr_1<int> _ptr__2627(_2627 ? _2627->raw() : nullptr, _2627 ? _2627->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2624,_2625,_2626,_2627,_2628);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2626;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2627;
  }
}monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__upperBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__upperBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::upperBoundCon() { return __mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__upperBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__lowerBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__lowerBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::lowerBoundCon() { return __mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__lowerBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,true);
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2629){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2629)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631){ return new mosek::fusion::ConicConstraint(_2630,_2631); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2630,_2631); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2630,_2631);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638){ return new mosek::fusion::ConicConstraint(_2632,_2633,_2634,_2635,_2636,_2637,_2638); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2632,_2633,_2634,_2635,_2636,_2637,_2638); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2635(_2635 ? _2635->raw() : nullptr, _2635 ? _2635->size(0) : 0);
    _checked_ptr_1<int> _ptr__2637(_2637 ? _2637->raw() : nullptr, _2637 ? _2637->size(0) : 0);
    _checked_ptr_1<int> _ptr__2638(_2638 ? _2638->raw() : nullptr, _2638 ? _2638->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2632,_2633,_2635,_2637,_2636);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2634;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2635;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2633;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2637;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2638;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2636;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2639 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2640 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _9938 = (int)0;
          int _9939 = _2639;
          for (int _2641 = _9938; _2641 < _9939; ++_2641)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2640.get())->task_var_name(((*nativeslack)(_2641)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2642 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _9940 = (int)0;
          int _9941 = _2639;
          for (int _2643 = _9940; _2643 < _9941; ++_2643)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2640.get())->task_var_name(((*nativeslack)(_2643)),_2642->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2643)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2644 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2644->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2644->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2645,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2646){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2647){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2647)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649){ return new mosek::fusion::LinearConstraint(_2648,_2649); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2648,_2649); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2648,_2649);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2648)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2648)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654){ return new mosek::fusion::LinearConstraint(_2650,_2651,_2652,_2653,_2654); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2650,_2651,_2652,_2653,_2654); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2653(_2653 ? _2653->raw() : nullptr, _2653 ? _2653->size(0) : 0);
    _checked_ptr_1<int> _ptr__2654(_2654 ? _2654->raw() : nullptr, _2654 ? _2654->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2650,_2651,_2653,_2654,_2652);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2652;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2651;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2655 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2655->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2655->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2656,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2657){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2658){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2658)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2659,    monty::rc_ptr< ::mosek::fusion::Model > _2660){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2659,_2660);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->conid;
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2661,    const std::string &  _2662,    std::shared_ptr< monty::ndarray< int,1 > > _2663,    std::shared_ptr< monty::ndarray< int,1 > > _2664,    int _2665){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2663(_2663 ? _2663->raw() : nullptr, _2663 ? _2663->size(0) : 0);
    _checked_ptr_1<int> _ptr__2664(_2664 ? _2664->raw() : nullptr, _2664 ? _2664->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2661,_2663,_2664);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2662;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2664;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2663;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = _2665;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2666 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2666->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2666->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2667 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if ((_pubthis->getSize() == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      else
      {
        {
          if (((int)((name).size()) == (int)0))
          {
            {
              mosek::fusion::p_Model::_get_impl(_2667.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
            }
          }
          else
          {
            {
              monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2668 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
              _2668->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
              if ((_pubthis->getND() > (int)0))
              {
                {
                  _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
                  int _9942 = (int)1;
                  int _9943 = _pubthis->getND();
                  for (int _2669 = _9942; _2669 < _9943; ++_2669)
                  {
                    {
                      _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2669);
                    }
                  }
                }
              }
              {}
              _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
              std::shared_ptr< monty::ndarray< int,1 > > _9944;
              bool _9945 = (_pubthis->getND() > (int)0);
              if (_9945)
              {
                _9944 = _pubthis->getShape();
              }
              else
              {
                _9944 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
              }
              mosek::fusion::p_Model::_get_impl(_2667.get())->connames(nativeidxs,_2668->toString(),_9944,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
              names_flushed = true;
            }
          }
        }
      }
    }
  }
  {}
}
void mosek::fusion::ModelConstraint :: remove() { mosek::fusion::p_ModelConstraint::_get_impl(this)->remove(); }void mosek::fusion::p_ModelConstraint::remove(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2Constraint__getModel().get())->removeConstraintBlock(conid);
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2671,    monty::rc_ptr< ::mosek::fusion::Model > _2672){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2672;
    shape = mosek::fusion::p_Constraint::_get_impl(_2671)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2671)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2673,    std::shared_ptr< monty::ndarray< int,1 > > _2674,    std::shared_ptr< monty::ndarray< int,1 > > _2675){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2674(_2674 ? _2674->raw() : nullptr, _2674 ? _2674->size(0) : 0);
    _checked_ptr_1<int> _ptr__2675(_2675 ? _2675->raw() : nullptr, _2675 ? _2675->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2673;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2674;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2675;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2676,long long _2677,std::shared_ptr< monty::ndarray< std::string,1 > > _2678){
  _checked_ptr_1<long long> _ptr__2676(_2676 ? _2676->raw() : nullptr, _2676 ? _2676->size(0) : 0);
}
void mosek::fusion::p_Constraint::dual_lu(int _2679,std::shared_ptr< monty::ndarray< double,1 > > _2680,bool _2681){
  _checked_ptr_1<double> _ptr__2680(_2680 ? _2680->raw() : nullptr, _2680 ? _2680->size(0) : 0);
  model->getConstraintDuals(_2681,nativeidxs,_2680,_2679);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2682 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2682(_2682 ? _2682->raw() : nullptr,_2682 ? _2682->size(0) : 0);
  values(false,(int)0,_2682);
  return _2682;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2683 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2683(_2683 ? _2683->raw() : nullptr,_2683 ? _2683->size(0) : 0);
  values(true,(int)0,_2683);
  return _2683;
}
void mosek::fusion::p_Constraint::values(bool _2684,int _2685,std::shared_ptr< monty::ndarray< double,1 > > _2686){
  _checked_ptr_1<double> _ptr__2686(_2686 ? _2686->raw() : nullptr, _2686 ? _2686->size(0) : 0);
  model->getConstraintValues(_2684,nativeidxs,_2686,_2685);
}
void mosek::fusion::Constraint :: remove() { mosek::fusion::p_Constraint::_get_impl(this)->remove(); }void mosek::fusion::p_Constraint::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original constraints can be removed"));
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2687) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2687); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2687){
  _checked_ptr_1<double> _ptr__2687(_2687 ? _2687->raw() : nullptr, _2687 ? _2687->size(0) : 0);
  _pubthis->update(::mosek::fusion::p_Expr::reshape(::mosek::fusion::p_Expr::constTerm(_2687),_pubthis->getShape()),(::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>(),true);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2688) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2688); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2688){
  std::shared_ptr< monty::ndarray< int,1 > > _2689 = _2688->getShape();
  _checked_ptr_1<int> _ptr__2689(_2689 ? _2689->raw() : nullptr,_2689 ? _2689->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2689)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9946 = (int)0;
  int _9947 = (int)((_2689)->size(0));
  for (int _2690 = _9946; _2690 < _9947; ++_2690)
  {
    {
      if ((_ptr__2689[_2690] != ((*shape)(_2690))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9948 = (int)((_2689)->size(0));
  int _9949 = (int)((shape)->size(0));
  for (int _2691 = _9948; _2691 < _9949; ++_2691)
  {
    {
      if ((((*shape)(_2691)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2688);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2692,monty::rc_ptr< ::mosek::fusion::Variable > _2693,bool _2694) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2692,_2693,_2694); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2692,monty::rc_ptr< ::mosek::fusion::Variable > _2693,bool _2694){
  int _2695 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2696 = _2692->getShape();
  _checked_ptr_1<int> _ptr__2696(_2696 ? _2696->raw() : nullptr,_2696 ? _2696->size(0) : 0);
  if ((_2695 < (int)((_2696)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9950 = (int)0;
  int _9951 = (int)((_2696)->size(0));
  for (int _2697 = _9950; _2697 < _9951; ++_2697)
  {
    {
      if ((_ptr__2696[_2697] != ((*shape)(_2697))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9952 = (int)((_2696)->size(0));
  int _9953 = (int)((shape)->size(0));
  for (int _2698 = _9952; _2698 < _9953; ++_2698)
  {
    {
      if ((((*shape)(_2698)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2699 = _2693->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2700 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2699)));
  _checked_ptr_1<long long> _ptr__2700(_2700 ? _2700->raw() : nullptr,_2700 ? _2700->size(0) : 0);
  if ((_2699 < _2693->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2701 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2699)));
      _checked_ptr_1<long long> _ptr__2701(_2701 ? _2701->raw() : nullptr,_2701 ? _2701->size(0) : 0);
      _2693->inst((int)0,_2701,(int)0,_2700);
    }
  }
  else
  {
    {
      _2693->inst((int)0,_2700);
    }
  }
  int _9954 = (int)0;
  int _9955 = _2699;
  for (int _2702 = _9954; _2702 < _9955; ++_2702)
  {
    {
      if ((_ptr__2700[_2702] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Semidefinite terms cannot be updated"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2703;
  _checked_ptr_1<int> _ptr__2703(_2703 ? _2703->raw() : nullptr,_2703 ? _2703->size(0) : 0);
  {
    bool _2704 = true;
    int _9956 = (int)0;
    int _9957 = (_2699 - (int)1);
    for (int _2705 = _9956; _2705 < _9957; ++_2705)
    {
      {
        _2704 = (_2704 && (_ptr__2700[_2705] < _ptr__2700[safe_add( _2705,(int)1 )]));
      }
    }
    if (_2704)
    {
      {
        if ((!_2694))
        {
          {
            std::vector<int> _9958;
            for (int _2706 = (int)0, _9959 = _2699; _2706 < _9959 ; ++_2706)
            {
              _9958.push_back((int)_ptr__2700[_2706]);
            }
            auto _9960 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9958.size()),_9958.begin(),_9958.end()));
            _2703 = _9960;
            _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
          }
        }
        else
        {
          {
            _2703 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2699,(int)1 ))));
            _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
            _ptr__2703[(int)0] = (int)0;
            int _9961 = (int)0;
            int _9962 = _2699;
            for (int _2707 = _9961; _2707 < _9962; ++_2707)
            {
              {
                _ptr__2703[safe_add( (int)1,_2707 )] = (int)_ptr__2700[_2707];
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::vector<long long> _9963;
        for (int _2709 = (int)0, _9964 = _2699; _2709 < _9964 ; ++_2709)
        {
          _9963.push_back(_2709);
        }
        auto _9965 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9963.size()),_9963.begin(),_9963.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2708 = _9965;
        _checked_ptr_1<long long> _ptr__2708(_2708 ? _2708->raw() : nullptr,_2708 ? _2708->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2708,_2700,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2699));
        int _2710 = (int)1;
        int _9966 = (int)1;
        int _9967 = _2699;
        for (int _2711 = _9966; _2711 < _9967; ++_2711)
        {
          {
            if ((_ptr__2700[_ptr__2708[(_2711 - (int)1)]] < _ptr__2700[_ptr__2708[_2711]]))
            {
              {
                ++ _2710;
              }
            }
            {}
          }
        }
        if (_2694)
        {
          {
            _2710 += (int)1;
          }
        }
        {}
        _2703 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2710)));
        _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
        int _2712 = (int)0;
        if (_2694)
        {
          {
            _ptr__2703[(int)0] = (int)0;
            ++ _2712;
          }
        }
        {}
        _ptr__2703[_2712] = (int)_ptr__2700[_ptr__2708[(int)0]];
        int _9968 = (int)1;
        int _9969 = _2699;
        for (int _2713 = _9968; _2713 < _9969; ++_2713)
        {
          {
            if ((_ptr__2700[(_2713 - (int)1)] < _ptr__2700[_2713]))
            {
              {
                _ptr__2703[_2712] = (int)_ptr__2700[_ptr__2708[_2713]];
                ++ _2712;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2692,_2703);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2714,monty::rc_ptr< ::mosek::fusion::Variable > _2715) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2714,_2715); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2714,monty::rc_ptr< ::mosek::fusion::Variable > _2715){
  _pubthis->update(_2714,_2715,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2716 = (int)1;
  int _9970 = (int)0;
  int _9971 = (int)((shape)->size(0));
  for (int _2717 = _9970; _2717 < _9971; ++_2717)
  {
    {
      _2716 *= ((*shape)(_2717));
    }
  }
  return _2716;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2718,    int _2719) { return mosek::fusion::p_Constraint::stack(_2718,_2719); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2718,int _2719){
  return ::mosek::fusion::p_Constraint::dstack(_2718,_2719);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2720,    monty::rc_ptr< ::mosek::fusion::Constraint > _2721,    monty::rc_ptr< ::mosek::fusion::Constraint > _2722,    int _2723) { return mosek::fusion::p_Constraint::stack(_2720,_2721,_2722,_2723); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2720,monty::rc_ptr< ::mosek::fusion::Constraint > _2721,monty::rc_ptr< ::mosek::fusion::Constraint > _2722,int _2723){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2720.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2721.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2722.get())}),_2723);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2724,    monty::rc_ptr< ::mosek::fusion::Constraint > _2725,    int _2726) { return mosek::fusion::p_Constraint::stack(_2724,_2725,_2726); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2724,monty::rc_ptr< ::mosek::fusion::Constraint > _2725,int _2726){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2724.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2725.get())}),_2726);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727) { return mosek::fusion::p_Constraint::hstack(_2727); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727){
  return ::mosek::fusion::p_Constraint::dstack(_2727,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2728) { return mosek::fusion::p_Constraint::vstack(_2728); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2728){
  return ::mosek::fusion::p_Constraint::dstack(_2728,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2729,    monty::rc_ptr< ::mosek::fusion::Constraint > _2730,    monty::rc_ptr< ::mosek::fusion::Constraint > _2731) { return mosek::fusion::p_Constraint::hstack(_2729,_2730,_2731); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2729,monty::rc_ptr< ::mosek::fusion::Constraint > _2730,monty::rc_ptr< ::mosek::fusion::Constraint > _2731){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2729.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2730.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2731.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2732,    monty::rc_ptr< ::mosek::fusion::Constraint > _2733,    monty::rc_ptr< ::mosek::fusion::Constraint > _2734) { return mosek::fusion::p_Constraint::vstack(_2732,_2733,_2734); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2732,monty::rc_ptr< ::mosek::fusion::Constraint > _2733,monty::rc_ptr< ::mosek::fusion::Constraint > _2734){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2732.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2733.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2734.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2735,    monty::rc_ptr< ::mosek::fusion::Constraint > _2736) { return mosek::fusion::p_Constraint::hstack(_2735,_2736); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2735,monty::rc_ptr< ::mosek::fusion::Constraint > _2736){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2735.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2736.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2737,    monty::rc_ptr< ::mosek::fusion::Constraint > _2738) { return mosek::fusion::p_Constraint::vstack(_2737,_2738); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2737,monty::rc_ptr< ::mosek::fusion::Constraint > _2738){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2737.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2738.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2739,int _2740){
  monty::rc_ptr< ::mosek::fusion::Model > _2741 = nullptr;
  {
    int _9972 = (int)0;
    int _9973 = (int)((_2739)->size(0));
    for (int _2742 = _9972; _2742 < _9973; ++_2742)
    {
      {
        if ((NULL == _2741.get()))
        {
          {
            _2741 = ((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2742)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2742)))->model != _2741)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2743 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9974;
            bool _9975 = ((int)((mosek::fusion::p_Model::_get_impl(_2741.get())->getName()).size()) > (int)0);
            if (_9975)
            {
              _9974 = mosek::fusion::p_Model::_get_impl(_2741.get())->getName();
            }
            else
            {
              _9974 = std::string ("?");
            }
            std::string _2744 = _9974;
            std::string _9976;
            bool _9977 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_9977)
            {
              _9976 = mosek::fusion::p_Model::_get_impl(((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _9976 = std::string ("?");
            }
            std::string _2745 = _9976;
            _2743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2744)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2745)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2743->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2739)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2739)->size(0)) == (int)1))
  {
    {
      return ((*_2739)((int)1));
    }
  }
  else
  {
    {
      int _2746 = (int)((_2739)->size(0));
      int _2747 = (int)1;
      int _9978 = (int)0;
      int _9979 = _2746;
      for (int _2748 = _9978; _2748 < _9979; ++_2748)
      {
        {
          int _9980;
          bool _9981 = (((*_2739)(_2748))->getND() > _2747);
          if (_9981)
          {
            _9980 = ((*_2739)(_2748))->getND();
          }
          else
          {
            _9980 = _2747;
          }
          _2747 = _9980;
        }
      }
      if ((_2740 == _2747))
      {
        {
          ++ _2747;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2749 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2746,_2747)));
      int _9982 = (int)0;
      int _9983 = _2746;
      for (int _2750 = _9982; _2750 < _9983; ++_2750)
      {
        {
          int _9984 = (int)0;
          int _9985 = _2747;
          for (int _2751 = _9984; _2751 < _9985; ++_2751)
          {
            {
              ((*_2749)(_2750,_2751)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _9986;
      for (int _2753 = (int)0, _9987 = _2746; _2753 < _9987 ; ++_2753)
      {
        _9986.push_back(((*_2739)(_2753))->getSize());
      }
      auto _9988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9986.size()),_9986.begin(),_9986.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2752 = _9988;
      _checked_ptr_1<int> _ptr__2752(_2752 ? _2752->raw() : nullptr,_2752 ? _2752->size(0) : 0);
      int _2754 = (int)0;
      int _9989 = (int)0;
      int _9990 = _2746;
      for (int _2755 = _9989; _2755 < _9990; ++_2755)
      {
        {
          _2754 += _ptr__2752[_2755];
        }
      }
      int _9991 = (int)0;
      int _9992 = _2746;
      for (int _2756 = _9991; _2756 < _9992; ++_2756)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2757 = ((*_2739)(_2756))->getShape();
          _checked_ptr_1<int> _ptr__2757(_2757 ? _2757->raw() : nullptr,_2757 ? _2757->size(0) : 0);
          int _9993 = (int)0;
          int _9994 = (int)((_2757)->size(0));
          for (int _2758 = _9993; _2758 < _9994; ++_2758)
          {
            {
              ((*_2749)(_2756,_2758)) = _ptr__2757[_2758];
            }
          }
        }
      }
      if (((_2740 < (int)0) || (_2740 > _2747)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _9995 = (int)0;
      int _9996 = _2740;
      for (int _2759 = _9995; _2759 < _9996; ++_2759)
      {
        {
          int _9997 = (int)1;
          int _9998 = _2746;
          for (int _2760 = _9997; _2760 < _9998; ++_2760)
          {
            {
              if ((((*_2749)((int)0,_2759)) != ((*_2749)(_2760,_2759))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _9999 = safe_add( _2740,(int)1 );
      int _10000 = _2747;
      for (int _2761 = _9999; _2761 < _10000; ++_2761)
      {
        {
          int _10001 = (int)1;
          int _10002 = _2746;
          for (int _2762 = _10001; _2762 < _10002; ++_2762)
          {
            {
              if ((((*_2749)((int)0,_2761)) != ((*_2749)(_2762,_2761))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2763 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2754)));
      _checked_ptr_1<int> _ptr__2763(_2763 ? _2763->raw() : nullptr,_2763 ? _2763->size(0) : 0);
      std::vector<int> _10003;
      for (int _2765 = (int)0, _10004 = _2747; _2765 < _10004 ; ++_2765)
      {
        _10003.push_back(((*_2749)((int)0,_2765)));
      }
      auto _10005 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10003.size()),_10003.begin(),_10003.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2764 = _10005;
      _checked_ptr_1<int> _ptr__2764(_2764 ? _2764->raw() : nullptr,_2764 ? _2764->size(0) : 0);
      int _10006 = (int)1;
      int _10007 = _2746;
      for (int _2766 = _10006; _2766 < _10007; ++_2766)
      {
        {
          _ptr__2764[_2740] += ((*_2749)(_2766,_2740));
        }
      }
      {
        int _2767 = (int)((_2764)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2768 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2739)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2768(_2768 ? _2768->raw() : nullptr,_2768 ? _2768->size(0) : 0);
        int _10008 = (int)0;
        int _10009 = (int)((_2739)->size(0));
        for (int _2769 = _10008; _2769 < _10009; ++_2769)
        {
          {
            _ptr__2768[safe_add( _2769,(int)1 )] = safe_add( _ptr__2768[_2769],((*_2749)(_2769,_2740)) );
          }
        }
        if ((_2740 == (int)0))
        {
          {
            int _2770 = (int)0;
            int _10010 = (int)0;
            int _10011 = _2746;
            for (int _2771 = _10010; _2771 < _10011; ++_2771)
            {
              {
                int _2772 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2771)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2771)))->nativeidxs,(int)0,_2763,_2770,_2772);
                _2770 += _2772;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10012;
            for (int _2774 = (int)0, _10013 = _2746; _2774 < _10013 ; ++_2774)
            {
              _10012.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2774)))->nativeidxs);
            }
            auto _10014 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10012.size()),_10012.begin(),_10012.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2773 = _10014;
            if ((_2740 < _2747))
            {
              {
                int _2775 = (int)1;
                int _10015 = (int)0;
                int _10016 = _2740;
                for (int _2776 = _10015; _2776 < _10016; ++_2776)
                {
                  {
                    _2775 *= _ptr__2764[_2776];
                  }
                }
                int _2777 = (int)1;
                int _10017 = safe_add( _2740,(int)1 );
                int _10018 = _2747;
                for (int _2778 = _10017; _2778 < _10018; ++_2778)
                {
                  {
                    _2777 *= _ptr__2764[_2778];
                  }
                }
                int _2779 = (int)0;
                int _10019 = (int)0;
                int _10020 = _2775;
                for (int _2780 = _10019; _2780 < _10020; ++_2780)
                {
                  {
                    int _10021 = (int)0;
                    int _10022 = _2746;
                    for (int _2781 = _10021; _2781 < _10022; ++_2781)
                    {
                      {
                        int _2782 = (int)0;
                        int _2783 = ((*_2749)(_2781,_2740));
                        int _10023 = (int)0;
                        int _10024 = _2783;
                        for (int _2784 = _10023; _2784 < _10024; ++_2784)
                        {
                          {
                            int _10025 = (int)0;
                            int _10026 = _2777;
                            for (int _2785 = _10025; _2785 < _10026; ++_2785)
                            {
                              {
                                _ptr__2763[_2779] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2746)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2780,_2777 ),_2783 ),_2782 )));
                                ++ _2779;
                                ++ _2782;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2786 = (int)1;
                int _10027 = (int)0;
                int _10028 = _2747;
                for (int _2787 = _10027; _2787 < _10028; ++_2787)
                {
                  {
                    _2786 *= _ptr__2764[_2787];
                  }
                }
                int _2788 = (int)0;
                int _10029 = (int)0;
                int _10030 = _2786;
                for (int _2789 = _10029; _2789 < _10030; ++_2789)
                {
                  {
                    int _10031 = (int)0;
                    int _10032 = _2746;
                    for (int _2790 = _10031; _2790 < _10032; ++_2790)
                    {
                      {
                        _ptr__2763[_2788] = ((*((*_2773)(_2790)))(_2789));
                        ++ _2788;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2741,_2764,_2763)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2791) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2791); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2791) { return __mosek_2fusion_2Constraint__index(_2791); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2791){
  _checked_ptr_1<int> _ptr__2791(_2791 ? _2791->raw() : nullptr, _2791 ? _2791->size(0) : 0);
  if (((int)((_2791)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10033 = (int)0;
      int _10034 = (int)((shape)->size(0));
      for (int _2792 = _10033; _2792 < _10034; ++_2792)
      {
        {
          if (((_ptr__2791[_2792] < (int)0) || (_ptr__2791[_2792] > ((*shape)(_2792)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2793 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2794 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2793)));
      _checked_ptr_1<long long> _ptr__2794(_2794 ? _2794->raw() : nullptr,_2794 ? _2794->size(0) : 0);
      _ptr__2794[(_2793 - (int)1)] = (int)1;
      int _10035 = (int)1;
      int _10036 = _2793;
      for (int _2795 = _10035; _2795 < _10036; ++_2795)
      {
        {
          _ptr__2794[((_2793 - _2795) - (int)1)] = safe_mul( _ptr__2794[(_2793 - _2795)],((*shape)((_2793 - _2795))) );
        }
      }
      int _2796 = (int)0;
      int _10037 = (int)0;
      int _10038 = _2793;
      for (int _2797 = _10037; _2797 < _10038; ++_2797)
      {
        {
          _2796 += (int)safe_mul( _ptr__2794[_2797],_ptr__2791[_2797] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2796)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2798) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2798); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2798) { return __mosek_2fusion_2Constraint__index(_2798); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2798){
  if ((((int)((shape)->size(0)) == (int)0) && (_2798 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2798 < (int)0) || (_2798 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2798)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2799,_2800); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800) { return __mosek_2fusion_2Constraint__slice(_2799,_2800); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800){
  _checked_ptr_1<int> _ptr__2799(_2799 ? _2799->raw() : nullptr, _2799 ? _2799->size(0) : 0);
  _checked_ptr_1<int> _ptr__2800(_2800 ? _2800->raw() : nullptr, _2800 ? _2800->size(0) : 0);
  if (((int)((_2799)->size(0)) != (int)((_2800)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2799)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10039 = (int)0;
      int _10040 = (int)((shape)->size(0));
      for (int _2801 = _10039; _2801 < _10040; ++_2801)
      {
        {
          if (((_ptr__2799[_2801] < (int)0) || (_ptr__2800[_2801] > ((*shape)(_2801)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2799[_2801] > _ptr__2800[_2801]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2802 = (int)((shape)->size(0));
      std::vector<int> _10041;
      for (int _2804 = (int)0, _10042 = _2802; _2804 < _10042 ; ++_2804)
      {
        _10041.push_back((_ptr__2800[_2804] - _ptr__2799[_2804]));
      }
      auto _10043 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10041.size()),_10041.begin(),_10041.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2803 = _10043;
      _checked_ptr_1<int> _ptr__2803(_2803 ? _2803->raw() : nullptr,_2803 ? _2803->size(0) : 0);
      int _2805 = (int)1;
      int _10044 = (int)0;
      int _10045 = _2802;
      for (int _2806 = _10044; _2806 < _10045; ++_2806)
      {
        {
          _2805 *= (_ptr__2800[_2806] - _ptr__2799[_2806]);
        }
      }
      if ((_2805 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2803,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2807 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2805)));
          _checked_ptr_1<int> _ptr__2807(_2807 ? _2807->raw() : nullptr,_2807 ? _2807->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2808 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2802)));
            _checked_ptr_1<int> _ptr__2808(_2808 ? _2808->raw() : nullptr,_2808 ? _2808->size(0) : 0);
            _ptr__2808[(_2802 - (int)1)] = (int)1;
            int _10046 = (int)1;
            int _10047 = _2802;
            for (int _2809 = _10046; _2809 < _10047; ++_2809)
            {
              {
                _ptr__2808[((_2802 - _2809) - (int)1)] = safe_mul( _ptr__2808[(_2802 - _2809)],((*shape)((_2802 - _2809))) );
              }
            }
            int _2810 = (int)0;
            int _10048 = (int)0;
            int _10049 = _2802;
            for (int _2811 = _10048; _2811 < _10049; ++_2811)
            {
              {
                _2810 += safe_mul( _ptr__2799[_2811],_ptr__2808[_2811] );
              }
            }
            std::vector<int> _10050;
            for (int _2813 = (int)0, _10051 = _2802; _2813 < _10051 ; ++_2813)
            {
              _10050.push_back(_2810);
            }
            auto _10052 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10050.size()),_10050.begin(),_10050.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2812 = _10052;
            _checked_ptr_1<int> _ptr__2812(_2812 ? _2812->raw() : nullptr,_2812 ? _2812->size(0) : 0);
            std::vector<int> _10053;
            for (int _2815 = (int)0, _10054 = _2802; _2815 < _10054 ; ++_2815)
            {
              _10053.push_back(_ptr__2799[_2815]);
            }
            auto _10055 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10053.size()),_10053.begin(),_10053.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2814 = _10055;
            _checked_ptr_1<int> _ptr__2814(_2814 ? _2814->raw() : nullptr,_2814 ? _2814->size(0) : 0);
            int _10056 = (int)0;
            int _10057 = _2805;
            for (int _2816 = _10056; _2816 < _10057; ++_2816)
            {
              {
                _ptr__2807[_2816] = ((*nativeidxs)(_ptr__2812[(_2802 - (int)1)]));
                _ptr__2814[(_2802 - (int)1)] += (int)1;
                _ptr__2812[(_2802 - (int)1)] += _ptr__2808[(_2802 - (int)1)];
                if ((_ptr__2814[(_2802 - (int)1)] >= _ptr__2800[(_2802 - (int)1)]))
                {
                  {
                    int _2817 = (_2802 - (int)1);
                    while ( ((_2817 > (int)0) && (_ptr__2814[_2817] >= _ptr__2800[_2817])) )
                    {
                      {
                        _ptr__2814[_2817] = _ptr__2799[_2817];
                        _ptr__2814[(_2817 - (int)1)] += (int)1;
                        _ptr__2812[(_2817 - (int)1)] += _ptr__2808[(_2817 - (int)1)];
                        -- _2817;
                      }
                    }
                    int _10058 = safe_add( _2817,(int)1 );
                    int _10059 = _2802;
                    for (int _2818 = _10058; _2818 < _10059; ++_2818)
                    {
                      {
                        _ptr__2812[_2818] = _ptr__2812[_2817];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2803,_2807)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2819,int _2820) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2819,_2820); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2819,int _2820) { return __mosek_2fusion_2Constraint__slice(_2819,_2820); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2819,int _2820){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2819 == (int)0) && (_2820 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2819 < (int)0) || (_2820 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2819 > _2820))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _10060;
      for (int _2821 = _2819, _10061 = _2820; _2821 < _10061 ; ++_2821)
      {
        _10060.push_back(((*nativeidxs)(_2821)));
      }
      auto _10062 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10060.size()),_10060.begin(),_10060.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2820 - _2819))}),_10062)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2822 = (int)1;
  int _10063 = (int)0;
  int _10064 = (int)((shape)->size(0));
  for (int _2823 = _10063; _2823 < _10064; ++_2823)
  {
    {
      _2822 *= ((*shape)(_2823));
    }
  }
  return _2822;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _10065;
  for (int _2824 = (int)0, _10066 = (int)((shape)->size(0)); _2824 < _10066 ; ++_2824)
  {
    _10065.push_back(((*shape)(_2824)));
  }
  auto _10067 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10065.size()),_10065.begin(),_10065.end()));
  return _10067;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getNativeidxs(){
  return nativeidxs;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2825) { return mosek::fusion::p_Set::size(_2825); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2825){
  _checked_ptr_1<int> _ptr__2825(_2825 ? _2825->raw() : nullptr, _2825 ? _2825->size(0) : 0);
  long long _2826 = (long long)1;
  int _10068 = (int)0;
  int _10069 = (int)((_2825)->size(0));
  for (int _2827 = _10068; _2827 < _10069; ++_2827)
  {
    {
      _2826 *= _ptr__2825[_2827];
    }
  }
  return _2826;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2828,    std::shared_ptr< monty::ndarray< int,1 > > _2829) { return mosek::fusion::p_Set::match(_2828,_2829); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2828,std::shared_ptr< monty::ndarray< int,1 > > _2829){
  _checked_ptr_1<int> _ptr__2828(_2828 ? _2828->raw() : nullptr, _2828 ? _2828->size(0) : 0);
  _checked_ptr_1<int> _ptr__2829(_2829 ? _2829->raw() : nullptr, _2829 ? _2829->size(0) : 0);
  if (((int)((_2828)->size(0)) != (int)((_2829)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _10070 = (int)0;
  int _10071 = (int)((_2828)->size(0));
  for (int _2830 = _10070; _2830 < _10071; ++_2830)
  {
    {
      if ((_ptr__2828[_2830] != _ptr__2829[_2830]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2831,    std::shared_ptr< monty::ndarray< int,1 > > _2832) { return mosek::fusion::p_Set::linearidx(_2831,_2832); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2831,std::shared_ptr< monty::ndarray< int,1 > > _2832){
  _checked_ptr_1<int> _ptr__2831(_2831 ? _2831->raw() : nullptr, _2831 ? _2831->size(0) : 0);
  _checked_ptr_1<int> _ptr__2832(_2832 ? _2832->raw() : nullptr, _2832 ? _2832->size(0) : 0);
  long long _2833 = _ptr__2832[(int)0];
  int _10072 = (int)1;
  int _10073 = (int)((_2832)->size(0));
  for (int _2834 = _10072; _2834 < _10073; ++_2834)
  {
    {
      _2833 = safe_add( safe_mul( _2833,_ptr__2831[_2834] ),_ptr__2832[_2834] );
    }
  }
  return _2833;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2835,    long long _2836) { return mosek::fusion::p_Set::idxtokey(_2835,_2836); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2835,long long _2836){
  _checked_ptr_1<int> _ptr__2835(_2835 ? _2835->raw() : nullptr, _2835 ? _2835->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2837 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2835)->size(0)))));
  _checked_ptr_1<int> _ptr__2837(_2837 ? _2837->raw() : nullptr,_2837 ? _2837->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2835,_2836,_2837);
  return _2837;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2838,    long long _2839,    std::shared_ptr< monty::ndarray< int,1 > > _2840) { mosek::fusion::p_Set::idxtokey(_2838,_2839,_2840); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2838,long long _2839,std::shared_ptr< monty::ndarray< int,1 > > _2840){
  _checked_ptr_1<int> _ptr__2838(_2838 ? _2838->raw() : nullptr, _2838 ? _2838->size(0) : 0);
  _checked_ptr_1<int> _ptr__2840(_2840 ? _2840->raw() : nullptr, _2840 ? _2840->size(0) : 0);
  int _2841 = (int)((_2838)->size(0));
  if ((_2841 > (int)0))
  {
    {
      long long _2842 = _2839;
      int _10074 = (int)0;
      int _10075 = (_2841 - (int)1);
      for (int _2843 = _10074; _2843 < _10075; ++_2843)
      {
        {
          _ptr__2840[((_2841 - _2843) - (int)1)] = (int)(_2842 % _ptr__2838[((_2841 - _2843) - (int)1)]);
          _2842 /= _ptr__2838[((_2841 - _2843) - (int)1)];
        }
      }
      _ptr__2840[(int)0] = (int)_2842;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2844,    long long _2845) { return mosek::fusion::p_Set::indexToString(_2844,_2845); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2844,long long _2845){
  _checked_ptr_1<int> _ptr__2844(_2844 ? _2844->raw() : nullptr, _2844 ? _2844->size(0) : 0);
  int _2846 = (int)((_2844)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2847 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2846 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2846 == (int)1))
  {
    {
      return _2847->__mosek_2fusion_2Utils_2StringBuffer__a(_2845)->toString();
    }
  }
  else
  {
    {
      long long _2848 = _2845;
      std::shared_ptr< monty::ndarray< int,1 > > _2849 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2846)));
      _checked_ptr_1<int> _ptr__2849(_2849 ? _2849->raw() : nullptr,_2849 ? _2849->size(0) : 0);
      int _10076 = (int)1;
      int _10077 = _2846;
      for (int _2850 = _10076; _2850 < _10077; ++_2850)
      {
        {
          _ptr__2849[(_2846 - _2850)] = (int)(_2848 % _ptr__2844[(_2846 - _2850)]);
          _2848 /= _ptr__2844[(_2846 - _2850)];
        }
      }
      _ptr__2849[(int)0] = (int)_2848;
      _2847->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2849[(int)0]);
      int _10078 = (int)1;
      int _10079 = _2846;
      for (int _2851 = _10078; _2851 < _10079; ++_2851)
      {
        {
          _2847->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2849[_2851]);
        }
      }
      return _2847->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2852) { return mosek::fusion::p_Set::keyToString(_2852); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2852){
  _checked_ptr_1<int> _ptr__2852(_2852 ? _2852->raw() : nullptr, _2852 ? _2852->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2853 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2853->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2852[(int)0]);
  int _10080 = (int)1;
  int _10081 = (int)((_2852)->size(0));
  for (int _2854 = _10080; _2854 < _10081; ++_2854)
  {
    {
      _2853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2852[_2854]);
    }
  }
  return _2853->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2855,    long long _2856,    std::shared_ptr< monty::ndarray< int,1 > > _2857) { mosek::fusion::p_Set::indexToKey(_2855,_2856,_2857); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2855,long long _2856,std::shared_ptr< monty::ndarray< int,1 > > _2857){
  _checked_ptr_1<int> _ptr__2855(_2855 ? _2855->raw() : nullptr, _2855 ? _2855->size(0) : 0);
  _checked_ptr_1<int> _ptr__2857(_2857 ? _2857->raw() : nullptr, _2857 ? _2857->size(0) : 0);
  int _2858 = (int)((_2855)->size(0));
  if ((_2858 == (int)1))
  {
    {
      _ptr__2857[(int)0] = (int)_2856;
    }
  }
  else
  {
    {
      long long _2859 = _2856;
      int _10082 = (int)1;
      int _10083 = _2858;
      for (int _2860 = _10082; _2860 < _10083; ++_2860)
      {
        {
          _ptr__2857[(_2858 - _2860)] = (int)(_2859 % _ptr__2855[(_2858 - _2860)]);
          _2859 /= _ptr__2855[(_2858 - _2860)];
        }
      }
      _ptr__2857[(int)0] = (int)_2859;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2861) { return mosek::fusion::p_Set::strides(_2861); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2861){
  _checked_ptr_1<int> _ptr__2861(_2861 ? _2861->raw() : nullptr, _2861 ? _2861->size(0) : 0);
  int _2862 = (int)((_2861)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2863 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2862)));
  _checked_ptr_1<long long> _ptr__2863(_2863 ? _2863->raw() : nullptr,_2863 ? _2863->size(0) : 0);
  _ptr__2863[(_2862 - (int)1)] = (int)1;
  int _10084 = (int)1;
  int _10085 = _2862;
  for (int _2864 = _10084; _2864 < _10085; ++_2864)
  {
    {
      _ptr__2863[((_2862 - _2864) - (int)1)] = safe_mul( _ptr__2863[(_2862 - _2864)],_ptr__2861[(_2862 - _2864)] );
    }
  }
  return _2863;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2865,    std::shared_ptr< monty::ndarray< int,1 > > _2866) { return mosek::fusion::p_Set::make(_2865,_2866); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2865,std::shared_ptr< monty::ndarray< int,1 > > _2866){
  _checked_ptr_1<int> _ptr__2865(_2865 ? _2865->raw() : nullptr, _2865 ? _2865->size(0) : 0);
  _checked_ptr_1<int> _ptr__2866(_2866 ? _2866->raw() : nullptr, _2866 ? _2866->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2865)->size(0)),(int)((_2866)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2867(_2867 ? _2867->raw() : nullptr,_2867 ? _2867->size(0) : 0);
  int _10086 = (int)0;
  int _10087 = (int)((_2865)->size(0));
  for (int _2868 = _10086; _2868 < _10087; ++_2868)
  {
    {
      _ptr__2867[_2868] = _ptr__2865[_2868];
    }
  }
  int _10088 = (int)0;
  int _10089 = (int)((_2866)->size(0));
  for (int _2869 = _10088; _2869 < _10089; ++_2869)
  {
    {
      _ptr__2867[safe_add( (int)((_2865)->size(0)),_2869 )] = _ptr__2866[_2869];
    }
  }
  return _2867;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2870) { return mosek::fusion::p_Set::make(_2870); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2870){
  _checked_ptr_1<int> _ptr__2870(_2870 ? _2870->raw() : nullptr, _2870 ? _2870->size(0) : 0);
  std::vector<int> _10090;
  for (int _2871 = (int)0, _10091 = (int)((_2870)->size(0)); _2871 < _10091 ; ++_2871)
  {
    _10090.push_back(_ptr__2870[_2871]);
  }
  auto _10092 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10090.size()),_10090.begin(),_10090.end()));
  return _10092;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2872,    int _2873,    int _2874) { return mosek::fusion::p_Set::make(_2872,_2873,_2874); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2872,int _2873,int _2874){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2872),(int)(_2873),(int)(_2874)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2875,    int _2876) { return mosek::fusion::p_Set::make(_2875,_2876); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2875,int _2876){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2875),(int)(_2876)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2877) { return mosek::fusion::p_Set::make(_2877); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2877){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2877)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2878) { return mosek::fusion::p_Set::make(_2878); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2878){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2878)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881){ return new mosek::fusion::ConeDomain(_2879,_2880,_2881); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2879,_2880,_2881); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2881(_2881 ? _2881->raw() : nullptr, _2881 ? _2881->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _10093;
    bool _10094 = (NULL != _2881.get());
    if (_10094)
    {
      _10093 = ::mosek::fusion::p_Set::make(_2881);
    }
    else
    {
      _10093 = nullptr;
    }
    shape = _10093;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2880;
    key = _2879;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2880;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883){ return new mosek::fusion::ConeDomain(_2882,_2883); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2882,_2883); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2883(_2883 ? _2883->raw() : nullptr, _2883 ? _2883->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2882,1.0,_2883);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2884){
  _checked_ptr_1<int> _ptr__2884(_2884 ? _2884->raw() : nullptr, _2884 ? _2884->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2884,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2885) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2885); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2885) { return __mosek_2fusion_2ConeDomain__axis(_2885); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2885){
  axisidx = _2885;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887){ return new mosek::fusion::LinPSDDomain(_2886,_2887); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2886,_2887); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2886(_2886 ? _2886->raw() : nullptr, _2886 ? _2886->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2887;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2886);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2888){ return new mosek::fusion::LinPSDDomain(_2888); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2888) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2888); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2888){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2888(_2888 ? _2888->raw() : nullptr, _2888 ? _2888->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2888);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892){ return new mosek::fusion::PSDDomain(_2889,_2890,_2891,_2892); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2889,_2890,_2891,_2892); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2890(_2890 ? _2890->raw() : nullptr, _2890 ? _2890->size(0) : 0);
    axisIsSet = true;
    shape = _2890;
    key = _2889;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2891;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2892;
    int _2893 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2891) && (((int)((shape)->size(0)) > _2892) && ((_2891 >= (int)0) && ((_2892 >= (int)0) && (_2891 != _2892)))))) && (((*shape)(_2891)) == ((*shape)(_2892)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895){ return new mosek::fusion::PSDDomain(_2894,_2895); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2894,_2895); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2895(_2895 ? _2895->raw() : nullptr, _2895 ? _2895->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2894,_2895,((int)((_2895)->size(0)) - (int)2),((int)((_2895)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2896){ return new mosek::fusion::PSDDomain(_2896); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2896) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2896); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2896){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2896;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2897,int _2898) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2897,_2898); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2897,int _2898) { return __mosek_2fusion_2PSDDomain__axis(_2897,_2898); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2897,int _2898){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2897;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2898;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2897 >= (int)0) && ((_2898 >= (int)0) && (_2897 != _2898))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2897) && (((int)((shape)->size(0)) > _2898) && ((_2897 >= (int)0) && ((_2898 >= (int)0) && (_2897 != _2898)))))) && (((*shape)(_2897)) == ((*shape)(_2898))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899){ return new mosek::fusion::SymmetricRangeDomain(_2899); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2899); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2899);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10095;
    bool _10096 = (NULL == shape.get());
    if (_10096)
    {
      _10095 = (int)0;
    }
    else
    {
      _10095 = ((*shape)((int)0));
    }
    dim = _10095;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903){ return new mosek::fusion::RangeDomain(_2900,_2901,_2902,_2903); }mosek::fusion::RangeDomain::RangeDomain  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2900,_2901,_2902,_2903); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2901(_2901 ? _2901->raw() : nullptr, _2901 ? _2901->size(0) : 0);
    _checked_ptr_1<double> _ptr__2902(_2902 ? _2902->raw() : nullptr, _2902 ? _2902->size(0) : 0);
    _checked_ptr_1<int> _ptr__2903(_2903 ? _2903->raw() : nullptr, _2903 ? _2903->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2900,_2901,_2902,_2903,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908){ return new mosek::fusion::RangeDomain(_2904,_2905,_2906,_2907,_2908); }mosek::fusion::RangeDomain::RangeDomain  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2904,_2905,_2906,_2907,_2908); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2905(_2905 ? _2905->raw() : nullptr, _2905 ? _2905->size(0) : 0);
    _checked_ptr_1<double> _ptr__2906(_2906 ? _2906->raw() : nullptr, _2906 ? _2906->size(0) : 0);
    _checked_ptr_1<int> _ptr__2907(_2907 ? _2907->raw() : nullptr, _2907 ? _2907->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2904,_2905,_2906,_2907,_2908,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914){ return new mosek::fusion::RangeDomain(_2909,_2910,_2911,_2912,_2913,_2914); }mosek::fusion::RangeDomain::RangeDomain  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2909,_2910,_2911,_2912,_2913,_2914); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2910(_2910 ? _2910->raw() : nullptr, _2910 ? _2910->size(0) : 0);
    _checked_ptr_1<double> _ptr__2911(_2911 ? _2911->raw() : nullptr, _2911 ? _2911->size(0) : 0);
    _checked_ptr_1<int> _ptr__2912(_2912 ? _2912->raw() : nullptr, _2912 ? _2912->size(0) : 0);
    cardinal_flag = false;
    shape = _2912;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2909;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2911;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2910;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2913;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915){ return new mosek::fusion::RangeDomain(_2915); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2915); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2915)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2915)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2915)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2915)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2915)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2915)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2915)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2916); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916) { return __mosek_2fusion_2RangeDomain__sparse(_2916); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2916)->size(0)),(int)((_2916)->size(1)))));
  {
    int _2917 = (int)0;
    for(;(_2917 < (int)((_2916)->size(0)));++ _2917)
    {
      {
        {
          int _2918 = (int)0;
          for(;(_2918 < (int)((_2916)->size(1)));++ _2918)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2917,_2918)) = ((*_2916)(_2917,_2918));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2919); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919) { return __mosek_2fusion_2RangeDomain__sparse(_2919); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919){
  _checked_ptr_1<int> _ptr__2919(_2919 ? _2919->raw() : nullptr, _2919 ? _2919->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2919)->size(0)),(int)1)));
  int _10097 = (int)0;
  int _10098 = (int)((_2919)->size(0));
  for (int _2920 = _10097; _2920 < _10098; ++_2920)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2920,(int)0)) = _ptr__2919[_2920];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2921,int _2922,int _2923) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2921,_2922,_2923); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2921,int _2922,int _2923) { return __mosek_2fusion_2RangeDomain__withShape(_2921,_2922,_2923); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2921,int _2922,int _2923){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2921),(int)(_2922),(int)(_2923)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2924,int _2925) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2924,_2925); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2924,int _2925) { return __mosek_2fusion_2RangeDomain__withShape(_2924,_2925); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2924,int _2925){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2924),(int)(_2925)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2926) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2926); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2926) { return __mosek_2fusion_2RangeDomain__withShape(_2926); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2926){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2926)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2927); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927) { return __mosek_2fusion_2RangeDomain__withShape(_2927); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927){
  _checked_ptr_1<int> _ptr__2927(_2927 ? _2927->raw() : nullptr, _2927 ? _2927->size(0) : 0);
  shape = _2927;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2928){
  _checked_ptr_1<int> _ptr__2928(_2928 ? _2928->raw() : nullptr, _2928 ? _2928->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2928)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _10099 = (int)0;
      int _10100 = (int)((shape)->size(0));
      for (int _2929 = _10099; _2929 < _10100; ++_2929)
      {
        {
          if ((((*shape)(_2929)) != _ptr__2928[_2929]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930){ return new mosek::fusion::SymmetricLinearDomain(_2930); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2930); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2930;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2930)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2930)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2930)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2930)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10101;
    bool _10102 = (NULL == shape.get());
    if (_10102)
    {
      _10101 = (int)0;
    }
    else
    {
      _10101 = ((*shape)((int)0));
    }
    dim = _10101;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2931); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2931); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2931)->size(0)),(int)((_2931)->size(1)))));
  {
    int _2932 = (int)0;
    for(;(_2932 < (int)((_2931)->size(0)));++ _2932)
    {
      {
        {
          int _2933 = (int)0;
          for(;(_2933 < (int)((_2931)->size(1)));++ _2933)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2932,_2933)) = ((*_2931)(_2932,_2933));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2934); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2934); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934){
  _checked_ptr_1<int> _ptr__2934(_2934 ? _2934->raw() : nullptr, _2934 ? _2934->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2934)->size(0)),(int)1)));
  int _10103 = (int)0;
  int _10104 = (int)((_2934)->size(0));
  for (int _2935 = _10103; _2935 < _10104; ++_2935)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2935,(int)0)) = _ptr__2934[_2935];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2936){
  _checked_ptr_1<int> _ptr__2936(_2936 ? _2936->raw() : nullptr, _2936 ? _2936->size(0) : 0);
  int _10105 = (int)0;
  int _10106 = (int)((_2936)->size(0));
  for (int _2937 = _10105; _2937 < _10106; ++_2937)
  {
    {
      if ((_ptr__2936[_2937] == ((*shape)(_2937))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941){ return new mosek::fusion::LinearDomain(_2938,_2939,_2940,_2941); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2938,_2939,_2940,_2941); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2940(_2940 ? _2940->raw() : nullptr, _2940 ? _2940->size(0) : 0);
    _checked_ptr_1<int> _ptr__2941(_2941 ? _2941->raw() : nullptr, _2941 ? _2941->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2938,_2939,_2940,_2941,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947){ return new mosek::fusion::LinearDomain(_2942,_2943,_2944,_2945,_2946,_2947); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2942,_2943,_2944,_2945,_2946,_2947); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2944(_2944 ? _2944->raw() : nullptr, _2944 ? _2944->size(0) : 0);
    _checked_ptr_1<int> _ptr__2945(_2945 ? _2945->raw() : nullptr, _2945 ? _2945->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2943;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2945;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2942;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2944;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2946;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948){ return new mosek::fusion::LinearDomain(_2948); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2948); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2948)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2948)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2948)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2948)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2948)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2948)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2948)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2949); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949) { return __mosek_2fusion_2LinearDomain__sparse(_2949); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2949)->size(0)),(int)((_2949)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2950 = (int)0;
    for(;(_2950 < (int)((_2949)->size(0)));++ _2950)
    {
      {
        {
          int _2951 = (int)0;
          for(;(_2951 < (int)((_2949)->size(1)));++ _2951)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2950,_2951)) = ((*_2949)(_2950,_2951));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2952); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952) { return __mosek_2fusion_2LinearDomain__sparse(_2952); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952){
  _checked_ptr_1<int> _ptr__2952(_2952 ? _2952->raw() : nullptr, _2952 ? _2952->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2952)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _10107 = (int)0;
  int _10108 = (int)((_2952)->size(0));
  for (int _2953 = _10107; _2953 < _10108; ++_2953)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2953,(int)0)) = _ptr__2952[_2953];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2954,int _2955,int _2956) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2954,_2955,_2956); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2954,int _2955,int _2956) { return __mosek_2fusion_2LinearDomain__withShape(_2954,_2955,_2956); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2954,int _2955,int _2956){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2954),(int)(_2955),(int)(_2956)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2957,int _2958) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2957,_2958); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2957,int _2958) { return __mosek_2fusion_2LinearDomain__withShape(_2957,_2958); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2957,int _2958){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2957),(int)(_2958)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2959) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2959); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2959) { return __mosek_2fusion_2LinearDomain__withShape(_2959); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2959){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2959)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2960); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960) { return __mosek_2fusion_2LinearDomain__withShape(_2960); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960){
  _checked_ptr_1<int> _ptr__2960(_2960 ? _2960->raw() : nullptr, _2960 ? _2960->size(0) : 0);
  shape = _2960;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2961){
  _checked_ptr_1<int> _ptr__2961(_2961 ? _2961->raw() : nullptr, _2961 ? _2961->size(0) : 0);
  if ((!scalable))
  {
    {
      int _10109 = (int)0;
      int _10110 = (int)((_2961)->size(0));
      for (int _2962 = _10109; _2962 < _10110; ++_2962)
      {
        {
          if ((_ptr__2961[_2962] == ((*shape)(_2962))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2963){
  _checked_ptr_1<int> _ptr__2963(_2963 ? _2963->raw() : nullptr, _2963 ? _2963->size(0) : 0);
  long long _2964 = (long long)1;
  int _10111 = (int)0;
  int _10112 = (int)((_2963)->size(0));
  for (int _2965 = _10111; _2965 < _10112; ++_2965)
  {
    {
      _2964 *= _ptr__2963[_2965];
    }
  }
  return _2964;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _2966,monty::rc_ptr< ::mosek::fusion::Matrix > _2967){
  if (((mosek::fusion::p_Matrix::_get_impl(_2966)->dimi != mosek::fusion::p_Matrix::_get_impl(_2967)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_2966)->dimj != mosek::fusion::p_Matrix::_get_impl(_2967)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_2966->isSparse() && _2967->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2968(_2968 ? _2968->raw() : nullptr,_2968 ? _2968->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2969(_2969 ? _2969->raw() : nullptr,_2969 ? _2969->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2970 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<double> _ptr__2970(_2970 ? _2970->raw() : nullptr,_2970 ? _2970->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2971 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<int> _ptr__2971(_2971 ? _2971->raw() : nullptr,_2971 ? _2971->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2972 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<int> _ptr__2972(_2972 ? _2972->raw() : nullptr,_2972 ? _2972->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2973 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<double> _ptr__2973(_2973 ? _2973->raw() : nullptr,_2973 ? _2973->size(0) : 0);
      _2966->getDataAsTriplets(_2968,_2969,_2970);
      _2967->getDataAsTriplets(_2971,_2972,_2973);
      long long _2974 = (int)0;
      {
        int _2975 = (int)0;
        int _2976 = (int)0;
        while ( ((_2976 < (int)((_2968)->size(0))) && (_2975 < (int)((_2971)->size(0)))) )
        {
          {
            if (((_ptr__2968[_2976] < _ptr__2971[_2975]) || ((_ptr__2968[_2976] == _ptr__2971[_2975]) && (_ptr__2969[_2976] < _ptr__2972[_2975]))))
            {
              {
                ++ _2974;
                ++ _2976;
              }
            }
            else
            {
              {
                if (((_ptr__2968[_2976] > _ptr__2971[_2975]) || ((_ptr__2968[_2976] == _ptr__2971[_2975]) && (_ptr__2969[_2976] > _ptr__2972[_2975]))))
                {
                  {
                    ++ _2974;
                    ++ _2975;
                  }
                }
                else
                {
                  {
                    ++ _2974;
                    ++ _2976;
                    ++ _2975;
                  }
                }
              }
            }
          }
        }
        _2974 += ((int)((_2968)->size(0)) - _2976);
        _2974 += ((int)((_2971)->size(0)) - _2975);
      }
      std::shared_ptr< monty::ndarray< int,2 > > _2977 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2974,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _2978 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2974)));
      _checked_ptr_1<double> _ptr__2978(_2978 ? _2978->raw() : nullptr,_2978 ? _2978->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2979 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2974)));
      _checked_ptr_1<double> _ptr__2979(_2979 ? _2979->raw() : nullptr,_2979 ? _2979->size(0) : 0);
      {
        int _2980 = (int)0;
        int _2981 = (int)0;
        int _2982 = (int)0;
        while ( ((_2982 < (int)((_2968)->size(0))) && (_2981 < (int)((_2971)->size(0)))) )
        {
          {
            if (((_ptr__2968[_2982] < _ptr__2971[_2981]) || ((_ptr__2968[_2982] == _ptr__2971[_2981]) && (_ptr__2969[_2982] < _ptr__2972[_2981]))))
            {
              {
                ((*_2977)(_2980,(int)0)) = _ptr__2968[_2982];
                ((*_2977)(_2980,(int)1)) = _ptr__2969[_2982];
                _ptr__2978[_2980] = _ptr__2970[_2982];
                _ptr__2979[_2980] = 0.0;
                ++ _2980;
                ++ _2982;
              }
            }
            else
            {
              {
                if (((_ptr__2968[_2982] > _ptr__2971[_2981]) || ((_ptr__2968[_2982] == _ptr__2971[_2981]) && (_ptr__2969[_2982] > _ptr__2972[_2981]))))
                {
                  {
                    ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
                    ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
                    _ptr__2978[_2980] = 0.0;
                    _ptr__2979[_2980] = _ptr__2973[_2981];
                    ++ _2980;
                    ++ _2981;
                  }
                }
                else
                {
                  {
                    ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
                    ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
                    _ptr__2978[_2980] = _ptr__2970[_2981];
                    _ptr__2979[_2980] = _ptr__2973[_2981];
                    ++ _2980;
                    ++ _2982;
                    ++ _2981;
                  }
                }
              }
            }
          }
        }
        while ( (_2982 < (int)((_2968)->size(0))) )
        {
          {
            ((*_2977)(_2980,(int)0)) = _ptr__2968[_2982];
            ((*_2977)(_2980,(int)1)) = _ptr__2969[_2982];
            _ptr__2978[_2980] = _ptr__2970[_2982];
            _ptr__2979[_2980] = 0.0;
            ++ _2980;
            ++ _2982;
          }
        }
        while ( (_2981 < (int)((_2971)->size(0))) )
        {
          {
            ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
            ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
            _ptr__2978[_2980] = 0.0;
            _ptr__2979[_2980] = _ptr__2973[_2981];
            ++ _2980;
            ++ _2981;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2978,_2979,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimj)}),_2977,(int)1);
    }
  }
  else
  {
    {
      int _2983 = mosek::fusion::p_Matrix::_get_impl(_2966)->dimj;
      int _2984 = mosek::fusion::p_Matrix::_get_impl(_2966)->dimi;
      int _2985 = safe_mul( _2984,_2983 );
      std::shared_ptr< monty::ndarray< double,1 > > _2986;
      _checked_ptr_1<double> _ptr__2986(_2986 ? _2986->raw() : nullptr,_2986 ? _2986->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2987;
      _checked_ptr_1<double> _ptr__2987(_2987 ? _2987->raw() : nullptr,_2987 ? _2987->size(0) : 0);
      if (_2966->isSparse())
      {
        {
          _2986 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2985)));
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2988(_2988 ? _2988->raw() : nullptr,_2988 ? _2988->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2989(_2989 ? _2989->raw() : nullptr,_2989 ? _2989->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2990 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<double> _ptr__2990(_2990 ? _2990->raw() : nullptr,_2990 ? _2990->size(0) : 0);
          _2966->getDataAsTriplets(_2988,_2989,_2990);
          int _10113 = (int)0;
          int _10114 = (int)((_2988)->size(0));
          for (int _2991 = _10113; _2991 < _10114; ++_2991)
          {
            {
              _ptr__2986[safe_add( safe_mul( _ptr__2988[_2991],_2983 ),_ptr__2989[_2991] )] = _ptr__2990[_2991];
            }
          }
        }
      }
      else
      {
        {
          _2986 = _2966->getDataAsArray();
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
        }
      }
      if (_2967->isSparse())
      {
        {
          _2987 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2985)));
          _ptr__2987.update(_2987 ? _2987->raw() : nullptr, _2987 ? _2987->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2992 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<int> _ptr__2992(_2992 ? _2992->raw() : nullptr,_2992 ? _2992->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2993 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<int> _ptr__2993(_2993 ? _2993->raw() : nullptr,_2993 ? _2993->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2994 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<double> _ptr__2994(_2994 ? _2994->raw() : nullptr,_2994 ? _2994->size(0) : 0);
          _2967->getDataAsTriplets(_2992,_2993,_2994);
          int _10115 = (int)0;
          int _10116 = (int)((_2992)->size(0));
          for (int _2995 = _10115; _2995 < _10116; ++_2995)
          {
            {
              _ptr__2987[safe_add( safe_mul( _ptr__2992[_2995],_2983 ),_ptr__2993[_2995] )] = _ptr__2994[_2995];
            }
          }
        }
      }
      else
      {
        {
          _2987 = _2967->getDataAsArray();
          _ptr__2987.update(_2987 ? _2987->raw() : nullptr, _2987 ? _2987->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2986,_2987,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimj)}),nullptr,(int)1);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _2996,std::shared_ptr< monty::ndarray< double,2 > > _2997){
  if ((((int)((_2996)->size(0)) != (int)((_2997)->size(0))) || ((int)((_2996)->size(1)) != (int)((_2997)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int _2998 = (int)((_2996)->size(1));
  int _2999 = (int)((_2996)->size(0));
  int _3000 = safe_mul( _2999,_2998 );
  std::shared_ptr< monty::ndarray< double,1 > > _3001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3000)));
  _checked_ptr_1<double> _ptr__3001(_3001 ? _3001->raw() : nullptr,_3001 ? _3001->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3002 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3000)));
  _checked_ptr_1<double> _ptr__3002(_3002 ? _3002->raw() : nullptr,_3002 ? _3002->size(0) : 0);
  int _3003 = (int)0;
  int _10117 = (int)0;
  int _10118 = _2999;
  for (int _3004 = _10117; _3004 < _10118; ++_3004)
  {
    {
      int _10119 = (int)0;
      int _10120 = _2998;
      for (int _3005 = _10119; _3005 < _10120; ++_3005)
      {
        {
          _ptr__3001[_3003] = ((*_2996)(_3004,_3005));
          _ptr__3002[_3003] = ((*_2997)(_3004,_3005));
          ++ _3003;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3001,_3002,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2999),(int)(_2998)}),nullptr,(int)1);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _3006,monty::rc_ptr< ::mosek::fusion::Matrix > _3007){
  if (_3007->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3008 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<int> _ptr__3008(_3008 ? _3008->raw() : nullptr,_3008 ? _3008->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<int> _ptr__3009(_3009 ? _3009->raw() : nullptr,_3009 ? _3009->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3010 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<double> _ptr__3010(_3010 ? _3010->raw() : nullptr,_3010 ? _3010->size(0) : 0);
      _3007->getDataAsTriplets(_3008,_3009,_3010);
      std::shared_ptr< monty::ndarray< int,2 > > _3011 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_3008)->size(0)),(int)2)));
      int _10121 = (int)0;
      int _10122 = (int)((_3008)->size(0));
      for (int _3012 = _10121; _3012 < _10122; ++_3012)
      {
        {
          ((*_3011)(_3012,(int)0)) = _ptr__3008[_3012];
          ((*_3011)(_3012,(int)1)) = _ptr__3009[_3012];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3006,false,_3010,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimj)}),_3011,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3006,false,_3007->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _3013){
  _checked_ptr_1<int> _ptr__3013(_3013 ? _3013->raw() : nullptr, _3013 ? _3013->size(0) : 0);
  long long _3014 = (int)1;
  int _10123 = (int)0;
  int _10124 = (int)((_3013)->size(0));
  for (int _3015 = _10123; _3015 < _10124; ++_3015)
  {
    {
      _3014 *= _ptr__3013[_3015];
    }
  }
  return _3014;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _3016,std::shared_ptr< monty::ndarray< double,1 > > _3017,std::shared_ptr< monty::ndarray< double,1 > > _3018,std::shared_ptr< monty::ndarray< int,2 > > _3019,std::shared_ptr< monty::ndarray< int,1 > > _3020){
  _checked_ptr_1<double> _ptr__3017(_3017 ? _3017->raw() : nullptr, _3017 ? _3017->size(0) : 0);
  _checked_ptr_1<double> _ptr__3018(_3018 ? _3018->raw() : nullptr, _3018 ? _3018->size(0) : 0);
  _checked_ptr_1<int> _ptr__3020(_3020 ? _3020->raw() : nullptr, _3020 ? _3020->size(0) : 0);
  if (((!_3016) && ((int)((_3017)->size(0)) != (int)((_3018)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _3019.get()) && ((int)((_3019)->size(0)) != (int)((_3017)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _10125 = (int)0;
  int _10126 = (int)((_3018)->size(0));
  for (int _3021 = _10125; _3021 < _10126; ++_3021)
  {
    {
      if ((_ptr__3017[_3021] > _ptr__3018[_3021]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _3020.get()) && (::mosek::fusion::p_Domain::dimsize(_3020) != (int)((_3017)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_3016,_3017,_3018,_3020)->__mosek_2fusion_2RangeDomain__sparse(_3019);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3022) { return mosek::fusion::p_Domain::symmetric(_3022); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3022){
  return _3022->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3023) { return mosek::fusion::p_Domain::symmetric(_3023); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3023){
  return _3023->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3024,    std::shared_ptr< monty::ndarray< int,2 > > _3025) { return mosek::fusion::p_Domain::sparse(_3024,_3025); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3024,std::shared_ptr< monty::ndarray< int,2 > > _3025){
  return _3024->__mosek_2fusion_2RangeDomain__sparse(_3025);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3026,    std::shared_ptr< monty::ndarray< int,1 > > _3027) { return mosek::fusion::p_Domain::sparse(_3026,_3027); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3026,std::shared_ptr< monty::ndarray< int,1 > > _3027){
  _checked_ptr_1<int> _ptr__3027(_3027 ? _3027->raw() : nullptr, _3027 ? _3027->size(0) : 0);
  return _3026->__mosek_2fusion_2RangeDomain__sparse(_3027);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3028,    std::shared_ptr< monty::ndarray< int,2 > > _3029) { return mosek::fusion::p_Domain::sparse(_3028,_3029); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3028,std::shared_ptr< monty::ndarray< int,2 > > _3029){
  return _3028->__mosek_2fusion_2LinearDomain__sparse(_3029);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3030,    std::shared_ptr< monty::ndarray< int,1 > > _3031) { return mosek::fusion::p_Domain::sparse(_3030,_3031); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3030,std::shared_ptr< monty::ndarray< int,1 > > _3031){
  _checked_ptr_1<int> _ptr__3031(_3031 ? _3031->raw() : nullptr, _3031 ? _3031->size(0) : 0);
  return _3030->__mosek_2fusion_2LinearDomain__sparse(_3031);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3032) { return mosek::fusion::p_Domain::integral(_3032); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3032){
  return _3032->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3033) { return mosek::fusion::p_Domain::integral(_3033); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3033){
  return _3033->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034) { return mosek::fusion::p_Domain::integral(_3034); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034){
  return _3034->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3035,    int _3036) { return mosek::fusion::p_Domain::axis(_3035,_3036); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3035,int _3036){
  return _3035->__mosek_2fusion_2ConeDomain__axis(_3036);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3037,    std::shared_ptr< monty::ndarray< int,1 > > _3038) { return mosek::fusion::p_Domain::inDPowerCone(_3037,_3038); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3037,std::shared_ptr< monty::ndarray< int,1 > > _3038){
  _checked_ptr_1<int> _ptr__3038(_3038 ? _3038->raw() : nullptr, _3038 ? _3038->size(0) : 0);
  std::vector<int> _10127;
  for (int _3039 = (int)0, _10128 = (int)((_3038)->size(0)); _3039 < _10128 ; ++_3039)
  {
    _10127.push_back(_ptr__3038[_3039]);
  }
  auto _10129 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10127.size()),_10127.begin(),_10127.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3037,_10129);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3040,    int _3041) { return mosek::fusion::p_Domain::inDPowerCone(_3040,_3041); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3040,int _3041){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3041),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3042) { return mosek::fusion::p_Domain::inDPowerCone(_3042); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3042){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3042,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3043,    std::shared_ptr< monty::ndarray< int,1 > > _3044) { return mosek::fusion::p_Domain::inPPowerCone(_3043,_3044); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3043,std::shared_ptr< monty::ndarray< int,1 > > _3044){
  _checked_ptr_1<int> _ptr__3044(_3044 ? _3044->raw() : nullptr, _3044 ? _3044->size(0) : 0);
  std::vector<int> _10130;
  for (int _3045 = (int)0, _10131 = (int)((_3044)->size(0)); _3045 < _10131 ; ++_3045)
  {
    _10130.push_back(_ptr__3044[_3045]);
  }
  auto _10132 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10130.size()),_10130.begin(),_10130.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3043,_10132);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3046,    int _3047) { return mosek::fusion::p_Domain::inPPowerCone(_3046,_3047); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3046,int _3047){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3046,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3047),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3048) { return mosek::fusion::p_Domain::inPPowerCone(_3048); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3048){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3048,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3049) { return mosek::fusion::p_Domain::inDExpCone(_3049); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3049){
  _checked_ptr_1<int> _ptr__3049(_3049 ? _3049->raw() : nullptr, _3049 ? _3049->size(0) : 0);
  std::vector<int> _10133;
  for (int _3050 = (int)0, _10134 = (int)((_3049)->size(0)); _3050 < _10134 ; ++_3050)
  {
    _10133.push_back(_ptr__3049[_3050]);
  }
  auto _10135 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10133.size()),_10133.begin(),_10133.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_10135);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _3051) { return mosek::fusion::p_Domain::inDExpCone(_3051); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _3051){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3051),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3052) { return mosek::fusion::p_Domain::inPExpCone(_3052); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3052){
  _checked_ptr_1<int> _ptr__3052(_3052 ? _3052->raw() : nullptr, _3052 ? _3052->size(0) : 0);
  std::vector<int> _10136;
  for (int _3053 = (int)0, _10137 = (int)((_3052)->size(0)); _3053 < _10137 ; ++_3053)
  {
    _10136.push_back(_ptr__3052[_3053]);
  }
  auto _10138 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10136.size()),_10136.begin(),_10136.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_10138);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _3054) { return mosek::fusion::p_Domain::inPExpCone(_3054); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _3054){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3054),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3055) { return mosek::fusion::p_Domain::inRotatedQCone(_3055); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _3055){
  _checked_ptr_1<int> _ptr__3055(_3055 ? _3055->raw() : nullptr, _3055 ? _3055->size(0) : 0);
  std::vector<int> _10139;
  for (int _3056 = (int)0, _10140 = (int)((_3055)->size(0)); _3056 < _10140 ; ++_3056)
  {
    _10139.push_back(_ptr__3055[_3056]);
  }
  auto _10141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10139.size()),_10139.begin(),_10139.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_10141);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3057,    int _3058) { return mosek::fusion::p_Domain::inRotatedQCone(_3057,_3058); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3057,int _3058){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3057),(int)(_3058)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3059) { return mosek::fusion::p_Domain::inRotatedQCone(_3059); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3059){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3059)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3060) { return mosek::fusion::p_Domain::inQCone(_3060); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _3060){
  _checked_ptr_1<int> _ptr__3060(_3060 ? _3060->raw() : nullptr, _3060 ? _3060->size(0) : 0);
  std::vector<int> _10142;
  for (int _3061 = (int)0, _10143 = (int)((_3060)->size(0)); _3061 < _10143 ; ++_3061)
  {
    _10142.push_back(_ptr__3060[_3061]);
  }
  auto _10144 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10142.size()),_10142.begin(),_10142.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_10144);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3062,    int _3063) { return mosek::fusion::p_Domain::inQCone(_3062,_3063); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3062,int _3063){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3062),(int)(_3063)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3064) { return mosek::fusion::p_Domain::inQCone(_3064); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3064){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3064)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3065,    int _3066) { return mosek::fusion::p_Domain::isLinPSD(_3065,_3066); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3065,int _3066){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make(_3066,(safe_mul( _3065,safe_add( _3065,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3067) { return mosek::fusion::p_Domain::isLinPSD(_3067); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3067){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _3067,safe_add( _3067,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3068,    int _3069) { return mosek::fusion::p_Domain::isTrilPSD(_3068,_3069); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3068,int _3069){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3069),(int)(_3068),(int)(_3068)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3070) { return mosek::fusion::p_Domain::isTrilPSD(_3070); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3070){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3070),(int)(_3070)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3071,    int _3072) { return mosek::fusion::p_Domain::inPSDCone(_3071,_3072); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3071,int _3072){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3072),(int)(_3071),(int)(_3071)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3073) { return mosek::fusion::p_Domain::inPSDCone(_3073); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3073){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3073),(int)(_3073)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _3074) { return mosek::fusion::p_Domain::binary(_3074); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _3074){
  _checked_ptr_1<int> _ptr__3074(_3074 ? _3074->raw() : nullptr, _3074 ? _3074->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_3074)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3075,    int _3076) { return mosek::fusion::p_Domain::binary(_3075,_3076); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3075,int _3076){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3075),(int)(_3076)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3077) { return mosek::fusion::p_Domain::binary(_3077); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3077){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3077)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3078,    monty::rc_ptr< ::mosek::fusion::Matrix > _3079) { return mosek::fusion::p_Domain::inRange(_3078,_3079); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _3078,monty::rc_ptr< ::mosek::fusion::Matrix > _3079){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3078,_3079);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,2 > > _3080,    std::shared_ptr< monty::ndarray< double,2 > > _3081) { return mosek::fusion::p_Domain::inRange(_3080,_3081); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _3080,std::shared_ptr< monty::ndarray< double,2 > > _3081){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3080,_3081);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3082,    std::shared_ptr< monty::ndarray< double,1 > > _3083,    std::shared_ptr< monty::ndarray< int,1 > > _3084) { return mosek::fusion::p_Domain::inRange(_3082,_3083,_3084); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3082,std::shared_ptr< monty::ndarray< double,1 > > _3083,std::shared_ptr< monty::ndarray< int,1 > > _3084){
  _checked_ptr_1<double> _ptr__3082(_3082 ? _3082->raw() : nullptr, _3082 ? _3082->size(0) : 0);
  _checked_ptr_1<double> _ptr__3083(_3083 ? _3083->raw() : nullptr, _3083 ? _3083->size(0) : 0);
  _checked_ptr_1<int> _ptr__3084(_3084 ? _3084->raw() : nullptr, _3084 ? _3084->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3082,_3083,_3084);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3085,    double _3086,    std::shared_ptr< monty::ndarray< int,1 > > _3087) { return mosek::fusion::p_Domain::inRange(_3085,_3086,_3087); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3085,double _3086,std::shared_ptr< monty::ndarray< int,1 > > _3087){
  _checked_ptr_1<double> _ptr__3085(_3085 ? _3085->raw() : nullptr, _3085 ? _3085->size(0) : 0);
  _checked_ptr_1<int> _ptr__3087(_3087 ? _3087->raw() : nullptr, _3087 ? _3087->size(0) : 0);
  std::vector<double> _10145;
  for (int _3088 = (int)0, _10146 = (int)((_3085)->size(0)); _3088 < _10146 ; ++_3088)
  {
    _10145.push_back(_3086);
  }
  auto _10147 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10145.size()),_10145.begin(),_10145.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3085,_10147,_3087);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3089,    std::shared_ptr< monty::ndarray< double,1 > > _3090,    std::shared_ptr< monty::ndarray< int,1 > > _3091) { return mosek::fusion::p_Domain::inRange(_3089,_3090,_3091); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3089,std::shared_ptr< monty::ndarray< double,1 > > _3090,std::shared_ptr< monty::ndarray< int,1 > > _3091){
  _checked_ptr_1<double> _ptr__3090(_3090 ? _3090->raw() : nullptr, _3090 ? _3090->size(0) : 0);
  _checked_ptr_1<int> _ptr__3091(_3091 ? _3091->raw() : nullptr, _3091 ? _3091->size(0) : 0);
  std::vector<double> _10148;
  for (int _3092 = (int)0, _10149 = (int)((_3090)->size(0)); _3092 < _10149 ; ++_3092)
  {
    _10148.push_back(_3089);
  }
  auto _10150 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10148.size()),_10148.begin(),_10148.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10150,_3090,_3091);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3093,    double _3094,    std::shared_ptr< monty::ndarray< int,1 > > _3095) { return mosek::fusion::p_Domain::inRange(_3093,_3094,_3095); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3093,double _3094,std::shared_ptr< monty::ndarray< int,1 > > _3095){
  _checked_ptr_1<int> _ptr__3095(_3095 ? _3095->raw() : nullptr, _3095 ? _3095->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3093)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3094)}),_3095);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3096,    std::shared_ptr< monty::ndarray< double,1 > > _3097) { return mosek::fusion::p_Domain::inRange(_3096,_3097); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3096,std::shared_ptr< monty::ndarray< double,1 > > _3097){
  _checked_ptr_1<double> _ptr__3096(_3096 ? _3096->raw() : nullptr, _3096 ? _3096->size(0) : 0);
  _checked_ptr_1<double> _ptr__3097(_3097 ? _3097->raw() : nullptr, _3097 ? _3097->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3096,_3097,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3096)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3098,    double _3099) { return mosek::fusion::p_Domain::inRange(_3098,_3099); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3098,double _3099){
  _checked_ptr_1<double> _ptr__3098(_3098 ? _3098->raw() : nullptr, _3098 ? _3098->size(0) : 0);
  std::vector<double> _10151;
  for (int _3100 = (int)0, _10152 = (int)((_3098)->size(0)); _3100 < _10152 ; ++_3100)
  {
    _10151.push_back(_3099);
  }
  auto _10153 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10151.size()),_10151.begin(),_10151.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3098,_10153,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3098)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3101,    std::shared_ptr< monty::ndarray< double,1 > > _3102) { return mosek::fusion::p_Domain::inRange(_3101,_3102); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3101,std::shared_ptr< monty::ndarray< double,1 > > _3102){
  _checked_ptr_1<double> _ptr__3102(_3102 ? _3102->raw() : nullptr, _3102 ? _3102->size(0) : 0);
  std::vector<double> _10154;
  for (int _3103 = (int)0, _10155 = (int)((_3102)->size(0)); _3103 < _10155 ; ++_3103)
  {
    _10154.push_back(_3101);
  }
  auto _10156 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10154.size()),_10154.begin(),_10154.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10156,_3102,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3102)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3104,    double _3105) { return mosek::fusion::p_Domain::inRange(_3104,_3105); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3104,double _3105){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3104)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3105)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3106) { return mosek::fusion::p_Domain::greaterThan(_3106); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3106){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_3106);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3107,    std::shared_ptr< monty::ndarray< int,1 > > _3108) { return mosek::fusion::p_Domain::greaterThan(_3107,_3108); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3107,std::shared_ptr< monty::ndarray< int,1 > > _3108){
  _checked_ptr_1<double> _ptr__3107(_3107 ? _3107->raw() : nullptr, _3107 ? _3107->size(0) : 0);
  _checked_ptr_1<int> _ptr__3108(_3108 ? _3108->raw() : nullptr, _3108 ? _3108->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3107),_3108);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3109) { return mosek::fusion::p_Domain::greaterThan(_3109); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _3109){
  std::vector<double> _10157;
  for (int _3110 = (int)0, _10158 = (int)((_3109)->size(0)); _3110 < _10158 ; ++_3110)
  {
    for (int _3111 = (int)0, _10159 = (int)((_3109)->size(1)); _3111 < _10159 ; ++_3111)
    {
      _10157.push_back(((*_3109)(_3110,_3111)));
    }
  }
  auto _10160 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10157.size()),_10157.begin(),_10157.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10160,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3109)->size(0))),(int)((int)((_3109)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3112) { return mosek::fusion::p_Domain::greaterThan(_3112); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3112){
  _checked_ptr_1<double> _ptr__3112(_3112 ? _3112->raw() : nullptr, _3112 ? _3112->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3112),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3112)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3113,    std::shared_ptr< monty::ndarray< int,1 > > _3114) { return mosek::fusion::p_Domain::greaterThan(_3113,_3114); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3113,std::shared_ptr< monty::ndarray< int,1 > > _3114){
  _checked_ptr_1<int> _ptr__3114(_3114 ? _3114->raw() : nullptr, _3114 ? _3114->size(0) : 0);
  std::vector<double> _10161;
  for (long long _3115 = (int)0, _10162 = ::mosek::fusion::p_Domain::prod(_3114); _3115 < _10162 ; ++_3115)
  {
    _10161.push_back(_3113);
  }
  auto _10163 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10161.size()),_10161.begin(),_10161.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10163,_3114);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3116,    int _3117,    int _3118) { return mosek::fusion::p_Domain::greaterThan(_3116,_3117,_3118); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3116,int _3117,int _3118){
  std::vector<double> _10164;
  for (int _3119 = (int)0, _10165 = safe_mul( _3118,_3117 ); _3119 < _10165 ; ++_3119)
  {
    _10164.push_back(_3116);
  }
  auto _10166 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10164.size()),_10164.begin(),_10164.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10166,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3117),(int)(_3118)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3120,    int _3121) { return mosek::fusion::p_Domain::greaterThan(_3120,_3121); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3120,int _3121){
  std::vector<double> _10167;
  for (int _3122 = (int)0, _10168 = _3121; _3122 < _10168 ; ++_3122)
  {
    _10167.push_back(_3120);
  }
  auto _10169 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10167.size()),_10167.begin(),_10167.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10169,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3121)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3123) { return mosek::fusion::p_Domain::greaterThan(_3123); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3123){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3123)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3124) { return mosek::fusion::p_Domain::lessThan(_3124); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3124){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_3124);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3125,    std::shared_ptr< monty::ndarray< int,1 > > _3126) { return mosek::fusion::p_Domain::lessThan(_3125,_3126); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3125,std::shared_ptr< monty::ndarray< int,1 > > _3126){
  _checked_ptr_1<double> _ptr__3125(_3125 ? _3125->raw() : nullptr, _3125 ? _3125->size(0) : 0);
  _checked_ptr_1<int> _ptr__3126(_3126 ? _3126->raw() : nullptr, _3126 ? _3126->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3125),_3126);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3127) { return mosek::fusion::p_Domain::lessThan(_3127); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _3127){
  std::vector<double> _10170;
  for (int _3128 = (int)0, _10171 = (int)((_3127)->size(0)); _3128 < _10171 ; ++_3128)
  {
    for (int _3129 = (int)0, _10172 = (int)((_3127)->size(1)); _3129 < _10172 ; ++_3129)
    {
      _10170.push_back(((*_3127)(_3128,_3129)));
    }
  }
  auto _10173 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10170.size()),_10170.begin(),_10170.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_10173,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3127)->size(0))),(int)((int)((_3127)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3130) { return mosek::fusion::p_Domain::lessThan(_3130); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3130){
  _checked_ptr_1<double> _ptr__3130(_3130 ? _3130->raw() : nullptr, _3130 ? _3130->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3130),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3130)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3131,    std::shared_ptr< monty::ndarray< int,1 > > _3132) { return mosek::fusion::p_Domain::lessThan(_3131,_3132); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3131,std::shared_ptr< monty::ndarray< int,1 > > _3132){
  _checked_ptr_1<int> _ptr__3132(_3132 ? _3132->raw() : nullptr, _3132 ? _3132->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3131)}),_3132);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3133,    int _3134,    int _3135) { return mosek::fusion::p_Domain::lessThan(_3133,_3134,_3135); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3133,int _3134,int _3135){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3133)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3134),(int)(_3135)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3136,    int _3137) { return mosek::fusion::p_Domain::lessThan(_3136,_3137); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3136,int _3137){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3136)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3137)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3138) { return mosek::fusion::p_Domain::lessThan(_3138); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3138){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3138)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3139) { return mosek::fusion::p_Domain::equalsTo(_3139); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _3139){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_3139);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3140,    std::shared_ptr< monty::ndarray< int,1 > > _3141) { return mosek::fusion::p_Domain::equalsTo(_3140,_3141); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3140,std::shared_ptr< monty::ndarray< int,1 > > _3141){
  _checked_ptr_1<double> _ptr__3140(_3140 ? _3140->raw() : nullptr, _3140 ? _3140->size(0) : 0);
  _checked_ptr_1<int> _ptr__3141(_3141 ? _3141->raw() : nullptr, _3141 ? _3141->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3140),_3141);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _3142) { return mosek::fusion::p_Domain::equalsTo(_3142); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _3142){
  std::vector<double> _10174;
  for (int _3143 = (int)0, _10175 = (int)((_3142)->size(0)); _3143 < _10175 ; ++_3143)
  {
    for (int _3144 = (int)0, _10176 = (int)((_3142)->size(1)); _3144 < _10176 ; ++_3144)
    {
      _10174.push_back(((*_3142)(_3143,_3144)));
    }
  }
  auto _10177 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10174.size()),_10174.begin(),_10174.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_10177,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3142)->size(0))),(int)((int)((_3142)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3145) { return mosek::fusion::p_Domain::equalsTo(_3145); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3145){
  _checked_ptr_1<double> _ptr__3145(_3145 ? _3145->raw() : nullptr, _3145 ? _3145->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3145),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3145)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3146,    std::shared_ptr< monty::ndarray< int,1 > > _3147) { return mosek::fusion::p_Domain::equalsTo(_3146,_3147); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3146,std::shared_ptr< monty::ndarray< int,1 > > _3147){
  _checked_ptr_1<int> _ptr__3147(_3147 ? _3147->raw() : nullptr, _3147 ? _3147->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3146)}),_3147);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3148,    int _3149,    int _3150) { return mosek::fusion::p_Domain::equalsTo(_3148,_3149,_3150); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3148,int _3149,int _3150){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3148)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3149),(int)(_3150)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3151,    int _3152) { return mosek::fusion::p_Domain::equalsTo(_3151,_3152); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3151,int _3152){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3151)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3152)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3153) { return mosek::fusion::p_Domain::equalsTo(_3153); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3153){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3153)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _3154) { return mosek::fusion::p_Domain::unbounded(_3154); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _3154){
  _checked_ptr_1<int> _ptr__3154(_3154 ? _3154->raw() : nullptr, _3154 ? _3154->size(0) : 0);
  std::vector<int> _10178;
  for (int _3155 = (int)0, _10179 = (int)((_3154)->size(0)); _3155 < _10179 ; ++_3155)
  {
    _10178.push_back(_ptr__3154[_3155]);
  }
  auto _10180 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10178.size()),_10178.begin(),_10178.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_10180);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3156,    int _3157) { return mosek::fusion::p_Domain::unbounded(_3156,_3157); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3156,int _3157){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3156),(int)(_3157)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3158) { return mosek::fusion::p_Domain::unbounded(_3158); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3158){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3158)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprCode::ExprCode(mosek::fusion::p_ExprCode *_impl) : _impl(_impl) { /*std::cout << "ExprCode() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ExprCode::~ExprCode() { delete _impl; _impl = nullptr; }mosek::fusion::p_ExprCode::p_ExprCode  (::mosek::fusion::ExprCode * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::ExprCode::inplace_relocate  ( std::shared_ptr< monty::ndarray< int,1 > > _3159,    int _3160,    int _3161,    int _3162) { mosek::fusion::p_ExprCode::inplace_relocate(_3159,_3160,_3161,_3162); }void mosek::fusion::p_ExprCode::inplace_relocate(std::shared_ptr< monty::ndarray< int,1 > > _3159,int _3160,int _3161,int _3162){
  _checked_ptr_1<int> _ptr__3159(_3159 ? _3159->raw() : nullptr, _3159 ? _3159->size(0) : 0);
  int _10181 = (int)0;
  int _10182 = _3161;
  int _10183 = (int)2;
  for (int _3163 = _10181; _3163 < _10182; _3163 += _10183)
  {
    {
      if ((_ptr__3159[_3163] == (int)2))
      {
        {
          _ptr__3159[safe_add( _3163,(int)1 )] += _3162;
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprCode::op2str  ( int _3164) { return mosek::fusion::p_ExprCode::op2str(_3164); }std::string mosek::fusion::p_ExprCode::op2str(int _3164){
  if ((_3164 == 0))
  {
    {
      return std::string ("NOP");
    }
  }
  else if((_3164 == 1))
  {
    {
      return std::string ("PARAMREF");
    }
  }
  else if((_3164 == 2))
  {
    {
      return std::string ("CONST");
    }
  }
  else if((_3164 == 3))
  {
    {
      return std::string ("ADD");
    }
  }
  else if((_3164 == 4))
  {
    {
      return std::string ("NEG");
    }
  }
  else if((_3164 == 5))
  {
    {
      return std::string ("MUL");
    }
  }
  else if((_3164 == 6))
  {
    {
      return std::string ("INV");
    }
  }
  else if((_3164 == 8))
  {
    {
      return std::string ("SUM");
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("?("))->__mosek_2fusion_2Utils_2StringBuffer__a(_3164)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3165,    std::shared_ptr< monty::ndarray< int,1 > > _3166,    std::shared_ptr< monty::ndarray< double,1 > > _3167,    int _3168,    std::shared_ptr< monty::ndarray< double,1 > > _3169,    std::shared_ptr< monty::ndarray< double,1 > > _3170,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3171) { mosek::fusion::p_ExprCode::eval_add_list(_3165,_3166,_3167,_3168,_3169,_3170,_3171); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3165,std::shared_ptr< monty::ndarray< int,1 > > _3166,std::shared_ptr< monty::ndarray< double,1 > > _3167,int _3168,std::shared_ptr< monty::ndarray< double,1 > > _3169,std::shared_ptr< monty::ndarray< double,1 > > _3170,monty::rc_ptr< ::mosek::fusion::WorkStack > _3171){
  _checked_ptr_1<int> _ptr__3165(_3165 ? _3165->raw() : nullptr, _3165 ? _3165->size(0) : 0);
  _checked_ptr_1<int> _ptr__3166(_3166 ? _3166->raw() : nullptr, _3166 ? _3166->size(0) : 0);
  _checked_ptr_1<double> _ptr__3167(_3167 ? _3167->raw() : nullptr, _3167 ? _3167->size(0) : 0);
  _checked_ptr_1<double> _ptr__3169(_3169 ? _3169->raw() : nullptr, _3169 ? _3169->size(0) : 0);
  _checked_ptr_1<double> _ptr__3170(_3170 ? _3170->raw() : nullptr, _3170 ? _3170->size(0) : 0);
  int _3172 = _3171->allocf64((int)((_3165)->size(0)));
  int _3173 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _3174 = mosek::fusion::p_WorkStack::_get_impl(_3171)->f64;
  _checked_ptr_1<double> _ptr__3174(_3174 ? _3174->raw() : nullptr,_3174 ? _3174->size(0) : 0);
  int _10184 = (int)0;
  int _10185 = ((int)((_3166)->size(0)) - (int)1);
  for (int _3175 = _10184; _3175 < _10185; ++_3175)
  {
    {
      int _10186 = _ptr__3166[_3175];
      int _10187 = _ptr__3166[safe_add( _3175,(int)1 )];
      int _10188 = (int)2;
      for (int _3176 = _10186; _3176 < _10187; _3176 += _10188)
      {
        {
          if ((_ptr__3165[_3176] == 0))
          {
            {
            }
          }
          else if((_ptr__3165[_3176] == 1))
          {
            {
              _ptr__3174[safe_add( _3172,_3173 )] = _ptr__3170[_ptr__3165[safe_add( _3176,(int)1 )]];
              ++ _3173;
            }
          }
          else if((_ptr__3165[_3176] == 2))
          {
            {
              _ptr__3174[safe_add( _3172,_3173 )] = _ptr__3167[(_3176 / (int)2)];
              ++ _3173;
            }
          }
          else if((_ptr__3165[_3176] == 3))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)] = (_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] + _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)]);
              -- _3173;
            }
          }
          else if((_ptr__3165[_3176] == 4))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] = (-_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)]);
            }
          }
          else if((_ptr__3165[_3176] == 5))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)] = (_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] * _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)]);
              -- _3173;
            }
          }
          else if((_ptr__3165[_3176] == 6))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] = (1.0 / _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)]);
            }
          }
          else if((_ptr__3165[_3176] == 8))
          {
            {
              double _3177 = 0.0;
              int _10189 = (int)0;
              int _10190 = _ptr__3165[safe_add( _3176,(int)1 )];
              for (int _3178 = _10189; _3178 < _10190; ++_3178)
              {
                {
                  -- _3173;
                  _3177 += _ptr__3174[safe_add( _3172,_3173 )];
                }
              }
              _ptr__3174[safe_add( _3172,_3173 )] = _3177;
              ++ _3173;
            }
          }
          {}
        }
      }
      _ptr__3169[safe_add( _3168,_3175 )] += _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)];
    }
  }
  _3171->clear();
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3179,    std::shared_ptr< monty::ndarray< int,1 > > _3180,    std::shared_ptr< monty::ndarray< double,1 > > _3181,    std::shared_ptr< monty::ndarray< double,1 > > _3182,    std::shared_ptr< monty::ndarray< double,1 > > _3183,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3184) { mosek::fusion::p_ExprCode::eval_add_list(_3179,_3180,_3181,_3182,_3183,_3184); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3179,std::shared_ptr< monty::ndarray< int,1 > > _3180,std::shared_ptr< monty::ndarray< double,1 > > _3181,std::shared_ptr< monty::ndarray< double,1 > > _3182,std::shared_ptr< monty::ndarray< double,1 > > _3183,monty::rc_ptr< ::mosek::fusion::WorkStack > _3184){
  _checked_ptr_1<int> _ptr__3179(_3179 ? _3179->raw() : nullptr, _3179 ? _3179->size(0) : 0);
  _checked_ptr_1<int> _ptr__3180(_3180 ? _3180->raw() : nullptr, _3180 ? _3180->size(0) : 0);
  _checked_ptr_1<double> _ptr__3181(_3181 ? _3181->raw() : nullptr, _3181 ? _3181->size(0) : 0);
  _checked_ptr_1<double> _ptr__3182(_3182 ? _3182->raw() : nullptr, _3182 ? _3182->size(0) : 0);
  _checked_ptr_1<double> _ptr__3183(_3183 ? _3183->raw() : nullptr, _3183 ? _3183->size(0) : 0);
  ::mosek::fusion::p_ExprCode::eval_add_list(_3179,_3180,_3181,(int)0,_3182,_3183,_3184);
}
int mosek::fusion::ExprCode::emit_sum  ( std::shared_ptr< monty::ndarray< int,1 > > _3185,    int _3186,    int _3187) { return mosek::fusion::p_ExprCode::emit_sum(_3185,_3186,_3187); }int mosek::fusion::p_ExprCode::emit_sum(std::shared_ptr< monty::ndarray< int,1 > > _3185,int _3186,int _3187){
  _checked_ptr_1<int> _ptr__3185(_3185 ? _3185->raw() : nullptr, _3185 ? _3185->size(0) : 0);
  _ptr__3185[_3186] = 8;
  _ptr__3185[safe_add( _3186,(int)1 )] = _3187;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_inv  ( std::shared_ptr< monty::ndarray< int,1 > > _3188,    int _3189) { return mosek::fusion::p_ExprCode::emit_inv(_3188,_3189); }int mosek::fusion::p_ExprCode::emit_inv(std::shared_ptr< monty::ndarray< int,1 > > _3188,int _3189){
  _checked_ptr_1<int> _ptr__3188(_3188 ? _3188->raw() : nullptr, _3188 ? _3188->size(0) : 0);
  _ptr__3188[_3189] = 6;
  _ptr__3188[safe_add( _3189,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_mul  ( std::shared_ptr< monty::ndarray< int,1 > > _3190,    int _3191) { return mosek::fusion::p_ExprCode::emit_mul(_3190,_3191); }int mosek::fusion::p_ExprCode::emit_mul(std::shared_ptr< monty::ndarray< int,1 > > _3190,int _3191){
  _checked_ptr_1<int> _ptr__3190(_3190 ? _3190->raw() : nullptr, _3190 ? _3190->size(0) : 0);
  _ptr__3190[_3191] = 5;
  _ptr__3190[safe_add( _3191,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_neg  ( std::shared_ptr< monty::ndarray< int,1 > > _3192,    int _3193) { return mosek::fusion::p_ExprCode::emit_neg(_3192,_3193); }int mosek::fusion::p_ExprCode::emit_neg(std::shared_ptr< monty::ndarray< int,1 > > _3192,int _3193){
  _checked_ptr_1<int> _ptr__3192(_3192 ? _3192->raw() : nullptr, _3192 ? _3192->size(0) : 0);
  _ptr__3192[_3193] = 4;
  _ptr__3192[safe_add( _3193,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_add  ( std::shared_ptr< monty::ndarray< int,1 > > _3194,    int _3195) { return mosek::fusion::p_ExprCode::emit_add(_3194,_3195); }int mosek::fusion::p_ExprCode::emit_add(std::shared_ptr< monty::ndarray< int,1 > > _3194,int _3195){
  _checked_ptr_1<int> _ptr__3194(_3194 ? _3194->raw() : nullptr, _3194 ? _3194->size(0) : 0);
  _ptr__3194[_3195] = 3;
  _ptr__3194[safe_add( _3195,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_constref  ( std::shared_ptr< monty::ndarray< int,1 > > _3196,    int _3197,    int _3198) { return mosek::fusion::p_ExprCode::emit_constref(_3196,_3197,_3198); }int mosek::fusion::p_ExprCode::emit_constref(std::shared_ptr< monty::ndarray< int,1 > > _3196,int _3197,int _3198){
  _checked_ptr_1<int> _ptr__3196(_3196 ? _3196->raw() : nullptr, _3196 ? _3196->size(0) : 0);
  _ptr__3196[_3197] = 2;
  _ptr__3196[safe_add( _3197,(int)1 )] = _3198;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_paramref  ( std::shared_ptr< monty::ndarray< int,1 > > _3199,    int _3200,    int _3201) { return mosek::fusion::p_ExprCode::emit_paramref(_3199,_3200,_3201); }int mosek::fusion::p_ExprCode::emit_paramref(std::shared_ptr< monty::ndarray< int,1 > > _3199,int _3200,int _3201){
  _checked_ptr_1<int> _ptr__3199(_3199 ? _3199->raw() : nullptr, _3199 ? _3199->size(0) : 0);
  _ptr__3199[_3200] = 1;
  _ptr__3199[safe_add( _3200,(int)1 )] = _3201;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_nop  ( std::shared_ptr< monty::ndarray< int,1 > > _3202,    int _3203) { return mosek::fusion::p_ExprCode::emit_nop(_3202,_3203); }int mosek::fusion::p_ExprCode::emit_nop(std::shared_ptr< monty::ndarray< int,1 > > _3202,int _3203){
  _checked_ptr_1<int> _ptr__3202(_3202 ? _3202->raw() : nullptr, _3202 ? _3202->size(0) : 0);
  _ptr__3202[_3203] = 0;
  _ptr__3202[safe_add( _3203,(int)1 )] = (int)0;
  return (int)2;
}
void mosek::fusion::p_ExprCode::destroy(){}void mosek::fusion::ExprCode::destroy() { mosek::fusion::p_ExprCode::_get_impl(this)->destroy(); }mosek::fusion::ExprParameter::ExprParameter(mosek::fusion::p_ExprParameter *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprParameter()" << this << std::endl; */ }mosek::fusion::ExprParameter::~ExprParameter() {  /* std::cout << "~ExprParameter()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprParameter::p_ExprParameter  (::mosek::fusion::ExprParameter * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprParameter::t mosek::fusion::p_ExprParameter::_new_ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204){ return new mosek::fusion::ExprParameter(_3204); }mosek::fusion::ExprParameter::ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204) :    ExprParameter(new mosek::fusion::p_ExprParameter(this)){ mosek::fusion::p_ExprParameter::_get_impl(this)->_initialize(_3204); }void mosek::fusion::p_ExprParameter::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3204->getShape());
    mosek::fusion::p_ExprParameter::_get_impl(::mosek::fusion::ExprParameter::t(_pubthis))->p = _3204;
  }
}void mosek::fusion::ExprParameter :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206,monty::rc_ptr< ::mosek::fusion::WorkStack > _3207) { mosek::fusion::p_ExprParameter::_get_impl(this)->eval(_3205,_3206,_3207); }void mosek::fusion::p_ExprParameter::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206,monty::rc_ptr< ::mosek::fusion::WorkStack > _3207){
  p->eval(_3205,_3206,_3207);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3208,_3209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return __mosek_2fusion_2ExprParameter__slice(_3208,_3209); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return __mosek_2fusion_2ExprParameter__slice(_3208,_3209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209){
  _checked_ptr_1<int> _ptr__3208(_3208 ? _3208->raw() : nullptr, _3208 ? _3208->size(0) : 0);
  _checked_ptr_1<int> _ptr__3209(_3209 ? _3209->raw() : nullptr, _3209 ? _3209->size(0) : 0);
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3208,_3209))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(int _3210,int _3211) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3210,_3211); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(int _3210,int _3211) { return __mosek_2fusion_2ExprParameter__slice(_3210,_3211); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(int _3210,int _3211) { return __mosek_2fusion_2ExprParameter__slice(_3210,_3211); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(int _3210,int _3211){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3210,_3211))).as<::mosek::fusion::Expression>();
}
std::string mosek::fusion::ExprParameter :: toString() { return mosek::fusion::p_ExprParameter::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprParameter::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprParameter("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprParameter::destroy(){p.reset();}void mosek::fusion::ExprParameter::destroy() { mosek::fusion::p_ExprParameter::_get_impl(this)->destroy(); }mosek::fusion::Param::Param(mosek::fusion::p_Param *_impl) : _impl(_impl) { /*std::cout << "Param() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Param::~Param() { delete _impl; _impl = nullptr; }mosek::fusion::p_Param::p_Param  (::mosek::fusion::Param * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::repeat  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3212,    int _3213,    int _3214) { return mosek::fusion::p_Param::repeat(_3212,_3213,_3214); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::repeat(monty::rc_ptr< ::mosek::fusion::Parameter > _3212,int _3213,int _3214){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10191;
  for (int _3215 = (int)0, _10192 = _3213; _3215 < _10192 ; ++_3215)
  {
    _10191.push_back(_3212);
  }
  auto _10193 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10191.size()),_10191.begin(),_10191.end()));
  return ::mosek::fusion::p_Param::stack(_3214,_10193);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3216,    monty::rc_ptr< ::mosek::fusion::Parameter > _3217,    monty::rc_ptr< ::mosek::fusion::Parameter > _3218,    monty::rc_ptr< ::mosek::fusion::Parameter > _3219) { return mosek::fusion::p_Param::stack(_3216,_3217,_3218,_3219); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3216,monty::rc_ptr< ::mosek::fusion::Parameter > _3217,monty::rc_ptr< ::mosek::fusion::Parameter > _3218,monty::rc_ptr< ::mosek::fusion::Parameter > _3219){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3217.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3218.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3219.get())}),_3216);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3220,    monty::rc_ptr< ::mosek::fusion::Parameter > _3221,    monty::rc_ptr< ::mosek::fusion::Parameter > _3222) { return mosek::fusion::p_Param::stack(_3220,_3221,_3222); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3220,monty::rc_ptr< ::mosek::fusion::Parameter > _3221,monty::rc_ptr< ::mosek::fusion::Parameter > _3222){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3221.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3222.get())}),_3220);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3223,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3224) { return mosek::fusion::p_Param::stack(_3223,_3224); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3223,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3224){
  return ::mosek::fusion::p_Param::dstack(_3224,_3223);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3225) { return mosek::fusion::p_Param::stack(_3225); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3225){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10194;
  for (int _3226 = (int)0, _10195 = (int)((_3225)->size(0)); _3226 < _10195 ; ++_3226)
  {
    _10194.push_back(::mosek::fusion::p_Param::hstack(((*_3225)(_3226))));
  }
  auto _10196 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10194.size()),_10194.begin(),_10194.end()));
  return ::mosek::fusion::p_Param::vstack(_10196);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3227,    monty::rc_ptr< ::mosek::fusion::Parameter > _3228,    monty::rc_ptr< ::mosek::fusion::Parameter > _3229) { return mosek::fusion::p_Param::hstack(_3227,_3228,_3229); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3227,monty::rc_ptr< ::mosek::fusion::Parameter > _3228,monty::rc_ptr< ::mosek::fusion::Parameter > _3229){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3227.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3228.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3229.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3230,    monty::rc_ptr< ::mosek::fusion::Parameter > _3231) { return mosek::fusion::p_Param::hstack(_3230,_3231); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3230,monty::rc_ptr< ::mosek::fusion::Parameter > _3231){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3230.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3231.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3232) { return mosek::fusion::p_Param::hstack(_3232); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3232){
  return ::mosek::fusion::p_Param::dstack(_3232,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3233,    monty::rc_ptr< ::mosek::fusion::Parameter > _3234,    monty::rc_ptr< ::mosek::fusion::Parameter > _3235) { return mosek::fusion::p_Param::vstack(_3233,_3234,_3235); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3233,monty::rc_ptr< ::mosek::fusion::Parameter > _3234,monty::rc_ptr< ::mosek::fusion::Parameter > _3235){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3233.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3234.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3235.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3236,    monty::rc_ptr< ::mosek::fusion::Parameter > _3237) { return mosek::fusion::p_Param::vstack(_3236,_3237); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3236,monty::rc_ptr< ::mosek::fusion::Parameter > _3237){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3236.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3237.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3238) { return mosek::fusion::p_Param::vstack(_3238); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3238){
  return ::mosek::fusion::p_Param::dstack(_3238,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3239,int _3240){
  if ((_3240 < (int)0))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _3241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3239)->size(0)))));
  _checked_ptr_1<int> _ptr__3241(_3241 ? _3241->raw() : nullptr,_3241 ? _3241->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3242 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3239)->size(0)))));
  _checked_ptr_1<long long> _ptr__3242(_3242 ? _3242->raw() : nullptr,_3242 ? _3242->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3243;
  _checked_ptr_1<int> _ptr__3243(_3243 ? _3243->raw() : nullptr,_3243 ? _3243->size(0) : 0);
  int _3244 = ((*_3239)((int)0))->getND();
  int _10197 = (int)1;
  int _10198 = (int)((_3239)->size(0));
  for (int _3245 = _10197; _3245 < _10198; ++_3245)
  {
    {
      if ((_3244 < ((*_3239)(_3245))->getND()))
      {
        {
          _3244 = ((*_3239)(_3245))->getND();
        }
      }
      {}
    }
  }
  if ((_3240 < _3244))
  {
    {
      int _3246 = (int)0;
      while ( ((_3246 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3246))->getND())) )
      {
        {
          ++ _3246;
        }
      }
      _3243 = ((*_3239)(_3246))->getShape();
      _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      {
        int _3247 = (int)0;
        while ( ((_3247 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3247))->getND())) )
        {
          {
            ++ _3247;
          }
        }
        _3243 = ((*_3239)(_3247))->getShape();
        _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      }
    }
  }
  else
  {
    {
      std::vector<int> _10199;
      for (int _3248 = (int)0, _10200 = safe_add( _3240,(int)1 ); _3248 < _10200 ; ++_3248)
      {
        _10199.push_back((int)1);
      }
      auto _10201 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10199.size()),_10199.begin(),_10199.end()));
      _3243 = _10201;
      _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      {
        int _3249 = (int)0;
        while ( ((_3249 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3249))->getND())) )
        {
          {
            ++ _3249;
          }
        }
        int _3250 = ((*_3239)(_3249))->getND();
        std::shared_ptr< monty::ndarray< int,1 > > _3251 = ((*_3239)(_3249))->getShape();
        _checked_ptr_1<int> _ptr__3251(_3251 ? _3251->raw() : nullptr,_3251 ? _3251->size(0) : 0);
        int _10202 = (int)0;
        int _10203 = _3250;
        for (int _3252 = _10202; _3252 < _10203; ++_3252)
        {
          {
            _ptr__3243[_3252] = _ptr__3251[_3252];
          }
        }
      }
    }
  }
  _3244 = (int)((_3243)->size(0));
  int _3253 = (int)0;
  {
    bool _3254 = false;
    int _10204 = (int)0;
    int _10205 = (int)((_3239)->size(0));
    for (int _3255 = _10204; _3255 < _10205; ++_3255)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _3256 = ((*_3239)(_3255))->getShape();
        _checked_ptr_1<int> _ptr__3256(_3256 ? _3256->raw() : nullptr,_3256 ? _3256->size(0) : 0);
        _ptr__3242[_3255] = ::mosek::fusion::p_Set::size(_3256);
        int _10206 = (int)0;
        int _10207 = (int)((_3256)->size(0));
        for (int _3257 = _10206; _3257 < _10207; ++_3257)
        {
          {
            _3254 = (_3254 && ((_3257 == _3240) || (_ptr__3256[_3257] == _ptr__3243[_3257])));
          }
        }
        if ((_3240 < (int)((_3256)->size(0))))
        {
          {
            _ptr__3241[_3255] = _ptr__3256[_3240];
            _3253 += _ptr__3256[_3240];
            int _10208 = (int)((_3256)->size(0));
            int _10209 = _3244;
            for (int _3258 = _10208; _3258 < _10209; ++_3258)
            {
              {
                _3254 = (_3254 && ((_3258 == _3240) || (_ptr__3243[_3258] == (int)1)));
              }
            }
          }
        }
        else
        {
          {
            _3253 += (int)1;
            _ptr__3241[_3255] = (int)1;
          }
        }
      }
    }
    if (_3254)
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for stacking"));
      }
    }
    {}
  }
  _ptr__3243[_3240] = _3253;
  std::vector<int> _10210;
  for (int _3260 = (int)0, _10211 = (int)((_3239)->size(0)); _3260 < _10211 ; ++_3260)
  {
    _10210.push_back(((*_3239)(_3260))->getNumNonzero());
  }
  auto _10212 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10210.size()),_10210.begin(),_10210.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3259 = _10212;
  _checked_ptr_1<int> _ptr__3259(_3259 ? _3259->raw() : nullptr,_3259 ? _3259->size(0) : 0);
  int _3261 = (int)0;
  int _10213 = (int)0;
  int _10214 = (int)((_3259)->size(0));
  for (int _3262 = _10213; _3262 < _10214; ++_3262)
  {
    {
      _3261 += _ptr__3259[_3262];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3263 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3261)));
  _checked_ptr_1<long long> _ptr__3263(_3263 ? _3263->raw() : nullptr,_3263 ? _3263->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3264 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3264(_3264 ? _3264->raw() : nullptr,_3264 ? _3264->size(0) : 0);
  long long _3265 = (int)1;
  int _10215 = (int)0;
  int _10216 = _3240;
  for (int _3266 = _10215; _3266 < _10216; ++_3266)
  {
    {
      _3265 *= _ptr__3243[_3266];
    }
  }
  long long _3267 = _3253;
  long long _3268 = (int)1;
  int _10217 = safe_add( _3240,(int)1 );
  int _10218 = _3244;
  for (int _3269 = _10217; _3269 < _10218; ++_3269)
  {
    {
      _3268 *= _ptr__3243[_3269];
    }
  }
  {
    int _3270 = (int)0;
    long long _3271 = (int)0;
    int _10219 = (int)0;
    int _10220 = (int)((_3239)->size(0));
    for (int _3272 = _10219; _3272 < _10220; ++_3272)
    {
      {
        int _3273 = ((*_3239)(_3272))->getNumNonzero();
        ((*_3239)(_3272))->getSp(_3263,_3270);
        ((*_3239)(_3272))->getAllIndexes(_3264,_3270);
        if ((_3240 == (int)0))
        {
          {
            int _10221 = _3270;
            int _10222 = safe_add( _3270,_3273 );
            for (int _3274 = _10221; _3274 < _10222; ++_3274)
            {
              {
                _ptr__3263[_3274] += _3271;
              }
            }
            _3271 += _ptr__3242[_3272];
          }
        }
        else
        {
          {
            int _10223 = _3270;
            int _10224 = safe_add( _3270,_3273 );
            for (int _3275 = _10223; _3275 < _10224; ++_3275)
            {
              {
                long long _3276 = (_ptr__3263[_3275] / safe_mul( _ptr__3241[_3272],_3268 ));
                long long _3277 = ((_ptr__3263[_3275] / _3268) % _ptr__3241[_3272]);
                long long _3278 = (_ptr__3263[_3275] % _3268);
                _ptr__3263[_3275] = safe_add( safe_add( safe_mul( _3276,safe_mul( _3253,_3268 ) ),safe_mul( safe_add( _3277,_3271 ),_3268 ) ),_3278 );
              }
            }
            _3271 += _ptr__3241[_3272];
          }
        }
        _3270 += _3273;
      }
    }
  }
  int _3279 = _ptr__3243[(int)0];
  int _10225 = (int)1;
  int _10226 = _3244;
  for (int _3280 = _10225; _3280 < _10226; ++_3280)
  {
    {
      if ((_3279 < _ptr__3243[_3280]))
      {
        {
          _3279 = _ptr__3243[_3280];
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3281 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3279,(int)1 ))));
  _checked_ptr_1<int> _ptr__3281(_3281 ? _3281->raw() : nullptr,_3281 ? _3281->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3282 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3282(_3282 ? _3282->raw() : nullptr,_3282 ? _3282->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3283(_3283 ? _3283->raw() : nullptr,_3283 ? _3283->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3284 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3244)));
  _checked_ptr_1<long long> _ptr__3284(_3284 ? _3284->raw() : nullptr,_3284 ? _3284->size(0) : 0);
  _ptr__3284[(_3244 - (int)1)] = (int)1;
  int _10227 = (int)1;
  int _10228 = _3244;
  for (int _3285 = _10227; _3285 < _10228; ++_3285)
  {
    {
      _ptr__3284[((_3244 - _3285) - (int)1)] = safe_mul( _ptr__3284[(_3244 - _3285)],_ptr__3243[(_3244 - _3285)] );
    }
  }
  int _10229 = (int)0;
  int _10230 = _3261;
  for (int _3286 = _10229; _3286 < _10230; ++_3286)
  {
    {
      _ptr__3282[_3286] = _3286;
    }
  }
  int _10231 = (int)0;
  int _10232 = _3244;
  for (int _3287 = _10231; _3287 < _10232; ++_3287)
  {
    {
      int _3288 = ((_3244 - _3287) - (int)1);
      int _10233 = (int)0;
      int _10234 = safe_add( _3279,(int)1 );
      for (int _3289 = _10233; _3289 < _10234; ++_3289)
      {
        {
          _ptr__3281[_3289] = (int)0;
        }
      }
      int _10235 = (int)0;
      int _10236 = _3261;
      for (int _3290 = _10235; _3290 < _10236; ++_3290)
      {
        {
          ++ _ptr__3281[safe_add( (int)1,((_ptr__3263[_3290] / _ptr__3284[_3288]) % _ptr__3243[_3288]) )];
        }
      }
      int _10237 = (int)0;
      int _10238 = _3279;
      for (int _3291 = _10237; _3291 < _10238; ++_3291)
      {
        {
          _ptr__3281[safe_add( _3291,(int)1 )] += _ptr__3281[_3291];
        }
      }
      int _10239 = (int)0;
      int _10240 = _3261;
      for (int _3292 = _10239; _3292 < _10240; ++_3292)
      {
        {
          long long _3293 = ((_ptr__3263[_ptr__3282[_3292]] / _ptr__3284[_3288]) % _ptr__3243[_3288]);
          _ptr__3283[_ptr__3281[_3293]] = _ptr__3282[_3292];
          ++ _ptr__3281[_3293];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3294 = _3283;
      _checked_ptr_1<int> _ptr__3294(_3294 ? _3294->raw() : nullptr,_3294 ? _3294->size(0) : 0);
      _3283 = _3282;
      _ptr__3283.update(_3283 ? _3283->raw() : nullptr, _3283 ? _3283->size(0) : 0);
      _3282 = _3294;
      _ptr__3282.update(_3282 ? _3282->raw() : nullptr, _3282 ? _3282->size(0) : 0);
    }
  }
  std::vector<long long> _10241;
  for (int _3296 = (int)0, _10242 = _3261; _3296 < _10242 ; ++_3296)
  {
    _10241.push_back(_ptr__3263[_ptr__3282[_3296]]);
  }
  auto _10243 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10241.size()),_10241.begin(),_10241.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _3295 = _10243;
  _checked_ptr_1<long long> _ptr__3295(_3295 ? _3295->raw() : nullptr,_3295 ? _3295->size(0) : 0);
  std::vector<int> _10244;
  for (int _3298 = (int)0, _10245 = _3261; _3298 < _10245 ; ++_3298)
  {
    _10244.push_back(_ptr__3264[_ptr__3282[_3298]]);
  }
  auto _10246 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10244.size()),_10244.begin(),_10244.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3297 = _10246;
  _checked_ptr_1<int> _ptr__3297(_3297 ? _3297->raw() : nullptr,_3297 ? _3297->size(0) : 0);
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(((*_3239)((int)0))->__mosek_2fusion_2Parameter__getModel(),_3243,_3295,_3297)).as<::mosek::fusion::Parameter>();
}
void mosek::fusion::p_Param::destroy(){}void mosek::fusion::Param::destroy() { mosek::fusion::p_Param::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr(mosek::fusion::p_ExprMulParamScalarExpr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalarExpr()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalarExpr::~ExprMulParamScalarExpr() {  /* std::cout << "~ExprMulParamScalarExpr()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalarExpr::p_ExprMulParamScalarExpr  (::mosek::fusion::ExprMulParamScalarExpr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalarExpr::t mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300){ return new mosek::fusion::ExprMulParamScalarExpr(_3299,_3300); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300) :    ExprMulParamScalarExpr(new mosek::fusion::p_ExprMulParamScalarExpr(this)){ mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->_initialize(_3299,_3300); }void mosek::fusion::p_ExprMulParamScalarExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3299->getShape());
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->p = _3299;
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->e = _3300;
    if ((_3300->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalarExpr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302,monty::rc_ptr< ::mosek::fusion::WorkStack > _3303) { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->eval(_3301,_3302,_3303); }void mosek::fusion::p_ExprMulParamScalarExpr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302,monty::rc_ptr< ::mosek::fusion::WorkStack > _3303){
  e->eval(_3302,_3301,_3303);
  _3302->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3304 = mosek::fusion::p_WorkStack::_get_impl(_3302)->i32;
  _checked_ptr_1<int> _ptr__3304(_3304 ? _3304->raw() : nullptr,_3304 ? _3304->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3305 = mosek::fusion::p_WorkStack::_get_impl(_3302)->i64;
  _checked_ptr_1<long long> _ptr__3305(_3305 ? _3305->raw() : nullptr,_3305 ? _3305->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3306 = mosek::fusion::p_WorkStack::_get_impl(_3302)->f64;
  _checked_ptr_1<double> _ptr__3306(_3306 ? _3306->raw() : nullptr,_3306 ? _3306->size(0) : 0);
  int _3307 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nd;
  if ((_3307 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3308 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nelem;
  int _3309 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nnz;
  bool _3310 = mosek::fusion::p_WorkStack::_get_impl(_3302)->hassp;
  int _3311 = mosek::fusion::p_WorkStack::_get_impl(_3302)->ptr_base;
  int _3312 = mosek::fusion::p_WorkStack::_get_impl(_3302)->ncodeatom;
  int _3313 = mosek::fusion::p_WorkStack::_get_impl(_3302)->sp_base;
  int _3314 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nidxs_base;
  int _3315 = mosek::fusion::p_WorkStack::_get_impl(_3302)->cof_base;
  int _3316 = mosek::fusion::p_WorkStack::_get_impl(_3302)->cconst_base;
  int _3317 = mosek::fusion::p_WorkStack::_get_impl(_3302)->codeptr_base;
  int _3318 = mosek::fusion::p_WorkStack::_get_impl(_3302)->code_base;
  int _3319 = p->getND();
  int _3320 = p->getNumNonzero();
  int _3321 = safe_mul( _3309,p->getNumNonzero() );
  bool _3322 = (p->getNumNonzero() < p->getSize());
  int _10247;
  bool _10248 = (_3312 > (int)0);
  if (_10248)
  {
    _10247 = safe_add( _3312,safe_mul( _3321,(int)4 ) );
  }
  else
  {
    _10247 = safe_mul( _3321,(int)3 );
  }
  int _3323 = _10247;
  int _3324 = _3303->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3325 = mosek::fusion::p_WorkStack::_get_impl(_3303)->i32;
  _checked_ptr_1<int> _ptr__3325(_3325 ? _3325->raw() : nullptr,_3325 ? _3325->size(0) : 0);
  p->getAllIndexes(_3325,_3324);
  _3301->alloc_expr(_3319,_3320,_3321,_3322,_3323);
  std::shared_ptr< monty::ndarray< long long,1 > > _3326 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i64;
  _checked_ptr_1<long long> _ptr__3326(_3326 ? _3326->raw() : nullptr,_3326 ? _3326->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3327 = mosek::fusion::p_WorkStack::_get_impl(_3301)->f64;
  _checked_ptr_1<double> _ptr__3327(_3327 ? _3327->raw() : nullptr,_3327 ? _3327->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3328 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i32;
  _checked_ptr_1<int> _ptr__3328(_3328 ? _3328->raw() : nullptr,_3328 ? _3328->size(0) : 0);
  int _3329 = mosek::fusion::p_WorkStack::_get_impl(_3301)->ptr_base;
  int _3330 = mosek::fusion::p_WorkStack::_get_impl(_3301)->nidxs_base;
  int _3331 = mosek::fusion::p_WorkStack::_get_impl(_3301)->sp_base;
  int _3332 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cof_base;
  bool _3333 = mosek::fusion::p_WorkStack::_get_impl(_3301)->hassp;
  int _3334 = mosek::fusion::p_WorkStack::_get_impl(_3301)->shape_base;
  int _3335 = mosek::fusion::p_WorkStack::_get_impl(_3301)->codeptr_base;
  int _3336 = mosek::fusion::p_WorkStack::_get_impl(_3301)->code_base;
  int _3337 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cconst_base;
  {
    int _10249 = (int)0;
    int _10250 = _3321;
    for (int _3338 = _10249; _3338 < _10250; ++_3338)
    {
      {
        _ptr__3327[safe_add( _3332,_3338 )] = 0.0;
      }
    }
    int _10251 = (int)0;
    int _10252 = safe_add( _3320,(int)1 );
    for (int _3339 = _10251; _3339 < _10252; ++_3339)
    {
      {
        _ptr__3328[safe_add( _3329,_3339 )] = safe_mul( _3339,_3309 );
      }
    }
    int _10253 = (int)0;
    int _10254 = _3319;
    for (int _3340 = _10253; _3340 < _10254; ++_3340)
    {
      {
        _ptr__3328[safe_add( _3334,_3340 )] = p->getDim(_3340);
      }
    }
    if (_3333)
    {
      {
        p->getSp(_3326,_3331);
      }
    }
    {}
    int _10255 = (int)0;
    int _10256 = _3321;
    for (int _3341 = _10255; _3341 < _10256; ++_3341)
    {
      {
        _ptr__3326[safe_add( _3330,_3341 )] = (-(int)999);
      }
    }
    {
      int _3342 = (int)0;
      int _10257 = (int)0;
      int _10258 = _3320;
      for (int _3343 = _10257; _3343 < _10258; ++_3343)
      {
        {
          int _10259 = (int)0;
          int _10260 = _3309;
          for (int _3344 = _10259; _3344 < _10260; ++_3344)
          {
            {
              _ptr__3326[safe_add( _3330,_3342 )] = _ptr__3305[safe_add( _3314,_3344 )];
              ++ _3342;
            }
          }
        }
      }
    }
    if ((_3323 > (int)0))
    {
      {
        _ptr__3328[_3335] = (int)0;
      }
    }
    {}
    {
      if ((_3312 == (int)0))
      {
        {
          int _3345 = (int)0;
          int _3346 = (int)0;
          int _10261 = (int)0;
          int _10262 = _3320;
          for (int _3347 = _10261; _3347 < _10262; ++_3347)
          {
            {
              int _10263 = (int)0;
              int _10264 = _3309;
              for (int _3348 = _10263; _3348 < _10264; ++_3348)
              {
                {
                  _ptr__3328[safe_add( _3336,_3346 )] = 2;
                  _ptr__3327[safe_add( _3337,_3346 )] = _ptr__3306[safe_add( _3315,_3348 )];
                  ++ _3346;
                  _ptr__3328[safe_add( _3336,_3346 )] = 1;
                  _ptr__3327[safe_add( _3337,_3346 )] = _ptr__3325[safe_add( _3324,_3347 )];
                  ++ _3346;
                  _ptr__3328[safe_add( _3336,_3346 )] = 5;
                  ++ _3346;
                  _ptr__3328[safe_add( safe_add( _3335,_3345 ),(int)1 )] = _3346;
                  ++ _3345;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3349 = (int)0;
          int _3350 = (int)0;
          int _10265 = (int)0;
          int _10266 = _3320;
          for (int _3351 = _10265; _3351 < _10266; ++_3351)
          {
            {
              int _10267 = (int)0;
              int _10268 = _3309;
              for (int _3352 = _10267; _3352 < _10268; ++_3352)
              {
                {
                  _ptr__3328[safe_add( _3336,_3349 )] = 2;
                  _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3306[safe_add( _3315,_3352 )];
                  ++ _3349;
                  int _10269 = _ptr__3304[safe_add( _3317,_3352 )];
                  int _10270 = _ptr__3304[safe_add( safe_add( _3317,_3352 ),(int)1 )];
                  for (int _3353 = _10269; _3353 < _10270; ++_3353)
                  {
                    {
                      _ptr__3328[safe_add( _3336,_3349 )] = _ptr__3304[safe_add( _3318,_3353 )];
                      _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3306[safe_add( _3316,_3353 )];
                      ++ _3349;
                    }
                  }
                  _ptr__3328[safe_add( _3336,_3349 )] = 3;
                  ++ _3349;
                  _ptr__3328[safe_add( _3336,_3349 )] = 1;
                  _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3325[safe_add( _3324,_3351 )];
                  ++ _3349;
                  _ptr__3328[safe_add( _3336,_3349 )] = 5;
                  ++ _3349;
                  _ptr__3328[safe_add( safe_add( _3335,_3350 ),(int)1 )] = _3349;
                  ++ _3350;
                }
              }
            }
          }
        }
      }
    }
  }
  _3303->clear();
}
std::string mosek::fusion::ExprMulParamScalarExpr :: toString() { return mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalarExpr::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalarExpr("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalarExpr::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalarExpr::destroy() { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar(mosek::fusion::p_ExprMulParamScalar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalar()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalar::~ExprMulParamScalar() {  /* std::cout << "~ExprMulParamScalar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalar::p_ExprMulParamScalar  (::mosek::fusion::ExprMulParamScalar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalar::t mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355){ return new mosek::fusion::ExprMulParamScalar(_3354,_3355); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355) :    ExprMulParamScalar(new mosek::fusion::p_ExprMulParamScalar(this)){ mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->_initialize(_3354,_3355); }void mosek::fusion::p_ExprMulParamScalar::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3355->getShape());
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->p = _3354;
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->e = _3355;
    if ((_3354->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357,monty::rc_ptr< ::mosek::fusion::WorkStack > _3358) { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->eval(_3356,_3357,_3358); }void mosek::fusion::p_ExprMulParamScalar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357,monty::rc_ptr< ::mosek::fusion::WorkStack > _3358){
  e->eval(_3357,_3356,_3358);
  _3357->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3359 = mosek::fusion::p_WorkStack::_get_impl(_3357)->i32;
  _checked_ptr_1<int> _ptr__3359(_3359 ? _3359->raw() : nullptr,_3359 ? _3359->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3360 = mosek::fusion::p_WorkStack::_get_impl(_3357)->i64;
  _checked_ptr_1<long long> _ptr__3360(_3360 ? _3360->raw() : nullptr,_3360 ? _3360->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3361 = mosek::fusion::p_WorkStack::_get_impl(_3357)->f64;
  _checked_ptr_1<double> _ptr__3361(_3361 ? _3361->raw() : nullptr,_3361 ? _3361->size(0) : 0);
  int _3362 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nd;
  int _3363 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nelem;
  int _3364 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nnz;
  bool _3365 = mosek::fusion::p_WorkStack::_get_impl(_3357)->hassp;
  int _3366 = mosek::fusion::p_WorkStack::_get_impl(_3357)->ptr_base;
  int _3367 = mosek::fusion::p_WorkStack::_get_impl(_3357)->ncodeatom;
  int _3368 = mosek::fusion::p_WorkStack::_get_impl(_3357)->shape_base;
  int _3369 = mosek::fusion::p_WorkStack::_get_impl(_3357)->sp_base;
  int _3370 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nidxs_base;
  int _3371 = mosek::fusion::p_WorkStack::_get_impl(_3357)->cof_base;
  int _3372 = mosek::fusion::p_WorkStack::_get_impl(_3357)->cconst_base;
  int _3373 = mosek::fusion::p_WorkStack::_get_impl(_3357)->codeptr_base;
  int _3374 = mosek::fusion::p_WorkStack::_get_impl(_3357)->code_base;
  int _3375 = _3362;
  int _3376 = _3363;
  int _3377 = _3364;
  bool _3378 = (p->getNumNonzero() < p->getSize());
  int _10271;
  bool _10272 = (_3367 == (int)0);
  if (_10272)
  {
    _10271 = safe_mul( _3364,(int)3 );
  }
  else
  {
    _10271 = safe_add( safe_mul( _3364,(int)4 ),_3367 );
  }
  int _3379 = _10271;
  _3356->alloc_expr(_3375,_3376,_3377,_3378,_3379);
  std::shared_ptr< monty::ndarray< long long,1 > > _3380 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i64;
  _checked_ptr_1<long long> _ptr__3380(_3380 ? _3380->raw() : nullptr,_3380 ? _3380->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3381 = mosek::fusion::p_WorkStack::_get_impl(_3356)->f64;
  _checked_ptr_1<double> _ptr__3381(_3381 ? _3381->raw() : nullptr,_3381 ? _3381->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3382 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i32;
  _checked_ptr_1<int> _ptr__3382(_3382 ? _3382->raw() : nullptr,_3382 ? _3382->size(0) : 0);
  int _3383 = mosek::fusion::p_WorkStack::_get_impl(_3356)->ptr_base;
  int _3384 = mosek::fusion::p_WorkStack::_get_impl(_3356)->nidxs_base;
  int _3385 = mosek::fusion::p_WorkStack::_get_impl(_3356)->sp_base;
  int _3386 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cof_base;
  bool _3387 = mosek::fusion::p_WorkStack::_get_impl(_3356)->hassp;
  int _3388 = mosek::fusion::p_WorkStack::_get_impl(_3356)->shape_base;
  int _3389 = mosek::fusion::p_WorkStack::_get_impl(_3356)->codeptr_base;
  int _3390 = mosek::fusion::p_WorkStack::_get_impl(_3356)->code_base;
  int _3391 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cconst_base;
  int _3392 = p->getIndex((int)0);
  {
    int _10273 = (int)0;
    int _10274 = _3377;
    for (int _3393 = _10273; _3393 < _10274; ++_3393)
    {
      {
        _ptr__3381[safe_add( _3386,_3393 )] = 0.0;
      }
    }
    int _10275 = (int)0;
    int _10276 = safe_add( _3376,(int)1 );
    for (int _3394 = _10275; _3394 < _10276; ++_3394)
    {
      {
        _ptr__3382[safe_add( _3383,_3394 )] = _ptr__3359[safe_add( _3366,_3394 )];
      }
    }
    int _10277 = (int)0;
    int _10278 = _3375;
    for (int _3395 = _10277; _3395 < _10278; ++_3395)
    {
      {
        _ptr__3382[safe_add( _3388,_3395 )] = _ptr__3359[safe_add( _3368,_3395 )];
      }
    }
    int _10279 = (int)0;
    int _10280 = _3364;
    for (int _3396 = _10279; _3396 < _10280; ++_3396)
    {
      {
        _ptr__3380[safe_add( _3384,_3396 )] = _ptr__3360[safe_add( _3370,_3396 )];
      }
    }
    if (_3387)
    {
      {
        int _10281 = (int)0;
        int _10282 = _3376;
        for (int _3397 = _10281; _3397 < _10282; ++_3397)
        {
          {
            _ptr__3380[safe_add( _3385,_3397 )] = _ptr__3360[safe_add( _3369,_3397 )];
          }
        }
      }
    }
    {}
    int _3398 = (int)0;
    if ((_3379 > (int)0))
    {
      {
        _ptr__3382[_3389] = (int)0;
      }
    }
    {}
    int _10283 = (int)0;
    int _10284 = _3364;
    for (int _3399 = _10283; _3399 < _10284; ++_3399)
    {
      {
        _ptr__3382[safe_add( _3390,_3398 )] = 2;
        _ptr__3381[safe_add( _3391,_3398 )] = _ptr__3361[safe_add( _3371,_3399 )];
        ++ _3398;
        if ((_3367 > (int)0))
        {
          {
            int _10285 = _ptr__3359[safe_add( _3373,_3399 )];
            int _10286 = _ptr__3359[safe_add( safe_add( _3373,_3399 ),(int)1 )];
            for (int _3400 = _10285; _3400 < _10286; ++_3400)
            {
              {
                _ptr__3382[safe_add( _3390,_3398 )] = _ptr__3359[safe_add( _3374,_3400 )];
                _ptr__3381[safe_add( _3391,_3398 )] = _ptr__3361[safe_add( _3372,_3400 )];
                ++ _3398;
              }
            }
            _ptr__3382[safe_add( _3390,_3398 )] = 3;
            ++ _3398;
          }
        }
        {}
        _ptr__3382[safe_add( _3390,_3398 )] = 1;
        _ptr__3381[safe_add( _3391,_3398 )] = _3392;
        ++ _3398;
        _ptr__3382[safe_add( _3390,_3398 )] = 5;
        ++ _3398;
        _ptr__3382[safe_add( safe_add( _3389,_3399 ),(int)1 )] = _3398;
      }
    }
  }
  _3358->clear();
}
std::string mosek::fusion::ExprMulParamScalar :: toString() { return mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalar("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalar::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalar::destroy() { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft(mosek::fusion::p_ExprMulParamDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagLeft::~ExprMulParamDiagLeft() {  /* std::cout << "~ExprMulParamDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagLeft::p_ExprMulParamDiagLeft  (::mosek::fusion::ExprMulParamDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagLeft::t mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402){ return new mosek::fusion::ExprMulParamDiagLeft(_3401,_3402); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402) :    ExprMulParamDiagLeft(new mosek::fusion::p_ExprMulParamDiagLeft(this)){ mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->_initialize(_3401,_3402); }void mosek::fusion::p_ExprMulParamDiagLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3402->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->p = _3401;
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->e = _3402;
    if (((_3401->getND() != (int)2) || (_3402->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3401->getDim((int)1) != _3402->getDim((int)0)) || (_3401->getDim((int)0) != _3402->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404,monty::rc_ptr< ::mosek::fusion::WorkStack > _3405) { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->eval(_3403,_3404,_3405); }void mosek::fusion::p_ExprMulParamDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404,monty::rc_ptr< ::mosek::fusion::WorkStack > _3405){
  e->eval(_3404,_3403,_3405);
  _3404->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3406 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i32;
  _checked_ptr_1<int> _ptr__3406(_3406 ? _3406->raw() : nullptr,_3406 ? _3406->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3407 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i64;
  _checked_ptr_1<long long> _ptr__3407(_3407 ? _3407->raw() : nullptr,_3407 ? _3407->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3408 = mosek::fusion::p_WorkStack::_get_impl(_3404)->f64;
  _checked_ptr_1<double> _ptr__3408(_3408 ? _3408->raw() : nullptr,_3408 ? _3408->size(0) : 0);
  int _3409 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nd;
  int _3410 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nelem;
  int _3411 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nnz;
  bool _3412 = mosek::fusion::p_WorkStack::_get_impl(_3404)->hassp;
  int _3413 = mosek::fusion::p_WorkStack::_get_impl(_3404)->ptr_base;
  int _3414 = mosek::fusion::p_WorkStack::_get_impl(_3404)->ncodeatom;
  int _3415 = mosek::fusion::p_WorkStack::_get_impl(_3404)->shape_base;
  int _3416 = mosek::fusion::p_WorkStack::_get_impl(_3404)->sp_base;
  int _3417 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nidxs_base;
  int _3418 = mosek::fusion::p_WorkStack::_get_impl(_3404)->cof_base;
  int _3419 = mosek::fusion::p_WorkStack::_get_impl(_3404)->cconst_base;
  int _3420 = mosek::fusion::p_WorkStack::_get_impl(_3404)->codeptr_base;
  int _3421 = mosek::fusion::p_WorkStack::_get_impl(_3404)->code_base;
  if (((_3409 != (int)2) || ((_ptr__3406[_3415] != p->getDim((int)1)) || (_ptr__3406[safe_add( _3415,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3422 = p->getNumNonzero();
  int _3423 = _3405->alloci64(_3422);
  std::shared_ptr< monty::ndarray< long long,1 > > _3424 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i64;
  _checked_ptr_1<long long> _ptr__3424(_3424 ? _3424->raw() : nullptr,_3424 ? _3424->size(0) : 0);
  p->getSp(_3424,_3423);
  int _3425 = p->getDim((int)0);
  int _3426 = p->getDim((int)1);
  int _3427 = _ptr__3406[_3415];
  int _3428 = _ptr__3406[safe_add( _3415,(int)1 )];
  int _3429 = _3405->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3430 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
  _checked_ptr_1<int> _ptr__3430(_3430 ? _3430->raw() : nullptr,_3430 ? _3430->size(0) : 0);
  p->getAllIndexes(_3430,_3429);
  if (_3412)
  {
    {
      int _3431 = _3405->alloci32(_3410);
      int _3432 = _3405->alloci32(safe_add( _3428,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3433 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
      _checked_ptr_1<int> _ptr__3433(_3433 ? _3433->raw() : nullptr,_3433 ? _3433->size(0) : 0);
      int _10287 = (int)0;
      int _10288 = safe_add( _3428,(int)1 );
      for (int _3434 = _10287; _3434 < _10288; ++_3434)
      {
        {
          _ptr__3433[safe_add( _3432,_3434 )] = (int)0;
        }
      }
      int _10289 = (int)0;
      int _10290 = _3410;
      for (int _3435 = _10289; _3435 < _10290; ++_3435)
      {
        {
          ++ _ptr__3433[safe_add( safe_add( _3432,(_ptr__3407[safe_add( _3416,_3435 )] % _3428) ),(int)1 )];
        }
      }
      int _10291 = (int)0;
      int _10292 = _3428;
      for (int _3436 = _10291; _3436 < _10292; ++_3436)
      {
        {
          _ptr__3433[safe_add( safe_add( _3432,_3436 ),(int)1 )] += _ptr__3433[safe_add( _3432,_3436 )];
        }
      }
      int _10293 = (int)0;
      int _10294 = _3410;
      for (int _3437 = _10293; _3437 < _10294; ++_3437)
      {
        {
          long long _3438 = (_ptr__3407[safe_add( _3416,_3437 )] % _3428);
          _ptr__3433[safe_add( _3431,_ptr__3433[safe_add( _3432,_3438 )] )] = _3437;
          ++ _ptr__3433[safe_add( _3432,_3438 )];
        }
      }
      int _3439 = (int)0;
      int _3440 = (int)0;
      int _3441 = (int)0;
      {
        int _3442 = (int)0;
        int _3443 = (int)0;
        while ( ((_3443 < _3422) && (_3442 < _3410)) )
        {
          {
            int _3444 = _ptr__3433[safe_add( _3431,_3442 )];
            long long _3445 = (_ptr__3424[safe_add( _3423,_3443 )] / _3426);
            long long _3446 = (_ptr__3407[safe_add( _3416,_3444 )] % _3428);
            if ((_3445 < _3446))
            {
              {
                while ( ((_3443 < _3422) && (_ptr__3424[safe_add( _3423,_3443 )] < safe_mul( safe_add( _3445,(int)1 ),_3426 ))) )
                {
                  {
                    ++ _3443;
                  }
                }
              }
            }
            else if((_3446 < _3445))
            {
              {
                while ( ((_3442 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3442 )] )] % _3428) == _3446)) )
                {
                  {
                    ++ _3442;
                  }
                }
              }
            }
            else
            {
              {
                int _3447 = _3442;
                int _3448 = _3443;
                while ( ((_3443 < _3422) && (_ptr__3424[safe_add( _3423,_3443 )] < safe_mul( safe_add( _3445,(int)1 ),_3426 ))) )
                {
                  {
                    ++ _3443;
                  }
                }
                while ( ((_3442 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3442 )] )] % _3428) == _3446)) )
                {
                  {
                    ++ _3442;
                  }
                }
                bool _3449 = false;
                while ( ((_3448 < _3443) && (_3447 < _3442)) )
                {
                  {
                    long long _3450 = (_ptr__3424[safe_add( _3423,_3448 )] % _3426);
                    int _3451 = _ptr__3433[safe_add( _3431,_3447 )];
                    long long _3452 = (_ptr__3407[safe_add( _3416,_3451 )] / _3428);
                    if ((_3450 < _3452))
                    {
                      {
                        ++ _3448;
                      }
                    }
                    else if((_3450 > _3452))
                    {
                      {
                        ++ _3447;
                      }
                    }
                    else
                    {
                      {
                        _3440 += (_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3451 )]);
                        _3449 = true;
                        int _3453 = (_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3451 )]);
                        int _10295;
                        bool _10296 = (_3414 > (int)0);
                        if (_10296)
                        {
                          _10295 = safe_add( (_ptr__3406[safe_add( _3420,_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] )] - _ptr__3406[safe_add( _3420,_ptr__3406[safe_add( _3413,_3451 )] )]),safe_mul( (int)4,_3453 ) );
                        }
                        else
                        {
                          _10295 = safe_mul( (int)3,_3453 );
                        }
                        _3441 += _10295;
                        ++ _3448;
                        ++ _3447;
                      }
                    }
                  }
                }
                if (_3449)
                {
                  {
                    ++ _3439;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3454 = (int)1;
      bool _3455 = (_3439 < _3425);
      _3403->alloc_expr(_3454,_3439,_3440,_3455,_3441);
      int _3456 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ptr_base;
      int _3457 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nidxs_base;
      int _10297;
      bool _10298 = _3455;
      if (_10298)
      {
        _10297 = mosek::fusion::p_WorkStack::_get_impl(_3403)->sp_base;
      }
      else
      {
        _10297 = _3403->alloci64(_3439);
      }
      int _3458 = _10297;
      int _3459 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cof_base;
      bool _3460 = mosek::fusion::p_WorkStack::_get_impl(_3403)->hassp;
      int _3461 = mosek::fusion::p_WorkStack::_get_impl(_3403)->shape_base;
      int _3462 = mosek::fusion::p_WorkStack::_get_impl(_3403)->codeptr_base;
      int _3463 = mosek::fusion::p_WorkStack::_get_impl(_3403)->code_base;
      int _3464 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3465 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i64;
      _checked_ptr_1<long long> _ptr__3465(_3465 ? _3465->raw() : nullptr,_3465 ? _3465->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3466 = mosek::fusion::p_WorkStack::_get_impl(_3403)->f64;
      _checked_ptr_1<double> _ptr__3466(_3466 ? _3466->raw() : nullptr,_3466 ? _3466->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3467 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i32;
      _checked_ptr_1<int> _ptr__3467(_3467 ? _3467->raw() : nullptr,_3467 ? _3467->size(0) : 0);
      if ((_3439 > (int)0))
      {
        {
          _ptr__3467[_3456] = (int)0;
          if ((_3440 > (int)0))
          {
            {
              _ptr__3467[_3462] = (int)0;
            }
          }
          {}
          _ptr__3467[_3461] = (int)_3425;
          int _3468 = (int)0;
          int _3469 = (int)0;
          int _3470 = (int)0;
          int _3471 = (int)0;
          int _3472 = (int)0;
          while ( ((_3472 < _3422) && (_3471 < _3410)) )
          {
            {
              int _3473 = _ptr__3433[safe_add( _3431,_3471 )];
              long long _3474 = (_ptr__3424[safe_add( _3423,_3472 )] / _3426);
              long long _3475 = (_ptr__3407[safe_add( _3416,_3473 )] % _3428);
              if ((_3474 < _3475))
              {
                {
                  while ( ((_3472 < _3422) && (_ptr__3424[safe_add( _3423,_3472 )] < safe_mul( safe_add( _3474,(int)1 ),_3426 ))) )
                  {
                    {
                      ++ _3472;
                    }
                  }
                }
              }
              else if((_3475 < _3474))
              {
                {
                  while ( ((_3471 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3471 )] )] % _3428) == _3475)) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3476 = _3471;
                  int _3477 = _3472;
                  while ( ((_3472 < _3422) && (_ptr__3424[safe_add( _3423,_3472 )] < safe_mul( safe_add( _3474,(int)1 ),_3426 ))) )
                  {
                    {
                      ++ _3472;
                    }
                  }
                  while ( ((_3471 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3471 )] )] % _3428) == _3475)) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                  int _3478 = (int)0;
                  while ( ((_3477 < _3472) && (_3476 < _3471)) )
                  {
                    {
                      long long _3479 = (_ptr__3424[safe_add( _3423,_3477 )] % _3426);
                      int _3480 = _ptr__3433[safe_add( _3431,_3476 )];
                      long long _3481 = (_ptr__3407[safe_add( _3416,_3480 )] / _3428);
                      if ((_3479 < _3481))
                      {
                        {
                          ++ _3477;
                        }
                      }
                      else if((_3479 > _3481))
                      {
                        {
                          ++ _3476;
                        }
                      }
                      else
                      {
                        {
                          int _10299 = _ptr__3406[safe_add( _3413,_3480 )];
                          int _10300 = _ptr__3406[safe_add( safe_add( _3413,_3480 ),(int)1 )];
                          for (int _3482 = _10299; _3482 < _10300; ++_3482)
                          {
                            {
                              _ptr__3466[safe_add( _3459,_3470 )] = 0.0;
                              _ptr__3465[safe_add( _3457,_3470 )] = _ptr__3407[safe_add( _3417,_3482 )];
                              _ptr__3467[safe_add( _3463,_3468 )] = 2;
                              _ptr__3466[safe_add( _3464,_3468 )] = _ptr__3408[safe_add( _3418,_3482 )];
                              ++ _3468;
                              if ((_3414 > (int)0))
                              {
                                {
                                  int _10301 = _ptr__3406[safe_add( _3420,_3482 )];
                                  int _10302 = _ptr__3406[safe_add( safe_add( _3420,_3482 ),(int)1 )];
                                  for (int _3483 = _10301; _3483 < _10302; ++_3483)
                                  {
                                    {
                                      _ptr__3467[safe_add( _3463,_3468 )] = _ptr__3406[safe_add( _3421,_3483 )];
                                      _ptr__3466[safe_add( _3464,_3468 )] = _ptr__3408[safe_add( _3419,_3483 )];
                                      ++ _3468;
                                    }
                                  }
                                  _ptr__3467[safe_add( _3463,_3468 )] = 3;
                                  ++ _3468;
                                }
                              }
                              {}
                              _ptr__3467[safe_add( _3463,_3468 )] = 1;
                              _ptr__3466[safe_add( _3464,_3468 )] = _ptr__3433[safe_add( _3429,_3477 )];
                              ++ _3468;
                              _ptr__3467[safe_add( _3463,_3468 )] = 5;
                              ++ _3468;
                              _ptr__3467[safe_add( safe_add( _3462,_3470 ),(int)1 )] = _3468;
                              ++ _3470;
                            }
                          }
                          ++ _3477;
                          ++ _3476;
                          ++ _3478;
                        }
                      }
                    }
                  }
                  if ((_3478 > (int)0))
                  {
                    {
                      _ptr__3465[safe_add( _3458,_3469 )] = _3474;
                      _ptr__3467[safe_add( safe_add( _3456,_3469 ),(int)1 )] = _3470;
                      ++ _3469;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
      {}
      if ((!_3460))
      {
        {
          _3403->popi64(_3439);
        }
      }
      {}
      _3405->clear();
    }
  }
  else
  {
    {
      int _3484 = (int)0;
      int _3485 = (int)0;
      int _3486 = (int)0;
      std::shared_ptr< monty::ndarray< int,1 > > _3487 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
      _checked_ptr_1<int> _ptr__3487(_3487 ? _3487->raw() : nullptr,_3487 ? _3487->size(0) : 0);
      {
        int _3488 = (int)0;
        while ( (_3488 < _3422) )
        {
          {
            long long _3489 = (_ptr__3424[safe_add( _3423,_3488 )] / _3426);
            long long _3490 = safe_mul( safe_add( _3489,(int)1 ),_3426 );
            bool _3491 = false;
            while ( ((_3488 < _3422) && (_ptr__3424[safe_add( _3423,_3488 )] < _3490)) )
            {
              {
                long long _3492 = (_ptr__3424[safe_add( _3423,_3488 )] % _3426);
                long long _3493 = safe_add( safe_mul( _3492,_3428 ),_3489 );
                int _3494 = (_ptr__3406[safe_add( safe_add( _3413,_3493 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3493 )]);
                _3485 += _3494;
                _3491 = true;
                int _10303;
                bool _10304 = (_3414 > (int)0);
                if (_10304)
                {
                  _10303 = safe_add( (_ptr__3406[safe_add( _3420,_ptr__3406[safe_add( safe_add( _3413,_3493 ),(int)1 )] )] - _ptr__3406[safe_add( _3420,_ptr__3406[safe_add( _3413,_3493 )] )]),safe_mul( _3494,(int)4 ) );
                }
                else
                {
                  _10303 = safe_mul( _3494,(int)3 );
                }
                _3486 += _10303;
                ++ _3488;
              }
            }
            if (_3491)
            {
              {
                ++ _3484;
              }
            }
            {}
          }
        }
      }
      int _3495 = (int)1;
      bool _3496 = (_3484 < _3425);
      _3403->alloc_expr(_3495,_3484,_3485,_3496,_3486);
      int _3497 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ptr_base;
      int _3498 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nidxs_base;
      int _10305;
      bool _10306 = _3496;
      if (_10306)
      {
        _10305 = mosek::fusion::p_WorkStack::_get_impl(_3403)->sp_base;
      }
      else
      {
        _10305 = _3403->alloci64(_3484);
      }
      int _3499 = _10305;
      int _3500 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cof_base;
      bool _3501 = mosek::fusion::p_WorkStack::_get_impl(_3403)->hassp;
      int _3502 = mosek::fusion::p_WorkStack::_get_impl(_3403)->shape_base;
      int _3503 = mosek::fusion::p_WorkStack::_get_impl(_3403)->codeptr_base;
      int _3504 = mosek::fusion::p_WorkStack::_get_impl(_3403)->code_base;
      int _3505 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3506 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i64;
      _checked_ptr_1<long long> _ptr__3506(_3506 ? _3506->raw() : nullptr,_3506 ? _3506->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3507 = mosek::fusion::p_WorkStack::_get_impl(_3403)->f64;
      _checked_ptr_1<double> _ptr__3507(_3507 ? _3507->raw() : nullptr,_3507 ? _3507->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3508 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i32;
      _checked_ptr_1<int> _ptr__3508(_3508 ? _3508->raw() : nullptr,_3508 ? _3508->size(0) : 0);
      {
        _ptr__3508[_3497] = (int)0;
        if ((_3486 > (int)0))
        {
          {
            _ptr__3508[_3503] = (int)0;
          }
        }
        {}
        _ptr__3508[_3502] = (int)_3425;
        int _3509 = (int)0;
        int _3510 = (int)0;
        int _3511 = (int)0;
        int _3512 = (int)0;
        while ( (_3512 < _3422) )
        {
          {
            long long _3513 = (_ptr__3424[safe_add( _3423,_3512 )] / _3426);
            long long _3514 = safe_mul( safe_add( _3513,(int)1 ),_3426 );
            int _3515 = (int)0;
            while ( ((_3512 < _3422) && (_ptr__3424[safe_add( _3423,_3512 )] < _3514)) )
            {
              {
                long long _3516 = (_ptr__3424[safe_add( _3423,_3512 )] % _3426);
                long long _3517 = safe_add( safe_mul( _3516,_3428 ),_3513 );
                int _10307 = _ptr__3406[safe_add( _3413,_3517 )];
                int _10308 = _ptr__3406[safe_add( safe_add( _3413,_3517 ),(int)1 )];
                for (int _3518 = _10307; _3518 < _10308; ++_3518)
                {
                  {
                    _ptr__3506[safe_add( _3498,_3511 )] = _ptr__3407[safe_add( _3417,_3518 )];
                    _ptr__3507[safe_add( _3500,_3511 )] = 0.0;
                    _ptr__3508[safe_add( _3504,_3509 )] = 2;
                    _ptr__3507[safe_add( _3505,_3509 )] = _ptr__3408[safe_add( _3418,_3518 )];
                    ++ _3509;
                    if ((_3414 > (int)0))
                    {
                      {
                        int _10309 = _ptr__3406[safe_add( _3420,_3518 )];
                        int _10310 = _ptr__3406[safe_add( safe_add( _3420,_3518 ),(int)1 )];
                        for (int _3519 = _10309; _3519 < _10310; ++_3519)
                        {
                          {
                            _ptr__3508[safe_add( _3504,_3509 )] = _ptr__3406[safe_add( _3421,_3519 )];
                            _ptr__3507[safe_add( _3505,_3509 )] = _ptr__3408[safe_add( _3419,_3519 )];
                            ++ _3509;
                          }
                        }
                        _ptr__3508[safe_add( _3504,_3509 )] = 3;
                        ++ _3509;
                      }
                    }
                    {}
                    _ptr__3508[safe_add( _3504,_3509 )] = 1;
                    _ptr__3507[safe_add( _3505,_3509 )] = _ptr__3487[safe_add( _3429,_3512 )];
                    ++ _3509;
                    _ptr__3508[safe_add( _3504,_3509 )] = 5;
                    ++ _3509;
                    _ptr__3508[safe_add( safe_add( _3503,_3511 ),(int)1 )] = _3509;
                    ++ _3511;
                  }
                }
                ++ _3515;
                ++ _3512;
              }
            }
            if ((_3515 > (int)0))
            {
              {
                _ptr__3506[safe_add( _3499,_3510 )] = _3513;
                _ptr__3508[safe_add( safe_add( _3497,_3510 ),(int)1 )] = _3511;
                ++ _3510;
              }
            }
            {}
          }
        }
      }
      if ((!_3501))
      {
        {
          _3403->popi64(_3484);
        }
      }
      {}
      _3405->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagLeft :: toString() { return mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagLeft::destroy() { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight(mosek::fusion::p_ExprMulParamDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagRight::~ExprMulParamDiagRight() {  /* std::cout << "~ExprMulParamDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagRight::p_ExprMulParamDiagRight  (::mosek::fusion::ExprMulParamDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagRight::t mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521){ return new mosek::fusion::ExprMulParamDiagRight(_3520,_3521); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521) :    ExprMulParamDiagRight(new mosek::fusion::p_ExprMulParamDiagRight(this)){ mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->_initialize(_3520,_3521); }void mosek::fusion::p_ExprMulParamDiagRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3520->getDim((int)0))}));
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->p = _3521;
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->e = _3520;
    if (((_3521->getND() != (int)2) || (_3520->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3521->getDim((int)1) != _3520->getDim((int)0)) || (_3521->getDim((int)0) != _3520->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524) { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->eval(_3522,_3523,_3524); }void mosek::fusion::p_ExprMulParamDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524){
  e->eval(_3523,_3522,_3524);
  _3523->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3525 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i32;
  _checked_ptr_1<int> _ptr__3525(_3525 ? _3525->raw() : nullptr,_3525 ? _3525->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3526 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i64;
  _checked_ptr_1<long long> _ptr__3526(_3526 ? _3526->raw() : nullptr,_3526 ? _3526->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3527 = mosek::fusion::p_WorkStack::_get_impl(_3523)->f64;
  _checked_ptr_1<double> _ptr__3527(_3527 ? _3527->raw() : nullptr,_3527 ? _3527->size(0) : 0);
  int _3528 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nd;
  int _3529 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nelem;
  int _3530 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nnz;
  bool _3531 = mosek::fusion::p_WorkStack::_get_impl(_3523)->hassp;
  int _3532 = mosek::fusion::p_WorkStack::_get_impl(_3523)->ptr_base;
  int _3533 = mosek::fusion::p_WorkStack::_get_impl(_3523)->ncodeatom;
  int _3534 = mosek::fusion::p_WorkStack::_get_impl(_3523)->shape_base;
  int _3535 = mosek::fusion::p_WorkStack::_get_impl(_3523)->sp_base;
  int _3536 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nidxs_base;
  int _3537 = mosek::fusion::p_WorkStack::_get_impl(_3523)->cof_base;
  int _3538 = mosek::fusion::p_WorkStack::_get_impl(_3523)->cconst_base;
  int _3539 = mosek::fusion::p_WorkStack::_get_impl(_3523)->codeptr_base;
  int _3540 = mosek::fusion::p_WorkStack::_get_impl(_3523)->code_base;
  if (((_3528 != (int)2) || ((_ptr__3525[_3534] != p->getDim((int)1)) || (_ptr__3525[safe_add( _3534,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3541 = p->getNumNonzero();
  int _3542 = _3524->alloci64(_3541);
  std::shared_ptr< monty::ndarray< long long,1 > > _3543 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i64;
  _checked_ptr_1<long long> _ptr__3543(_3543 ? _3543->raw() : nullptr,_3543 ? _3543->size(0) : 0);
  int _3544 = _3524->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3545 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i32;
  _checked_ptr_1<int> _ptr__3545(_3545 ? _3545->raw() : nullptr,_3545 ? _3545->size(0) : 0);
  p->getAllIndexes(_3545,_3544);
  p->getSp(_3543,_3542);
  int _3546 = p->getDim((int)0);
  int _3547 = p->getDim((int)1);
  int _3548 = _ptr__3525[_3534];
  int _3549 = _ptr__3525[safe_add( _3534,(int)1 )];
  int _3550 = _3524->alloci32(_3541);
  int _3551 = _3524->alloci32(safe_add( _3547,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3552 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i32;
  _checked_ptr_1<int> _ptr__3552(_3552 ? _3552->raw() : nullptr,_3552 ? _3552->size(0) : 0);
  int _10311 = (int)0;
  int _10312 = safe_add( _3547,(int)1 );
  for (int _3553 = _10311; _3553 < _10312; ++_3553)
  {
    {
      _ptr__3552[safe_add( _3551,_3553 )] = (int)0;
    }
  }
  int _10313 = (int)0;
  int _10314 = _3541;
  for (int _3554 = _10313; _3554 < _10314; ++_3554)
  {
    {
      ++ _ptr__3552[safe_add( safe_add( _3551,(_ptr__3543[safe_add( _3542,_3554 )] % _3547) ),(int)1 )];
    }
  }
  int _10315 = (int)1;
  int _10316 = _3547;
  for (int _3555 = _10315; _3555 < _10316; ++_3555)
  {
    {
      _ptr__3552[safe_add( _3551,_3555 )] += _ptr__3552[(safe_add( _3551,_3555 ) - (int)1)];
    }
  }
  int _10317 = (int)0;
  int _10318 = _3541;
  for (int _3556 = _10317; _3556 < _10318; ++_3556)
  {
    {
      long long _3557 = (_ptr__3543[safe_add( _3542,_3556 )] % _3547);
      _ptr__3552[safe_add( _3550,_ptr__3552[safe_add( _3551,_3557 )] )] = _3556;
      ++ _ptr__3552[safe_add( _3551,_3557 )];
    }
  }
  if (_3531)
  {
    {
      int _3558 = (int)0;
      int _3559 = (int)0;
      int _3560 = (int)0;
      int _3561 = (int)0;
      int _3562 = (int)0;
      while ( ((_3562 < _3529) && (_3561 < _3541)) )
      {
        {
          long long _3563 = (_ptr__3526[safe_add( _3535,_3562 )] / _3549);
          long long _3564 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3561 )] )] % _3547);
          if ((_3563 < _3564))
          {
            {
              ++ _3562;
            }
          }
          else if((_3563 > _3564))
          {
            {
              ++ _3561;
            }
          }
          else
          {
            {
              int _3565 = _3562;
              ++ _3562;
              int _3566 = _3561;
              ++ _3561;
              while ( ((_3562 < _3529) && ((_ptr__3526[safe_add( _3535,_3562 )] / _3549) == _3563)) )
              {
                {
                  ++ _3562;
                }
              }
              while ( ((_3561 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3561 )] )] % _3547) == _3564)) )
              {
                {
                  ++ _3561;
                }
              }
              int _3567 = _3566;
              int _3568 = _3565;
              bool _3569 = false;
              while ( ((_3568 < _3562) && (_3567 < _3561)) )
              {
                {
                  long long _3570 = (_ptr__3526[safe_add( _3535,_3568 )] % _3549);
                  long long _3571 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3567 )] )] / _3547);
                  if ((_3570 < _3571))
                  {
                    {
                      ++ _3568;
                    }
                  }
                  else if((_3570 > _3571))
                  {
                    {
                      ++ _3567;
                    }
                  }
                  else
                  {
                    {
                      _3569 = true;
                      int _3572 = (_ptr__3525[safe_add( safe_add( _3532,_3568 ),(int)1 )] - _ptr__3525[safe_add( _3532,_3568 )]);
                      _3560 += _3572;
                      int _10319;
                      bool _10320 = (_3533 > (int)0);
                      if (_10320)
                      {
                        _10319 = safe_add( (_ptr__3525[safe_add( _3539,_ptr__3525[safe_add( safe_add( _3532,_3568 ),(int)1 )] )] - _ptr__3525[safe_add( _3539,_ptr__3525[safe_add( _3532,_3568 )] )]),safe_mul( _3572,(int)4 ) );
                      }
                      else
                      {
                        _10319 = safe_mul( _3572,(int)3 );
                      }
                      _3558 += _10319;
                      ++ _3568;
                      ++ _3567;
                    }
                  }
                }
              }
              if (_3569)
              {
                {
                  ++ _3559;
                }
              }
              {}
            }
          }
        }
      }
      int _3573 = (int)1;
      bool _3574 = (_3559 < _3548);
      _3522->alloc_expr(_3573,_3559,_3560,_3574,_3558);
      int _3575 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ptr_base;
      int _3576 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nidxs_base;
      int _10321;
      bool _10322 = _3574;
      if (_10322)
      {
        _10321 = mosek::fusion::p_WorkStack::_get_impl(_3522)->sp_base;
      }
      else
      {
        _10321 = _3522->alloci64(_3559);
      }
      int _3577 = _10321;
      int _3578 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cof_base;
      bool _3579 = mosek::fusion::p_WorkStack::_get_impl(_3522)->hassp;
      int _3580 = mosek::fusion::p_WorkStack::_get_impl(_3522)->shape_base;
      int _3581 = mosek::fusion::p_WorkStack::_get_impl(_3522)->codeptr_base;
      int _3582 = mosek::fusion::p_WorkStack::_get_impl(_3522)->code_base;
      int _3583 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3584 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i64;
      _checked_ptr_1<long long> _ptr__3584(_3584 ? _3584->raw() : nullptr,_3584 ? _3584->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3585 = mosek::fusion::p_WorkStack::_get_impl(_3522)->f64;
      _checked_ptr_1<double> _ptr__3585(_3585 ? _3585->raw() : nullptr,_3585 ? _3585->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3586 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i32;
      _checked_ptr_1<int> _ptr__3586(_3586 ? _3586->raw() : nullptr,_3586 ? _3586->size(0) : 0);
      if ((_3559 > (int)0))
      {
        {
          _ptr__3586[_3575] = (int)0;
          if ((_3558 > (int)0))
          {
            {
              _ptr__3586[_3581] = (int)0;
            }
          }
          {}
          _ptr__3586[_3580] = (int)_3548;
          int _3587 = (int)0;
          int _3588 = (int)0;
          int _3589 = (int)0;
          int _3590 = (int)0;
          int _3591 = (int)0;
          while ( ((_3591 < _3529) && (_3590 < _3541)) )
          {
            {
              long long _3592 = (_ptr__3526[safe_add( _3535,_3591 )] / _3549);
              long long _3593 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547);
              if ((_3592 < _3593))
              {
                {
                  while ( ((_3591 < _3529) && ((_ptr__3526[safe_add( _3535,_3591 )] / _3549) == _3592)) )
                  {
                    {
                      ++ _3591;
                    }
                  }
                }
              }
              else if((_3592 > _3593))
              {
                {
                  while ( ((_3590 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547) == _3593)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3594 = _3591;
                  ++ _3591;
                  int _3595 = _3590;
                  ++ _3590;
                  while ( ((_3591 < _3529) && ((_ptr__3526[safe_add( _3535,_3591 )] / _3549) == _3592)) )
                  {
                    {
                      ++ _3591;
                    }
                  }
                  while ( ((_3590 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547) == _3593)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                  int _3596 = _3595;
                  int _3597 = _3594;
                  int _3598 = (int)0;
                  while ( ((_3597 < _3591) && (_3596 < _3590)) )
                  {
                    {
                      long long _3599 = (_ptr__3526[safe_add( _3535,_3597 )] % _3549);
                      long long _3600 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3596 )] )] / _3547);
                      if ((_3599 < _3600))
                      {
                        {
                          ++ _3597;
                        }
                      }
                      else if((_3599 > _3600))
                      {
                        {
                          ++ _3596;
                        }
                      }
                      else
                      {
                        {
                          int _10323 = _ptr__3525[safe_add( _3532,_3597 )];
                          int _10324 = _ptr__3525[safe_add( safe_add( _3532,_3597 ),(int)1 )];
                          for (int _3601 = _10323; _3601 < _10324; ++_3601)
                          {
                            {
                              _ptr__3584[safe_add( _3576,_3589 )] = _ptr__3526[safe_add( _3536,_3601 )];
                              _ptr__3585[safe_add( _3578,_3589 )] = 0.0;
                              _ptr__3586[safe_add( _3582,_3587 )] = 2;
                              _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3527[safe_add( _3537,_3601 )];
                              ++ _3587;
                              if ((_3533 > (int)0))
                              {
                                {
                                  int _10325 = _ptr__3525[safe_add( _3539,_3601 )];
                                  int _10326 = _ptr__3525[safe_add( safe_add( _3539,_3601 ),(int)1 )];
                                  for (int _3602 = _10325; _3602 < _10326; ++_3602)
                                  {
                                    {
                                      _ptr__3586[safe_add( _3582,_3587 )] = _ptr__3525[safe_add( _3540,_3602 )];
                                      _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3527[safe_add( _3538,_3602 )];
                                      ++ _3587;
                                    }
                                  }
                                  _ptr__3586[safe_add( _3582,_3587 )] = 3;
                                  ++ _3587;
                                }
                              }
                              {}
                              _ptr__3586[safe_add( _3582,_3587 )] = 1;
                              _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3552[safe_add( _3544,_ptr__3552[safe_add( _3550,_3596 )] )];
                              ++ _3587;
                              _ptr__3586[safe_add( _3582,_3587 )] = 5;
                              ++ _3587;
                              _ptr__3586[safe_add( safe_add( _3581,_3589 ),(int)1 )] = _3587;
                              ++ _3589;
                            }
                          }
                          ++ _3598;
                          ++ _3597;
                          ++ _3596;
                        }
                      }
                    }
                  }
                  if ((_3598 > (int)0))
                  {
                    {
                      _ptr__3584[safe_add( _3577,_3588 )] = _3592;
                      _ptr__3586[safe_add( safe_add( _3575,_3588 ),(int)1 )] = _3589;
                      ++ _3588;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((_3559 > _ptr__3586[_3580]))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
            }
          }
          {}
          if ((_3588 != _3559))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_3589 != _3589))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
        }
      }
      {}
      if ((!_3579))
      {
        {
          _3522->popi64(_3559);
        }
      }
      {}
      _3524->clear();
    }
  }
  else
  {
    {
      int _3603 = (int)0;
      int _3604 = (int)0;
      int _3605 = (int)0;
      int _3606 = (int)0;
      while ( (_3606 < _3541) )
      {
        {
          long long _3607 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] % _3547);
          int _3608 = _3606;
          ++ _3606;
          while ( ((_3606 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] % _3547) == _3607)) )
          {
            {
              ++ _3606;
            }
          }
          int _10327 = _3608;
          int _10328 = _3606;
          for (int _3609 = _10327; _3609 < _10328; ++_3609)
          {
            {
              long long _3610 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] / _3547);
              long long _3611 = safe_add( safe_mul( _3607,_3549 ),_3610 );
              int _3612 = (_ptr__3525[safe_add( safe_add( _3532,_3611 ),(int)1 )] - _ptr__3525[safe_add( _3532,_3611 )]);
              _3605 += _3612;
              int _10329;
              bool _10330 = (_3533 > (int)0);
              if (_10330)
              {
                _10329 = safe_add( (_ptr__3525[safe_add( _3539,_ptr__3525[safe_add( safe_add( _3532,_3611 ),(int)1 )] )] - _ptr__3525[safe_add( _3539,_ptr__3525[safe_add( _3532,_3611 )] )]),safe_mul( _3612,(int)4 ) );
              }
              else
              {
                _10329 = safe_mul( _3612,(int)3 );
              }
              _3603 += _10329;
            }
          }
          ++ _3604;
        }
      }
      int _3613 = (int)1;
      bool _3614 = (_3604 < _3548);
      _3522->alloc_expr(_3613,_3604,_3605,_3614,_3603);
      int _3615 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ptr_base;
      int _3616 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nidxs_base;
      int _10331;
      bool _10332 = _3614;
      if (_10332)
      {
        _10331 = mosek::fusion::p_WorkStack::_get_impl(_3522)->sp_base;
      }
      else
      {
        _10331 = _3522->alloci64(_3604);
      }
      int _3617 = _10331;
      int _3618 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cof_base;
      bool _3619 = mosek::fusion::p_WorkStack::_get_impl(_3522)->hassp;
      int _3620 = mosek::fusion::p_WorkStack::_get_impl(_3522)->shape_base;
      int _3621 = mosek::fusion::p_WorkStack::_get_impl(_3522)->codeptr_base;
      int _3622 = mosek::fusion::p_WorkStack::_get_impl(_3522)->code_base;
      int _3623 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3624 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i64;
      _checked_ptr_1<long long> _ptr__3624(_3624 ? _3624->raw() : nullptr,_3624 ? _3624->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3625 = mosek::fusion::p_WorkStack::_get_impl(_3522)->f64;
      _checked_ptr_1<double> _ptr__3625(_3625 ? _3625->raw() : nullptr,_3625 ? _3625->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3626 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i32;
      _checked_ptr_1<int> _ptr__3626(_3626 ? _3626->raw() : nullptr,_3626 ? _3626->size(0) : 0);
      {
        _ptr__3626[_3615] = (int)0;
        if ((_3603 > (int)0))
        {
          {
            _ptr__3626[_3621] = (int)0;
          }
        }
        {}
        _ptr__3626[_3620] = (int)_3548;
        int _3627 = (int)0;
        int _3628 = (int)0;
        int _3629 = (int)0;
        int _3630 = (int)0;
        while ( (_3630 < _3541) )
        {
          {
            long long _3631 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3630 )] )] % _3547);
            int _3632 = _3630;
            ++ _3630;
            while ( ((_3630 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3630 )] )] % _3547) == _3631)) )
            {
              {
                ++ _3630;
              }
            }
            int _10333 = _3632;
            int _10334 = _3630;
            for (int _3633 = _10333; _3633 < _10334; ++_3633)
            {
              {
                long long _3634 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3633 )] )] / _3547);
                long long _3635 = safe_add( safe_mul( _3631,_3549 ),_3634 );
                int _10335 = _ptr__3525[safe_add( _3532,_3635 )];
                int _10336 = _ptr__3525[safe_add( safe_add( _3532,_3635 ),(int)1 )];
                for (int _3636 = _10335; _3636 < _10336; ++_3636)
                {
                  {
                    _ptr__3624[safe_add( _3616,_3629 )] = _ptr__3526[safe_add( _3536,_3636 )];
                    _ptr__3625[safe_add( _3618,_3629 )] = 0.0;
                    _ptr__3626[safe_add( _3622,_3627 )] = 2;
                    _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3527[safe_add( _3537,_3636 )];
                    ++ _3627;
                    if ((_3533 > (int)0))
                    {
                      {
                        int _10337 = _ptr__3525[safe_add( _3539,_3636 )];
                        int _10338 = _ptr__3525[safe_add( safe_add( _3539,_3636 ),(int)1 )];
                        for (int _3637 = _10337; _3637 < _10338; ++_3637)
                        {
                          {
                            _ptr__3626[safe_add( _3622,_3627 )] = _ptr__3525[safe_add( _3540,_3637 )];
                            _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3527[safe_add( _3538,_3637 )];
                            ++ _3627;
                          }
                        }
                        _ptr__3626[safe_add( _3622,_3627 )] = 3;
                        ++ _3627;
                      }
                    }
                    {}
                    _ptr__3626[safe_add( _3622,_3627 )] = 1;
                    _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3552[safe_add( _3544,_ptr__3552[safe_add( _3550,_3633 )] )];
                    ++ _3627;
                    _ptr__3626[safe_add( _3622,_3627 )] = 5;
                    ++ _3627;
                    _ptr__3626[safe_add( safe_add( _3621,_3629 ),(int)1 )] = _3627;
                    ++ _3629;
                  }
                }
              }
            }
            _ptr__3624[safe_add( _3617,_3628 )] = _3631;
            _ptr__3626[safe_add( safe_add( _3615,_3628 ),(int)1 )] = _3629;
            ++ _3628;
          }
        }
        if ((_3604 > _ptr__3626[_3620]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
          }
        }
        {}
        if ((_3628 != _3604))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
          }
        }
        {}
        if ((_3629 != _3605))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
          }
        }
        {}
      }
      if ((!_3619))
      {
        {
          _3522->popi64(_3604);
        }
      }
      {}
      _3524->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagRight :: toString() { return mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagRight::destroy() { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprDotParam::ExprDotParam(mosek::fusion::p_ExprDotParam *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDotParam()" << this << std::endl; */ }mosek::fusion::ExprDotParam::~ExprDotParam() {  /* std::cout << "~ExprDotParam()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDotParam::p_ExprDotParam  (::mosek::fusion::ExprDotParam * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDotParam::t mosek::fusion::p_ExprDotParam::_new_ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){ return new mosek::fusion::ExprDotParam(_3638,_3639); }mosek::fusion::ExprDotParam::ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639) :    ExprDotParam(new mosek::fusion::p_ExprDotParam(this)){ mosek::fusion::p_ExprDotParam::_get_impl(this)->_initialize(_3638,_3639); }void mosek::fusion::p_ExprDotParam::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->p = _3638;
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->e = _3639;
    if ((_3638->getND() != _3639->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10339 = (int)0;
    int _10340 = _3638->getND();
    for (int _3640 = _10339; _3640 < _10340; ++_3640)
    {
      {
        if ((_3638->getDim(_3640) != _3639->getDim(_3640)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprDotParam :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642,monty::rc_ptr< ::mosek::fusion::WorkStack > _3643) { mosek::fusion::p_ExprDotParam::_get_impl(this)->eval(_3641,_3642,_3643); }void mosek::fusion::p_ExprDotParam::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642,monty::rc_ptr< ::mosek::fusion::WorkStack > _3643){
  e->eval(_3642,_3641,_3643);
  _3642->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3644 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i32;
  _checked_ptr_1<int> _ptr__3644(_3644 ? _3644->raw() : nullptr,_3644 ? _3644->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3645 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i64;
  _checked_ptr_1<long long> _ptr__3645(_3645 ? _3645->raw() : nullptr,_3645 ? _3645->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3646 = mosek::fusion::p_WorkStack::_get_impl(_3642)->f64;
  _checked_ptr_1<double> _ptr__3646(_3646 ? _3646->raw() : nullptr,_3646 ? _3646->size(0) : 0);
  int _3647 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nd;
  int _3648 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nelem;
  int _3649 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nnz;
  bool _3650 = mosek::fusion::p_WorkStack::_get_impl(_3642)->hassp;
  int _3651 = mosek::fusion::p_WorkStack::_get_impl(_3642)->ptr_base;
  int _3652 = mosek::fusion::p_WorkStack::_get_impl(_3642)->ncodeatom;
  int _3653 = mosek::fusion::p_WorkStack::_get_impl(_3642)->shape_base;
  int _3654 = mosek::fusion::p_WorkStack::_get_impl(_3642)->sp_base;
  int _3655 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nidxs_base;
  int _3656 = mosek::fusion::p_WorkStack::_get_impl(_3642)->cof_base;
  int _3657 = mosek::fusion::p_WorkStack::_get_impl(_3642)->cconst_base;
  int _3658 = mosek::fusion::p_WorkStack::_get_impl(_3642)->codeptr_base;
  int _3659 = mosek::fusion::p_WorkStack::_get_impl(_3642)->code_base;
  int _3660 = p->getNumNonzero();
  int _3661 = _3643->alloci64(_3660);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3643)->i64,_3661);
  int _3662 = _3643->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3663 = mosek::fusion::p_WorkStack::_get_impl(_3643)->i32;
  _checked_ptr_1<int> _ptr__3663(_3663 ? _3663->raw() : nullptr,_3663 ? _3663->size(0) : 0);
  p->getAllIndexes(_3663,_3662);
  std::shared_ptr< monty::ndarray< long long,1 > > _3664 = mosek::fusion::p_WorkStack::_get_impl(_3643)->i64;
  _checked_ptr_1<long long> _ptr__3664(_3664 ? _3664->raw() : nullptr,_3664 ? _3664->size(0) : 0);
  int _3665 = (int)0;
  int _3666 = (int)1;
  int _3667 = (int)0;
  if (_3650)
  {
    {
      int _3668 = (int)0;
      int _3669 = (int)0;
      while ( ((_3668 < _3648) && (_3669 < _3660)) )
      {
        {
          if ((_ptr__3645[safe_add( _3654,_3668 )] < _ptr__3664[safe_add( _3661,_3669 )]))
          {
            {
              ++ _3668;
            }
          }
          else if((_ptr__3645[safe_add( _3654,_3668 )] > _ptr__3664[safe_add( _3661,_3669 )]))
          {
            {
              ++ _3669;
            }
          }
          else
          {
            {
              int _3670 = (_ptr__3644[safe_add( safe_add( _3651,_3668 ),(int)1 )] - _ptr__3644[safe_add( _3651,_3668 )]);
              _3665 += _3670;
              int _10341;
              bool _10342 = (_3652 > (int)0);
              if (_10342)
              {
                _10341 = safe_add( (_ptr__3644[safe_add( _3658,_ptr__3644[safe_add( safe_add( _3651,_3668 ),(int)1 )] )] - _ptr__3644[safe_add( _3658,_ptr__3644[safe_add( _3651,_3668 )] )]),safe_mul( (int)4,_3670 ) );
              }
              else
              {
                _10341 = safe_mul( (int)3,_3670 );
              }
              _3667 += _10341;
              ++ _3668;
              ++ _3669;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10343 = (int)0;
      int _10344 = _3660;
      for (int _3671 = _10343; _3671 < _10344; ++_3671)
      {
        {
          _3665 += (_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3671 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3671 )] )]);
        }
      }
      if ((_3652 > (int)0))
      {
        {
          int _10345 = (int)0;
          int _10346 = _3660;
          for (int _3672 = _10345; _3672 < _10346; ++_3672)
          {
            {
              _3667 += safe_add( (_ptr__3644[safe_add( _3658,_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] ),(int)1 )] )] - _ptr__3644[safe_add( _3658,_ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] )] )]),safe_mul( (int)4,(_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10347 = (int)0;
          int _10348 = _3660;
          for (int _3673 = _10347; _3673 < _10348; ++_3673)
          {
            {
              _3667 += safe_mul( (int)3,(_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3673 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3673 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3674 = (int)1;
  int _10349 = (int)0;
  int _10350 = _3647;
  for (int _3675 = _10349; _3675 < _10350; ++_3675)
  {
    {
      _3674 *= _ptr__3644[safe_add( _3653,_3675 )];
    }
  }
  _3641->alloc_expr((int)0,_3666,_3665,false,_3667);
  int _3676 = mosek::fusion::p_WorkStack::_get_impl(_3641)->ptr_base;
  int _3677 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nidxs_base;
  int _3678 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cof_base;
  bool _3679 = mosek::fusion::p_WorkStack::_get_impl(_3641)->hassp;
  int _3680 = mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base;
  int _3681 = mosek::fusion::p_WorkStack::_get_impl(_3641)->codeptr_base;
  int _3682 = mosek::fusion::p_WorkStack::_get_impl(_3641)->code_base;
  int _3683 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3684 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i64;
  _checked_ptr_1<long long> _ptr__3684(_3684 ? _3684->raw() : nullptr,_3684 ? _3684->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3685 = mosek::fusion::p_WorkStack::_get_impl(_3641)->f64;
  _checked_ptr_1<double> _ptr__3685(_3685 ? _3685->raw() : nullptr,_3685 ? _3685->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3686 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i32;
  _checked_ptr_1<int> _ptr__3686(_3686 ? _3686->raw() : nullptr,_3686 ? _3686->size(0) : 0);
  _ptr__3686[_3676] = (int)0;
  _ptr__3686[safe_add( _3676,(int)1 )] = _3665;
  if ((_3667 > (int)0))
  {
    {
      _ptr__3686[_3681] = (int)0;
    }
  }
  {}
  if (_3650)
  {
    {
      int _3687 = (int)0;
      int _3688 = (int)0;
      int _3689 = (int)0;
      int _3690 = (int)0;
      int _3691 = (int)0;
      while ( ((_3690 < _3648) && (_3691 < _3660)) )
      {
        {
          if ((_ptr__3645[safe_add( _3654,_3690 )] < _ptr__3664[safe_add( _3661,_3691 )]))
          {
            {
              ++ _3690;
            }
          }
          else if((_ptr__3645[safe_add( _3654,_3690 )] > _ptr__3664[safe_add( _3661,_3691 )]))
          {
            {
              ++ _3691;
            }
          }
          else
          {
            {
              int _10351 = _ptr__3644[safe_add( _3651,_3690 )];
              int _10352 = _ptr__3644[safe_add( safe_add( _3651,_3690 ),(int)1 )];
              for (int _3692 = _10351; _3692 < _10352; ++_3692)
              {
                {
                  _ptr__3684[safe_add( _3677,_3688 )] = _ptr__3645[safe_add( _3655,_3692 )];
                  _ptr__3685[safe_add( _3678,_3688 )] = 0.0;
                  _ptr__3686[safe_add( _3682,_3687 )] = 2;
                  _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3646[safe_add( _3656,_3692 )];
                  ++ _3687;
                  if ((_3652 > (int)0))
                  {
                    {
                      int _10353 = _ptr__3644[safe_add( _3658,_3692 )];
                      int _10354 = _ptr__3644[safe_add( safe_add( _3658,_3692 ),(int)1 )];
                      for (int _3693 = _10353; _3693 < _10354; ++_3693)
                      {
                        {
                          _ptr__3686[safe_add( _3682,_3687 )] = _ptr__3644[safe_add( _3659,_3693 )];
                          _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3646[safe_add( _3657,_3693 )];
                          ++ _3687;
                        }
                      }
                      _ptr__3686[safe_add( _3682,_3687 )] = 3;
                      ++ _3687;
                    }
                  }
                  {}
                  _ptr__3686[safe_add( _3682,_3687 )] = 1;
                  _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3663[safe_add( _3662,_3691 )];
                  ++ _3687;
                  _ptr__3686[safe_add( _3682,_3687 )] = 5;
                  ++ _3687;
                  _ptr__3686[safe_add( safe_add( _3681,_3688 ),(int)1 )] = _3687;
                  ++ _3688;
                }
              }
              ++ _3690;
              ++ _3691;
            }
          }
        }
      }
      if ((_3689 != _3666))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3688 != _3665))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3687 != _3667))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3694 = (int)0;
      int _3695 = (int)0;
      int _10355 = (int)0;
      int _10356 = _3660;
      for (int _3696 = _10355; _3696 < _10356; ++_3696)
      {
        {
          int _3697 = _3696;
          long long _3698 = _ptr__3664[safe_add( _3661,_3696 )];
          int _10357 = _ptr__3644[safe_add( _3651,_3698 )];
          int _10358 = _ptr__3644[safe_add( safe_add( _3651,_3698 ),(int)1 )];
          for (int _3699 = _10357; _3699 < _10358; ++_3699)
          {
            {
              _ptr__3684[safe_add( _3677,_3695 )] = _ptr__3645[safe_add( _3655,_3699 )];
              _ptr__3685[safe_add( _3678,_3695 )] = 0.0;
              _ptr__3686[safe_add( _3682,_3694 )] = 2;
              _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3646[safe_add( _3656,_3699 )];
              ++ _3694;
              if ((_3652 > (int)0))
              {
                {
                  int _10359 = _ptr__3644[safe_add( _3658,_3699 )];
                  int _10360 = _ptr__3644[safe_add( safe_add( _3658,_3699 ),(int)1 )];
                  for (int _3700 = _10359; _3700 < _10360; ++_3700)
                  {
                    {
                      _ptr__3686[safe_add( _3682,_3694 )] = _ptr__3644[safe_add( _3659,_3700 )];
                      _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3646[safe_add( _3657,_3700 )];
                      ++ _3694;
                    }
                  }
                  _ptr__3686[safe_add( _3682,_3694 )] = 3;
                  ++ _3694;
                }
              }
              {}
              _ptr__3686[safe_add( _3682,_3694 )] = 1;
              _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3663[safe_add( _3662,_3696 )];
              ++ _3694;
              _ptr__3686[safe_add( _3682,_3694 )] = 5;
              ++ _3694;
              _ptr__3686[safe_add( safe_add( _3681,_3695 ),(int)1 )] = _3694;
              ++ _3695;
            }
          }
        }
      }
      if ((_3695 != _3665))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nzi"));
        }
      }
      {}
      if ((_3694 != _3667))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
        }
      }
      {}
    }
  }
  _3643->clear();
}
std::string mosek::fusion::ExprDotParam :: toString() { return mosek::fusion::p_ExprDotParam::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDotParam::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDotParam("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDotParam::destroy(){e.reset();p.reset();}void mosek::fusion::ExprDotParam::destroy() { mosek::fusion::p_ExprDotParam::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamElem::ExprMulParamElem(mosek::fusion::p_ExprMulParamElem *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamElem()" << this << std::endl; */ }mosek::fusion::ExprMulParamElem::~ExprMulParamElem() {  /* std::cout << "~ExprMulParamElem()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamElem::p_ExprMulParamElem  (::mosek::fusion::ExprMulParamElem * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamElem::t mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702){ return new mosek::fusion::ExprMulParamElem(_3701,_3702); }mosek::fusion::ExprMulParamElem::ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702) :    ExprMulParamElem(new mosek::fusion::p_ExprMulParamElem(this)){ mosek::fusion::p_ExprMulParamElem::_get_impl(this)->_initialize(_3701,_3702); }void mosek::fusion::p_ExprMulParamElem::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3702->getShape());
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->p = _3701;
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->e = _3702;
    if ((_3701->getND() != _3702->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10361 = (int)0;
    int _10362 = _3701->getND();
    for (int _3703 = _10361; _3703 < _10362; ++_3703)
    {
      {
        if ((_3701->getDim(_3703) != _3702->getDim(_3703)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprMulParamElem :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705,monty::rc_ptr< ::mosek::fusion::WorkStack > _3706) { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->eval(_3704,_3705,_3706); }void mosek::fusion::p_ExprMulParamElem::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705,monty::rc_ptr< ::mosek::fusion::WorkStack > _3706){
  e->eval(_3705,_3704,_3706);
  _3705->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3707 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i32;
  _checked_ptr_1<int> _ptr__3707(_3707 ? _3707->raw() : nullptr,_3707 ? _3707->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3708 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i64;
  _checked_ptr_1<long long> _ptr__3708(_3708 ? _3708->raw() : nullptr,_3708 ? _3708->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3709 = mosek::fusion::p_WorkStack::_get_impl(_3705)->f64;
  _checked_ptr_1<double> _ptr__3709(_3709 ? _3709->raw() : nullptr,_3709 ? _3709->size(0) : 0);
  int _3710 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nd;
  int _3711 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nelem;
  int _3712 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nnz;
  bool _3713 = mosek::fusion::p_WorkStack::_get_impl(_3705)->hassp;
  int _3714 = mosek::fusion::p_WorkStack::_get_impl(_3705)->ptr_base;
  int _3715 = mosek::fusion::p_WorkStack::_get_impl(_3705)->ncodeatom;
  int _3716 = mosek::fusion::p_WorkStack::_get_impl(_3705)->shape_base;
  int _3717 = mosek::fusion::p_WorkStack::_get_impl(_3705)->sp_base;
  int _3718 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nidxs_base;
  int _3719 = mosek::fusion::p_WorkStack::_get_impl(_3705)->cof_base;
  int _3720 = mosek::fusion::p_WorkStack::_get_impl(_3705)->cconst_base;
  int _3721 = mosek::fusion::p_WorkStack::_get_impl(_3705)->codeptr_base;
  int _3722 = mosek::fusion::p_WorkStack::_get_impl(_3705)->code_base;
  int _3723 = p->getNumNonzero();
  int _3724 = _3706->alloci64(_3723);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3706)->i64,_3724);
  int _3725 = _3706->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3726 = mosek::fusion::p_WorkStack::_get_impl(_3706)->i32;
  _checked_ptr_1<int> _ptr__3726(_3726 ? _3726->raw() : nullptr,_3726 ? _3726->size(0) : 0);
  p->getAllIndexes(_3726,_3725);
  std::shared_ptr< monty::ndarray< long long,1 > > _3727 = mosek::fusion::p_WorkStack::_get_impl(_3706)->i64;
  _checked_ptr_1<long long> _ptr__3727(_3727 ? _3727->raw() : nullptr,_3727 ? _3727->size(0) : 0);
  int _3728 = _3710;
  int _3729 = (int)0;
  int _3730 = (int)0;
  int _3731 = (int)0;
  if (_3713)
  {
    {
      int _3732 = (int)0;
      int _3733 = (int)0;
      while ( ((_3732 < _3711) && (_3733 < _3723)) )
      {
        {
          if ((_ptr__3708[safe_add( _3717,_3732 )] < _ptr__3727[safe_add( _3724,_3733 )]))
          {
            {
              ++ _3732;
            }
          }
          else if((_ptr__3708[safe_add( _3717,_3732 )] > _ptr__3727[safe_add( _3724,_3733 )]))
          {
            {
              ++ _3733;
            }
          }
          else
          {
            {
              int _3734 = (_ptr__3707[safe_add( safe_add( _3714,_3732 ),(int)1 )] - _ptr__3707[safe_add( _3714,_3732 )]);
              _3729 += _3734;
              int _10363;
              bool _10364 = (_3715 > (int)0);
              if (_10364)
              {
                _10363 = safe_add( (_ptr__3707[safe_add( _3721,_ptr__3707[safe_add( safe_add( _3714,_3732 ),(int)1 )] )] - _ptr__3707[safe_add( _3721,_ptr__3707[safe_add( _3714,_3732 )] )]),safe_mul( (int)4,_3734 ) );
              }
              else
              {
                _10363 = safe_mul( (int)3,_3734 );
              }
              _3731 += _10363;
              _3730 += (int)1;
              ++ _3732;
              ++ _3733;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _3730 = _3723;
      int _10365 = (int)0;
      int _10366 = _3723;
      for (int _3735 = _10365; _3735 < _10366; ++_3735)
      {
        {
          _3729 += (_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3735 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3735 )] )]);
        }
      }
      if ((_3715 > (int)0))
      {
        {
          int _10367 = (int)0;
          int _10368 = _3723;
          for (int _3736 = _10367; _3736 < _10368; ++_3736)
          {
            {
              _3731 += safe_add( (_ptr__3707[safe_add( _3721,_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] ),(int)1 )] )] - _ptr__3707[safe_add( _3721,_ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] )] )]),safe_mul( (int)4,(_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10369 = (int)0;
          int _10370 = _3723;
          for (int _3737 = _10369; _3737 < _10370; ++_3737)
          {
            {
              _3731 += safe_mul( (int)3,(_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3737 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3737 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3738 = (int)1;
  int _10371 = (int)0;
  int _10372 = _3710;
  for (int _3739 = _10371; _3739 < _10372; ++_3739)
  {
    {
      _3738 *= _ptr__3707[safe_add( _3716,_3739 )];
    }
  }
  bool _3740 = (_3730 < _3738);
  _3704->alloc_expr(_3728,_3730,_3729,_3740,_3731);
  int _3741 = mosek::fusion::p_WorkStack::_get_impl(_3704)->ptr_base;
  int _3742 = mosek::fusion::p_WorkStack::_get_impl(_3704)->nidxs_base;
  int _10373;
  bool _10374 = _3740;
  if (_10374)
  {
    _10373 = mosek::fusion::p_WorkStack::_get_impl(_3704)->sp_base;
  }
  else
  {
    _10373 = _3704->alloci64(_3730);
  }
  int _3743 = _10373;
  int _3744 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cof_base;
  bool _3745 = mosek::fusion::p_WorkStack::_get_impl(_3704)->hassp;
  int _3746 = mosek::fusion::p_WorkStack::_get_impl(_3704)->shape_base;
  int _3747 = mosek::fusion::p_WorkStack::_get_impl(_3704)->codeptr_base;
  int _3748 = mosek::fusion::p_WorkStack::_get_impl(_3704)->code_base;
  int _3749 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3750 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i64;
  _checked_ptr_1<long long> _ptr__3750(_3750 ? _3750->raw() : nullptr,_3750 ? _3750->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3751 = mosek::fusion::p_WorkStack::_get_impl(_3704)->f64;
  _checked_ptr_1<double> _ptr__3751(_3751 ? _3751->raw() : nullptr,_3751 ? _3751->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3752 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i32;
  _checked_ptr_1<int> _ptr__3752(_3752 ? _3752->raw() : nullptr,_3752 ? _3752->size(0) : 0);
  int _10375 = (int)0;
  int _10376 = _3710;
  for (int _3753 = _10375; _3753 < _10376; ++_3753)
  {
    {
      _ptr__3752[safe_add( _3746,_3753 )] = _ptr__3707[safe_add( _3716,_3753 )];
    }
  }
  _ptr__3752[_3741] = (int)0;
  if ((_3731 > (int)0))
  {
    {
      _ptr__3752[_3747] = (int)0;
    }
  }
  {}
  if (_3713)
  {
    {
      int _3754 = (int)0;
      int _3755 = (int)0;
      int _3756 = (int)0;
      int _3757 = (int)0;
      int _3758 = (int)0;
      while ( ((_3757 < _3711) && (_3758 < _3723)) )
      {
        {
          if ((_ptr__3708[safe_add( _3717,_3757 )] < _ptr__3727[safe_add( _3724,_3758 )]))
          {
            {
              ++ _3757;
            }
          }
          else if((_ptr__3708[safe_add( _3717,_3757 )] > _ptr__3727[safe_add( _3724,_3758 )]))
          {
            {
              ++ _3758;
            }
          }
          else
          {
            {
              int _10377 = _ptr__3707[safe_add( _3714,_3757 )];
              int _10378 = _ptr__3707[safe_add( safe_add( _3714,_3757 ),(int)1 )];
              for (int _3759 = _10377; _3759 < _10378; ++_3759)
              {
                {
                  _ptr__3750[safe_add( _3742,_3755 )] = _ptr__3708[safe_add( _3718,_3759 )];
                  _ptr__3751[safe_add( _3744,_3755 )] = 0.0;
                  _ptr__3752[safe_add( _3748,_3754 )] = 2;
                  _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3709[safe_add( _3719,_3759 )];
                  ++ _3754;
                  if ((_3715 > (int)0))
                  {
                    {
                      int _10379 = _ptr__3707[safe_add( _3721,_3759 )];
                      int _10380 = _ptr__3707[safe_add( safe_add( _3721,_3759 ),(int)1 )];
                      for (int _3760 = _10379; _3760 < _10380; ++_3760)
                      {
                        {
                          _ptr__3752[safe_add( _3748,_3754 )] = _ptr__3707[safe_add( _3722,_3760 )];
                          _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3709[safe_add( _3720,_3760 )];
                          ++ _3754;
                        }
                      }
                      _ptr__3752[safe_add( _3748,_3754 )] = 3;
                      ++ _3754;
                    }
                  }
                  {}
                  _ptr__3752[safe_add( _3748,_3754 )] = 1;
                  _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3726[safe_add( _3725,_3758 )];
                  ++ _3754;
                  _ptr__3752[safe_add( _3748,_3754 )] = 5;
                  ++ _3754;
                  _ptr__3752[safe_add( safe_add( _3747,_3755 ),(int)1 )] = _3754;
                  ++ _3755;
                }
              }
              _ptr__3750[safe_add( _3743,_3756 )] = _ptr__3708[safe_add( _3717,_3757 )];
              _ptr__3752[safe_add( safe_add( _3741,_3756 ),(int)1 )] = _3755;
              ++ _3756;
              ++ _3757;
              ++ _3758;
            }
          }
        }
      }
      if ((_3756 != _3730))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3755 != _3729))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3754 != _3731))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3761 = (int)0;
      int _3762 = (int)0;
      int _10381 = (int)0;
      int _10382 = _3723;
      for (int _3763 = _10381; _3763 < _10382; ++_3763)
      {
        {
          int _3764 = _3763;
          long long _3765 = _ptr__3727[safe_add( _3724,_3763 )];
          int _10383 = _ptr__3707[safe_add( _3714,_3765 )];
          int _10384 = _ptr__3707[safe_add( safe_add( _3714,_3765 ),(int)1 )];
          for (int _3766 = _10383; _3766 < _10384; ++_3766)
          {
            {
              _ptr__3750[safe_add( _3742,_3762 )] = _ptr__3708[safe_add( _3718,_3766 )];
              _ptr__3751[safe_add( _3744,_3762 )] = 0.0;
              _ptr__3752[safe_add( _3748,_3761 )] = 2;
              _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3709[safe_add( _3719,_3766 )];
              ++ _3761;
              if ((_3715 > (int)0))
              {
                {
                  int _10385 = _ptr__3707[safe_add( _3721,_3766 )];
                  int _10386 = _ptr__3707[safe_add( safe_add( _3721,_3766 ),(int)1 )];
                  for (int _3767 = _10385; _3767 < _10386; ++_3767)
                  {
                    {
                      _ptr__3752[safe_add( _3748,_3761 )] = _ptr__3707[safe_add( _3722,_3767 )];
                      _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3709[safe_add( _3720,_3767 )];
                      ++ _3761;
                    }
                  }
                  _ptr__3752[safe_add( _3748,_3761 )] = 3;
                  ++ _3761;
                }
              }
              {}
              _ptr__3752[safe_add( _3748,_3761 )] = 1;
              _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3726[safe_add( _3725,_3763 )];
              ++ _3761;
              _ptr__3752[safe_add( _3748,_3761 )] = 5;
              ++ _3761;
              _ptr__3752[safe_add( safe_add( _3747,_3762 ),(int)1 )] = _3761;
              ++ _3762;
            }
          }
          _ptr__3750[safe_add( _3743,_3764 )] = _3765;
          _ptr__3752[safe_add( safe_add( _3741,_3764 ),(int)1 )] = _3762;
        }
      }
      if ((_3731 != _3761))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Invalid code list result"));
        }
      }
      {}
    }
  }
  if ((!_3745))
  {
    {
      _3704->popi64(_3730);
    }
  }
  {}
  _3706->clear();
}
std::string mosek::fusion::ExprMulParamElem :: toString() { return mosek::fusion::p_ExprMulParamElem::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamElem::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamElem("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamElem::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamElem::destroy() { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamRight::ExprMulParamRight(mosek::fusion::p_ExprMulParamRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamRight::~ExprMulParamRight() {  /* std::cout << "~ExprMulParamRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamRight::p_ExprMulParamRight  (::mosek::fusion::ExprMulParamRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamRight::t mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769){ return new mosek::fusion::ExprMulParamRight(_3768,_3769); }mosek::fusion::ExprMulParamRight::ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769) :    ExprMulParamRight(new mosek::fusion::p_ExprMulParamRight(this)){ mosek::fusion::p_ExprMulParamRight::_get_impl(this)->_initialize(_3768,_3769); }void mosek::fusion::p_ExprMulParamRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3768->getDim((int)0)),(int)(_3769->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->p = _3769;
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->e = _3768;
    if (((_3769->getND() != (int)2) || (_3768->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3769->getDim((int)0) != _3768->getDim((int)1)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771,monty::rc_ptr< ::mosek::fusion::WorkStack > _3772) { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->eval(_3770,_3771,_3772); }void mosek::fusion::p_ExprMulParamRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771,monty::rc_ptr< ::mosek::fusion::WorkStack > _3772){
  e->eval(_3771,_3770,_3772);
  _3771->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3773 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i32;
  _checked_ptr_1<int> _ptr__3773(_3773 ? _3773->raw() : nullptr,_3773 ? _3773->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3774 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i64;
  _checked_ptr_1<long long> _ptr__3774(_3774 ? _3774->raw() : nullptr,_3774 ? _3774->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3775 = mosek::fusion::p_WorkStack::_get_impl(_3771)->f64;
  _checked_ptr_1<double> _ptr__3775(_3775 ? _3775->raw() : nullptr,_3775 ? _3775->size(0) : 0);
  int _3776 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nd;
  int _3777 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nelem;
  int _3778 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nnz;
  bool _3779 = mosek::fusion::p_WorkStack::_get_impl(_3771)->hassp;
  int _3780 = mosek::fusion::p_WorkStack::_get_impl(_3771)->ptr_base;
  int _3781 = mosek::fusion::p_WorkStack::_get_impl(_3771)->ncodeatom;
  int _3782 = mosek::fusion::p_WorkStack::_get_impl(_3771)->shape_base;
  int _3783 = mosek::fusion::p_WorkStack::_get_impl(_3771)->sp_base;
  int _3784 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nidxs_base;
  int _3785 = mosek::fusion::p_WorkStack::_get_impl(_3771)->cof_base;
  int _3786 = mosek::fusion::p_WorkStack::_get_impl(_3771)->cconst_base;
  int _3787 = mosek::fusion::p_WorkStack::_get_impl(_3771)->codeptr_base;
  int _3788 = mosek::fusion::p_WorkStack::_get_impl(_3771)->code_base;
  if (((_3776 != (int)2) || (p->getDim((int)0) != _ptr__3773[safe_add( _3782,(int)1 )])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3789 = _ptr__3773[_3782];
  int _3790 = _ptr__3773[safe_add( _3782,(int)1 )];
  int _3791 = p->getDim((int)0);
  int _3792 = p->getDim((int)1);
  int _3793 = p->getNumNonzero();
  int _3794 = _3772->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3795 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
  _checked_ptr_1<int> _ptr__3795(_3795 ? _3795->raw() : nullptr,_3795 ? _3795->size(0) : 0);
  p->getAllIndexes(_3795,_3794);
  int _3796 = _3772->alloci32(_3793);
  int _3797 = _3772->alloci64(_3793);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3772)->i64,_3797);
  {
    int _3798 = _3772->alloci32(safe_add( _3792,(int)1 ));
    std::shared_ptr< monty::ndarray< int,1 > > _3799 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
    _checked_ptr_1<int> _ptr__3799(_3799 ? _3799->raw() : nullptr,_3799 ? _3799->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _3800 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i64;
    _checked_ptr_1<long long> _ptr__3800(_3800 ? _3800->raw() : nullptr,_3800 ? _3800->size(0) : 0);
    int _10387 = (int)0;
    int _10388 = safe_add( _3792,(int)1 );
    for (int _3801 = _10387; _3801 < _10388; ++_3801)
    {
      {
        _ptr__3799[safe_add( _3798,_3801 )] = (int)0;
      }
    }
    int _10389 = (int)0;
    int _10390 = _3793;
    for (int _3802 = _10389; _3802 < _10390; ++_3802)
    {
      {
        ++ _ptr__3799[safe_add( safe_add( _3798,(_ptr__3800[safe_add( _3797,_3802 )] % _3792) ),(int)1 )];
      }
    }
    int _10391 = (int)0;
    int _10392 = _3792;
    for (int _3803 = _10391; _3803 < _10392; ++_3803)
    {
      {
        _ptr__3799[safe_add( safe_add( _3798,_3803 ),(int)1 )] += _ptr__3799[safe_add( _3798,_3803 )];
      }
    }
    int _10393 = (int)0;
    int _10394 = _3793;
    for (int _3804 = _10393; _3804 < _10394; ++_3804)
    {
      {
        _ptr__3799[safe_add( _3796,_ptr__3799[safe_add( _3798,(_ptr__3800[safe_add( _3797,_3804 )] % _3792) )] )] = _3804;
        ++ _ptr__3799[safe_add( _3798,(_ptr__3800[safe_add( _3797,_3804 )] % _3792) )];
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3805 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
  _checked_ptr_1<int> _ptr__3805(_3805 ? _3805->raw() : nullptr,_3805 ? _3805->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3806 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i64;
  _checked_ptr_1<long long> _ptr__3806(_3806 ? _3806->raw() : nullptr,_3806 ? _3806->size(0) : 0);
  int _3807 = (int)0;
  int _3808 = (int)0;
  int _3809 = (int)0;
  if (((!p->isSparse()) && (!_3779)))
  {
    {
      _3809 = safe_mul( _3778,_3792 );
      _3808 = safe_mul( _3789,_3792 );
      int _10395;
      bool _10396 = (_3781 > (int)0);
      if (_10396)
      {
        _10395 = safe_mul( safe_add( _3781,safe_mul( _3778,(int)4 ) ),_3792 );
      }
      else
      {
        _10395 = safe_mul( safe_mul( _3778,_3792 ),(int)3 );
      }
      _3807 = _10395;
    }
  }
  else if((!_3779))
  {
    {
      int _3810 = (int)0;
      while ( (_3810 < _3793) )
      {
        {
          long long _3811 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] % _3792);
          int _3812 = _3810;
          while ( ((_3810 < _3793) && ((_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] % _3792) == _3811)) )
          {
            {
              long long _3813 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] / _3792);
              int _10397 = (int)0;
              int _10398 = _3789;
              for (int _3814 = _10397; _3814 < _10398; ++_3814)
              {
                {
                  long long _3815 = safe_add( safe_mul( _3814,_3790 ),_3813 );
                  int _3816 = (_ptr__3773[safe_add( safe_add( _3780,_3815 ),(int)1 )] - _ptr__3773[safe_add( _3780,_3815 )]);
                  _3809 += _3816;
                  int _10399;
                  bool _10400 = (_3781 > (int)0);
                  if (_10400)
                  {
                    _10399 = safe_add( (_ptr__3773[safe_add( _3787,_ptr__3773[safe_add( safe_add( _3780,_3815 ),(int)1 )] )] - _ptr__3773[safe_add( _3787,_ptr__3773[safe_add( _3780,_3815 )] )]),safe_mul( _3816,(int)4 ) );
                  }
                  else
                  {
                    _10399 = safe_mul( _3816,(int)3 );
                  }
                  _3807 += _10399;
                }
              }
              ++ _3810;
            }
          }
          _3808 += _3789;
        }
      }
    }
  }
  else
  {
    {
      int _3817 = (int)0;
      while ( (_3817 < _3777) )
      {
        {
          long long _3818 = (_ptr__3774[safe_add( _3783,_3817 )] / _3790);
          int _3819 = _3817;
          long long _3820 = safe_mul( safe_add( _3818,(int)1 ),_3790 );
          while ( ((_3817 < _3777) && (_ptr__3774[safe_add( _3783,_3817 )] < _3820)) )
          {
            {
              ++ _3817;
            }
          }
          int _3821 = (int)0;
          while ( (_3821 < _3793) )
          {
            {
              long long _3822 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3821 )] )] % _3792);
              int _3823 = _3821;
              while ( ((_3821 < _3793) && (_3822 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3821 )] )] % _3792))) )
              {
                {
                  ++ _3821;
                }
              }
              int _3824 = (int)0;
              int _3825 = _3823;
              int _3826 = _3819;
              while ( ((_3826 < _3817) && (_3825 < _3821)) )
              {
                {
                  long long _3827 = (_ptr__3774[safe_add( _3783,_3826 )] % _3790);
                  long long _3828 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3825 )] )] / _3792);
                  if ((_3827 < _3828))
                  {
                    {
                      ++ _3826;
                    }
                  }
                  else if((_3827 > _3828))
                  {
                    {
                      ++ _3825;
                    }
                  }
                  else
                  {
                    {
                      int _3829 = (_ptr__3773[safe_add( safe_add( _3780,_3826 ),(int)1 )] - _ptr__3773[safe_add( _3780,_3826 )]);
                      _3809 += _3829;
                      int _10401;
                      bool _10402 = (_3781 > (int)0);
                      if (_10402)
                      {
                        _10401 = safe_add( (_ptr__3773[safe_add( _3787,_ptr__3773[safe_add( safe_add( _3780,_3826 ),(int)1 )] )] - _ptr__3773[safe_add( _3787,_ptr__3773[safe_add( _3780,_3826 )] )]),safe_mul( _3829,(int)4 ) );
                      }
                      else
                      {
                        _10401 = safe_mul( _3829,(int)3 );
                      }
                      _3807 += _10401;
                      ++ _3826;
                      ++ _3825;
                      ++ _3824;
                    }
                  }
                }
              }
              if ((_3824 > (int)0))
              {
                {
                  ++ _3808;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  int _3830 = (int)2;
  bool _3831 = (_3808 < safe_mul( _3792,_3789 ));
  _3770->alloc_expr(_3830,_3808,_3809,_3831,_3807);
  int _3832 = mosek::fusion::p_WorkStack::_get_impl(_3770)->ptr_base;
  int _3833 = mosek::fusion::p_WorkStack::_get_impl(_3770)->nidxs_base;
  int _10403;
  bool _10404 = _3831;
  if (_10404)
  {
    _10403 = mosek::fusion::p_WorkStack::_get_impl(_3770)->sp_base;
  }
  else
  {
    _10403 = _3770->alloci64(_3808);
  }
  int _3834 = _10403;
  int _3835 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cof_base;
  bool _3836 = mosek::fusion::p_WorkStack::_get_impl(_3770)->hassp;
  int _3837 = mosek::fusion::p_WorkStack::_get_impl(_3770)->shape_base;
  int _3838 = mosek::fusion::p_WorkStack::_get_impl(_3770)->codeptr_base;
  int _3839 = mosek::fusion::p_WorkStack::_get_impl(_3770)->code_base;
  int _3840 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3841 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i64;
  _checked_ptr_1<long long> _ptr__3841(_3841 ? _3841->raw() : nullptr,_3841 ? _3841->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3842 = mosek::fusion::p_WorkStack::_get_impl(_3770)->f64;
  _checked_ptr_1<double> _ptr__3842(_3842 ? _3842->raw() : nullptr,_3842 ? _3842->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3843 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i32;
  _checked_ptr_1<int> _ptr__3843(_3843 ? _3843->raw() : nullptr,_3843 ? _3843->size(0) : 0);
  _ptr__3843[_3832] = (int)0;
  if ((_3807 > (int)0))
  {
    {
      _ptr__3843[_3838] = (int)0;
    }
  }
  {}
  _ptr__3843[_3837] = _3789;
  _ptr__3843[safe_add( _3837,(int)1 )] = _3792;
  int _3844 = (int)0;
  int _3845 = (int)0;
  int _3846 = (int)0;
  if ((!_3779))
  {
    {
      int _10405 = (int)0;
      int _10406 = _3789;
      for (int _3847 = _10405; _3847 < _10406; ++_3847)
      {
        {
          int _3848 = (int)0;
          while ( (_3848 < _3793) )
          {
            {
              int _3849 = _3848;
              long long _3850 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3848 )] )] % _3792);
              while ( ((_3848 < _3793) && (_3850 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3848 )] )] % _3792))) )
              {
                {
                  ++ _3848;
                }
              }
              int _3851 = _3849;
              while ( (_3851 < _3848) )
              {
                {
                  long long _3852 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3851 )] )] / _3792);
                  long long _3853 = safe_add( safe_mul( _3847,_3790 ),_3852 );
                  int _3854 = _ptr__3805[safe_add( _3794,_ptr__3805[safe_add( _3796,_3851 )] )];
                  int _10407 = _ptr__3773[safe_add( _3780,_3853 )];
                  int _10408 = _ptr__3773[safe_add( safe_add( _3780,_3853 ),(int)1 )];
                  for (int _3855 = _10407; _3855 < _10408; ++_3855)
                  {
                    {
                      _ptr__3841[safe_add( _3833,_3846 )] = _ptr__3774[safe_add( _3784,_3855 )];
                      _ptr__3842[safe_add( _3835,_3846 )] = (int)0;
                      _ptr__3843[safe_add( _3839,_3844 )] = 2;
                      _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3785,_3855 )];
                      ++ _3844;
                      if ((_3781 > (int)0))
                      {
                        {
                          int _10409 = _ptr__3773[safe_add( _3787,_3855 )];
                          int _10410 = _ptr__3773[safe_add( safe_add( _3787,_3855 ),(int)1 )];
                          for (int _3856 = _10409; _3856 < _10410; ++_3856)
                          {
                            {
                              _ptr__3843[safe_add( _3839,_3844 )] = _ptr__3773[safe_add( _3788,_3856 )];
                              _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3786,_3856 )];
                              ++ _3844;
                            }
                          }
                          _ptr__3843[safe_add( _3839,_3844 )] = 3;
                          ++ _3844;
                        }
                      }
                      {}
                      _ptr__3843[safe_add( _3839,_3844 )] = 1;
                      _ptr__3842[safe_add( _3840,_3844 )] = _3854;
                      ++ _3844;
                      _ptr__3843[safe_add( _3839,_3844 )] = 5;
                      ++ _3844;
                      _ptr__3843[safe_add( safe_add( _3838,_3846 ),(int)1 )] = _3844;
                      ++ _3846;
                    }
                  }
                  ++ _3851;
                }
              }
              _ptr__3843[safe_add( safe_add( _3832,_3845 ),(int)1 )] = _3846;
              _ptr__3841[safe_add( _3834,_3845 )] = safe_add( safe_mul( _3847,_3792 ),_3850 );
              ++ _3845;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _3857 = (int)0;
      while ( (_3857 < _3777) )
      {
        {
          long long _3858 = (_ptr__3774[safe_add( _3783,_3857 )] / _3790);
          int _3859 = _3857;
          long long _3860 = safe_mul( safe_add( _3858,(int)1 ),_3790 );
          while ( ((_3857 < _3777) && (_ptr__3774[safe_add( _3783,_3857 )] < _3860)) )
          {
            {
              ++ _3857;
            }
          }
          int _3861 = (int)0;
          while ( (_3861 < _3793) )
          {
            {
              long long _3862 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3861 )] )] % _3792);
              int _3863 = _3861;
              while ( ((_3861 < _3793) && (_3862 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3861 )] )] % _3792))) )
              {
                {
                  ++ _3861;
                }
              }
              int _3864 = (int)0;
              int _3865 = _3863;
              int _3866 = _3859;
              while ( ((_3866 < _3857) && (_3865 < _3861)) )
              {
                {
                  long long _3867 = (_ptr__3774[safe_add( _3783,_3866 )] % _3790);
                  long long _3868 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3865 )] )] / _3792);
                  if ((_3867 < _3868))
                  {
                    {
                      ++ _3866;
                    }
                  }
                  else if((_3867 > _3868))
                  {
                    {
                      ++ _3865;
                    }
                  }
                  else
                  {
                    {
                      int _3869 = _ptr__3805[safe_add( _3794,_ptr__3805[safe_add( _3796,_3865 )] )];
                      int _10411 = _ptr__3773[safe_add( _3780,_3866 )];
                      int _10412 = _ptr__3773[safe_add( safe_add( _3780,_3866 ),(int)1 )];
                      for (int _3870 = _10411; _3870 < _10412; ++_3870)
                      {
                        {
                          _ptr__3841[safe_add( _3833,_3846 )] = _ptr__3774[safe_add( _3784,_3870 )];
                          _ptr__3842[safe_add( _3835,_3846 )] = (int)0;
                          _ptr__3843[safe_add( _3839,_3844 )] = 2;
                          _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3785,_3870 )];
                          ++ _3844;
                          if ((_3781 > (int)0))
                          {
                            {
                              int _10413 = _ptr__3773[safe_add( _3787,_3870 )];
                              int _10414 = _ptr__3773[safe_add( safe_add( _3787,_3870 ),(int)1 )];
                              for (int _3871 = _10413; _3871 < _10414; ++_3871)
                              {
                                {
                                  _ptr__3843[safe_add( _3839,_3844 )] = _ptr__3773[safe_add( _3788,_3871 )];
                                  _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3786,_3871 )];
                                  ++ _3844;
                                }
                              }
                              _ptr__3843[safe_add( _3839,_3844 )] = 3;
                              ++ _3844;
                            }
                          }
                          {}
                          _ptr__3843[safe_add( _3839,_3844 )] = 1;
                          _ptr__3842[safe_add( _3840,_3844 )] = _3869;
                          ++ _3844;
                          _ptr__3843[safe_add( _3839,_3844 )] = 5;
                          ++ _3844;
                          _ptr__3843[safe_add( safe_add( _3838,_3846 ),(int)1 )] = _3844;
                          ++ _3846;
                        }
                      }
                      ++ _3866;
                      ++ _3865;
                      ++ _3864;
                    }
                  }
                }
              }
              if ((_3864 > (int)0))
              {
                {
                  _ptr__3843[safe_add( safe_add( _3832,_3845 ),(int)1 )] = _3846;
                  _ptr__3841[safe_add( _3834,_3845 )] = safe_add( safe_mul( _3858,_3792 ),_3862 );
                  ++ _3845;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((!_3836))
  {
    {
      _3770->popi64(_3808);
    }
  }
  {}
  if ((_3845 != _3808))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken elmi"));
    }
  }
  {}
  if ((_3846 != _3809))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken nzi"));
    }
  }
  {}
  if ((_3844 != _3807))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken codei"));
    }
  }
  {}
  _3772->clear();
}
std::string mosek::fusion::ExprMulParamRight :: toString() { return mosek::fusion::p_ExprMulParamRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamRight::destroy() { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft(mosek::fusion::p_ExprMulParamLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamLeft::~ExprMulParamLeft() {  /* std::cout << "~ExprMulParamLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamLeft::p_ExprMulParamLeft  (::mosek::fusion::ExprMulParamLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamLeft::t mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873){ return new mosek::fusion::ExprMulParamLeft(_3872,_3873); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873) :    ExprMulParamLeft(new mosek::fusion::p_ExprMulParamLeft(this)){ mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->_initialize(_3872,_3873); }void mosek::fusion::p_ExprMulParamLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3872->getDim((int)0)),(int)(_3873->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->p = _3872;
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->e = _3873;
    if (((_3872->getND() != (int)2) || (_3873->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3872->getDim((int)1) != _3873->getDim((int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875,monty::rc_ptr< ::mosek::fusion::WorkStack > _3876) { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->eval(_3874,_3875,_3876); }void mosek::fusion::p_ExprMulParamLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875,monty::rc_ptr< ::mosek::fusion::WorkStack > _3876){
  e->eval(_3875,_3874,_3876);
  _3875->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3877 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i32;
  _checked_ptr_1<int> _ptr__3877(_3877 ? _3877->raw() : nullptr,_3877 ? _3877->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3878 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i64;
  _checked_ptr_1<long long> _ptr__3878(_3878 ? _3878->raw() : nullptr,_3878 ? _3878->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3879 = mosek::fusion::p_WorkStack::_get_impl(_3875)->f64;
  _checked_ptr_1<double> _ptr__3879(_3879 ? _3879->raw() : nullptr,_3879 ? _3879->size(0) : 0);
  int _3880 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nd;
  int _3881 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nelem;
  int _3882 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nnz;
  bool _3883 = mosek::fusion::p_WorkStack::_get_impl(_3875)->hassp;
  int _3884 = mosek::fusion::p_WorkStack::_get_impl(_3875)->ncodeatom;
  int _3885 = mosek::fusion::p_WorkStack::_get_impl(_3875)->ptr_base;
  int _3886 = mosek::fusion::p_WorkStack::_get_impl(_3875)->code_base;
  int _3887 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cconst_base;
  int _3888 = mosek::fusion::p_WorkStack::_get_impl(_3875)->codeptr_base;
  int _3889 = mosek::fusion::p_WorkStack::_get_impl(_3875)->shape_base;
  int _3890 = mosek::fusion::p_WorkStack::_get_impl(_3875)->sp_base;
  int _3891 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nidxs_base;
  int _3892 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cof_base;
  int _3893 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cconst_base;
  if (((_3880 != (int)2) || (_ptr__3877[_3889] != p->getDim((int)1))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3894 = p->getDim((int)0);
  int _3895 = p->getDim((int)1);
  int _3896 = _ptr__3877[_3889];
  int _3897 = _ptr__3877[safe_add( _3889,(int)1 )];
  int _3898 = p->getNumNonzero();
  int _3899 = _3876->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3900 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i32;
  _checked_ptr_1<int> _ptr__3900(_3900 ? _3900->raw() : nullptr,_3900 ? _3900->size(0) : 0);
  p->getAllIndexes(_3900,_3899);
  if (((!_3883) && (!p->isSparse())))
  {
    {
      int _3901 = (int)2;
      int _3902 = safe_mul( _3897,p->getDim((int)0) );
      int _3903 = safe_mul( _3882,p->getDim((int)0) );
      int _10415;
      bool _10416 = (_3884 > (int)0);
      if (_10416)
      {
        _10415 = safe_add( safe_mul( p->getDim((int)0),_3884 ),safe_mul( (int)4,_3903 ) );
      }
      else
      {
        _10415 = safe_mul( (int)3,_3903 );
      }
      int _3904 = _10415;
      bool _3905 = false;
      _3874->alloc_expr(_3901,_3902,_3903,_3905,_3904);
      std::shared_ptr< monty::ndarray< long long,1 > > _3906 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__3906(_3906 ? _3906->raw() : nullptr,_3906 ? _3906->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3907 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__3907(_3907 ? _3907->raw() : nullptr,_3907 ? _3907->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3908 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__3908(_3908 ? _3908->raw() : nullptr,_3908 ? _3908->size(0) : 0);
      int _3909 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _3910 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _3911 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      int _3912 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _3913 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _3914 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      bool _3915 = mosek::fusion::p_WorkStack::_get_impl(_3874)->hassp;
      int _3916 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      _ptr__3908[_3916] = _3894;
      _ptr__3908[safe_add( _3916,(int)1 )] = _3897;
      {
        _ptr__3908[_3909] = (int)0;
        _ptr__3908[_3913] = (int)0;
        int _3917 = (int)0;
        int _3918 = (int)0;
        int _3919 = (int)0;
        int _10417 = (int)0;
        int _10418 = p->getDim((int)0);
        for (int _3920 = _10417; _3920 < _10418; ++_3920)
        {
          {
            int _10419 = (int)0;
            int _10420 = e->getDim((int)1);
            for (int _3921 = _10419; _3921 < _10420; ++_3921)
            {
              {
                int _10421 = (int)0;
                int _10422 = p->getDim((int)1);
                for (int _3922 = _10421; _3922 < _10422; ++_3922)
                {
                  {
                    int _10423 = _ptr__3877[safe_add( safe_add( _3885,safe_mul( _3922,_3897 ) ),_3921 )];
                    int _10424 = _ptr__3877[safe_add( safe_add( safe_add( _3885,safe_mul( _3922,_3897 ) ),_3921 ),(int)1 )];
                    for (int _3923 = _10423; _3923 < _10424; ++_3923)
                    {
                      {
                        _ptr__3906[safe_add( _3910,_3917 )] = _ptr__3878[safe_add( _3891,_3923 )];
                        _ptr__3907[safe_add( _3911,_3917 )] = 0.0;
                        _ptr__3908[safe_add( _3912,_3919 )] = 2;
                        _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3879[safe_add( _3892,_3923 )];
                        ++ _3919;
                        if ((_3884 > (int)0))
                        {
                          {
                            int _10425 = _ptr__3877[safe_add( _3888,_3923 )];
                            int _10426 = _ptr__3877[safe_add( safe_add( _3888,_3923 ),(int)1 )];
                            for (int _3924 = _10425; _3924 < _10426; ++_3924)
                            {
                              {
                                _ptr__3908[safe_add( _3912,_3919 )] = _ptr__3877[safe_add( _3886,_3924 )];
                                _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3879[safe_add( _3887,_3924 )];
                                ++ _3919;
                              }
                            }
                            _ptr__3908[safe_add( _3912,_3919 )] = 3;
                            ++ _3919;
                          }
                        }
                        {}
                        _ptr__3908[safe_add( _3912,_3919 )] = 1;
                        _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3900[safe_add( safe_add( _3899,safe_mul( _3920,_3895 ) ),_3922 )];
                        ++ _3919;
                        _ptr__3908[safe_add( _3912,_3919 )] = 5;
                        ++ _3919;
                        _ptr__3908[safe_add( safe_add( _3913,_3917 ),(int)1 )] = _3919;
                        ++ _3917;
                      }
                    }
                  }
                }
                _ptr__3908[safe_add( safe_add( _3909,_3918 ),(int)1 )] = _3917;
                ++ _3918;
              }
            }
          }
        }
        if ((_3919 != _3904))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_3917 != _3903))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3918 != _3902))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        int _10427 = (int)0;
        int _10428 = _3902;
        for (int _3925 = _10427; _3925 < _10428; ++_3925)
        {
          {
            if ((_ptr__3908[safe_add( _3909,_3925 )] > _ptr__3908[safe_add( safe_add( _3909,_3925 ),(int)1 )]))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr indexes"));
              }
            }
            {}
          }
        }
      }
    }
  }
  else if((!_3883))
  {
    {
      int _3926 = _3881;
      int _3927 = _3898;
      int _3928 = _3876->alloci64(_3927);
      std::shared_ptr< monty::ndarray< long long,1 > > _3929 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i64;
      _checked_ptr_1<long long> _ptr__3929(_3929 ? _3929->raw() : nullptr,_3929 ? _3929->size(0) : 0);
      p->getSp(_3929,_3928);
      int _3930 = (int)0;
      int _3931 = (int)0;
      int _3932 = (int)0;
      {
        int _3933 = (int)0;
        while ( (_3933 < _3898) )
        {
          {
            int _3934 = (int)(_ptr__3929[safe_add( _3928,_3933 )] / _3895);
            int _3935 = _3933;
            ++ _3933;
            while ( ((_3933 < _3898) && (_ptr__3929[safe_add( _3928,_3933 )] < safe_mul( safe_add( _3934,(int)1 ),_3895 ))) )
            {
              {
                ++ _3933;
              }
            }
            int _3936 = _3933;
            int _10429 = (int)0;
            int _10430 = _3897;
            for (int _3937 = _10429; _3937 < _10430; ++_3937)
            {
              {
                int _10431 = _3935;
                int _10432 = _3936;
                for (int _3938 = _10431; _3938 < _10432; ++_3938)
                {
                  {
                    long long _3939 = safe_add( safe_mul( (_ptr__3929[safe_add( _3928,_3938 )] % _3895),_3897 ),_3937 );
                    int _3940 = (_ptr__3877[safe_add( safe_add( _3885,_3939 ),(int)1 )] - _ptr__3877[safe_add( _3885,_3939 )]);
                    _3931 += _3940;
                    if ((_3884 > (int)0))
                    {
                      {
                        _3932 += safe_add( (_ptr__3877[safe_add( _3888,_ptr__3877[safe_add( safe_add( _3885,_3939 ),(int)1 )] )] - _ptr__3877[safe_add( _3888,_ptr__3877[safe_add( _3885,_3939 )] )]),safe_mul( (int)4,_3940 ) );
                      }
                    }
                    else
                    {
                      {
                        _3932 += safe_mul( (int)3,_3940 );
                      }
                    }
                  }
                }
                ++ _3930;
              }
            }
          }
        }
      }
      bool _3941 = (_3930 < safe_mul( _3894,_3897 ));
      int _3942 = (int)2;
      _3874->alloc_expr(_3942,_3930,_3931,_3941,_3932);
      int _3943 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _3944 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _10433;
      bool _10434 = _3941;
      if (_10434)
      {
        _10433 = mosek::fusion::p_WorkStack::_get_impl(_3874)->sp_base;
      }
      else
      {
        _10433 = _3874->alloci64(_3930);
      }
      int _3945 = _10433;
      int _3946 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      bool _3947 = mosek::fusion::p_WorkStack::_get_impl(_3874)->hassp;
      int _3948 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      int _3949 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _3950 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _3951 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3952 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__3952(_3952 ? _3952->raw() : nullptr,_3952 ? _3952->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3953 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__3953(_3953 ? _3953->raw() : nullptr,_3953 ? _3953->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3954 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__3954(_3954 ? _3954->raw() : nullptr,_3954 ? _3954->size(0) : 0);
      _ptr__3954[_3948] = _3894;
      _ptr__3954[safe_add( _3948,(int)1 )] = _3897;
      {
        int _3955 = (int)0;
        int _3956 = (int)0;
        int _3957 = (int)0;
        if ((_3932 > (int)0))
        {
          {
            _ptr__3954[_3949] = (int)0;
          }
        }
        {}
        _ptr__3954[_3943] = (int)0;
        int _10435 = (int)0;
        int _10436 = _3931;
        for (int _3958 = _10435; _3958 < _10436; ++_3958)
        {
          {
            _ptr__3953[safe_add( _3946,_3958 )] = 0.0;
          }
        }
        int _3959 = (int)0;
        while ( (_3959 < _3898) )
        {
          {
            int _3960 = (int)(_ptr__3929[safe_add( _3928,_3959 )] / _3895);
            int _3961 = _3959;
            ++ _3959;
            while ( ((_3959 < _3898) && (_ptr__3929[safe_add( _3928,_3959 )] < safe_mul( safe_add( _3960,(int)1 ),_3895 ))) )
            {
              {
                ++ _3959;
              }
            }
            int _3962 = _3959;
            int _10437 = (int)0;
            int _10438 = _3897;
            for (int _3963 = _10437; _3963 < _10438; ++_3963)
            {
              {
                int _10439 = _3961;
                int _10440 = _3962;
                for (int _3964 = _10439; _3964 < _10440; ++_3964)
                {
                  {
                    long long _3965 = safe_add( safe_mul( (_ptr__3929[safe_add( _3928,_3964 )] % _3895),_3897 ),_3963 );
                    int _10441 = _ptr__3877[safe_add( _3885,_3965 )];
                    int _10442 = _ptr__3877[safe_add( safe_add( _3885,_3965 ),(int)1 )];
                    for (int _3966 = _10441; _3966 < _10442; ++_3966)
                    {
                      {
                        _ptr__3952[safe_add( _3944,_3955 )] = _ptr__3878[safe_add( _3891,_3966 )];
                        _ptr__3954[safe_add( _3950,_3957 )] = 2;
                        _ptr__3953[safe_add( _3951,_3957 )] = _ptr__3879[safe_add( _3892,_3966 )];
                        ++ _3957;
                        if ((_3884 > (int)0))
                        {
                          {
                            int _10443 = _ptr__3877[safe_add( _3888,_3966 )];
                            int _10444 = _ptr__3877[safe_add( safe_add( _3888,_3966 ),(int)1 )];
                            for (int _3967 = _10443; _3967 < _10444; ++_3967)
                            {
                              {
                                _ptr__3954[safe_add( _3950,_3957 )] = _ptr__3877[safe_add( _3886,_3967 )];
                                _ptr__3953[safe_add( _3951,_3957 )] = _ptr__3879[safe_add( _3887,_3967 )];
                                ++ _3957;
                              }
                            }
                            _ptr__3954[safe_add( _3950,_3957 )] = 3;
                            ++ _3957;
                          }
                        }
                        {}
                        _ptr__3954[safe_add( _3950,_3957 )] = 1;
                        _ptr__3953[safe_add( _3951,_3957 )] = _ptr__3900[safe_add( _3899,_3964 )];
                        ++ _3957;
                        _ptr__3954[safe_add( _3950,_3957 )] = 5;
                        ++ _3957;
                        _ptr__3954[safe_add( safe_add( _3949,_3955 ),(int)1 )] = _3957;
                        ++ _3955;
                      }
                    }
                  }
                }
                _ptr__3954[safe_add( safe_add( _3943,_3956 ),(int)1 )] = _3955;
                _ptr__3952[safe_add( _3945,_3956 )] = safe_add( safe_mul( (long long)_3960,_3897 ),_3963 );
                ++ _3956;
              }
            }
          }
        }
        if ((_3957 != _3932))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect code list"));
          }
        }
        {}
        if ((_3955 != _3931))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3956 != _3930))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__3954[safe_add( _3943,_3930 )] != _3931))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_3947))
      {
        {
          _3874->popi64(_3930);
        }
      }
      {}
      _3876->clear();
    }
  }
  else
  {
    {
      int _3968 = _3881;
      int _3969 = _3876->alloci32(_3968);
      int _3970 = p->getNumNonzero();
      int _3971 = _3876->alloci64(_3970);
      int _3972 = _3876->alloci32(safe_add( _ptr__3877[safe_add( _3889,(int)1 )],(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3973 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i32;
      _checked_ptr_1<int> _ptr__3973(_3973 ? _3973->raw() : nullptr,_3973 ? _3973->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3974 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i64;
      _checked_ptr_1<long long> _ptr__3974(_3974 ? _3974->raw() : nullptr,_3974 ? _3974->size(0) : 0);
      p->getSp(_3974,_3971);
      {
        int _3975 = _ptr__3877[safe_add( _3889,(int)1 )];
        int _10445 = (int)0;
        int _10446 = safe_add( _ptr__3877[safe_add( _3889,(int)1 )],(int)1 );
        for (int _3976 = _10445; _3976 < _10446; ++_3976)
        {
          {
            _ptr__3973[safe_add( _3972,_3976 )] = (int)0;
          }
        }
        int _10447 = (int)0;
        int _10448 = _3881;
        for (int _3977 = _10447; _3977 < _10448; ++_3977)
        {
          {
            ++ _ptr__3973[safe_add( safe_add( _3972,(_ptr__3878[safe_add( _3890,_3977 )] % _3975) ),(int)1 )];
          }
        }
        int _10449 = (int)0;
        int _10450 = _3975;
        for (int _3978 = _10449; _3978 < _10450; ++_3978)
        {
          {
            _ptr__3973[safe_add( safe_add( _3972,_3978 ),(int)1 )] += _ptr__3973[safe_add( _3972,_3978 )];
          }
        }
        int _10451 = (int)0;
        int _10452 = _3881;
        for (int _3979 = _10451; _3979 < _10452; ++_3979)
        {
          {
            _ptr__3973[safe_add( _3969,_ptr__3973[safe_add( _3972,(_ptr__3878[safe_add( _3890,_3979 )] % _3975) )] )] = _3979;
            ++ _ptr__3973[safe_add( _3972,(_ptr__3878[safe_add( _3890,_3979 )] % _3975) )];
          }
        }
      }
      int _3980 = (int)0;
      int _3981 = (int)0;
      int _3982 = (int)0;
      int _3983 = _ptr__3877[safe_add( _3889,(int)1 )];
      int _3984 = _ptr__3877[_3889];
      int _3985 = p->getDim((int)1);
      int _3986 = p->getDim((int)0);
      {
        int _3987 = (int)0;
        while ( (_3987 < _3970) )
        {
          {
            int _3988 = _3987;
            long long _3989 = (_ptr__3974[safe_add( _3971,_3987 )] / _3985);
            while ( ((_3987 < _3970) && (_ptr__3974[safe_add( _3971,_3987 )] < safe_mul( safe_add( _3989,(int)1 ),_3985 ))) )
            {
              {
                ++ _3987;
              }
            }
            int _3990 = (int)0;
            while ( (_3990 < _3881) )
            {
              {
                int _3991 = _3990;
                long long _3992 = (_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_3990 )] )] % _3983);
                ++ _3990;
                while ( ((_3990 < _3881) && ((_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_3990 )] )] % _3983) == _3992)) )
                {
                  {
                    ++ _3990;
                  }
                }
                int _3993 = _3991;
                int _3994 = _3988;
                bool _3995 = false;
                int _3996 = (int)0;
                while ( ((_3994 < _3987) && (_3993 < _3990)) )
                {
                  {
                    int _3997 = _ptr__3973[safe_add( _3969,_3993 )];
                    if (((_ptr__3974[safe_add( _3971,_3994 )] % _3985) < (_ptr__3878[safe_add( _3890,_3997 )] / _3983)))
                    {
                      {
                        ++ _3994;
                      }
                    }
                    else if(((_ptr__3974[safe_add( _3971,_3994 )] % _3985) > (_ptr__3878[safe_add( _3890,_3997 )] / _3983)))
                    {
                      {
                        ++ _3993;
                      }
                    }
                    else
                    {
                      {
                        int _3998 = (_ptr__3877[safe_add( safe_add( _3885,_3997 ),(int)1 )] - _ptr__3877[safe_add( _3885,_3997 )]);
                        _3981 += _3998;
                        int _10453;
                        bool _10454 = (_3884 > (int)0);
                        if (_10454)
                        {
                          _10453 = safe_add( (_ptr__3877[safe_add( _3888,_ptr__3877[safe_add( safe_add( _3885,_3997 ),(int)1 )] )] - _ptr__3877[safe_add( _3888,_ptr__3877[safe_add( _3885,_3997 )] )]),safe_mul( (int)4,_3998 ) );
                        }
                        else
                        {
                          _10453 = safe_mul( (int)3,_3998 );
                        }
                        _3982 += _10453;
                        ++ _3993;
                        ++ _3994;
                        ++ _3996;
                      }
                    }
                  }
                }
                if ((_3996 > (int)0))
                {
                  {
                    ++ _3980;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3999 = (int)2;
      bool _4000 = (_3980 < safe_mul( _3986,_3983 ));
      _3874->alloc_expr(_3999,_3980,_3981,_4000,_3982);
      int _4001 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _4002 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _10455;
      bool _10456 = _4000;
      if (_10456)
      {
        _10455 = mosek::fusion::p_WorkStack::_get_impl(_3874)->sp_base;
      }
      else
      {
        _10455 = _3874->alloci64(_3980);
      }
      int _4003 = _10455;
      int _4004 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      int _4005 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      int _4006 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _4007 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _4008 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _4009 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__4009(_4009 ? _4009->raw() : nullptr,_4009 ? _4009->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4010 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__4010(_4010 ? _4010->raw() : nullptr,_4010 ? _4010->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4011 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__4011(_4011 ? _4011->raw() : nullptr,_4011 ? _4011->size(0) : 0);
      int _10457 = (int)0;
      int _10458 = safe_add( _3980,(int)1 );
      for (int _4012 = _10457; _4012 < _10458; ++_4012)
      {
        {
          _ptr__4011[safe_add( _4001,_4012 )] = (-(int)9999);
        }
      }
      {
        _ptr__4011[_4001] = (int)0;
        if ((_3982 > (int)0))
        {
          {
            _ptr__4011[_4006] = (int)0;
          }
        }
        {}
        _ptr__4011[_4005] = _3986;
        _ptr__4011[safe_add( _4005,(int)1 )] = _3983;
        int _4013 = (int)0;
        int _4014 = (int)0;
        int _4015 = (int)0;
        int _10459 = (int)0;
        int _10460 = _3981;
        for (int _4016 = _10459; _4016 < _10460; ++_4016)
        {
          {
            _ptr__4010[safe_add( _4004,_4016 )] = 0.0;
          }
        }
        int _4017 = (int)0;
        while ( (_4017 < _3970) )
        {
          {
            int _4018 = _4017;
            long long _4019 = (_ptr__3974[safe_add( _3971,_4017 )] / _3985);
            while ( ((_4017 < _3970) && (_ptr__3974[safe_add( _3971,_4017 )] < safe_mul( safe_add( _4019,(int)1 ),_3985 ))) )
            {
              {
                ++ _4017;
              }
            }
            int _4020 = (int)0;
            while ( (_4020 < _3881) )
            {
              {
                int _4021 = _4020;
                long long _4022 = (_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_4020 )] )] % _3983);
                ++ _4020;
                while ( ((_4020 < _3881) && ((_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_4020 )] )] % _3983) == _4022)) )
                {
                  {
                    ++ _4020;
                  }
                }
                int _4023 = _4021;
                int _4024 = _4018;
                int _4025 = (int)0;
                while ( ((_4024 < _4017) && (_4023 < _4020)) )
                {
                  {
                    int _4026 = _ptr__3973[safe_add( _3969,_4023 )];
                    if (((_ptr__3974[safe_add( _3971,_4024 )] % _3985) < (_ptr__3878[safe_add( _3890,_4026 )] / _3983)))
                    {
                      {
                        ++ _4024;
                      }
                    }
                    else if(((_ptr__3974[safe_add( _3971,_4024 )] % _3985) > (_ptr__3878[safe_add( _3890,_4026 )] / _3983)))
                    {
                      {
                        ++ _4023;
                      }
                    }
                    else
                    {
                      {
                        int _10461 = _ptr__3877[safe_add( _3885,_4026 )];
                        int _10462 = _ptr__3877[safe_add( safe_add( _3885,_4026 ),(int)1 )];
                        for (int _4027 = _10461; _4027 < _10462; ++_4027)
                        {
                          {
                            _ptr__4009[safe_add( _4002,_4013 )] = _ptr__3878[safe_add( _3891,_4027 )];
                            _ptr__4011[safe_add( _4007,_4015 )] = 2;
                            _ptr__4010[safe_add( _4008,_4015 )] = _ptr__3879[safe_add( _3892,_4027 )];
                            ++ _4015;
                            if ((_3884 > (int)0))
                            {
                              {
                                int _10463 = _ptr__3877[safe_add( _3888,_4027 )];
                                int _10464 = _ptr__3877[safe_add( safe_add( _3888,_4027 ),(int)1 )];
                                for (int _4028 = _10463; _4028 < _10464; ++_4028)
                                {
                                  {
                                    _ptr__4011[safe_add( _4007,_4015 )] = _ptr__3877[safe_add( _3886,_4028 )];
                                    _ptr__4010[safe_add( _4008,_4015 )] = _ptr__3879[safe_add( _3887,_4028 )];
                                    ++ _4015;
                                  }
                                }
                                _ptr__4011[safe_add( _4007,_4015 )] = 3;
                                ++ _4015;
                              }
                            }
                            {}
                            _ptr__4011[safe_add( _4007,_4015 )] = 1;
                            _ptr__4010[safe_add( _4008,_4015 )] = _ptr__3973[safe_add( _3899,_4024 )];
                            ++ _4015;
                            _ptr__4011[safe_add( _4007,_4015 )] = 5;
                            ++ _4015;
                            _ptr__4011[safe_add( safe_add( _4006,_4013 ),(int)1 )] = _4015;
                            ++ _4013;
                          }
                        }
                        ++ _4025;
                        ++ _4024;
                        ++ _4023;
                      }
                    }
                  }
                }
                if ((_4025 > (int)0))
                {
                  {
                    _ptr__4009[safe_add( _4003,_4014 )] = safe_add( safe_mul( _4019,_3983 ),_4022 );
                    _ptr__4011[safe_add( safe_add( _4001,_4014 ),(int)1 )] = _4013;
                    ++ _4014;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_4015 != _3982))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4013 != _3981))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4014 != _3980))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4011[safe_add( _4001,_4014 )] != _3981))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4000))
      {
        {
          _3874->popi64(_3980);
        }
      }
      {}
    }
  }
  _3876->clear();
}
std::string mosek::fusion::ExprMulParamLeft :: toString() { return mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamLeft::destroy() { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->destroy(); }mosek::fusion::ParameterImpl::ParameterImpl(mosek::fusion::p_ParameterImpl *_impl) : _impl(_impl) { /*std::cout << "ParameterImpl() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ParameterImpl::~ParameterImpl() { delete _impl; _impl = nullptr; }mosek::fusion::p_ParameterImpl::p_ParameterImpl  (::mosek::fusion::ParameterImpl * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030){ return new mosek::fusion::ParameterImpl(_4029,_4030); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4029,_4030); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4030;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->shape;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->size;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->nidxs;
  }
}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034){ return new mosek::fusion::ParameterImpl(_4031,_4032,_4033,_4034); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4031,_4032,_4033,_4034); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4032(_4032 ? _4032->raw() : nullptr, _4032 ? _4032->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4033(_4033 ? _4033->raw() : nullptr, _4033 ? _4033->size(0) : 0);
    _checked_ptr_1<int> _ptr__4034(_4034 ? _4034->raw() : nullptr, _4034 ? _4034->size(0) : 0);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4031;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = ::mosek::fusion::Utils::Tools::arraycopy(_4032);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = _4033;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = ::mosek::fusion::p_Set::size(_4032);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = ::mosek::fusion::Utils::Tools::arraycopy(_4034);
  }
}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__clone(_4035); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return __mosek_2fusion_2ParameterImpl__clone(_4035); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return __mosek_2fusion_2ParameterImpl__clone(_4035); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035){
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::ParameterImpl::t(_pubthis),_4035)).as<::mosek::fusion::Parameter>();
}
std::string mosek::fusion::ParameterImpl :: toString() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->toString(); }std::string mosek::fusion::p_ParameterImpl::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4036 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Parameter(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _4036->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _10465 = (int)1;
      int _10466 = (int)((shape)->size(0));
      for (int _4037 = _10465; _4037 < _10466; ++_4037)
      {
        {
          _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_4037)));
        }
      }
    }
  }
  {}
  _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sp.get()))
  {
    {
      _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4036->toString();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038){
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__pick(_4039); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__pick(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039){
  _checked_ptr_1<int> _ptr__4039(_4039 ? _4039->raw() : nullptr, _4039 ? _4039->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4040); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return __mosek_2fusion_2ParameterImpl__index(_4040); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return __mosek_2fusion_2ParameterImpl__index(_4040); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4040){
  _checked_ptr_1<int> _ptr__4040(_4040 ? _4040->raw() : nullptr, _4040 ? _4040->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)((_4040)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else
  {
    {
      int _10467 = (int)0;
      int _10468 = (int)((_4040)->size(0));
      for (int _4041 = _10467; _4041 < _10468; ++_4041)
      {
        {
          if (((_ptr__4040[_4041] < (int)0) || (_ptr__4040[_4041] >= ((*shape)(_4041)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
            }
          }
          {}
        }
      }
    }
  }
  if ((NULL == sp.get()))
  {
    {
      int _4042 = (int)((_4040)->size(0));
      long long _4043 = _ptr__4040[(_4042 - (int)1)];
      int _10469 = (int)1;
      int _10470 = _4042;
      for (int _4044 = _10469; _4044 < _10470; ++_4044)
      {
        {
          _4043 = safe_add( safe_mul( _4043,((*shape)((_4042 - _4044))) ),_ptr__4040[((_4042 - _4044) - (int)1)] );
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4043)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4045 = (int)((_4040)->size(0));
      long long _4046 = _ptr__4040[(_4045 - (int)1)];
      int _10471 = (int)1;
      int _10472 = _4045;
      for (int _4047 = _10471; _4047 < _10472; ++_4047)
      {
        {
          _4046 = safe_add( safe_mul( _4046,((*shape)((_4045 - _4047))) ),_ptr__4040[((_4045 - _4047) - (int)1)] );
        }
      }
      int _4048 = (int)0;
      while ( ((_4048 < (int)((sp)->size(0))) && (((*sp)(_4048)) < _4046)) )
      {
        {
          ++ _4048;
        }
      }
      if (((_4048 < (int)((sp)->size(0))) && (((*sp)(_4048)) == _4046)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4048)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(int _4049) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4049); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(int _4049) { return __mosek_2fusion_2ParameterImpl__index(_4049); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(int _4049) { return __mosek_2fusion_2ParameterImpl__index(_4049); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(int _4049){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else if(((_4049 < (int)0) || (_4049 >= ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4049)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4050 = (int)0;
      while ( ((_4050 < (int)((sp)->size(0))) && (((*sp)(_4050)) < _4049)) )
      {
        {
          ++ _4050;
        }
      }
      if (((_4050 < (int)((sp)->size(0))) && (((*sp)(_4050)) == _4049)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4050)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052,monty::rc_ptr< ::mosek::fusion::WorkStack > _4053) { mosek::fusion::p_ParameterImpl::_get_impl(this)->eval(_4051,_4052,_4053); }void mosek::fusion::p_ParameterImpl::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052,monty::rc_ptr< ::mosek::fusion::WorkStack > _4053){
  int _4054 = (int)((shape)->size(0));
  int _4055 = (int)((nidxs)->size(0));
  bool _4056 = (NULL != sp.get());
  _4051->alloc_expr(_4054,_4055,(int)((nidxs)->size(0)),_4056,(int)((nidxs)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4057 = mosek::fusion::p_WorkStack::_get_impl(_4051)->i32;
  _checked_ptr_1<int> _ptr__4057(_4057 ? _4057->raw() : nullptr,_4057 ? _4057->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4058 = mosek::fusion::p_WorkStack::_get_impl(_4051)->i64;
  _checked_ptr_1<long long> _ptr__4058(_4058 ? _4058->raw() : nullptr,_4058 ? _4058->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4059 = mosek::fusion::p_WorkStack::_get_impl(_4051)->f64;
  _checked_ptr_1<double> _ptr__4059(_4059 ? _4059->raw() : nullptr,_4059 ? _4059->size(0) : 0);
  int _4060 = mosek::fusion::p_WorkStack::_get_impl(_4051)->ptr_base;
  int _4061 = mosek::fusion::p_WorkStack::_get_impl(_4051)->nidxs_base;
  int _4062 = mosek::fusion::p_WorkStack::_get_impl(_4051)->cof_base;
  int _4063 = mosek::fusion::p_WorkStack::_get_impl(_4051)->shape_base;
  int _4064 = mosek::fusion::p_WorkStack::_get_impl(_4051)->codeptr_base;
  int _4065 = mosek::fusion::p_WorkStack::_get_impl(_4051)->code_base;
  int _4066 = mosek::fusion::p_WorkStack::_get_impl(_4051)->cconst_base;
  int _4067 = mosek::fusion::p_WorkStack::_get_impl(_4051)->sp_base;
  {
    _ptr__4057[_4060] = (int)0;
    int _10473 = (int)0;
    int _10474 = _4054;
    for (int _4068 = _10473; _4068 < _10474; ++_4068)
    {
      {
        _ptr__4057[safe_add( _4063,_4068 )] = ((*shape)(_4068));
      }
    }
    int _10475 = (int)0;
    int _10476 = _4055;
    for (int _4069 = _10475; _4069 < _10476; ++_4069)
    {
      {
        _ptr__4058[safe_add( _4061,_4069 )] = (int)0;
      }
    }
    int _10477 = (int)0;
    int _10478 = _4055;
    for (int _4070 = _10477; _4070 < _10478; ++_4070)
    {
      {
        _ptr__4059[safe_add( _4062,_4070 )] = 0.0;
      }
    }
    int _10479 = (int)0;
    int _10480 = safe_add( _4055,(int)1 );
    for (int _4071 = _10479; _4071 < _10480; ++_4071)
    {
      {
        _ptr__4057[safe_add( _4060,_4071 )] = _4071;
      }
    }
    if ((_4055 > (int)0))
    {
      {
        int _10481 = (int)0;
        int _10482 = safe_add( _4055,(int)1 );
        for (int _4072 = _10481; _4072 < _10482; ++_4072)
        {
          {
            _ptr__4057[safe_add( _4064,_4072 )] = _4072;
          }
        }
      }
    }
    {}
    if (_4056)
    {
      {
        int _10483 = (int)0;
        int _10484 = _4055;
        for (int _4073 = _10483; _4073 < _10484; ++_4073)
        {
          {
            _ptr__4058[safe_add( _4067,_4073 )] = ((*sp)(_4073));
          }
        }
      }
    }
    {}
    int _10485 = (int)0;
    int _10486 = _4055;
    for (int _4074 = _10485; _4074 < _10486; ++_4074)
    {
      {
        _ptr__4057[safe_add( _4065,_4074 )] = (int)1;
        _ptr__4059[safe_add( _4066,_4074 )] = ((*nidxs)(_4074));
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4075,int _4076) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getSp(_4075,_4076); }void mosek::fusion::p_ParameterImpl::getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4075,int _4076){
  _checked_ptr_1<long long> _ptr__4075(_4075 ? _4075->raw() : nullptr, _4075 ? _4075->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      int _10487 = (int)0;
      int _10488 = (int)((sp)->size(0));
      for (int _4077 = _10487; _4077 < _10488; ++_4077)
      {
        {
          _ptr__4075[safe_add( _4077,_4076 )] = ((*sp)(_4077));
        }
      }
    }
  }
  else
  {
    {
      int _10489 = (int)0;
      int _10490 = (int)((nidxs)->size(0));
      for (int _4078 = _10489; _4078 < _10490; ++_4078)
      {
        {
          _ptr__4075[safe_add( _4078,_4076 )] = _4078;
        }
      }
    }
  }
}
bool mosek::fusion::ParameterImpl :: isSparse() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->isSparse(); }bool mosek::fusion::p_ParameterImpl::isSparse(){
  return (NULL != sp.get());
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return __mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return __mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080){
  _checked_ptr_1<int> _ptr__4079(_4079 ? _4079->raw() : nullptr, _4079 ? _4079->size(0) : 0);
  _checked_ptr_1<int> _ptr__4080(_4080 ? _4080->raw() : nullptr, _4080 ? _4080->size(0) : 0);
  if ((((int)((_4079)->size(0)) != (int)((_4080)->size(0))) || ((int)((_4079)->size(0)) != (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int _4081 = (int)((_4079)->size(0));
  int _10491 = (int)0;
  int _10492 = _4081;
  for (int _4082 = _10491; _4082 < _10492; ++_4082)
  {
    {
      if (((_ptr__4079[_4082] < (int)0) || ((_ptr__4079[_4082] >= _ptr__4080[_4082]) || (_ptr__4080[_4082] > ((*shape)(_4082))))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4083 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4081)));
  _checked_ptr_1<long long> _ptr__4083(_4083 ? _4083->raw() : nullptr,_4083 ? _4083->size(0) : 0);
  _ptr__4083[(_4081 - (int)1)] = (int)1;
  int _10493 = (int)1;
  int _10494 = _4081;
  for (int _4084 = _10493; _4084 < _10494; ++_4084)
  {
    {
      _ptr__4083[((_4081 - _4084) - (int)1)] = safe_mul( _ptr__4083[(_4081 - _4084)],((*shape)(_4084)) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4085 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4081)));
  _checked_ptr_1<int> _ptr__4085(_4085 ? _4085->raw() : nullptr,_4085 ? _4085->size(0) : 0);
  std::vector<int> _10495;
  for (int _4087 = (int)0, _10496 = _4081; _4087 < _10496 ; ++_4087)
  {
    _10495.push_back((_ptr__4080[_4087] - _ptr__4079[_4087]));
  }
  auto _10497 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10495.size()),_10495.begin(),_10495.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4086 = _10497;
  _checked_ptr_1<int> _ptr__4086(_4086 ? _4086->raw() : nullptr,_4086 ? _4086->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      int _4088 = (int)1;
      int _10498 = (int)0;
      int _10499 = _4081;
      for (int _4089 = _10498; _4089 < _10499; ++_4089)
      {
        {
          _4088 *= _ptr__4086[_4089];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4090 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4088)));
      _checked_ptr_1<int> _ptr__4090(_4090 ? _4090->raw() : nullptr,_4090 ? _4090->size(0) : 0);
      int _4091 = (int)0;
      int _10500 = (int)0;
      int _10501 = (int)((nidxs)->size(0));
      for (int _4092 = _10500; _4092 < _10501; ++_4092)
      {
        {
          int _10502 = (int)0;
          int _10503 = _4081;
          for (int _4093 = _10502; _4093 < _10503; ++_4093)
          {
            {
              _ptr__4085[_4093] = (int)((_4092 / _ptr__4083[_4093]) % ((*shape)(_4093)));
            }
          }
          bool _4094 = true;
          int _10504 = (int)0;
          int _10505 = _4081;
          for (int _4095 = _10504; _4095 < _10505; ++_4095)
          {
            {
              _4094 = (_4094 && ((_ptr__4079[_4095] <= _ptr__4085[_4095]) && (_ptr__4085[_4095] < _ptr__4080[_4095])));
            }
          }
          if (_4094)
          {
            {
              _ptr__4090[_4091] = ((*nidxs)(_4092));
              ++ _4091;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4086,nullptr,_4090)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4096 = (int)0;
      int _10506 = (int)0;
      int _10507 = (int)((nidxs)->size(0));
      for (int _4097 = _10506; _4097 < _10507; ++_4097)
      {
        {
          int _10508 = (int)0;
          int _10509 = _4081;
          for (int _4098 = _10508; _4098 < _10509; ++_4098)
          {
            {
              _ptr__4085[_4098] = (int)((((*sp)(_4097)) / _ptr__4083[_4098]) % ((*shape)(_4098)));
            }
          }
          bool _4099 = true;
          int _10510 = (int)0;
          int _10511 = _4081;
          for (int _4100 = _10510; _4100 < _10511; ++_4100)
          {
            {
              _4099 = (_4099 && ((_ptr__4079[_4100] <= _ptr__4085[_4100]) && (_ptr__4085[_4100] < _ptr__4080[_4100])));
            }
          }
          if (_4099)
          {
            {
              ++ _4096;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4101 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4096)));
      _checked_ptr_1<int> _ptr__4101(_4101 ? _4101->raw() : nullptr,_4101 ? _4101->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4102 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4096)));
      _checked_ptr_1<long long> _ptr__4102(_4102 ? _4102->raw() : nullptr,_4102 ? _4102->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4103 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4081)));
      _checked_ptr_1<long long> _ptr__4103(_4103 ? _4103->raw() : nullptr,_4103 ? _4103->size(0) : 0);
      _ptr__4103[(_4081 - (int)1)] = (int)1;
      int _10512 = (int)1;
      int _10513 = _4081;
      for (int _4104 = _10512; _4104 < _10513; ++_4104)
      {
        {
          _ptr__4103[((_4081 - _4104) - (int)1)] = safe_mul( _ptr__4103[(_4081 - _4104)],_ptr__4086[_4104] );
        }
      }
      int _4105 = (int)0;
      int _10514 = (int)0;
      int _10515 = (int)((nidxs)->size(0));
      for (int _4106 = _10514; _4106 < _10515; ++_4106)
      {
        {
          int _10516 = (int)0;
          int _10517 = _4081;
          for (int _4107 = _10516; _4107 < _10517; ++_4107)
          {
            {
              _ptr__4085[_4106] = (int)((((*sp)(_4106)) / _ptr__4083[_4107]) % ((*shape)(_4107)));
            }
          }
          bool _4108 = true;
          int _10518 = (int)0;
          int _10519 = _4081;
          for (int _4109 = _10518; _4109 < _10519; ++_4109)
          {
            {
              _4108 = (_4108 && ((_ptr__4079[_4109] <= _ptr__4085[_4109]) && (_ptr__4085[_4109] < _ptr__4080[_4109])));
            }
          }
          if (_4108)
          {
            {
              long long _4110 = (long long)0;
              int _10520 = (int)0;
              int _10521 = _4081;
              for (int _4111 = _10520; _4111 < _10521; ++_4111)
              {
                {
                  _4110 += safe_mul( (_ptr__4085[_4111] - _ptr__4079[_4111]),_ptr__4103[_4111] );
                }
              }
              _ptr__4102[_4105] = _4110;
              _ptr__4101[_4105] = ((*nidxs)(_4106));
              ++ _4105;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4086,_4102,_4101)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(int _4112,int _4113) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(int _4112,int _4113) { return __mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(int _4112,int _4113) { return __mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(int _4112,int _4113){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  if (((_4112 < (int)0) || ((_4113 >= _4113) || (_4113 > size))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<int> _10522;
      for (int _4114 = _4112, _10523 = _4113; _4114 < _10523 ; ++_4114)
      {
        _10522.push_back(((*nidxs)(_4114)));
      }
      auto _10524 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10522.size()),_10522.begin(),_10522.end()));
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4113 - _4112))}),nullptr,_10524)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4115 = (int)0;
      int _10525 = (int)0;
      int _10526 = (int)((sp)->size(0));
      for (int _4116 = _10525; _4116 < _10526; ++_4116)
      {
        {
          if (((_4112 <= ((*sp)(_4116))) && (((*sp)(_4116)) < _4113)))
          {
            {
              ++ _4115;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4117 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4115)));
      _checked_ptr_1<int> _ptr__4117(_4117 ? _4117->raw() : nullptr,_4117 ? _4117->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4118 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4115)));
      _checked_ptr_1<long long> _ptr__4118(_4118 ? _4118->raw() : nullptr,_4118 ? _4118->size(0) : 0);
      int _4119 = (int)0;
      int _10527 = (int)0;
      int _10528 = (int)((sp)->size(0));
      for (int _4120 = _10527; _4120 < _10528; ++_4120)
      {
        {
          if (((_4112 <= ((*sp)(_4120))) && (((*sp)(_4120)) < _4113)))
          {
            {
              _ptr__4117[_4119] = ((*nidxs)(_4120));
              _ptr__4118[_4119] = (((*sp)(_4119)) - _4112);
              ++ _4119;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4113 - _4112))}),_4118,_4117)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__reshape(_4121); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return __mosek_2fusion_2ParameterImpl__reshape(_4121); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return __mosek_2fusion_2ParameterImpl__reshape(_4121); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121){
  _checked_ptr_1<int> _ptr__4121(_4121 ? _4121->raw() : nullptr, _4121 ? _4121->size(0) : 0);
  if ((::mosek::fusion::p_Set::size(_4121) != ::mosek::fusion::p_Set::size(shape)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incompatible shape for resize"));
    }
  }
  {}
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4121,sp,nidxs)).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__asExpr() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__asExpr(){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter((::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>())).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::ParameterImpl :: getSize() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getSize(); }long long mosek::fusion::p_ParameterImpl::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::ParameterImpl :: getNumNonzero() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getNumNonzero(); }int mosek::fusion::p_ParameterImpl::getNumNonzero(){
  return (int)((nidxs)->size(0));
}
int mosek::fusion::ParameterImpl :: getND() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getND(); }int mosek::fusion::p_ParameterImpl::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ParameterImpl :: getShape() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ParameterImpl::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
int mosek::fusion::ParameterImpl :: getDim(int _4122) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getDim(_4122); }int mosek::fusion::p_ParameterImpl::getDim(int _4122){
  return ((*shape)(_4122));
}
void mosek::fusion::ParameterImpl :: getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4123,int _4124) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getAllIndexes(_4123,_4124); }void mosek::fusion::p_ParameterImpl::getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4123,int _4124){
  _checked_ptr_1<int> _ptr__4123(_4123 ? _4123->raw() : nullptr, _4123 ? _4123->size(0) : 0);
  int _10529 = (int)0;
  int _10530 = (int)((nidxs)->size(0));
  for (int _4125 = _10529; _4125 < _10530; ++_4125)
  {
    {
      _ptr__4123[safe_add( _4124,_4125 )] = ((*nidxs)(_4125));
    }
  }
}
int mosek::fusion::ParameterImpl :: getIndex(int _4126) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getIndex(_4126); }int mosek::fusion::p_ParameterImpl::getIndex(int _4126){
  return ((*nidxs)(_4126));
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ParameterImpl :: getValue() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getValue(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_ParameterImpl::getValue(){
  return mosek::fusion::p_Model::_get_impl(model.get())->getParameterValue(nidxs);
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,2 > > _4127) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4127); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,2 > > _4127){
  if (((_pubthis->getND() != (int)2) || (((int)((_4127)->size(0)) != ((*shape)((int)0))) || ((int)((_4127)->size(1)) != ((*shape)((int)1))))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching value shape"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4128 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( ((*shape)((int)0)),((*shape)((int)1)) ))));
      _checked_ptr_1<double> _ptr__4128(_4128 ? _4128->raw() : nullptr,_4128 ? _4128->size(0) : 0);
      int _10531 = (int)0;
      int _10532 = ((*shape)((int)0));
      for (int _4129 = _10531; _4129 < _10532; ++_4129)
      {
        {
          int _10533 = (int)0;
          int _10534 = ((*shape)((int)1));
          for (int _4130 = _10533; _4130 < _10534; ++_4130)
          {
            {
              _ptr__4128[safe_add( safe_mul( _4129,((*shape)((int)1)) ),_4130 )] = ((*_4127)(_4129,_4130));
            }
          }
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4128);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4131 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((sp)->size(0)))));
      _checked_ptr_1<double> _ptr__4131(_4131 ? _4131->raw() : nullptr,_4131 ? _4131->size(0) : 0);
      int _10535 = (int)0;
      int _10536 = (int)((sp)->size(0));
      for (int _4132 = _10535; _4132 < _10536; ++_4132)
      {
        {
          _ptr__4131[_4132] = ((*_4127)((((*sp)(_4132)) / ((*shape)((int)1))),(((*sp)(_4132)) % ((*shape)((int)1)))));
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4131);
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,1 > > _4133) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4133); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,1 > > _4133){
  _checked_ptr_1<double> _ptr__4133(_4133 ? _4133->raw() : nullptr, _4133 ? _4133->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      if (((int)((_4133)->size(0)) != (int)((nidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4133);
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_4133)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _4134 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nidxs)->size(0)))));
          _checked_ptr_1<double> _ptr__4134(_4134 ? _4134->raw() : nullptr,_4134 ? _4134->size(0) : 0);
          int _10537 = (int)0;
          int _10538 = (int)((nidxs)->size(0));
          for (int _4135 = _10537; _4135 < _10538; ++_4135)
          {
            {
              _ptr__4134[_4135] = _ptr__4133[((*sp)(_4135))];
            }
          }
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4134);
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(double _4136) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4136); }void mosek::fusion::p_ParameterImpl::setValue(double _4136){
  std::shared_ptr< monty::ndarray< double,1 > > _4137 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(size)));
  _checked_ptr_1<double> _ptr__4137(_4137 ? _4137->raw() : nullptr,_4137 ? _4137->size(0) : 0);
  int _10539 = (int)0;
  long long _10540 = size;
  for (long long _4138 = _10539; _4138 < _10540; ++_4138)
  {
    {
      _ptr__4137[_4138] = _4136;
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4137);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__getModel() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__getModel(){
  return model;
}
void mosek::fusion::p_ParameterImpl::destroy(){nidxs.reset();sp.reset();shape.reset();model.reset();}void mosek::fusion::ParameterImpl::destroy() { mosek::fusion::p_ParameterImpl::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::clone(monty::rc_ptr< ::mosek::fusion::Model > _4139) { return __mosek_2fusion_2Parameter__clone(_4139); }
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Parameter::getModel() { return __mosek_2fusion_2Parameter__getModel(); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4146,std::shared_ptr< monty::ndarray< int,1 > > _4147) { return __mosek_2fusion_2Parameter__slice(_4146,_4147); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _4146,std::shared_ptr< monty::ndarray< int,1 > > _4147) { return __mosek_2fusion_2Parameter__slice(_4146,_4147); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(int _4148,int _4149) { return __mosek_2fusion_2Parameter__slice(_4148,_4149); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(int _4148,int _4149) { return __mosek_2fusion_2Parameter__slice(_4148,_4149); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4150) { return __mosek_2fusion_2Parameter__reshape(_4150); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::asExpr() { return __mosek_2fusion_2Parameter__asExpr(); }
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode(mosek::fusion::p_ExprOptimizeCode *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprOptimizeCode()" << this << std::endl; */ }mosek::fusion::ExprOptimizeCode::~ExprOptimizeCode() {  /* std::cout << "~ExprOptimizeCode()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprOptimizeCode::p_ExprOptimizeCode  (::mosek::fusion::ExprOptimizeCode * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprOptimizeCode::t mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4154){ return new mosek::fusion::ExprOptimizeCode(_4154); }mosek::fusion::ExprOptimizeCode::ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4154) :    ExprOptimizeCode(new mosek::fusion::p_ExprOptimizeCode(this)){ mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->_initialize(_4154); }void mosek::fusion::p_ExprOptimizeCode::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4154){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4154->getShape());
    mosek::fusion::p_ExprOptimizeCode::_get_impl(::mosek::fusion::ExprOptimizeCode::t(_pubthis))->expr = _4154;
  }
}void mosek::fusion::p_ExprOptimizeCode::compress_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _4155,int _4156,std::shared_ptr< monty::ndarray< int,1 > > _4157,int _4158,std::shared_ptr< monty::ndarray< int,1 > > _4159,int _4160,std::shared_ptr< monty::ndarray< double,1 > > _4161,int _4162,std::shared_ptr< monty::ndarray< double,1 > > _4163,int _4164,int _4165,int _4166,int _4167){
  _checked_ptr_1<int> _ptr__4157(_4157 ? _4157->raw() : nullptr, _4157 ? _4157->size(0) : 0);
  _checked_ptr_1<int> _ptr__4159(_4159 ? _4159->raw() : nullptr, _4159 ? _4159->size(0) : 0);
  _checked_ptr_1<double> _ptr__4161(_4161 ? _4161->raw() : nullptr, _4161 ? _4161->size(0) : 0);
  _checked_ptr_1<double> _ptr__4163(_4163 ? _4163->raw() : nullptr, _4163 ? _4163->size(0) : 0);
  int _4168 = _ptr__4159[safe_add( _4160,_4156 )];
  int _4169 = _4155->alloci32(safe_add( _4168,(int)2 ));
  int _4170 = (int)0;
  int _4171 = _4155->alloci32(safe_add( _4168,(int)2 ));
  int _4172 = _4155->alloci32(safe_add( _4168,(int)3 ));
  int _4173 = _4155->allocf64(safe_add( _4168,(int)2 ));
  int _4174 = _4155->alloci32(safe_add( _4168,(int)2 ));
  int _4175 = (int)0;
  int _4176 = (-(int)1);
  std::shared_ptr< monty::ndarray< int,1 > > _4177 = mosek::fusion::p_WorkStack::_get_impl(_4155)->i32;
  _checked_ptr_1<int> _ptr__4177(_4177 ? _4177->raw() : nullptr,_4177 ? _4177->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4178 = mosek::fusion::p_WorkStack::_get_impl(_4155)->f64;
  _checked_ptr_1<double> _ptr__4178(_4178 ? _4178->raw() : nullptr,_4178 ? _4178->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4179 = _4177;
  _checked_ptr_1<int> _ptr__4179(_4179 ? _4179->raw() : nullptr,_4179 ? _4179->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4180 = _4178;
  _checked_ptr_1<double> _ptr__4180(_4180 ? _4180->raw() : nullptr,_4180 ? _4180->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4181 = _4177;
  _checked_ptr_1<int> _ptr__4181(_4181 ? _4181->raw() : nullptr,_4181 ? _4181->size(0) : 0);
  int _4182 = mosek::fusion::p_WorkStack::_get_impl(_4155)->pi32;
  int _4183 = mosek::fusion::p_WorkStack::_get_impl(_4155)->pi64;
  int _4184 = mosek::fusion::p_WorkStack::_get_impl(_4155)->pf64;
  _ptr__4181[_4167] = (int)0;
  int _4185 = (int)0;
  int _10541 = (int)0;
  int _10542 = _4156;
  for (int _4186 = _10541; _4186 < _10542; ++_4186)
  {
    {
      int _4187 = _ptr__4159[safe_add( safe_add( _4160,_4186 ),(int)1 )];
      int _4188 = _ptr__4159[safe_add( _4160,_4186 )];
      if ((_4176 < (int)0))
      {
        {
          _4170 = (int)0;
          _4175 = (int)0;
          _ptr__4177[_4172] = (int)0;
          int _10543 = (int)0;
          int _10544 = (_4187 - _4188);
          for (int _4189 = _10543; _4189 < _10544; ++_4189)
          {
            {
              _ptr__4179[safe_add( _4174,_4189 )] = (-(int)9999);
            }
          }
          int _10545 = _4188;
          int _10546 = _4187;
          for (int _4190 = _10545; _4190 < _10546; ++_4190)
          {
            {
              int _4191 = _ptr__4157[safe_add( _4158,_4190 )];
              double _4192 = _ptr__4163[safe_add( _4164,_4190 )];
              if ((_4191 == 0))
              {
                {
                }
              }
              else if((_4191 == 2))
              {
                {
                  _ptr__4179[safe_add( _4174,_4175 )] = 2;
                  _ptr__4178[safe_add( _4173,_4175 )] = _4192;
                  _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                  _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                  ++ _4170;
                  ++ _4175;
                }
              }
              else if((_4191 == 1))
              {
                {
                  _ptr__4177[safe_add( _4174,_4175 )] = _4191;
                  _ptr__4178[safe_add( _4173,_4175 )] = _4192;
                  _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                  _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                  ++ _4170;
                  ++ _4175;
                }
              }
              else if((_4191 == 3))
              {
                {
                  if ((_4170 >= (int)2))
                  {
                    {
                      int _4193 = _ptr__4177[(safe_add( _4169,_4170 ) - (int)1)];
                      -- _4170;
                      int _4194 = _ptr__4177[(safe_add( _4169,_4170 ) - (int)1)];
                      -- _4170;
                      if (((_ptr__4177[safe_add( _4174,_4194 )] == 2) && (_ptr__4177[safe_add( _4174,_4193 )] == 2)))
                      {
                        {
                          _ptr__4177[safe_add( _4174,_4175 )] = 2;
                          _ptr__4178[safe_add( _4173,_4175 )] = (_ptr__4178[safe_add( _4173,_4194 )] + _ptr__4178[safe_add( _4173,_4193 )]);
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else if(((_ptr__4177[safe_add( _4174,_4194 )] == 2) && ((_ptr__4178[safe_add( _4173,_4194 )] <= 0.0) && (_ptr__4178[safe_add( _4173,_4194 )] >= 0.0))))
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4178[safe_add( _4173,_4175 )] = 0.0;
                          _ptr__4177[safe_add( _4169,_4170 )] = _4193;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else if(((_ptr__4177[safe_add( _4174,_4193 )] == 2) && ((_ptr__4178[safe_add( _4173,_4193 )] <= 0.0) && (_ptr__4178[safe_add( _4173,_4193 )] >= 0.0))))
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4177[safe_add( _4169,_4170 )] = _4194;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],(int)2 );
                          _ptr__4177[safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] )] = _4194;
                          _ptr__4177[safe_add( safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] ),(int)1 )] = _4193;
                          _ptr__4177[safe_add( _4174,_4175 )] = _4191;
                          _ptr__4178[safe_add( _4173,_4175 )] = _4192;
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4176 = _4190;
                    }
                  }
                }
              }
              else if((_4191 == 5))
              {
                {
                  if ((_4170 >= (int)2))
                  {
                    {
                      int _4195 = _ptr__4177[(safe_add( _4169,_4170 ) - (int)1)];
                      -- _4170;
                      int _4196 = _ptr__4177[(safe_add( _4169,_4170 ) - (int)1)];
                      -- _4170;
                      if (((_ptr__4177[safe_add( _4174,_4196 )] == 2) && (_ptr__4177[safe_add( _4174,_4195 )] == 2)))
                      {
                        {
                          _ptr__4177[safe_add( _4174,_4175 )] = 2;
                          _ptr__4178[safe_add( _4173,_4175 )] = (_ptr__4178[safe_add( _4173,_4196 )] * _ptr__4178[safe_add( _4173,_4195 )]);
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else if(((_ptr__4177[safe_add( _4174,_4196 )] == 2) && ((_ptr__4178[safe_add( _4173,_4196 )] <= 0.0) && (_ptr__4178[safe_add( _4173,_4196 )] >= 0.0))))
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4177[safe_add( _4174,_4175 )] = 2;
                          _ptr__4178[safe_add( _4173,_4175 )] = 0.0;
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else if(((_ptr__4177[safe_add( _4174,_4195 )] == 2) && ((_ptr__4178[safe_add( _4173,_4195 )] <= 0.0) && (_ptr__4178[safe_add( _4173,_4195 )] >= 0.0))))
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4177[safe_add( _4174,_4175 )] = 2;
                          _ptr__4178[safe_add( _4173,_4175 )] = 0.0;
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else if(((_ptr__4177[safe_add( _4174,_4195 )] == 2) && ((_ptr__4178[safe_add( _4173,_4195 )] <= 1.0) && (_ptr__4178[safe_add( _4173,_4195 )] >= 1.0))))
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],(int)1 );
                          _ptr__4177[safe_add( _4169,_4170 )] = _4196;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else if(((_ptr__4177[safe_add( _4174,_4196 )] == 2) && ((_ptr__4178[safe_add( _4173,_4196 )] <= 1.0) && (_ptr__4178[safe_add( _4173,_4196 )] >= 1.0))))
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],(int)1 );
                          _ptr__4177[safe_add( _4169,_4170 )] = _4195;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],(int)2 );
                          _ptr__4177[safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] )] = _4196;
                          _ptr__4177[safe_add( safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] ),(int)1 )] = _4195;
                          _ptr__4177[safe_add( _4174,_4175 )] = 5;
                          _ptr__4178[safe_add( _4173,_4175 )] = _4192;
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4176 = _4190;
                    }
                  }
                }
              }
              else if((_4191 == 4))
              {
                {
                  if ((_4170 >= (int)1))
                  {
                    {
                      int _4197 = _ptr__4177[(safe_add( _4169,_4170 ) - (int)1)];
                      -- _4170;
                      if ((_ptr__4177[safe_add( _4174,_4197 )] == 2))
                      {
                        {
                          _ptr__4177[safe_add( _4174,_4175 )] = 2;
                          _ptr__4178[safe_add( _4173,_4175 )] = (-_ptr__4178[safe_add( _4173,_4197 )]);
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4177[safe_add( _4174,_4175 )] = _ptr__4157[safe_add( _4158,_4190 )];
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],(int)1 );
                          _ptr__4177[safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] )] = _4197;
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4176 = _4190;
                    }
                  }
                }
              }
              else if((_4191 == 6))
              {
                {
                  if ((_4170 >= (int)1))
                  {
                    {
                      int _4198 = _ptr__4177[(safe_add( _4169,_4170 ) - (int)1)];
                      -- _4170;
                      if ((_ptr__4177[safe_add( _4174,_4198 )] == 2))
                      {
                        {
                          _ptr__4177[safe_add( _4174,_4175 )] = 2;
                          _ptr__4178[safe_add( _4173,_4175 )] = (1.0 / _ptr__4178[safe_add( _4173,_4198 )]);
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4177[safe_add( _4174,_4175 )] = _ptr__4157[safe_add( _4158,_4190 )];
                          _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],(int)1 );
                          _ptr__4177[safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] )] = _4198;
                          _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                          ++ _4170;
                          ++ _4175;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4176 = _4190;
                    }
                  }
                }
              }
              else if((_4191 == 8))
              {
                {
                  int _4199 = (int)_4192;
                  if ((_4199 < (int)0))
                  {
                    {
                      _4176 = _4190;
                    }
                  }
                  else if((_4199 > _4170))
                  {
                    {
                      _4176 = _4190;
                    }
                  }
                  else if((_4199 == (int)0))
                  {
                    {
                      _ptr__4177[safe_add( _4174,_4175 )] = 2;
                      _ptr__4178[safe_add( _4173,_4175 )] = 0.0;
                      _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                      _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                      ++ _4170;
                      ++ _4175;
                    }
                  }
                  else if((_4199 == (int)1))
                  {
                    {
                      _ptr__4177[safe_add( _4174,_4175 )] = (int)0;
                      _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                      _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                      ++ _4170;
                      ++ _4175;
                    }
                  }
                  else
                  {
                    {
                      std::vector<int> _10547;
                      for (int _4201 = (int)0, _10548 = _4199; _4201 < _10548 ; ++_4201)
                      {
                        _10547.push_back(_ptr__4177[((safe_add( _4169,_4170 ) - (int)1) - _4201)]);
                      }
                      auto _10549 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10547.size()),_10547.begin(),_10547.end()));
                      std::shared_ptr< monty::ndarray< int,1 > > _4200 = _10549;
                      _checked_ptr_1<int> _ptr__4200(_4200 ? _4200->raw() : nullptr,_4200 ? _4200->size(0) : 0);
                      _4170 -= _4199;
                      {
                        int _4202 = (_4199 - (int)1);
                        int _4203 = (int)0;
                        while ( (_4203 < _4202) )
                        {
                          {
                            while ( ((_4203 < _4202) && (_ptr__4177[safe_add( _4174,_ptr__4200[_4203] )] == 2)) )
                            {
                              {
                                ++ _4203;
                              }
                            }
                            while ( ((_4203 < _4202) && (_ptr__4177[safe_add( _4174,_ptr__4200[_4202] )] != 2)) )
                            {
                              {
                                -- _4202;
                              }
                            }
                            if ((_4203 < _4202))
                            {
                              {
                                int _4204 = _ptr__4200[_4203];
                                _ptr__4200[_4203] = _ptr__4200[_4202];
                                _ptr__4200[_4202] = _4204;
                                ++ _4203;
                                -- _4202;
                              }
                            }
                            {}
                          }
                        }
                        double _4205 = 0.0;
                        int _4206 = (int)0;
                        while ( ((_4206 < _4199) && (_ptr__4177[safe_add( _4174,_ptr__4200[_4206] )] == 2)) )
                        {
                          {
                            _4205 += _ptr__4178[safe_add( _4173,_ptr__4200[_4206] )];
                            ++ _4206;
                          }
                        }
                        int _10550;
                        bool _10551 = (_4206 > (int)0);
                        if (_10551)
                        {
                          _10550 = safe_add( (_4199 - _4206),(int)1 );
                        }
                        else
                        {
                          _10550 = _4199;
                        }
                        int _4207 = _10550;
                        int _4208 = (int)0;
                        if ((_4206 < (int)2))
                        {
                          {
                            int _10552 = (int)0;
                            int _10553 = _4199;
                            for (int _4209 = _10552; _4209 < _10553; ++_4209)
                            {
                              {
                                _ptr__4177[safe_add( safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] ),_4209 )] = _ptr__4200[_4209];
                              }
                            }
                            _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],_4199 );
                            _ptr__4177[safe_add( _4174,_4175 )] = 8;
                            _ptr__4178[safe_add( _4173,_4175 )] = _4199;
                            _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                            ++ _4170;
                            ++ _4175;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4177[safe_add( _4174,_4175 )] = 2;
                            _ptr__4178[safe_add( _4173,_4175 )] = _4205;
                            _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = _ptr__4177[safe_add( _4172,_4175 )];
                            ++ _4175;
                            if ((_4206 == _4199))
                            {
                              {
                                _ptr__4177[safe_add( _4169,_4170 )] = (_4175 - (int)1);
                                ++ _4170;
                              }
                            }
                            else
                            {
                              {
                                _ptr__4177[safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] )] = (_4175 - (int)1);
                                int _10554 = _4206;
                                int _10555 = _4199;
                                for (int _4210 = _10554; _4210 < _10555; ++_4210)
                                {
                                  {
                                    _ptr__4177[safe_add( (safe_add( safe_add( _4171,_ptr__4177[safe_add( _4172,_4175 )] ),_4210 ) - _4206),(int)1 )] = _ptr__4200[_4210];
                                  }
                                }
                                _ptr__4177[safe_add( safe_add( _4172,_4175 ),(int)1 )] = safe_add( _ptr__4177[safe_add( _4172,_4175 )],_4207 );
                                _ptr__4177[safe_add( _4174,_4175 )] = 8;
                                _ptr__4178[safe_add( _4173,_4175 )] = _4207;
                                _ptr__4177[safe_add( _4169,_4170 )] = _4175;
                                ++ _4170;
                                ++ _4175;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                {
                  _4176 = _4190;
                }
              }
            }
          }
        }
      }
      {}
      if (((_4176 < (int)0) && (_4170 != (int)1)))
      {
        {
          _4176 = _4175;
        }
      }
      {}
      if ((_4176 < (int)0))
      {
        {
          int _4211 = _4185;
          int _4212 = _4211;
          if ((_ptr__4177[safe_add( _4174,_ptr__4177[(safe_add( _4169,_4170 ) - (int)1)] )] == 2))
          {
            {
              _ptr__4161[safe_add( _4162,_4186 )] += _ptr__4178[safe_add( _4173,_ptr__4177[(safe_add( _4169,_4170 ) - (int)1)] )];
              _ptr__4179[safe_add( _4165,_4212 )] = 10;
              _ptr__4180[safe_add( _4166,_4212 )] = 0.0;
              ++ _4212;
            }
          }
          else
          {
            {
              if (((_ptr__4161[safe_add( _4162,_4186 )] < (int)0) || ((int)0 < _ptr__4161[safe_add( _4162,_4186 )])))
              {
                {
                  _ptr__4179[safe_add( _4165,_4212 )] = 3;
                  ++ _4212;
                  _ptr__4179[safe_add( _4165,_4212 )] = 2;
                  _ptr__4180[safe_add( _4166,_4212 )] = _ptr__4161[safe_add( _4162,_4186 )];
                  ++ _4212;
                  _ptr__4161[safe_add( _4162,_4186 )] = (int)0;
                }
              }
              {}
              while ( (_4170 > (int)0) )
              {
                {
                  int _4213 = _ptr__4177[(safe_add( _4169,_4170 ) - (int)1)];
                  -- _4170;
                  int _4214 = _ptr__4177[safe_add( _4174,_4213 )];
                  double _4215 = _ptr__4178[safe_add( _4173,_4213 )];
                  _ptr__4179[safe_add( _4165,_4212 )] = _4214;
                  _ptr__4180[safe_add( _4166,_4212 )] = _4215;
                  ++ _4212;
                  int _10556 = _ptr__4177[safe_add( _4172,_4213 )];
                  int _10557 = _ptr__4177[safe_add( safe_add( _4172,_4213 ),(int)1 )];
                  for (int _4216 = _10556; _4216 < _10557; ++_4216)
                  {
                    {
                      _ptr__4177[safe_add( _4169,_4170 )] = _ptr__4177[safe_add( _4171,_4216 )];
                      ++ _4170;
                    }
                  }
                }
              }
              int _4217 = _4212;
              -- _4217;
              while ( (_4211 < _4217) )
              {
                {
                  int _4218 = _ptr__4179[safe_add( _4165,_4211 )];
                  double _4219 = _ptr__4180[safe_add( _4166,_4211 )];
                  _ptr__4179[safe_add( _4165,_4211 )] = _ptr__4179[safe_add( _4165,_4217 )];
                  _ptr__4180[safe_add( _4166,_4211 )] = _ptr__4180[safe_add( _4166,_4217 )];
                  _ptr__4179[safe_add( _4165,_4217 )] = _4218;
                  _ptr__4180[safe_add( _4166,_4217 )] = _4219;
                  ++ _4211;
                  -- _4217;
                }
              }
            }
          }
          _ptr__4181[safe_add( safe_add( _4167,_4186 ),(int)1 )] = _4212;
          _4185 = _4212;
        }
      }
      {}
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_4155)->pi32 = _4182;
  mosek::fusion::p_WorkStack::_get_impl(_4155)->pi64 = _4183;
  mosek::fusion::p_WorkStack::_get_impl(_4155)->pf64 = _4184;
  if ((_4176 >= (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid parameterization code list"));
    }
  }
  {}
}
void mosek::fusion::ExprOptimizeCode :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221,monty::rc_ptr< ::mosek::fusion::WorkStack > _4222) { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->eval(_4220,_4221,_4222); }void mosek::fusion::p_ExprOptimizeCode::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221,monty::rc_ptr< ::mosek::fusion::WorkStack > _4222){
  expr->eval(_4221,_4220,_4222);
  _4221->pop_expr();
  int _4223 = mosek::fusion::p_WorkStack::_get_impl(_4221)->nd;
  int _4224 = mosek::fusion::p_WorkStack::_get_impl(_4221)->shape_base;
  int _4225 = mosek::fusion::p_WorkStack::_get_impl(_4221)->nelem;
  int _4226 = mosek::fusion::p_WorkStack::_get_impl(_4221)->nnz;
  bool _4227 = mosek::fusion::p_WorkStack::_get_impl(_4221)->hassp;
  int _4228 = mosek::fusion::p_WorkStack::_get_impl(_4221)->ncodeatom;
  int _4229 = mosek::fusion::p_WorkStack::_get_impl(_4221)->ptr_base;
  int _4230 = mosek::fusion::p_WorkStack::_get_impl(_4221)->sp_base;
  int _4231 = mosek::fusion::p_WorkStack::_get_impl(_4221)->nidxs_base;
  int _4232 = mosek::fusion::p_WorkStack::_get_impl(_4221)->cof_base;
  int _4233 = mosek::fusion::p_WorkStack::_get_impl(_4221)->code_base;
  int _4234 = mosek::fusion::p_WorkStack::_get_impl(_4221)->codeptr_base;
  int _4235 = mosek::fusion::p_WorkStack::_get_impl(_4221)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4236 = mosek::fusion::p_WorkStack::_get_impl(_4221)->i32;
  _checked_ptr_1<int> _ptr__4236(_4236 ? _4236->raw() : nullptr,_4236 ? _4236->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4237 = mosek::fusion::p_WorkStack::_get_impl(_4221)->i64;
  _checked_ptr_1<long long> _ptr__4237(_4237 ? _4237->raw() : nullptr,_4237 ? _4237->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4238 = mosek::fusion::p_WorkStack::_get_impl(_4221)->f64;
  _checked_ptr_1<double> _ptr__4238(_4238 ? _4238->raw() : nullptr,_4238 ? _4238->size(0) : 0);
  if ((_4228 == (int)0))
  {
    {
      _4220->alloc_expr(_4223,_4225,_4226,_4227,(int)0);
      int _4239 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ptr_base;
      int _4240 = mosek::fusion::p_WorkStack::_get_impl(_4220)->sp_base;
      int _4241 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nidxs_base;
      int _4242 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cof_base;
      int _4243 = mosek::fusion::p_WorkStack::_get_impl(_4220)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4244 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i32;
      _checked_ptr_1<int> _ptr__4244(_4244 ? _4244->raw() : nullptr,_4244 ? _4244->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4245 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i64;
      _checked_ptr_1<long long> _ptr__4245(_4245 ? _4245->raw() : nullptr,_4245 ? _4245->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4246 = mosek::fusion::p_WorkStack::_get_impl(_4220)->f64;
      _checked_ptr_1<double> _ptr__4246(_4246 ? _4246->raw() : nullptr,_4246 ? _4246->size(0) : 0);
      int _10558 = (int)0;
      int _10559 = safe_add( _4225,(int)1 );
      for (int _4247 = _10558; _4247 < _10559; ++_4247)
      {
        {
          _ptr__4244[safe_add( _4239,_4247 )] = _ptr__4236[safe_add( _4229,_4247 )];
        }
      }
      int _10560 = (int)0;
      int _10561 = _4223;
      for (int _4248 = _10560; _4248 < _10561; ++_4248)
      {
        {
          _ptr__4244[safe_add( _4243,_4248 )] = _ptr__4236[safe_add( _4224,_4248 )];
        }
      }
      int _10562 = (int)0;
      int _10563 = _4226;
      for (int _4249 = _10562; _4249 < _10563; ++_4249)
      {
        {
          _ptr__4245[safe_add( _4241,_4249 )] = _ptr__4237[safe_add( _4231,_4249 )];
        }
      }
      int _10564 = (int)0;
      int _10565 = _4226;
      for (int _4250 = _10564; _4250 < _10565; ++_4250)
      {
        {
          _ptr__4246[safe_add( _4242,_4250 )] = _ptr__4238[safe_add( _4232,_4250 )];
        }
      }
      if (_4227)
      {
        {
          int _10566 = (int)0;
          int _10567 = _4225;
          for (int _4251 = _10566; _4251 < _10567; ++_4251)
          {
            {
              _ptr__4245[safe_add( _4240,_4251 )] = _ptr__4237[safe_add( _4230,_4251 )];
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4252 = _4222->alloci32(safe_add( _4228,safe_mul( _4226,(int)2 ) ));
      int _4253 = _4222->alloci32(safe_add( _4226,(int)1 ));
      int _4254 = _4222->allocf64(safe_add( _4228,safe_mul( _4226,(int)2 ) ));
      ::mosek::fusion::p_ExprOptimizeCode::compress_code(_4222,_4226,_4236,_4233,_4236,_4234,_4238,_4232,_4238,_4235,_4252,_4254,_4253);
      std::shared_ptr< monty::ndarray< int,1 > > _4255 = mosek::fusion::p_WorkStack::_get_impl(_4222)->i32;
      _checked_ptr_1<int> _ptr__4255(_4255 ? _4255->raw() : nullptr,_4255 ? _4255->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4256 = mosek::fusion::p_WorkStack::_get_impl(_4222)->f64;
      _checked_ptr_1<double> _ptr__4256(_4256 ? _4256->raw() : nullptr,_4256 ? _4256->size(0) : 0);
      int _4257 = (int)0;
      int _4258 = (int)0;
      int _4259 = (int)0;
      int _10568 = (int)0;
      int _10569 = _4225;
      for (int _4260 = _10568; _4260 < _10569; ++_4260)
      {
        {
          int _4261 = (int)0;
          int _10570 = _ptr__4236[safe_add( _4229,_4260 )];
          int _10571 = _ptr__4236[safe_add( safe_add( _4229,_4260 ),(int)1 )];
          for (int _4262 = _10570; _4262 < _10571; ++_4262)
          {
            {
              if (((_ptr__4238[safe_add( _4232,_4262 )] < (int)0) || ((int)0 < _ptr__4238[safe_add( _4232,_4262 )])))
              {
                {
                  ++ _4258;
                  ++ _4261;
                  ++ _4257;
                }
              }
              else
              {
                {
                  if (((_ptr__4255[safe_add( safe_add( _4253,_4262 ),(int)1 )] - _ptr__4255[safe_add( _4253,_4262 )]) > (int)1))
                  {
                    {
                      ++ _4258;
                      ++ _4261;
                      _4257 += (_ptr__4255[safe_add( safe_add( _4253,_4262 ),(int)1 )] - _ptr__4255[safe_add( _4253,_4262 )]);
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__4255[safe_add( _4252,_ptr__4255[safe_add( _4253,_4262 )] )] != 10))
                      {
                        {
                          ++ _4258;
                          ++ _4261;
                          ++ _4257;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((_4261 > (int)0))
          {
            {
              ++ _4259;
            }
          }
          {}
        }
      }
      bool _4263 = false;
      {
        long long _4264 = (long long)1;
        int _10572 = (int)0;
        int _10573 = _4223;
        for (int _4265 = _10572; _4265 < _10573; ++_4265)
        {
          {
            _4264 *= _ptr__4236[safe_add( _4224,_4265 )];
          }
        }
        _4263 = (_4264 > _4259);
      }
      _4220->alloc_expr(_4223,_4259,_4258,_4263,_4257);
      int _4266 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ptr_base;
      int _4267 = mosek::fusion::p_WorkStack::_get_impl(_4220)->sp_base;
      int _4268 = mosek::fusion::p_WorkStack::_get_impl(_4220)->shape_base;
      int _4269 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nidxs_base;
      int _4270 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cof_base;
      int _4271 = mosek::fusion::p_WorkStack::_get_impl(_4220)->code_base;
      int _4272 = mosek::fusion::p_WorkStack::_get_impl(_4220)->codeptr_base;
      int _4273 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4274 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i32;
      _checked_ptr_1<int> _ptr__4274(_4274 ? _4274->raw() : nullptr,_4274 ? _4274->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4275 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i64;
      _checked_ptr_1<long long> _ptr__4275(_4275 ? _4275->raw() : nullptr,_4275 ? _4275->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4276 = mosek::fusion::p_WorkStack::_get_impl(_4220)->f64;
      _checked_ptr_1<double> _ptr__4276(_4276 ? _4276->raw() : nullptr,_4276 ? _4276->size(0) : 0);
      int _10574 = (int)0;
      int _10575 = _4223;
      for (int _4277 = _10574; _4277 < _10575; ++_4277)
      {
        {
          _ptr__4274[safe_add( _4268,_4277 )] = _ptr__4236[safe_add( _4224,_4277 )];
        }
      }
      if ((_4257 == (int)0))
      {
        {
          int _10576 = (int)0;
          int _10577 = _4226;
          for (int _4278 = _10576; _4278 < _10577; ++_4278)
          {
            {
              _ptr__4275[safe_add( _4269,_4278 )] = _ptr__4237[safe_add( _4231,_4278 )];
            }
          }
          int _10578 = (int)0;
          int _10579 = _4226;
          for (int _4279 = _10578; _4279 < _10579; ++_4279)
          {
            {
              _ptr__4276[safe_add( _4270,_4279 )] = _ptr__4238[safe_add( _4232,_4279 )];
            }
          }
          int _10580 = (int)0;
          int _10581 = safe_add( _4225,(int)1 );
          for (int _4280 = _10580; _4280 < _10581; ++_4280)
          {
            {
              _ptr__4274[safe_add( _4266,_4280 )] = _ptr__4274[safe_add( _4229,_4280 )];
            }
          }
          if (_4227)
          {
            {
              int _10582 = (int)0;
              int _10583 = _4225;
              for (int _4281 = _10582; _4281 < _10583; ++_4281)
              {
                {
                  _ptr__4275[safe_add( _4267,_4281 )] = _ptr__4275[safe_add( _4230,_4281 )];
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          int _4282 = (int)0;
          int _4283 = (int)0;
          int _4284 = (int)0;
          _ptr__4274[_4266] = (int)0;
          if ((_4257 > (int)0))
          {
            {
              _ptr__4274[_4272] = (int)0;
            }
          }
          {}
          int _10584 = (int)0;
          int _10585 = _4225;
          for (int _4285 = _10584; _4285 < _10585; ++_4285)
          {
            {
              int _4286 = (int)0;
              int _10586 = _ptr__4236[safe_add( _4229,_4285 )];
              int _10587 = _ptr__4236[safe_add( safe_add( _4229,_4285 ),(int)1 )];
              for (int _4287 = _10586; _4287 < _10587; ++_4287)
              {
                {
                  if (((_ptr__4238[safe_add( _4232,_4287 )] < (int)0) || ((int)0 < _ptr__4238[safe_add( _4232,_4287 )])))
                  {
                    {
                      _ptr__4275[safe_add( _4269,_4284 )] = _ptr__4237[safe_add( _4231,_4287 )];
                      _ptr__4276[safe_add( _4270,_4284 )] = _ptr__4238[safe_add( _4232,_4287 )];
                      _ptr__4274[safe_add( _4271,_4282 )] = _ptr__4255[safe_add( _4252,_ptr__4255[safe_add( _4253,_4287 )] )];
                      _ptr__4276[safe_add( _4273,_4282 )] = _ptr__4256[safe_add( _4254,_ptr__4255[safe_add( _4253,_4287 )] )];
                      ++ _4282;
                      _ptr__4274[safe_add( safe_add( _4272,_4284 ),(int)1 )] = _4282;
                      ++ _4284;
                      ++ _4286;
                    }
                  }
                  else
                  {
                    {
                      if ((((_ptr__4255[safe_add( safe_add( _4253,_4287 ),(int)1 )] - _ptr__4255[safe_add( _4253,_4287 )]) > (int)1) || (_ptr__4255[safe_add( _4252,_ptr__4255[safe_add( _4253,_4287 )] )] != 10)))
                      {
                        {
                          _ptr__4275[safe_add( _4269,_4284 )] = _ptr__4237[safe_add( _4231,_4287 )];
                          _ptr__4276[safe_add( _4270,_4284 )] = 0.0;
                          int _10588 = _ptr__4255[safe_add( _4253,_4287 )];
                          int _10589 = _ptr__4255[safe_add( safe_add( _4253,_4287 ),(int)1 )];
                          for (int _4288 = _10588; _4288 < _10589; ++_4288)
                          {
                            {
                              _ptr__4274[safe_add( _4271,_4282 )] = _ptr__4255[safe_add( _4252,_4288 )];
                              _ptr__4276[safe_add( _4273,_4282 )] = _ptr__4256[safe_add( _4254,_4288 )];
                              ++ _4282;
                            }
                          }
                          _ptr__4274[safe_add( safe_add( _4272,_4284 ),(int)1 )] = _4282;
                          ++ _4284;
                          ++ _4286;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              if ((_4286 > (int)0))
              {
                {
                  _ptr__4274[safe_add( safe_add( _4266,_4283 ),(int)1 )] = _4284;
                  if (_4263)
                  {
                    {
                      _ptr__4275[safe_add( _4267,_4283 )] = _ptr__4237[safe_add( _4230,_4285 )];
                    }
                  }
                  {}
                  ++ _4283;
                }
              }
              {}
            }
          }
          if ((_4283 != _4259))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nelem"));
            }
          }
          {}
          if ((_4284 != _4258))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nnz"));
            }
          }
          {}
          if ((_4282 != _4257))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result num code atoms"));
            }
          }
          {}
          if ((_4257 > (int)0))
          {
            {
              if ((_ptr__4274[safe_add( _4272,_4258 )] != _4257))
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
}
std::string mosek::fusion::ExprOptimizeCode :: toString() { return mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprOptimizeCode::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprOptimizeCode("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprOptimizeCode::destroy(){expr.reset();}void mosek::fusion::ExprOptimizeCode::destroy() { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4289){ return new mosek::fusion::ExprCompress(_4289); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4289) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4289); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4289){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4289->getShape());
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4289;
  }
}void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4290,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4291,    int _4292,    int _4293,    int _4294,    int _4295,    int _4296) { mosek::fusion::p_ExprCompress::arg_sort(_4290,_4291,_4292,_4293,_4294,_4295,_4296); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4290,monty::rc_ptr< ::mosek::fusion::WorkStack > _4291,int _4292,int _4293,int _4294,int _4295,int _4296){
  int _4297 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4298 = mosek::fusion::p_WorkStack::_get_impl(_4290)->i32;
  _checked_ptr_1<int> _ptr__4298(_4298 ? _4298->raw() : nullptr,_4298 ? _4298->size(0) : 0);
  int _10590 = (int)0;
  int _10591 = _4293;
  for (int _4299 = _10590; _4299 < _10591; ++_4299)
  {
    {
      if (((_ptr__4298[safe_add( safe_add( _4295,_4299 ),(int)1 )] - _ptr__4298[safe_add( _4295,_4299 )]) > _4297))
      {
        {
          _4297 = (_ptr__4298[safe_add( safe_add( _4295,_4299 ),(int)1 )] - _ptr__4298[safe_add( _4295,_4299 )]);
        }
      }
      {}
    }
  }
  int _10592;
  bool _10593 = (_4297 > (int)2);
  if (_10593)
  {
    _10592 = _4291->alloci32(safe_mul( _4297,(int)2 ));
  }
  else
  {
    _10592 = (int)99999;
  }
  int _4300 = _10592;
  std::shared_ptr< monty::ndarray< int,1 > > _4301 = mosek::fusion::p_WorkStack::_get_impl(_4291)->i32;
  _checked_ptr_1<int> _ptr__4301(_4301 ? _4301->raw() : nullptr,_4301 ? _4301->size(0) : 0);
  _4298 = mosek::fusion::p_WorkStack::_get_impl(_4290)->i32;
  _ptr__4298.update(_4298 ? _4298->raw() : nullptr, _4298 ? _4298->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4302 = mosek::fusion::p_WorkStack::_get_impl(_4290)->i64;
  _checked_ptr_1<long long> _ptr__4302(_4302 ? _4302->raw() : nullptr,_4302 ? _4302->size(0) : 0);
  int _10594 = (int)0;
  int _10595 = _4293;
  for (int _4303 = _10594; _4303 < _10595; ++_4303)
  {
    {
      int _4304 = _ptr__4298[safe_add( _4295,_4303 )];
      int _4305 = _ptr__4298[safe_add( safe_add( _4295,_4303 ),(int)1 )];
      int _4306 = (_4305 - _4304);
      if ((_4306 == (int)0))
      {
        {
        }
      }
      else if((_4306 == (int)1))
      {
        {
          _ptr__4301[safe_add( _4292,_4304 )] = _4304;
        }
      }
      else if((_4306 == (int)2))
      {
        {
          if ((_ptr__4302[safe_add( _4296,_4304 )] <= _ptr__4302[safe_add( safe_add( _4296,_4304 ),(int)1 )]))
          {
            {
              _ptr__4301[safe_add( _4292,_4304 )] = _4304;
              _ptr__4301[safe_add( safe_add( _4292,_4304 ),(int)1 )] = safe_add( _4304,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4301[safe_add( _4292,_4304 )] = safe_add( _4304,(int)1 );
              _ptr__4301[safe_add( safe_add( _4292,_4304 ),(int)1 )] = _4304;
            }
          }
        }
      }
      else
      {
        {
          long long _4307 = _ptr__4302[safe_add( _4296,_4304 )];
          long long _4308 = _ptr__4302[safe_add( _4296,_4304 )];
          bool _4309 = false;
          int _10596 = safe_add( _4304,(int)1 );
          int _10597 = _4305;
          for (int _4310 = _10596; _4310 < _10597; ++_4310)
          {
            {
              _4309 = (_4309 && (_ptr__4302[(safe_add( _4296,_4310 ) - (int)1)] <= _ptr__4302[safe_add( _4296,_4310 )]));
              if ((_4307 > _ptr__4302[safe_add( _4296,_4310 )]))
              {
                {
                  _4307 = _ptr__4302[safe_add( _4296,_4310 )];
                }
              }
              {}
              if ((_4308 < _ptr__4302[safe_add( _4296,_4310 )]))
              {
                {
                  _4308 = _ptr__4302[safe_add( _4296,_4310 )];
                }
              }
              {}
            }
          }
          if (_4309)
          {
            {
              int _10598 = _4304;
              int _10599 = _4305;
              for (int _4311 = _10598; _4311 < _10599; ++_4311)
              {
                {
                  _ptr__4301[safe_add( _4292,_4311 )] = _4311;
                }
              }
            }
          }
          else if((safe_add( (_4308 - _4307),(int)1 ) <= _4306))
          {
            {
              long long _4312 = safe_add( (_4308 - _4307),(int)1 );
              int _10600 = (int)0;
              long long _10601 = safe_add( _4312,(int)1 );
              for (long long _4313 = _10600; _4313 < _10601; ++_4313)
              {
                {
                  _ptr__4301[safe_add( _4300,_4313 )] = (int)0;
                }
              }
              int _10602 = _4304;
              int _10603 = _4305;
              for (int _4314 = _10602; _4314 < _10603; ++_4314)
              {
                {
                  ++ _ptr__4301[safe_add( (safe_add( _4300,_ptr__4302[safe_add( _4296,_4314 )] ) - _4307),(int)1 )];
                }
              }
              int _10604 = (int)0;
              long long _10605 = _4312;
              for (long long _4315 = _10604; _4315 < _10605; ++_4315)
              {
                {
                  _ptr__4301[safe_add( safe_add( _4300,_4315 ),(int)1 )] += _ptr__4301[safe_add( _4300,_4315 )];
                }
              }
              int _10606 = _4304;
              int _10607 = _4305;
              for (int _4316 = _10606; _4316 < _10607; ++_4316)
              {
                {
                  _ptr__4301[safe_add( safe_add( _4292,_4304 ),_ptr__4301[(safe_add( _4300,_ptr__4302[safe_add( _4296,_4316 )] ) - _4307)] )] = _4316;
                  ++ _ptr__4301[(safe_add( _4300,_ptr__4302[safe_add( _4296,_4316 )] ) - _4307)];
                }
              }
            }
          }
          else
          {
            {
              int _4317 = (int)1;
              int _4318 = _4300;
              int _4319 = safe_add( _4300,_4306 );
              int _10608 = (int)0;
              int _10609 = _4306;
              for (int _4320 = _10608; _4320 < _10609; ++_4320)
              {
                {
                  _ptr__4301[safe_add( _4318,_4320 )] = _4320;
                }
              }
              while ( (_4317 < _4306) )
              {
                {
                  int _4321 = safe_mul( _4317,(int)2 );
                  int _4322 = (_4306 / _4321);
                  if ((safe_add( safe_mul( _4322,_4321 ),_4317 ) < _4306))
                  {
                    {
                      ++ _4322;
                    }
                  }
                  {}
                  int _4323 = (int)0;
                  int _10610 = (int)0;
                  int _10611 = _4322;
                  for (int _4324 = _10610; _4324 < _10611; ++_4324)
                  {
                    {
                      int _4325 = safe_mul( _4324,_4321 );
                      int _4326 = safe_add( _4325,_4317 );
                      int _4327 = _4326;
                      int _4328 = safe_add( _4327,_4317 );
                      if ((_4328 > _4306))
                      {
                        {
                          _4328 = _4306;
                        }
                      }
                      {}
                      while ( ((_4325 < _4326) && (_4327 < _4328)) )
                      {
                        {
                          if ((_ptr__4302[safe_add( safe_add( _4296,_ptr__4301[safe_add( _4318,_4325 )] ),_4304 )] <= _ptr__4302[safe_add( safe_add( _4296,_ptr__4301[safe_add( _4318,_4327 )] ),_4304 )]))
                          {
                            {
                              _ptr__4301[safe_add( _4319,_4323 )] = _ptr__4301[safe_add( _4318,_4325 )];
                              ++ _4323;
                              ++ _4325;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4301[safe_add( _4319,_4323 )] = _ptr__4301[safe_add( _4318,_4327 )];
                              ++ _4323;
                              ++ _4327;
                            }
                          }
                        }
                      }
                      while ( (_4325 < _4326) )
                      {
                        {
                          _ptr__4301[safe_add( _4319,_4323 )] = _ptr__4301[safe_add( _4318,_4325 )];
                          ++ _4323;
                          ++ _4325;
                        }
                      }
                      while ( (_4327 < _4328) )
                      {
                        {
                          _ptr__4301[safe_add( _4319,_4323 )] = _ptr__4301[safe_add( _4318,_4327 )];
                          ++ _4323;
                          ++ _4327;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4322,_4321 ) < _4306))
                  {
                    {
                      int _4329 = safe_mul( _4322,_4321 );
                      while ( (_4329 < _4306) )
                      {
                        {
                          _ptr__4301[safe_add( _4319,_4323 )] = _ptr__4301[safe_add( _4318,_4329 )];
                          ++ _4329;
                          ++ _4323;
                        }
                      }
                    }
                  }
                  {}
                  int _4330 = _4318;
                  _4318 = _4319;
                  _4319 = _4330;
                  _4317 *= (int)2;
                }
              }
              int _10612 = (int)0;
              int _10613 = _4306;
              for (int _4331 = _10612; _4331 < _10613; ++_4331)
              {
                {
                  _ptr__4301[safe_add( safe_add( _4292,_4304 ),_4331 )] = safe_add( _ptr__4301[safe_add( _4318,_4331 )],_4304 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4332,    int _4333,    int _4334,    int _4335,    int _4336,    int _4337,    std::shared_ptr< monty::ndarray< int,1 > > _4338,    std::shared_ptr< monty::ndarray< long long,1 > > _4339) { mosek::fusion::p_ExprCompress::merge_sort(_4332,_4333,_4334,_4335,_4336,_4337,_4338,_4339); }void mosek::fusion::p_ExprCompress::merge_sort(int _4332,int _4333,int _4334,int _4335,int _4336,int _4337,std::shared_ptr< monty::ndarray< int,1 > > _4338,std::shared_ptr< monty::ndarray< long long,1 > > _4339){
  _checked_ptr_1<int> _ptr__4338(_4338 ? _4338->raw() : nullptr, _4338 ? _4338->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4339(_4339 ? _4339->raw() : nullptr, _4339 ? _4339->size(0) : 0);
  int _4340 = _4332;
  int _4341 = _4333;
  int _10614 = (int)0;
  int _10615 = _4335;
  for (int _4342 = _10614; _4342 < _10615; ++_4342)
  {
    {
      _ptr__4338[safe_add( _4340,_4342 )] = _4342;
    }
  }
  int _10616 = (int)0;
  int _10617 = _4334;
  for (int _4343 = _10616; _4343 < _10617; ++_4343)
  {
    {
      _4340 = _4332;
      _4341 = _4333;
      int _4344 = _ptr__4338[safe_add( safe_add( _4336,_4343 ),(int)1 )];
      int _4345 = _ptr__4338[safe_add( _4336,_4343 )];
      if ((safe_add( _4345,(int)1 ) < _4344))
      {
        {
          int _4346 = (_4344 - _4345);
          int _4347 = (int)0;
          while ( (_4346 > (int)1) )
          {
            {
              ++ _4347;
              _4346 /= (int)2;
            }
          }
          _4346 = (_4344 - _4345);
          int _4348 = (int)1;
          int _10618 = (int)0;
          int _10619 = safe_add( _4347,(int)1 );
          for (int _4349 = _10618; _4349 < _10619; ++_4349)
          {
            {
              int _4350 = ((safe_add( _4346,_4348 ) - (int)1) / _4348);
              int _4351 = (_4350 / (int)2);
              int _4352 = _4345;
              int _10620 = (int)0;
              int _10621 = _4351;
              for (int _4353 = _10620; _4353 < _10621; ++_4353)
              {
                {
                  int _4354 = safe_mul( safe_mul( _4353,_4348 ),(int)2 );
                  int _10622;
                  bool _10623 = (safe_add( safe_add( _4345,_4354 ),safe_mul( (int)2,_4348 ) ) < _4344);
                  if (_10623)
                  {
                    _10622 = safe_add( safe_add( _4345,_4354 ),safe_mul( (int)2,_4348 ) );
                  }
                  else
                  {
                    _10622 = _4344;
                  }
                  int _4355 = _10622;
                  int _4356 = safe_add( safe_add( _4345,_4354 ),_4348 );
                  int _4357 = safe_add( safe_add( _4345,_4354 ),_4348 );
                  int _4358 = safe_add( _4345,_4354 );
                  while ( ((_4358 < _4357) && (_4356 < _4355)) )
                  {
                    {
                      if ((_ptr__4339[safe_add( _4337,_ptr__4338[safe_add( _4340,_4358 )] )] <= _ptr__4339[safe_add( _4337,_ptr__4338[safe_add( _4340,_4356 )] )]))
                      {
                        {
                          _ptr__4338[safe_add( _4341,_4352 )] = _ptr__4338[safe_add( _4340,_4358 )];
                          ++ _4352;
                          ++ _4358;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4338[safe_add( _4341,_4352 )] = _ptr__4338[safe_add( _4340,_4356 )];
                          ++ _4352;
                          ++ _4356;
                        }
                      }
                    }
                  }
                  while ( (_4358 < _4357) )
                  {
                    {
                      _ptr__4338[safe_add( _4341,_4352 )] = _ptr__4338[safe_add( _4340,_4358 )];
                      ++ _4352;
                      ++ _4358;
                    }
                  }
                  while ( (_4356 < _4355) )
                  {
                    {
                      _ptr__4338[safe_add( _4341,_4352 )] = _ptr__4338[safe_add( _4340,_4356 )];
                      ++ _4352;
                      ++ _4356;
                    }
                  }
                }
              }
              int _10624 = _4352;
              int _10625 = _4344;
              for (int _4359 = _10624; _4359 < _10625; ++_4359)
              {
                {
                  _ptr__4338[safe_add( _4341,_4359 )] = _ptr__4338[safe_add( _4340,_4359 )];
                }
              }
              int _4360 = _4340;
              _4340 = _4341;
              _4341 = _4360;
              _4348 *= (int)2;
            }
          }
        }
      }
      {}
      int _10626 = _4345;
      int _10627 = _4344;
      for (int _4361 = _10626; _4361 < _10627; ++_4361)
      {
        {
          _ptr__4338[safe_add( _4332,_4361 )] = _ptr__4338[safe_add( _4340,_4361 )];
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4362,monty::rc_ptr< ::mosek::fusion::WorkStack > _4363,monty::rc_ptr< ::mosek::fusion::WorkStack > _4364) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4362,_4363,_4364); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4362,monty::rc_ptr< ::mosek::fusion::WorkStack > _4363,monty::rc_ptr< ::mosek::fusion::WorkStack > _4364){
  expr->eval(_4363,_4362,_4364);
  _4363->pop_expr();
  int _4365 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nd;
  int _4366 = mosek::fusion::p_WorkStack::_get_impl(_4363)->shape_base;
  int _4367 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nelem;
  int _4368 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nnz;
  bool _4369 = mosek::fusion::p_WorkStack::_get_impl(_4363)->hassp;
  int _4370 = mosek::fusion::p_WorkStack::_get_impl(_4363)->ncodeatom;
  int _4371 = mosek::fusion::p_WorkStack::_get_impl(_4363)->ptr_base;
  int _4372 = mosek::fusion::p_WorkStack::_get_impl(_4363)->sp_base;
  int _4373 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nidxs_base;
  int _4374 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cof_base;
  int _4375 = mosek::fusion::p_WorkStack::_get_impl(_4363)->code_base;
  int _4376 = mosek::fusion::p_WorkStack::_get_impl(_4363)->codeptr_base;
  int _4377 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4378 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
  _checked_ptr_1<int> _ptr__4378(_4378 ? _4378->raw() : nullptr,_4378 ? _4378->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4379 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i64;
  _checked_ptr_1<long long> _ptr__4379(_4379 ? _4379->raw() : nullptr,_4379 ? _4379->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4380 = mosek::fusion::p_WorkStack::_get_impl(_4363)->f64;
  _checked_ptr_1<double> _ptr__4380(_4380 ? _4380->raw() : nullptr,_4380 ? _4380->size(0) : 0);
  bool _4381 = true;
  {
    std::shared_ptr< monty::ndarray< int,1 > > _4382 = mosek::fusion::p_WorkStack::_get_impl(_4364)->i32;
    _checked_ptr_1<int> _ptr__4382(_4382 ? _4382->raw() : nullptr,_4382 ? _4382->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _4383 = mosek::fusion::p_WorkStack::_get_impl(_4364)->i64;
    _checked_ptr_1<long long> _ptr__4383(_4383 ? _4383->raw() : nullptr,_4383 ? _4383->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _4384 = mosek::fusion::p_WorkStack::_get_impl(_4364)->f64;
    _checked_ptr_1<double> _ptr__4384(_4384 ? _4384->raw() : nullptr,_4384 ? _4384->size(0) : 0);
    int _10628 = (int)0;
    int _10629 = _4367;
    for (int _4385 = _10628; _4385 < _10629; ++_4385)
    {
      {
        int _10630 = _ptr__4378[safe_add( _4371,_4385 )];
        int _10631 = (_ptr__4378[safe_add( safe_add( _4371,_4385 ),(int)1 )] - (int)1);
        for (int _4386 = _10630; _4386 < _10631; ++_4386)
        {
          {
            _4381 = (_4381 && (_ptr__4379[safe_add( _4373,_4386 )] < _ptr__4379[safe_add( safe_add( _4373,_4386 ),(int)1 )]));
          }
        }
      }
    }
    if (_4381)
    {
      {
        if ((_4370 > (int)0))
        {
          {
            int _10632 = (int)0;
            int _10633 = _4368;
            for (int _4387 = _10632; _4387 < _10633; ++_4387)
            {
              {
                _4381 = (_4381 && ((!((_ptr__4380[safe_add( _4374,_4387 )] >= 0.0) && (0.0 >= _ptr__4380[safe_add( _4374,_4387 )]))) || (((_ptr__4378[safe_add( safe_add( _4376,_4387 ),(int)1 )] - _ptr__4378[safe_add( _4376,_4387 )]) == (int)0) || (!(((_ptr__4378[safe_add( safe_add( _4376,_4387 ),(int)1 )] - _ptr__4378[safe_add( _4376,_4387 )]) == (int)1) && ((_ptr__4378[safe_add( _4375,_ptr__4378[safe_add( _4376,_4387 )] )] == 2) && (!((_ptr__4380[safe_add( _4377,_ptr__4378[safe_add( _4376,_4387 )] )] <= 0.0) && (_ptr__4380[safe_add( _4377,_ptr__4378[safe_add( _4376,_4387 )] )] >= 0.0)))))))));
              }
            }
          }
        }
        else
        {
          {
            int _10634 = (int)0;
            int _10635 = _4368;
            for (int _4388 = _10634; _4388 < _10635; ++_4388)
            {
              {
                _4381 = (_4381 && (!((_ptr__4380[safe_add( _4374,_4388 )] <= 0.0) && (0.0 <= _ptr__4380[safe_add( _4374,_4388 )]))));
              }
            }
          }
        }
      }
    }
    {}
  }
  if (_4381)
  {
    {
      _4362->alloc_expr(_4365,_4367,_4368,_4369,_4370);
      int _4389 = mosek::fusion::p_WorkStack::_get_impl(_4362)->ptr_base;
      int _4390 = mosek::fusion::p_WorkStack::_get_impl(_4362)->nidxs_base;
      int _4391 = mosek::fusion::p_WorkStack::_get_impl(_4362)->sp_base;
      int _4392 = mosek::fusion::p_WorkStack::_get_impl(_4362)->cof_base;
      int _4393 = mosek::fusion::p_WorkStack::_get_impl(_4362)->shape_base;
      int _4394 = mosek::fusion::p_WorkStack::_get_impl(_4362)->code_base;
      int _4395 = mosek::fusion::p_WorkStack::_get_impl(_4362)->codeptr_base;
      int _4396 = mosek::fusion::p_WorkStack::_get_impl(_4362)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4397 = mosek::fusion::p_WorkStack::_get_impl(_4362)->i32;
      _checked_ptr_1<int> _ptr__4397(_4397 ? _4397->raw() : nullptr,_4397 ? _4397->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4398 = mosek::fusion::p_WorkStack::_get_impl(_4362)->i64;
      _checked_ptr_1<long long> _ptr__4398(_4398 ? _4398->raw() : nullptr,_4398 ? _4398->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4399 = mosek::fusion::p_WorkStack::_get_impl(_4362)->f64;
      _checked_ptr_1<double> _ptr__4399(_4399 ? _4399->raw() : nullptr,_4399 ? _4399->size(0) : 0);
      {
        int _10636 = (int)0;
        int _10637 = _4365;
        for (int _4400 = _10636; _4400 < _10637; ++_4400)
        {
          {
            _ptr__4397[safe_add( _4393,_4400 )] = _ptr__4378[safe_add( _4366,_4400 )];
          }
        }
        int _10638 = (int)0;
        int _10639 = safe_add( _4367,(int)1 );
        for (int _4401 = _10638; _4401 < _10639; ++_4401)
        {
          {
            _ptr__4397[safe_add( _4389,_4401 )] = _ptr__4378[safe_add( _4371,_4401 )];
          }
        }
        int _10640 = (int)0;
        int _10641 = _4368;
        for (int _4402 = _10640; _4402 < _10641; ++_4402)
        {
          {
            _ptr__4398[safe_add( _4390,_4402 )] = _ptr__4379[safe_add( _4373,_4402 )];
          }
        }
        int _10642 = (int)0;
        int _10643 = _4368;
        for (int _4403 = _10642; _4403 < _10643; ++_4403)
        {
          {
            _ptr__4399[safe_add( _4392,_4403 )] = _ptr__4380[safe_add( _4374,_4403 )];
          }
        }
        if (_4369)
        {
          {
            int _10644 = (int)0;
            int _10645 = _4367;
            for (int _4404 = _10644; _4404 < _10645; ++_4404)
            {
              {
                _ptr__4398[safe_add( _4391,_4404 )] = _ptr__4379[safe_add( _4372,_4404 )];
              }
            }
          }
        }
        {}
        if ((_4370 > (int)0))
        {
          {
            int _10646 = (int)0;
            int _10647 = _4370;
            for (int _4405 = _10646; _4405 < _10647; ++_4405)
            {
              {
                _ptr__4397[safe_add( _4394,_4405 )] = _ptr__4378[safe_add( _4375,_4405 )];
              }
            }
            int _10648 = (int)0;
            int _10649 = _4370;
            for (int _4406 = _10648; _4406 < _10649; ++_4406)
            {
              {
                _ptr__4399[safe_add( _4396,_4406 )] = _ptr__4380[safe_add( _4377,_4406 )];
              }
            }
            int _10650 = (int)0;
            int _10651 = safe_add( _4368,(int)1 );
            for (int _4407 = _10650; _4407 < _10651; ++_4407)
            {
              {
                _ptr__4397[safe_add( _4395,_4407 )] = _ptr__4378[safe_add( _4376,_4407 )];
              }
            }
          }
        }
        {}
      }
      if ((_4370 > (int)0))
      {
        {
          if ((_ptr__4397[safe_add( _4395,_4368 )] != _4370))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4408 = _4364->alloci32(_4368);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4363,_4364,_4408,_4367,_4368,_4371,_4373);
      std::shared_ptr< monty::ndarray< int,1 > > _4409 = mosek::fusion::p_WorkStack::_get_impl(_4364)->i32;
      _checked_ptr_1<int> _ptr__4409(_4409 ? _4409->raw() : nullptr,_4409 ? _4409->size(0) : 0);
      int _4410 = (int)0;
      int _4411 = _4370;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4412 = mosek::fusion::p_WorkStack::_get_impl(_4362)->i32;
        _checked_ptr_1<int> _ptr__4412(_4412 ? _4412->raw() : nullptr,_4412 ? _4412->size(0) : 0);
        int _10652 = (int)0;
        int _10653 = _4367;
        for (int _4413 = _10652; _4413 < _10653; ++_4413)
        {
          {
            int _4414 = _ptr__4378[safe_add( safe_add( _4371,_4413 ),(int)1 )];
            int _4415 = _ptr__4378[safe_add( _4371,_4413 )];
            if ((_4415 < _4414))
            {
              {
                int _4416 = _4415;
                while ( (_4416 < _4414) )
                {
                  {
                    double _4417 = 0.0;
                    bool _4418 = false;
                    long long _4419 = _ptr__4379[safe_add( _4373,_ptr__4409[safe_add( _4408,_4416 )] )];
                    int _4420 = _4416;
                    while ( ((_4416 < _4414) && (_ptr__4379[safe_add( _4373,_ptr__4409[safe_add( _4408,_4416 )] )] == _4419)) )
                    {
                      {
                        double _4421 = _ptr__4380[safe_add( _4374,_ptr__4409[safe_add( _4408,_4416 )] )];
                        _4418 = (_4418 || (!((_4421 <= 0.0) && (_4421 >= 0.0))));
                        _4417 += _4421;
                        ++ _4416;
                      }
                    }
                    if ((_4418 || (_4370 > (int)0)))
                    {
                      {
                        ++ _4410;
                        if (((safe_add( _4420,(int)1 ) < _4416) && (_4370 > (int)0)))
                        {
                          {
                            _4411 += (int)1;
                          }
                        }
                        {}
                      }
                    }
                    {}
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4362->alloc_expr(_4365,_4367,_4410,_4369,_4411);
      int _4422 = mosek::fusion::p_WorkStack::_get_impl(_4362)->nidxs_base;
      int _4423 = mosek::fusion::p_WorkStack::_get_impl(_4362)->shape_base;
      int _4424 = mosek::fusion::p_WorkStack::_get_impl(_4362)->sp_base;
      int _4425 = mosek::fusion::p_WorkStack::_get_impl(_4362)->cof_base;
      int _4426 = mosek::fusion::p_WorkStack::_get_impl(_4362)->ptr_base;
      int _4427 = mosek::fusion::p_WorkStack::_get_impl(_4362)->code_base;
      int _4428 = mosek::fusion::p_WorkStack::_get_impl(_4362)->codeptr_base;
      int _4429 = mosek::fusion::p_WorkStack::_get_impl(_4362)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4430 = mosek::fusion::p_WorkStack::_get_impl(_4362)->i32;
      _checked_ptr_1<int> _ptr__4430(_4430 ? _4430->raw() : nullptr,_4430 ? _4430->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4431 = mosek::fusion::p_WorkStack::_get_impl(_4362)->i64;
      _checked_ptr_1<long long> _ptr__4431(_4431 ? _4431->raw() : nullptr,_4431 ? _4431->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4432 = mosek::fusion::p_WorkStack::_get_impl(_4362)->f64;
      _checked_ptr_1<double> _ptr__4432(_4432 ? _4432->raw() : nullptr,_4432 ? _4432->size(0) : 0);
      {
        int _10654 = (int)0;
        int _10655 = _4365;
        for (int _4433 = _10654; _4433 < _10655; ++_4433)
        {
          {
            _ptr__4430[safe_add( _4423,_4433 )] = _ptr__4378[safe_add( _4366,_4433 )];
          }
        }
        if (_4369)
        {
          {
            int _10656 = (int)0;
            int _10657 = _4367;
            for (int _4434 = _10656; _4434 < _10657; ++_4434)
            {
              {
                _ptr__4431[safe_add( _4424,_4434 )] = _ptr__4379[safe_add( _4372,_4434 )];
              }
            }
          }
        }
        {}
        int _4435 = (int)0;
        int _4436 = (int)0;
        {
          _ptr__4430[_4426] = (int)0;
          if ((_4411 > (int)0))
          {
            {
              _ptr__4430[_4428] = (int)0;
            }
          }
          {}
          int _10658 = (int)0;
          int _10659 = _4367;
          for (int _4437 = _10658; _4437 < _10659; ++_4437)
          {
            {
              int _4438 = _ptr__4378[safe_add( safe_add( _4371,_4437 ),(int)1 )];
              int _4439 = _ptr__4378[safe_add( _4371,_4437 )];
              if ((_4439 < _4438))
              {
                {
                  int _4440 = _4439;
                  int _4441 = _4440;
                  while ( (_4440 < _4438) )
                  {
                    {
                      double _4442 = 0.0;
                      bool _4443 = false;
                      int _4444 = safe_add( _4440,(int)1 );
                      int _4445 = _4440;
                      long long _4446 = _ptr__4379[safe_add( _4373,_ptr__4409[safe_add( _4408,_4445 )] )];
                      while ( ((_4444 < _4438) && (_ptr__4379[safe_add( _4373,_ptr__4409[safe_add( _4408,_4444 )] )] == _4446)) )
                      {
                        {
                          ++ _4444;
                        }
                      }
                      if ((_4370 > (int)0))
                      {
                        {
                          while ( (_4440 < _4444) )
                          {
                            {
                              double _4447 = _ptr__4380[safe_add( _4374,_ptr__4409[safe_add( _4408,_4440 )] )];
                              _4443 = (_4443 || (!((_4447 <= 0.0) && (_4447 >= 0.0))));
                              _4442 += _4447;
                              int _10660 = _ptr__4378[safe_add( _4376,_ptr__4409[safe_add( _4408,_4440 )] )];
                              int _10661 = _ptr__4378[safe_add( safe_add( _4376,_ptr__4409[safe_add( _4408,_4440 )] ),(int)1 )];
                              for (int _4448 = _10660; _4448 < _10661; ++_4448)
                              {
                                {
                                  _ptr__4430[safe_add( _4427,_4436 )] = _ptr__4378[safe_add( _4375,_4448 )];
                                  _ptr__4432[safe_add( _4429,_4436 )] = _ptr__4380[safe_add( _4377,_4448 )];
                                  ++ _4436;
                                }
                              }
                              ++ _4440;
                            }
                          }
                          if (((_4444 - _4445) > (int)1))
                          {
                            {
                              _ptr__4430[safe_add( _4427,_4436 )] = 8;
                              _ptr__4432[safe_add( _4429,_4436 )] = (_4444 - _4445);
                              ++ _4436;
                            }
                          }
                          {}
                          _ptr__4430[safe_add( safe_add( _4428,_4435 ),(int)1 )] = _4436;
                          _ptr__4431[safe_add( _4422,_4435 )] = _4446;
                          _ptr__4432[safe_add( _4425,_4435 )] = _4442;
                          ++ _4435;
                        }
                      }
                      else
                      {
                        {
                          while ( (_4440 < _4444) )
                          {
                            {
                              double _4449 = _ptr__4380[safe_add( _4374,_ptr__4409[safe_add( _4408,_4440 )] )];
                              _4443 = (_4443 || (!((_4449 <= 0.0) && (_4449 >= 0.0))));
                              _4442 += _4449;
                              ++ _4440;
                            }
                          }
                          if (_4443)
                          {
                            {
                              _ptr__4431[safe_add( _4422,_4435 )] = _4446;
                              _ptr__4432[safe_add( _4425,_4435 )] = _4442;
                              ++ _4435;
                            }
                          }
                          {}
                        }
                      }
                    }
                  }
                }
              }
              {}
              _ptr__4430[safe_add( safe_add( _4426,_4437 ),(int)1 )] = _4435;
            }
          }
        }
        if ((_4411 != _4436))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ncodeatom"));
          }
        }
        {}
        if ((_4435 != _4410))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
          }
        }
        {}
        if ((_4410 != _ptr__4430[safe_add( _4426,_4367 )]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
          }
        }
        {}
      }
      if ((_4411 > (int)0))
      {
        {
          if ((_ptr__4430[safe_add( _4428,_4410 )] != _4411))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  _4364->clear();
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4450,    std::shared_ptr< monty::ndarray< long long,1 > > _4451,    std::shared_ptr< monty::ndarray< double,1 > > _4452){ return new mosek::fusion::ExprConst(_4450,_4451,_4452); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4450,    std::shared_ptr< monty::ndarray< long long,1 > > _4451,    std::shared_ptr< monty::ndarray< double,1 > > _4452) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4450,_4451,_4452); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4450,    std::shared_ptr< monty::ndarray< long long,1 > > _4451,    std::shared_ptr< monty::ndarray< double,1 > > _4452){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4450(_4450 ? _4450->raw() : nullptr, _4450 ? _4450->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4451(_4451 ? _4451->raw() : nullptr, _4451 ? _4451->size(0) : 0);
    _checked_ptr_1<double> _ptr__4452(_4452 ? _4452->raw() : nullptr, _4452 ? _4452->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4450);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_4452);
    std::shared_ptr< monty::ndarray< long long,1 > > _10662;
    bool _10663 = (NULL != _4451.get());
    if (_10663)
    {
      _10662 = ::mosek::fusion::Utils::Tools::arraycopy(_4451);
    }
    else
    {
      _10662 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10662;
    ::mosek::fusion::p_ExprConst::validate(_4450,_4452,_4451);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4453,    std::shared_ptr< monty::ndarray< long long,1 > > _4454,    double _4455){ return new mosek::fusion::ExprConst(_4453,_4454,_4455); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4453,    std::shared_ptr< monty::ndarray< long long,1 > > _4454,    double _4455) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4453,_4454,_4455); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4453,    std::shared_ptr< monty::ndarray< long long,1 > > _4454,    double _4455){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4453(_4453 ? _4453->raw() : nullptr, _4453 ? _4453->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4454(_4454 ? _4454->raw() : nullptr, _4454 ? _4454->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4453);
    long long _10664;
    bool _10665 = (NULL == _4454.get());
    if (_10665)
    {
      _10664 = ::mosek::fusion::p_Set::size(_4453);
    }
    else
    {
      _10664 = (int)((_4454)->size(0));
    }
    long long _4456 = _10664;
    std::vector<double> _10666;
    for (long long _4457 = (int)0, _10667 = _4456; _4457 < _10667 ; ++_4457)
    {
      _10666.push_back(_4455);
    }
    auto _10668 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10666.size()),_10666.begin(),_10666.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _10668;
    std::shared_ptr< monty::ndarray< long long,1 > > _10669;
    bool _10670 = (NULL != _4454.get());
    if (_10670)
    {
      _10669 = ::mosek::fusion::Utils::Tools::arraycopy(_4454);
    }
    else
    {
      _10669 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10669;
    ::mosek::fusion::p_ExprConst::validate(_4453,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_4454);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4458,monty::rc_ptr< ::mosek::fusion::WorkStack > _4459,monty::rc_ptr< ::mosek::fusion::WorkStack > _4460) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_4458,_4459,_4460); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4458,monty::rc_ptr< ::mosek::fusion::WorkStack > _4459,monty::rc_ptr< ::mosek::fusion::WorkStack > _4460){
  std::shared_ptr< monty::ndarray< int,1 > > _4461 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4461(_4461 ? _4461->raw() : nullptr,_4461 ? _4461->size(0) : 0);
  int _4462 = (int)((_4461)->size(0));
  int _4463 = (int)0;
  int _10671 = (int)0;
  int _10672 = (int)((bfix)->size(0));
  for (int _4464 = _10671; _4464 < _10672; ++_4464)
  {
    {
      if ((!((((*bfix)(_4464)) <= 0.0) && (((*bfix)(_4464)) >= 0.0))))
      {
        {
          ++ _4463;
        }
      }
      {}
    }
  }
  int _4465 = (int)((bfix)->size(0));
  bool _4466 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_4461)));
  _4458->alloc_expr(_4462,_4465,_4463,_4466,(int)0);
  int _4467 = mosek::fusion::p_WorkStack::_get_impl(_4458)->shape_base;
  int _4468 = mosek::fusion::p_WorkStack::_get_impl(_4458)->ptr_base;
  int _4469 = mosek::fusion::p_WorkStack::_get_impl(_4458)->sp_base;
  int _4470 = mosek::fusion::p_WorkStack::_get_impl(_4458)->nidxs_base;
  int _4471 = mosek::fusion::p_WorkStack::_get_impl(_4458)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4472 = mosek::fusion::p_WorkStack::_get_impl(_4458)->i32;
  _checked_ptr_1<int> _ptr__4472(_4472 ? _4472->raw() : nullptr,_4472 ? _4472->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4473 = mosek::fusion::p_WorkStack::_get_impl(_4458)->i64;
  _checked_ptr_1<long long> _ptr__4473(_4473 ? _4473->raw() : nullptr,_4473 ? _4473->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4474 = mosek::fusion::p_WorkStack::_get_impl(_4458)->f64;
  _checked_ptr_1<double> _ptr__4474(_4474 ? _4474->raw() : nullptr,_4474 ? _4474->size(0) : 0);
  int _10673 = (int)0;
  int _10674 = _4462;
  for (int _4475 = _10673; _4475 < _10674; ++_4475)
  {
    {
      _ptr__4472[safe_add( _4467,_4475 )] = _ptr__4461[_4475];
    }
  }
  int _4476 = (int)0;
  _ptr__4472[_4468] = (int)0;
  if (_4466)
  {
    {
      int _10675 = (int)0;
      int _10676 = _4465;
      for (int _4477 = _10675; _4477 < _10676; ++_4477)
      {
        {
          _ptr__4473[safe_add( _4469,_4477 )] = ((*sparsity)(_4477));
        }
      }
    }
  }
  {}
  int _10677 = (int)0;
  int _10678 = _4465;
  for (int _4478 = _10677; _4478 < _10678; ++_4478)
  {
    {
      if ((!((((*bfix)(_4478)) <= 0.0) && (((*bfix)(_4478)) >= 0.0))))
      {
        {
          _ptr__4473[safe_add( _4470,_4476 )] = (int)0;
          _ptr__4474[safe_add( _4471,_4476 )] = ((*bfix)(_4478));
          ++ _4476;
        }
      }
      {}
      _ptr__4472[safe_add( safe_add( _4468,_4478 ),(int)1 )] = _4476;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _4479,std::shared_ptr< monty::ndarray< double,1 > > _4480,std::shared_ptr< monty::ndarray< long long,1 > > _4481){
  _checked_ptr_1<int> _ptr__4479(_4479 ? _4479->raw() : nullptr, _4479 ? _4479->size(0) : 0);
  _checked_ptr_1<double> _ptr__4480(_4480 ? _4480->raw() : nullptr, _4480 ? _4480->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4481(_4481 ? _4481->raw() : nullptr, _4481 ? _4481->size(0) : 0);
  long long _4482 = ::mosek::fusion::p_Set::size(_4479);
  if ((NULL != _4481.get()))
  {
    {
      if (((int)((_4481)->size(0)) != (int)((_4480)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _4483 = false;
      int _10679 = (int)0;
      int _10680 = (int)((_4481)->size(0));
      for (int _4484 = _10679; _4484 < _10680; ++_4484)
      {
        {
          if (((_ptr__4481[_4484] < (int)0) || (_ptr__4481[_4484] >= _4482)))
          {
            {
              _4483 = true;
            }
          }
          {}
        }
      }
      if (_4483)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_4480)->size(0)) != _4482))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4485,    std::shared_ptr< monty::ndarray< int,2 > > _4486){ return new mosek::fusion::ExprPick(_4485,_4486); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4485,    std::shared_ptr< monty::ndarray< int,2 > > _4486) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4485,_4486); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4485,    std::shared_ptr< monty::ndarray< int,2 > > _4486){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4486)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _4487 = _4485->getShape();
    _checked_ptr_1<int> _ptr__4487(_4487 ? _4487->raw() : nullptr,_4487 ? _4487->size(0) : 0);
    int _4488 = (int)((_4487)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4485;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4486)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _4489 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__4489(_4489 ? _4489->raw() : nullptr,_4489 ? _4489->size(0) : 0);
    if (((int)((_4486)->size(1)) != _4488))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _4490 = false;
    int _10681 = (int)0;
    int _10682 = (int)((_4486)->size(0));
    for (int _4491 = _10681; _4491 < _10682; ++_4491)
    {
      {
        int _10683 = (int)0;
        int _10684 = _4488;
        for (int _4492 = _10683; _4492 < _10684; ++_4492)
        {
          {
            if (((((*_4486)(_4491,_4492)) < (int)0) || (((*_4486)(_4491,_4492)) >= _ptr__4487[_4492])))
            {
              {
                _4490 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_4490)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4493 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4488)));
      _checked_ptr_1<long long> _ptr__4493(_4493 ? _4493->raw() : nullptr,_4493 ? _4493->size(0) : 0);
      _ptr__4493[(_4488 - (int)1)] = (int)1;
      int _10685 = (int)1;
      int _10686 = _4488;
      for (int _4494 = _10685; _4494 < _10686; ++_4494)
      {
        {
          _ptr__4493[((_4488 - _4494) - (int)1)] = safe_mul( _ptr__4493[(_4488 - _4494)],_ptr__4487[(_4488 - _4494)] );
        }
      }
      int _10687 = (int)0;
      int _10688 = (int)((_4486)->size(0));
      for (int _4495 = _10687; _4495 < _10688; ++_4495)
      {
        {
          long long _4496 = (long long)0;
          int _10689 = (int)0;
          int _10690 = _4488;
          for (int _4497 = _10689; _4497 < _10690; ++_4497)
          {
            {
              _4496 += safe_mul( _ptr__4493[_4497],((*_4486)(_4495,_4497)) );
            }
          }
          _ptr__4489[_4495] = _4496;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4498,    std::shared_ptr< monty::ndarray< long long,1 > > _4499){ return new mosek::fusion::ExprPick(_4498,_4499); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4498,    std::shared_ptr< monty::ndarray< long long,1 > > _4499) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4498,_4499); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4498,    std::shared_ptr< monty::ndarray< long long,1 > > _4499){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__4499(_4499 ? _4499->raw() : nullptr, _4499 ? _4499->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4499)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4498;
    std::shared_ptr< monty::ndarray< int,1 > > _4500 = _4498->getShape();
    _checked_ptr_1<int> _ptr__4500(_4500 ? _4500->raw() : nullptr,_4500 ? _4500->size(0) : 0);
    long long _4501 = ::mosek::fusion::p_Set::size(_4500);
    bool _4502 = false;
    int _10691 = (int)0;
    int _10692 = (int)((_4499)->size(0));
    for (int _4503 = _10691; _4503 < _10692; ++_4503)
    {
      {
        if (((_ptr__4499[_4503] < (int)0) || (_ptr__4499[_4503] >= _4501)))
        {
          {
            _4502 = true;
          }
        }
        {}
      }
    }
    if (_4502)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_4499);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4504,monty::rc_ptr< ::mosek::fusion::WorkStack > _4505,monty::rc_ptr< ::mosek::fusion::WorkStack > _4506) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_4504,_4505,_4506); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4504,monty::rc_ptr< ::mosek::fusion::WorkStack > _4505,monty::rc_ptr< ::mosek::fusion::WorkStack > _4506){
  expr->eval(_4505,_4504,_4506);
  _4505->pop_expr();
  int _4507 = mosek::fusion::p_WorkStack::_get_impl(_4505)->nd;
  int _4508 = mosek::fusion::p_WorkStack::_get_impl(_4505)->shape_base;
  int _4509 = mosek::fusion::p_WorkStack::_get_impl(_4505)->nelem;
  int _4510 = mosek::fusion::p_WorkStack::_get_impl(_4505)->nnz;
  int _4511 = mosek::fusion::p_WorkStack::_get_impl(_4505)->ncodeatom;
  bool _4512 = mosek::fusion::p_WorkStack::_get_impl(_4505)->hassp;
  int _4513 = mosek::fusion::p_WorkStack::_get_impl(_4505)->ptr_base;
  int _4514 = mosek::fusion::p_WorkStack::_get_impl(_4505)->sp_base;
  int _4515 = mosek::fusion::p_WorkStack::_get_impl(_4505)->nidxs_base;
  int _4516 = mosek::fusion::p_WorkStack::_get_impl(_4505)->cof_base;
  int _4517 = mosek::fusion::p_WorkStack::_get_impl(_4505)->code_base;
  int _4518 = mosek::fusion::p_WorkStack::_get_impl(_4505)->codeptr_base;
  int _4519 = mosek::fusion::p_WorkStack::_get_impl(_4505)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4520 = mosek::fusion::p_WorkStack::_get_impl(_4505)->i32;
  _checked_ptr_1<int> _ptr__4520(_4520 ? _4520->raw() : nullptr,_4520 ? _4520->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4521 = mosek::fusion::p_WorkStack::_get_impl(_4505)->i64;
  _checked_ptr_1<long long> _ptr__4521(_4521 ? _4521->raw() : nullptr,_4521 ? _4521->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4522 = mosek::fusion::p_WorkStack::_get_impl(_4505)->f64;
  _checked_ptr_1<double> _ptr__4522(_4522 ? _4522->raw() : nullptr,_4522 ? _4522->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4523 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__4523(_4523 ? _4523->raw() : nullptr,_4523 ? _4523->size(0) : 0);
  if ((!_4512))
  {
    {
      int _4524 = (int)((_4523)->size(0));
      int _4525 = (int)1;
      int _4526 = (int)0;
      int _4527 = (int)0;
      int _10693 = (int)0;
      int _10694 = (int)((_4523)->size(0));
      for (int _4528 = _10693; _4528 < _10694; ++_4528)
      {
        {
          _4526 += (_ptr__4520[safe_add( safe_add( _4513,_ptr__4523[_4528] ),(int)1 )] - _ptr__4520[safe_add( _4513,_ptr__4523[_4528] )]);
          if ((_4511 > (int)0))
          {
            {
              _4527 += (_ptr__4520[safe_add( _4518,_ptr__4520[safe_add( safe_add( _4513,_ptr__4523[_4528] ),(int)1 )] )] - _ptr__4520[safe_add( _4518,_ptr__4520[safe_add( _4513,_ptr__4523[_4528] )] )]);
            }
          }
          {}
        }
      }
      _4504->alloc_expr(_4525,_4524,_4526,false,_4527);
      int _4529 = mosek::fusion::p_WorkStack::_get_impl(_4504)->cof_base;
      int _4530 = mosek::fusion::p_WorkStack::_get_impl(_4504)->nidxs_base;
      int _4531 = mosek::fusion::p_WorkStack::_get_impl(_4504)->ptr_base;
      int _4532 = mosek::fusion::p_WorkStack::_get_impl(_4504)->shape_base;
      int _4533 = mosek::fusion::p_WorkStack::_get_impl(_4504)->code_base;
      int _4534 = mosek::fusion::p_WorkStack::_get_impl(_4504)->codeptr_base;
      int _4535 = mosek::fusion::p_WorkStack::_get_impl(_4504)->cconst_base;
      {
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4536 = mosek::fusion::p_WorkStack::_get_impl(_4504)->i32;
      _checked_ptr_1<int> _ptr__4536(_4536 ? _4536->raw() : nullptr,_4536 ? _4536->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4537 = mosek::fusion::p_WorkStack::_get_impl(_4504)->i64;
      _checked_ptr_1<long long> _ptr__4537(_4537 ? _4537->raw() : nullptr,_4537 ? _4537->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4538 = mosek::fusion::p_WorkStack::_get_impl(_4504)->f64;
      _checked_ptr_1<double> _ptr__4538(_4538 ? _4538->raw() : nullptr,_4538 ? _4538->size(0) : 0);
      _ptr__4536[_4532] = (int)((_4523)->size(0));
      int _4539 = (int)0;
      int _4540 = (int)0;
      _ptr__4536[_4531] = (int)0;
      int _10695 = (int)0;
      int _10696 = (int)((_4523)->size(0));
      for (int _4541 = _10695; _4541 < _10696; ++_4541)
      {
        {
          int _10697 = _ptr__4520[safe_add( _4513,_ptr__4523[_4541] )];
          int _10698 = _ptr__4520[safe_add( safe_add( _4513,_ptr__4523[_4541] ),(int)1 )];
          for (int _4542 = _10697; _4542 < _10698; ++_4542)
          {
            {
              _ptr__4537[safe_add( _4530,_4540 )] = _ptr__4521[safe_add( _4515,_4542 )];
              _ptr__4538[safe_add( _4529,_4540 )] = _ptr__4522[safe_add( _4516,_4542 )];
              if ((_4511 > (int)0))
              {
                {
                  int _10699 = _ptr__4520[safe_add( _4518,_4542 )];
                  int _10700 = _ptr__4520[safe_add( safe_add( _4518,_4542 ),(int)1 )];
                  for (int _4543 = _10699; _4543 < _10700; ++_4543)
                  {
                    {
                      _ptr__4536[safe_add( _4533,_4539 )] = _ptr__4520[safe_add( _4517,_4543 )];
                      _ptr__4538[safe_add( _4535,_4539 )] = _ptr__4522[safe_add( _4519,_4543 )];
                      ++ _4539;
                    }
                  }
                  _ptr__4536[safe_add( safe_add( _4534,_4540 ),(int)1 )] = _4539;
                }
              }
              {}
              ++ _4540;
            }
          }
          _ptr__4536[safe_add( safe_add( _4531,_4541 ),(int)1 )] = _4540;
        }
      }
    }
  }
  else
  {
    {
      int _4544 = (int)1;
      int _4545 = (int)((_4523)->size(0));
      int _4546 = (int)0;
      int _4547 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _4548 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__4548(_4548 ? _4548->raw() : nullptr,_4548 ? _4548->size(0) : 0);
      int _4549 = _4506->alloci32((int)((_4548)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _4550 = mosek::fusion::p_WorkStack::_get_impl(_4506)->i32;
      _checked_ptr_1<int> _ptr__4550(_4550 ? _4550->raw() : nullptr,_4550 ? _4550->size(0) : 0);
      int _10701 = (int)0;
      int _10702 = (int)((_4548)->size(0));
      for (int _4551 = _10701; _4551 < _10702; ++_4551)
      {
        {
          int _4552 = _4509;
          int _4553 = (int)0;
          while ( (_4553 < (_4552 - (int)1)) )
          {
            {
              int _4554 = (safe_add( safe_add( _4552,_4553 ),(int)1 ) / (int)2);
              if ((_ptr__4521[safe_add( _4514,_4554 )] >= _ptr__4548[_4551]))
              {
                {
                  _4552 = _4554;
                }
              }
              else
              {
                {
                  _4553 = _4554;
                }
              }
            }
          }
          ++ _4553;
          if (((_4553 < _4509) && (_ptr__4521[safe_add( _4514,_4553 )] == _ptr__4548[_4551])))
          {
            {
              _ptr__4550[safe_add( _4549,_4551 )] = _4553;
              _4546 += (_ptr__4520[safe_add( safe_add( _4513,_4553 ),(int)1 )] - _ptr__4520[safe_add( _4513,_4553 )]);
              if ((_4511 > (int)0))
              {
                {
                  _4547 += (_ptr__4520[safe_add( _4518,_ptr__4520[safe_add( safe_add( _4513,_ptr__4548[_4551] ),(int)1 )] )] - _ptr__4520[safe_add( _4518,_ptr__4520[safe_add( _4513,_ptr__4548[_4551] )] )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _ptr__4550[safe_add( _4549,_4551 )] = (-(int)1);
            }
          }
        }
      }
      _4504->alloc_expr(_4544,_4545,_4546,false,_4547);
      int _4555 = mosek::fusion::p_WorkStack::_get_impl(_4504)->ptr_base;
      int _4556 = mosek::fusion::p_WorkStack::_get_impl(_4504)->nidxs_base;
      int _4557 = mosek::fusion::p_WorkStack::_get_impl(_4504)->cof_base;
      int _4558 = mosek::fusion::p_WorkStack::_get_impl(_4504)->shape_base;
      int _4559 = mosek::fusion::p_WorkStack::_get_impl(_4504)->code_base;
      int _4560 = mosek::fusion::p_WorkStack::_get_impl(_4504)->codeptr_base;
      int _4561 = mosek::fusion::p_WorkStack::_get_impl(_4504)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4562 = mosek::fusion::p_WorkStack::_get_impl(_4504)->i32;
      _checked_ptr_1<int> _ptr__4562(_4562 ? _4562->raw() : nullptr,_4562 ? _4562->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4563 = mosek::fusion::p_WorkStack::_get_impl(_4504)->i64;
      _checked_ptr_1<long long> _ptr__4563(_4563 ? _4563->raw() : nullptr,_4563 ? _4563->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4564 = mosek::fusion::p_WorkStack::_get_impl(_4504)->f64;
      _checked_ptr_1<double> _ptr__4564(_4564 ? _4564->raw() : nullptr,_4564 ? _4564->size(0) : 0);
      _ptr__4562[_4558] = (int)((_4548)->size(0));
      _ptr__4562[_4555] = (int)0;
      int _4565 = (int)0;
      int _4566 = (int)0;
      int _10703 = (int)0;
      int _10704 = (int)((_4548)->size(0));
      for (int _4567 = _10703; _4567 < _10704; ++_4567)
      {
        {
          if ((_ptr__4550[safe_add( _4549,_4567 )] >= (int)0))
          {
            {
              int _4568 = _ptr__4550[safe_add( _4549,_4567 )];
              int _10705 = _ptr__4520[safe_add( _4513,_4568 )];
              int _10706 = _ptr__4520[safe_add( safe_add( _4513,_4568 ),(int)1 )];
              for (int _4569 = _10705; _4569 < _10706; ++_4569)
              {
                {
                  _ptr__4563[safe_add( _4556,_4566 )] = _ptr__4521[safe_add( _4515,_4569 )];
                  _ptr__4564[safe_add( _4557,_4566 )] = _ptr__4522[safe_add( _4516,_4569 )];
                  if ((_4511 > (int)0))
                  {
                    {
                      int _10707 = _ptr__4520[safe_add( _4518,_4569 )];
                      int _10708 = _ptr__4520[safe_add( safe_add( _4518,_4569 ),(int)1 )];
                      for (int _4570 = _10707; _4570 < _10708; ++_4570)
                      {
                        {
                          _ptr__4562[safe_add( _4559,_4565 )] = _ptr__4520[safe_add( _4517,_4570 )];
                          _ptr__4564[safe_add( _4561,_4565 )] = _ptr__4522[safe_add( _4519,_4570 )];
                          ++ _4565;
                        }
                      }
                      _ptr__4562[safe_add( safe_add( _4560,_4566 ),(int)1 )] = _4565;
                    }
                  }
                  {}
                  ++ _4566;
                }
              }
            }
          }
          {}
          _ptr__4562[safe_add( safe_add( _4555,_4567 ),(int)1 )] = _4566;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4571,    std::shared_ptr< monty::ndarray< int,1 > > _4572,    std::shared_ptr< monty::ndarray< int,1 > > _4573){ return new mosek::fusion::ExprSlice(_4571,_4572,_4573); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4571,    std::shared_ptr< monty::ndarray< int,1 > > _4572,    std::shared_ptr< monty::ndarray< int,1 > > _4573) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_4571,_4572,_4573); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4571,    std::shared_ptr< monty::ndarray< int,1 > > _4572,    std::shared_ptr< monty::ndarray< int,1 > > _4573){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4572(_4572 ? _4572->raw() : nullptr, _4572 ? _4572->size(0) : 0);
    _checked_ptr_1<int> _ptr__4573(_4573 ? _4573->raw() : nullptr, _4573 ? _4573->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_4571->getShape(),_4572,_4573));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _4571;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _4572;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _4573;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4574,monty::rc_ptr< ::mosek::fusion::WorkStack > _4575,monty::rc_ptr< ::mosek::fusion::WorkStack > _4576) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_4574,_4575,_4576); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4574,monty::rc_ptr< ::mosek::fusion::WorkStack > _4575,monty::rc_ptr< ::mosek::fusion::WorkStack > _4576){
  expr->eval(_4575,_4574,_4576);
  _4575->pop_expr();
  int _4577 = mosek::fusion::p_WorkStack::_get_impl(_4575)->nd;
  int _4578 = mosek::fusion::p_WorkStack::_get_impl(_4575)->nelem;
  int _4579 = mosek::fusion::p_WorkStack::_get_impl(_4575)->nnz;
  int _4580 = mosek::fusion::p_WorkStack::_get_impl(_4575)->ncodeatom;
  bool _4581 = mosek::fusion::p_WorkStack::_get_impl(_4575)->hassp;
  int _4582 = mosek::fusion::p_WorkStack::_get_impl(_4575)->shape_base;
  int _4583 = mosek::fusion::p_WorkStack::_get_impl(_4575)->ptr_base;
  int _4584 = mosek::fusion::p_WorkStack::_get_impl(_4575)->sp_base;
  int _4585 = mosek::fusion::p_WorkStack::_get_impl(_4575)->nidxs_base;
  int _4586 = mosek::fusion::p_WorkStack::_get_impl(_4575)->cof_base;
  int _4587 = mosek::fusion::p_WorkStack::_get_impl(_4575)->code_base;
  int _4588 = mosek::fusion::p_WorkStack::_get_impl(_4575)->codeptr_base;
  int _4589 = mosek::fusion::p_WorkStack::_get_impl(_4575)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4590 = mosek::fusion::p_WorkStack::_get_impl(_4575)->i32;
  _checked_ptr_1<int> _ptr__4590(_4590 ? _4590->raw() : nullptr,_4590 ? _4590->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4591 = mosek::fusion::p_WorkStack::_get_impl(_4575)->i64;
  _checked_ptr_1<long long> _ptr__4591(_4591 ? _4591->raw() : nullptr,_4591 ? _4591->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4592 = mosek::fusion::p_WorkStack::_get_impl(_4575)->f64;
  _checked_ptr_1<double> _ptr__4592(_4592 ? _4592->raw() : nullptr,_4592 ? _4592->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4593 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4577)));
  _checked_ptr_1<long long> _ptr__4593(_4593 ? _4593->raw() : nullptr,_4593 ? _4593->size(0) : 0);
  _ptr__4593[(_4577 - (int)1)] = (int)1;
  int _10709 = (int)1;
  int _10710 = _4577;
  for (int _4594 = _10709; _4594 < _10710; ++_4594)
  {
    {
      _ptr__4593[((_4577 - _4594) - (int)1)] = safe_mul( _ptr__4593[(_4577 - _4594)],_ptr__4590[(safe_add( _4582,_4577 ) - _4594)] );
    }
  }
  int _4595 = (int)0;
  int _4596 = (int)0;
  int _4597 = (int)0;
  if (_4581)
  {
    {
      int _10711 = (int)0;
      int _10712 = _4578;
      for (int _4598 = _10711; _4598 < _10712; ++_4598)
      {
        {
          bool _4599 = true;
          int _10713 = (int)0;
          int _10714 = _4577;
          for (int _4600 = _10713; _4600 < _10714; ++_4600)
          {
            {
              long long _4601 = ((_ptr__4591[safe_add( _4584,_4598 )] / _ptr__4593[_4600]) % _ptr__4590[safe_add( _4582,_4600 )]);
              _4599 = (_4599 && ((_4601 >= ((*first)(_4600))) && (_4601 < ((*last)(_4600)))));
            }
          }
          if (_4599)
          {
            {
              _4597 += (_ptr__4590[safe_add( safe_add( _4583,_4598 ),(int)1 )] - _ptr__4590[safe_add( _4583,_4598 )]);
              if ((_4580 > (int)0))
              {
                {
                  _4595 += (_ptr__4590[safe_add( _4588,_ptr__4590[safe_add( safe_add( _4583,_4598 ),(int)1 )] )] - _ptr__4590[safe_add( _4588,_ptr__4590[safe_add( _4583,_4598 )] )]);
                }
              }
              {}
              ++ _4596;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _4596 = (int)1;
      int _10715 = (int)0;
      int _10716 = _4577;
      for (int _4602 = _10715; _4602 < _10716; ++_4602)
      {
        {
          _4596 *= (((*last)(_4602)) - ((*first)(_4602)));
        }
      }
      int _10717 = (int)0;
      int _10718 = _4578;
      for (int _4603 = _10717; _4603 < _10718; ++_4603)
      {
        {
          bool _4604 = true;
          int _10719 = (int)0;
          int _10720 = _4577;
          for (int _4605 = _10719; _4605 < _10720; ++_4605)
          {
            {
              long long _4606 = ((_4603 / _ptr__4593[_4605]) % _ptr__4590[safe_add( _4582,_4605 )]);
              _4604 = (_4604 && ((_4606 >= ((*first)(_4605))) && (_4606 < ((*last)(_4605)))));
            }
          }
          if (_4604)
          {
            {
              _4597 += (_ptr__4590[safe_add( safe_add( _4583,_4603 ),(int)1 )] - _ptr__4590[safe_add( _4583,_4603 )]);
              if ((_4580 > (int)0))
              {
                {
                  _4595 += (_ptr__4590[safe_add( _4588,_ptr__4590[safe_add( safe_add( _4583,_4603 ),(int)1 )] )] - _ptr__4590[safe_add( _4588,_ptr__4590[safe_add( _4583,_4603 )] )]);
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _10721;
  for (int _4608 = (int)0, _10722 = _4577; _4608 < _10722 ; ++_4608)
  {
    _10721.push_back((((*last)(_4608)) - ((*first)(_4608))));
  }
  auto _10723 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10721.size()),_10721.begin(),_10721.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4607 = _10723;
  _checked_ptr_1<int> _ptr__4607(_4607 ? _4607->raw() : nullptr,_4607 ? _4607->size(0) : 0);
  bool _4609 = (_4596 < ::mosek::fusion::p_Set::size(_4607));
  _4574->alloc_expr(_4577,_4596,_4597,_4609,_4595);
  int _4610 = mosek::fusion::p_WorkStack::_get_impl(_4574)->shape_base;
  int _4611 = mosek::fusion::p_WorkStack::_get_impl(_4574)->cof_base;
  int _4612 = mosek::fusion::p_WorkStack::_get_impl(_4574)->nidxs_base;
  int _10724;
  bool _10725 = _4609;
  if (_10725)
  {
    _10724 = mosek::fusion::p_WorkStack::_get_impl(_4574)->sp_base;
  }
  else
  {
    _10724 = _4574->alloci64(_4596);
  }
  int _4613 = _10724;
  int _4614 = mosek::fusion::p_WorkStack::_get_impl(_4574)->ptr_base;
  int _4615 = mosek::fusion::p_WorkStack::_get_impl(_4574)->code_base;
  int _4616 = mosek::fusion::p_WorkStack::_get_impl(_4574)->codeptr_base;
  int _4617 = mosek::fusion::p_WorkStack::_get_impl(_4574)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4618 = mosek::fusion::p_WorkStack::_get_impl(_4574)->i32;
  _checked_ptr_1<int> _ptr__4618(_4618 ? _4618->raw() : nullptr,_4618 ? _4618->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4619 = mosek::fusion::p_WorkStack::_get_impl(_4574)->i64;
  _checked_ptr_1<long long> _ptr__4619(_4619 ? _4619->raw() : nullptr,_4619 ? _4619->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4620 = mosek::fusion::p_WorkStack::_get_impl(_4574)->f64;
  _checked_ptr_1<double> _ptr__4620(_4620 ? _4620->raw() : nullptr,_4620 ? _4620->size(0) : 0);
  int _10726 = (int)0;
  int _10727 = _4577;
  for (int _4621 = _10726; _4621 < _10727; ++_4621)
  {
    {
      _ptr__4618[safe_add( _4610,_4621 )] = _ptr__4607[_4621];
    }
  }
  _ptr__4618[_4614] = (int)0;
  if ((_4580 > (int)0))
  {
    {
      _ptr__4618[_4616] = (int)0;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _4622 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4577)));
  _checked_ptr_1<long long> _ptr__4622(_4622 ? _4622->raw() : nullptr,_4622 ? _4622->size(0) : 0);
  _ptr__4622[(_4577 - (int)1)] = (int)1;
  int _10728 = (int)1;
  int _10729 = _4577;
  for (int _4623 = _10728; _4623 < _10729; ++_4623)
  {
    {
      _ptr__4622[((_4577 - _4623) - (int)1)] = safe_mul( _ptr__4622[(_4577 - _4623)],_ptr__4607[(_4577 - _4623)] );
    }
  }
  int _4624 = (int)0;
  int _4625 = (int)0;
  int _4626 = (int)0;
  if (_4581)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _4627 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4577)));
      _checked_ptr_1<int> _ptr__4627(_4627 ? _4627->raw() : nullptr,_4627 ? _4627->size(0) : 0);
      int _10730 = (int)0;
      int _10731 = _4578;
      for (int _4628 = _10730; _4628 < _10731; ++_4628)
      {
        {
          bool _4629 = true;
          int _10732 = (int)0;
          int _10733 = _4577;
          for (int _4630 = _10732; _4630 < _10733; ++_4630)
          {
            {
              _ptr__4627[_4630] = (int)((_ptr__4591[safe_add( _4584,_4628 )] / _ptr__4593[_4630]) % _ptr__4590[safe_add( _4582,_4630 )]);
              _4629 = (_4629 && ((_ptr__4627[_4630] >= ((*first)(_4630))) && (_ptr__4627[_4630] < ((*last)(_4630)))));
            }
          }
          if (_4629)
          {
            {
              int _10734 = _ptr__4590[safe_add( _4583,_4628 )];
              int _10735 = _ptr__4590[safe_add( safe_add( _4583,_4628 ),(int)1 )];
              for (int _4631 = _10734; _4631 < _10735; ++_4631)
              {
                {
                  _ptr__4619[safe_add( _4612,_4626 )] = _ptr__4591[safe_add( _4585,_4631 )];
                  _ptr__4620[safe_add( _4611,_4626 )] = _ptr__4592[safe_add( _4586,_4631 )];
                  if ((_4580 > (int)0))
                  {
                    {
                      int _10736 = _ptr__4590[safe_add( _4588,_4631 )];
                      int _10737 = _ptr__4590[safe_add( safe_add( _4588,_4631 ),(int)1 )];
                      for (int _4632 = _10736; _4632 < _10737; ++_4632)
                      {
                        {
                          _ptr__4618[safe_add( _4615,_4624 )] = _ptr__4590[safe_add( _4587,_4632 )];
                          _ptr__4620[safe_add( _4617,_4624 )] = _ptr__4592[safe_add( _4589,_4632 )];
                          ++ _4624;
                        }
                      }
                      _ptr__4618[safe_add( safe_add( _4616,_4626 ),(int)1 )] = _4624;
                    }
                  }
                  {}
                  ++ _4626;
                }
              }
              long long _4633 = (long long)0;
              int _10738 = (int)0;
              int _10739 = _4577;
              for (int _4634 = _10738; _4634 < _10739; ++_4634)
              {
                {
                  _4633 += safe_mul( _ptr__4622[_4634],(_ptr__4627[_4634] - ((*first)(_4634))) );
                }
              }
              _ptr__4619[safe_add( _4613,_4625 )] = _4633;
              _ptr__4618[safe_add( safe_add( _4614,_4625 ),(int)1 )] = _4626;
              ++ _4625;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _10740 = (int)0;
      int _10741 = _4578;
      for (int _4635 = _10740; _4635 < _10741; ++_4635)
      {
        {
          bool _4636 = true;
          int _10742 = (int)0;
          int _10743 = _4577;
          for (int _4637 = _10742; _4637 < _10743; ++_4637)
          {
            {
              long long _4638 = ((_4635 / _ptr__4593[_4637]) % _ptr__4590[safe_add( _4582,_4637 )]);
              _4636 = (_4636 && ((_4638 >= ((*first)(_4637))) && (_4638 < ((*last)(_4637)))));
            }
          }
          if (_4636)
          {
            {
              int _10744 = _ptr__4590[safe_add( _4583,_4635 )];
              int _10745 = _ptr__4590[safe_add( safe_add( _4583,_4635 ),(int)1 )];
              for (int _4639 = _10744; _4639 < _10745; ++_4639)
              {
                {
                  _ptr__4619[safe_add( _4612,_4626 )] = _ptr__4591[safe_add( _4585,_4639 )];
                  _ptr__4620[safe_add( _4611,_4626 )] = _ptr__4592[safe_add( _4586,_4639 )];
                  if ((_4580 > (int)0))
                  {
                    {
                      int _10746 = _ptr__4590[safe_add( _4588,_4639 )];
                      int _10747 = _ptr__4590[safe_add( safe_add( _4588,_4639 ),(int)1 )];
                      for (int _4640 = _10746; _4640 < _10747; ++_4640)
                      {
                        {
                          _ptr__4618[safe_add( _4615,_4624 )] = _ptr__4590[safe_add( _4587,_4640 )];
                          _ptr__4620[safe_add( _4617,_4624 )] = _ptr__4592[safe_add( _4589,_4640 )];
                          ++ _4624;
                        }
                      }
                      _ptr__4618[safe_add( safe_add( _4616,_4626 ),(int)1 )] = _4624;
                    }
                  }
                  {}
                  ++ _4626;
                }
              }
              _ptr__4618[safe_add( safe_add( _4614,_4625 ),(int)1 )] = _4626;
              ++ _4625;
            }
          }
          {}
        }
      }
    }
  }
  if ((!_4609))
  {
    {
      _4574->popi64(_4596);
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _4641,std::shared_ptr< monty::ndarray< int,1 > > _4642,std::shared_ptr< monty::ndarray< int,1 > > _4643){
  _checked_ptr_1<int> _ptr__4641(_4641 ? _4641->raw() : nullptr, _4641 ? _4641->size(0) : 0);
  _checked_ptr_1<int> _ptr__4642(_4642 ? _4642->raw() : nullptr, _4642 ? _4642->size(0) : 0);
  _checked_ptr_1<int> _ptr__4643(_4643 ? _4643->raw() : nullptr, _4643 ? _4643->size(0) : 0);
  if ((((int)((_4641)->size(0)) != (int)((_4642)->size(0))) || ((int)((_4641)->size(0)) != (int)((_4643)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _10748 = (int)0;
  int _10749 = (int)((_4641)->size(0));
  for (int _4644 = _10748; _4644 < _10749; ++_4644)
  {
    {
      if (((_ptr__4642[_4644] < (int)0) || ((_ptr__4643[_4644] < _ptr__4642[_4644]) || (_ptr__4643[_4644] > _ptr__4641[_4644]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _10750;
  for (int _4645 = (int)0, _10751 = (int)((_4641)->size(0)); _4645 < _10751 ; ++_4645)
  {
    _10750.push_back((_ptr__4643[_4645] - _ptr__4642[_4645]));
  }
  auto _10752 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10750.size()),_10750.begin(),_10750.end()));
  return _10752;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4646 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _10753 = (int)1;
  int _10754 = (int)((first)->size(0));
  for (int _4647 = _10753; _4647 < _10754; ++_4647)
  {
    {
      _4646->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_4647)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_4647)));
    }
  }
  _4646->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4646->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4648,    monty::rc_ptr< ::mosek::fusion::Expression > _4649){ return new mosek::fusion::ExprPermuteDims(_4648,_4649); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4648,    monty::rc_ptr< ::mosek::fusion::Expression > _4649) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4648,_4649); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4648,    monty::rc_ptr< ::mosek::fusion::Expression > _4649){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4648(_4648 ? _4648->raw() : nullptr, _4648 ? _4648->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_4648,_4649,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4650 = _4649->getShape();
    _checked_ptr_1<int> _ptr__4650(_4650 ? _4650->raw() : nullptr,_4650 ? _4650->size(0) : 0);
    if (((int)((_4648)->size(0)) != (int)((_4650)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _10755;
    for (int _4652 = (int)0, _10756 = (int)((_4648)->size(0)); _4652 < _10756 ; ++_4652)
    {
      _10755.push_back((int)0);
    }
    auto _10757 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10755.size()),_10755.begin(),_10755.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _4651 = _10757;
    _checked_ptr_1<int> _ptr__4651(_4651 ? _4651->raw() : nullptr,_4651 ? _4651->size(0) : 0);
    int _10758 = (int)0;
    int _10759 = (int)((_4651)->size(0));
    for (int _4653 = _10758; _4653 < _10759; ++_4653)
    {
      {
        if (((_ptr__4648[_4653] < (int)0) || (_ptr__4648[_4653] > (int)((_4650)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__4651[_ptr__4648[_4653]];
      }
    }
    int _10760 = (int)0;
    int _10761 = (int)((_4651)->size(0));
    for (int _4654 = _10760; _4654 < _10761; ++_4654)
    {
      {
        if (((_ptr__4651[_4654] < (int)1) || (_ptr__4651[_4654] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4655,    monty::rc_ptr< ::mosek::fusion::Expression > _4656,    int _4657){ return new mosek::fusion::ExprPermuteDims(_4655,_4656,_4657); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4655,    monty::rc_ptr< ::mosek::fusion::Expression > _4656,    int _4657) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4655,_4656,_4657); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4655,    monty::rc_ptr< ::mosek::fusion::Expression > _4656,    int _4657){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4655(_4655 ? _4655->raw() : nullptr, _4655 ? _4655->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_4655,_4656->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _4656;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_4655);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4658,monty::rc_ptr< ::mosek::fusion::WorkStack > _4659,monty::rc_ptr< ::mosek::fusion::WorkStack > _4660) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_4658,_4659,_4660); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4658,monty::rc_ptr< ::mosek::fusion::WorkStack > _4659,monty::rc_ptr< ::mosek::fusion::WorkStack > _4660){
  expr->eval(_4659,_4658,_4660);
  _4659->pop_expr();
  int _4661 = mosek::fusion::p_WorkStack::_get_impl(_4659)->nd;
  int _4662 = mosek::fusion::p_WorkStack::_get_impl(_4659)->nelem;
  int _4663 = mosek::fusion::p_WorkStack::_get_impl(_4659)->nnz;
  int _4664 = mosek::fusion::p_WorkStack::_get_impl(_4659)->ncodeatom;
  bool _4665 = mosek::fusion::p_WorkStack::_get_impl(_4659)->hassp;
  int _4666 = mosek::fusion::p_WorkStack::_get_impl(_4659)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _4667 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4661)));
  _checked_ptr_1<long long> _ptr__4667(_4667 ? _4667->raw() : nullptr,_4667 ? _4667->size(0) : 0);
  _ptr__4667[(_4661 - (int)1)] = (int)1;
  int _10762 = (int)1;
  int _10763 = _4661;
  for (int _4668 = _10762; _4668 < _10763; ++_4668)
  {
    {
      _ptr__4667[((_4661 - _4668) - (int)1)] = safe_mul( _ptr__4667[(_4661 - _4668)],((*mosek::fusion::p_WorkStack::_get_impl(_4659)->i32)((safe_add( _4666,_4661 ) - _4668))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4669 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4661)));
  _checked_ptr_1<int> _ptr__4669(_4669 ? _4669->raw() : nullptr,_4669 ? _4669->size(0) : 0);
  _ptr__4669[(_4661 - (int)1)] = (int)1;
  int _10764 = (int)1;
  int _10765 = _4661;
  for (int _4670 = _10764; _4670 < _10765; ++_4670)
  {
    {
      _ptr__4669[((_4661 - _4670) - (int)1)] = safe_mul( _ptr__4669[(_4661 - _4670)],((*mosek::fusion::p_WorkStack::_get_impl(_4659)->i32)(safe_add( _4666,((*dperm)((_4661 - _4670))) ))) );
    }
  }
  int _4671 = mosek::fusion::p_WorkStack::_get_impl(_4659)->ptr_base;
  int _4672 = mosek::fusion::p_WorkStack::_get_impl(_4659)->sp_base;
  int _4673 = mosek::fusion::p_WorkStack::_get_impl(_4659)->nidxs_base;
  int _4674 = mosek::fusion::p_WorkStack::_get_impl(_4659)->cof_base;
  int _4675 = mosek::fusion::p_WorkStack::_get_impl(_4659)->code_base;
  int _4676 = mosek::fusion::p_WorkStack::_get_impl(_4659)->codeptr_base;
  int _4677 = mosek::fusion::p_WorkStack::_get_impl(_4659)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4678 = mosek::fusion::p_WorkStack::_get_impl(_4659)->i32;
  _checked_ptr_1<int> _ptr__4678(_4678 ? _4678->raw() : nullptr,_4678 ? _4678->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4679 = mosek::fusion::p_WorkStack::_get_impl(_4659)->i64;
  _checked_ptr_1<long long> _ptr__4679(_4679 ? _4679->raw() : nullptr,_4679 ? _4679->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4680 = mosek::fusion::p_WorkStack::_get_impl(_4659)->f64;
  _checked_ptr_1<double> _ptr__4680(_4680 ? _4680->raw() : nullptr,_4680 ? _4680->size(0) : 0);
  _4658->alloc_expr(_4661,_4662,_4663,_4665,_4664);
  int _4681 = mosek::fusion::p_WorkStack::_get_impl(_4658)->ptr_base;
  int _4682 = mosek::fusion::p_WorkStack::_get_impl(_4658)->shape_base;
  int _4683 = mosek::fusion::p_WorkStack::_get_impl(_4658)->nidxs_base;
  int _4684 = mosek::fusion::p_WorkStack::_get_impl(_4658)->sp_base;
  int _4685 = mosek::fusion::p_WorkStack::_get_impl(_4658)->cof_base;
  int _4686 = mosek::fusion::p_WorkStack::_get_impl(_4658)->code_base;
  int _4687 = mosek::fusion::p_WorkStack::_get_impl(_4658)->codeptr_base;
  int _4688 = mosek::fusion::p_WorkStack::_get_impl(_4658)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4689 = mosek::fusion::p_WorkStack::_get_impl(_4658)->i32;
  _checked_ptr_1<int> _ptr__4689(_4689 ? _4689->raw() : nullptr,_4689 ? _4689->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4690 = mosek::fusion::p_WorkStack::_get_impl(_4658)->i64;
  _checked_ptr_1<long long> _ptr__4690(_4690 ? _4690->raw() : nullptr,_4690 ? _4690->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4691 = mosek::fusion::p_WorkStack::_get_impl(_4658)->f64;
  _checked_ptr_1<double> _ptr__4691(_4691 ? _4691->raw() : nullptr,_4691 ? _4691->size(0) : 0);
  int _10766 = (int)0;
  int _10767 = _4661;
  for (int _4692 = _10766; _4692 < _10767; ++_4692)
  {
    {
      _ptr__4689[safe_add( _4682,_4692 )] = _ptr__4678[safe_add( _4666,((*dperm)(_4692)) )];
    }
  }
  if (_4665)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4693 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4662)));
      _checked_ptr_1<long long> _ptr__4693(_4693 ? _4693->raw() : nullptr,_4693 ? _4693->size(0) : 0);
      {
        int _10768 = (int)0;
        int _10769 = _4662;
        for (int _4694 = _10768; _4694 < _10769; ++_4694)
        {
          {
            long long _4695 = (long long)0;
            int _10770 = (int)0;
            int _10771 = _4661;
            for (int _4696 = _10770; _4696 < _10771; ++_4696)
            {
              {
                _4695 += safe_mul( ((_ptr__4679[safe_add( _4672,_4694 )] / _ptr__4667[_4696]) % _ptr__4678[safe_add( _4666,_4696 )]),_ptr__4669[((*dperm)(_4696))] );
              }
            }
            _ptr__4693[_4694] = _4695;
          }
        }
      }
      std::vector<long long> _10772;
      for (int _4698 = (int)0, _10773 = _4662; _4698 < _10773 ; ++_4698)
      {
        _10772.push_back(_4698);
      }
      auto _10774 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10772.size()),_10772.begin(),_10772.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _4697 = _10774;
      _checked_ptr_1<long long> _ptr__4697(_4697 ? _4697->raw() : nullptr,_4697 ? _4697->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_4697,_4693,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_4662));
      _ptr__4689[_4681] = (int)0;
      if ((_4664 > (int)0))
      {
        {
          _ptr__4689[_4687] = (int)0;
        }
      }
      {}
      int _4699 = (int)0;
      int _4700 = (int)0;
      int _4701 = (int)0;
      int _10775 = (int)0;
      int _10776 = _4662;
      for (int _4702 = _10775; _4702 < _10776; ++_4702)
      {
        {
          long long _4703 = _ptr__4697[_4702];
          int _10777 = _ptr__4678[safe_add( _4671,_4703 )];
          int _10778 = _ptr__4678[safe_add( safe_add( _4671,_4703 ),(int)1 )];
          for (int _4704 = _10777; _4704 < _10778; ++_4704)
          {
            {
              _ptr__4690[safe_add( _4683,_4701 )] = _ptr__4679[safe_add( _4673,_4704 )];
              _ptr__4691[safe_add( _4685,_4701 )] = _ptr__4680[safe_add( _4674,_4704 )];
              if ((_4664 > (int)0))
              {
                {
                  int _10779 = _ptr__4678[safe_add( _4676,_4704 )];
                  int _10780 = _ptr__4678[safe_add( safe_add( _4676,_4704 ),(int)1 )];
                  for (int _4705 = _10779; _4705 < _10780; ++_4705)
                  {
                    {
                      _ptr__4689[safe_add( _4686,_4699 )] = _ptr__4678[safe_add( _4675,_4705 )];
                      _ptr__4691[safe_add( _4688,_4699 )] = _ptr__4680[safe_add( _4677,_4705 )];
                      ++ _4699;
                    }
                  }
                  _ptr__4689[safe_add( safe_add( _4687,_4701 ),(int)1 )] = _4699;
                }
              }
              {}
              ++ _4701;
            }
          }
          _ptr__4690[safe_add( _4684,_4702 )] = _ptr__4693[_4703];
          ++ _4700;
          _ptr__4689[safe_add( safe_add( _4681,_4702 ),(int)1 )] = _4701;
        }
      }
    }
  }
  else
  {
    {
      _ptr__4689[_4681] = (int)0;
      if ((_4664 > (int)0))
      {
        {
          _ptr__4689[_4687] = (int)0;
        }
      }
      {}
      int _4706 = (int)0;
      int _4707 = (int)0;
      int _4708 = (int)0;
      int _10781 = (int)0;
      int _10782 = _4662;
      for (int _4709 = _10781; _4709 < _10782; ++_4709)
      {
        {
          long long _4710 = (long long)0;
          int _10783 = (int)0;
          int _10784 = _4661;
          for (int _4711 = _10783; _4711 < _10784; ++_4711)
          {
            {
              _4710 += safe_mul( ((_4709 / _ptr__4667[((*dperm)(_4711))]) % _ptr__4678[safe_add( _4666,((*dperm)(_4711)) )]),_ptr__4669[_4711] );
            }
          }
          int _10785 = _ptr__4678[safe_add( _4671,_4710 )];
          int _10786 = _ptr__4678[safe_add( safe_add( _4671,_4710 ),(int)1 )];
          for (int _4712 = _10785; _4712 < _10786; ++_4712)
          {
            {
              _ptr__4690[safe_add( _4683,_4708 )] = _ptr__4679[safe_add( _4673,_4712 )];
              _ptr__4691[safe_add( _4685,_4708 )] = _ptr__4680[safe_add( _4674,_4712 )];
              if ((_4664 > (int)0))
              {
                {
                  int _10787 = _ptr__4678[safe_add( _4676,_4712 )];
                  int _10788 = _ptr__4678[safe_add( safe_add( _4676,_4712 ),(int)1 )];
                  for (int _4713 = _10787; _4713 < _10788; ++_4713)
                  {
                    {
                      _ptr__4689[safe_add( _4686,_4706 )] = _ptr__4678[safe_add( _4675,_4713 )];
                      _ptr__4691[safe_add( _4688,_4706 )] = _ptr__4680[safe_add( _4677,_4713 )];
                      ++ _4706;
                    }
                  }
                  _ptr__4689[safe_add( safe_add( _4687,_4708 ),(int)1 )] = _4706;
                }
              }
              {}
              ++ _4708;
            }
          }
          ++ _4707;
          _ptr__4689[safe_add( _4681,_4707 )] = _4708;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _4714,std::shared_ptr< monty::ndarray< int,1 > > _4715){
  _checked_ptr_1<int> _ptr__4714(_4714 ? _4714->raw() : nullptr, _4714 ? _4714->size(0) : 0);
  _checked_ptr_1<int> _ptr__4715(_4715 ? _4715->raw() : nullptr, _4715 ? _4715->size(0) : 0);
  std::vector<int> _10789;
  for (int _4716 = (int)0, _10790 = (int)((_4714)->size(0)); _4716 < _10790 ; ++_4716)
  {
    _10789.push_back(_ptr__4715[_ptr__4714[_4716]]);
  }
  auto _10791 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10789.size()),_10789.begin(),_10789.end()));
  return _10791;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4717){ return new mosek::fusion::ExprTranspose(_4717); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4717) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_4717); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4717){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_4717->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _4717;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4718,monty::rc_ptr< ::mosek::fusion::WorkStack > _4719,monty::rc_ptr< ::mosek::fusion::WorkStack > _4720) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_4718,_4719,_4720); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4718,monty::rc_ptr< ::mosek::fusion::WorkStack > _4719,monty::rc_ptr< ::mosek::fusion::WorkStack > _4720){
  expr->eval(_4719,_4718,_4720);
  _4719->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_4719)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _4721 = mosek::fusion::p_WorkStack::_get_impl(_4719)->shape_base;
      int _4722 = mosek::fusion::p_WorkStack::_get_impl(_4719)->nelem;
      int _4723 = mosek::fusion::p_WorkStack::_get_impl(_4719)->nnz;
      bool _4724 = mosek::fusion::p_WorkStack::_get_impl(_4719)->hassp;
      int _4725 = mosek::fusion::p_WorkStack::_get_impl(_4719)->ncodeatom;
      int _4726 = mosek::fusion::p_WorkStack::_get_impl(_4719)->ptr_base;
      int _4727 = mosek::fusion::p_WorkStack::_get_impl(_4719)->sp_base;
      int _4728 = mosek::fusion::p_WorkStack::_get_impl(_4719)->nidxs_base;
      int _4729 = mosek::fusion::p_WorkStack::_get_impl(_4719)->cof_base;
      int _4730 = mosek::fusion::p_WorkStack::_get_impl(_4719)->code_base;
      int _4731 = mosek::fusion::p_WorkStack::_get_impl(_4719)->codeptr_base;
      int _4732 = mosek::fusion::p_WorkStack::_get_impl(_4719)->cconst_base;
      int _4733 = ((*mosek::fusion::p_WorkStack::_get_impl(_4719)->i32)(_4721));
      int _4734 = ((*mosek::fusion::p_WorkStack::_get_impl(_4719)->i32)(safe_add( _4721,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _4735 = mosek::fusion::p_WorkStack::_get_impl(_4719)->i32;
      _checked_ptr_1<int> _ptr__4735(_4735 ? _4735->raw() : nullptr,_4735 ? _4735->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4736 = mosek::fusion::p_WorkStack::_get_impl(_4719)->i64;
      _checked_ptr_1<long long> _ptr__4736(_4736 ? _4736->raw() : nullptr,_4736 ? _4736->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4737 = mosek::fusion::p_WorkStack::_get_impl(_4719)->f64;
      _checked_ptr_1<double> _ptr__4737(_4737 ? _4737->raw() : nullptr,_4737 ? _4737->size(0) : 0);
      _4718->alloc_expr((int)2,_4722,_4723,_4724,_4725);
      int _4738 = mosek::fusion::p_WorkStack::_get_impl(_4718)->ptr_base;
      int _4739 = mosek::fusion::p_WorkStack::_get_impl(_4718)->nidxs_base;
      int _4740 = mosek::fusion::p_WorkStack::_get_impl(_4718)->sp_base;
      int _4741 = mosek::fusion::p_WorkStack::_get_impl(_4718)->cof_base;
      int _4742 = mosek::fusion::p_WorkStack::_get_impl(_4718)->shape_base;
      int _4743 = mosek::fusion::p_WorkStack::_get_impl(_4718)->code_base;
      int _4744 = mosek::fusion::p_WorkStack::_get_impl(_4718)->codeptr_base;
      int _4745 = mosek::fusion::p_WorkStack::_get_impl(_4718)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4746 = mosek::fusion::p_WorkStack::_get_impl(_4718)->i32;
      _checked_ptr_1<int> _ptr__4746(_4746 ? _4746->raw() : nullptr,_4746 ? _4746->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4747 = mosek::fusion::p_WorkStack::_get_impl(_4718)->i64;
      _checked_ptr_1<long long> _ptr__4747(_4747 ? _4747->raw() : nullptr,_4747 ? _4747->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4748 = mosek::fusion::p_WorkStack::_get_impl(_4718)->f64;
      _checked_ptr_1<double> _ptr__4748(_4748 ? _4748->raw() : nullptr,_4748 ? _4748->size(0) : 0);
      _ptr__4746[_4742] = _4734;
      _ptr__4746[safe_add( _4742,(int)1 )] = _4733;
      _ptr__4746[_4738] = (int)0;
      if ((_4725 > (int)0))
      {
        {
          _ptr__4746[_4744] = (int)0;
        }
      }
      {}
      if (_4724)
      {
        {
          int _4749 = _4720->alloci32(_4722);
          int _4750 = _4720->alloci32(safe_add( _4734,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _4751 = mosek::fusion::p_WorkStack::_get_impl(_4720)->i32;
          _checked_ptr_1<int> _ptr__4751(_4751 ? _4751->raw() : nullptr,_4751 ? _4751->size(0) : 0);
          {
            int _10792 = (int)0;
            int _10793 = safe_add( _4734,(int)1 );
            for (int _4752 = _10792; _4752 < _10793; ++_4752)
            {
              {
                _ptr__4751[safe_add( _4750,_4752 )] = (int)0;
              }
            }
            int _10794 = (int)0;
            int _10795 = _4722;
            for (int _4753 = _10794; _4753 < _10795; ++_4753)
            {
              {
                ++ _ptr__4751[safe_add( safe_add( _4750,(_ptr__4736[safe_add( _4727,_4753 )] % _4734) ),(int)1 )];
              }
            }
            int _10796 = (int)0;
            int _10797 = _4734;
            for (int _4754 = _10796; _4754 < _10797; ++_4754)
            {
              {
                _ptr__4751[safe_add( safe_add( _4750,_4754 ),(int)1 )] += _ptr__4751[safe_add( _4750,_4754 )];
              }
            }
            int _10798 = (int)0;
            int _10799 = _4722;
            for (int _4755 = _10798; _4755 < _10799; ++_4755)
            {
              {
                long long _4756 = (_ptr__4736[safe_add( _4727,_4755 )] % _4734);
                _ptr__4751[safe_add( _4749,_ptr__4751[safe_add( _4750,_4756 )] )] = _4755;
                ++ _ptr__4751[safe_add( _4750,_4756 )];
              }
            }
            _ptr__4746[_4738] = (int)0;
            int _4757 = (int)0;
            int _4758 = (int)0;
            int _10800 = (int)0;
            int _10801 = _4722;
            for (int _4759 = _10800; _4759 < _10801; ++_4759)
            {
              {
                int _4760 = _ptr__4751[safe_add( _4749,_4759 )];
                int _10802 = _ptr__4735[safe_add( _4726,_4760 )];
                int _10803 = _ptr__4735[safe_add( safe_add( _4726,_4760 ),(int)1 )];
                for (int _4761 = _10802; _4761 < _10803; ++_4761)
                {
                  {
                    _ptr__4747[safe_add( _4739,_4758 )] = _ptr__4736[safe_add( _4728,_4761 )];
                    _ptr__4748[safe_add( _4741,_4758 )] = _ptr__4737[safe_add( _4729,_4761 )];
                    if ((_4725 > (int)0))
                    {
                      {
                        int _10804 = _ptr__4735[safe_add( _4731,_4761 )];
                        int _10805 = _ptr__4735[safe_add( safe_add( _4731,_4761 ),(int)1 )];
                        for (int _4762 = _10804; _4762 < _10805; ++_4762)
                        {
                          {
                            _ptr__4746[safe_add( _4743,_4757 )] = _ptr__4735[safe_add( _4730,_4762 )];
                            _ptr__4748[safe_add( _4745,_4757 )] = _ptr__4737[safe_add( _4732,_4762 )];
                            ++ _4757;
                          }
                        }
                        _ptr__4746[safe_add( safe_add( _4744,_4758 ),(int)1 )] = _4757;
                      }
                    }
                    {}
                    ++ _4758;
                  }
                }
                long long _4763 = (_ptr__4736[safe_add( _4727,_4760 )] / _4734);
                long long _4764 = (_ptr__4736[safe_add( _4727,_4760 )] % _4734);
                _ptr__4746[safe_add( safe_add( _4738,_4759 ),(int)1 )] = _4758;
                _ptr__4747[safe_add( _4740,_4759 )] = safe_add( safe_mul( _4764,_4733 ),_4763 );
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__4746[_4738] = (int)0;
          int _4765 = (int)0;
          int _4766 = (int)0;
          int _4767 = (int)0;
          int _10806 = (int)0;
          int _10807 = _4734;
          for (int _4768 = _10806; _4768 < _10807; ++_4768)
          {
            {
              int _10808 = (int)0;
              int _10809 = _4733;
              for (int _4769 = _10808; _4769 < _10809; ++_4769)
              {
                {
                  int _4770 = safe_add( safe_mul( _4769,_4734 ),_4768 );
                  int _10810 = _ptr__4735[safe_add( _4726,_4770 )];
                  int _10811 = _ptr__4735[safe_add( safe_add( _4726,_4770 ),(int)1 )];
                  for (int _4771 = _10810; _4771 < _10811; ++_4771)
                  {
                    {
                      _ptr__4747[safe_add( _4739,_4766 )] = _ptr__4736[safe_add( _4728,_4771 )];
                      _ptr__4748[safe_add( _4741,_4766 )] = _ptr__4737[safe_add( _4729,_4771 )];
                      if ((_4725 > (int)0))
                      {
                        {
                          int _10812 = _ptr__4735[safe_add( _4731,_4771 )];
                          int _10813 = _ptr__4735[safe_add( safe_add( _4731,_4771 ),(int)1 )];
                          for (int _4772 = _10812; _4772 < _10813; ++_4772)
                          {
                            {
                              _ptr__4746[safe_add( _4743,_4765 )] = _ptr__4735[safe_add( _4730,_4772 )];
                              _ptr__4748[safe_add( _4745,_4765 )] = _ptr__4737[safe_add( _4732,_4772 )];
                              ++ _4765;
                            }
                          }
                          _ptr__4746[safe_add( safe_add( _4744,_4766 ),(int)1 )] = _4765;
                        }
                      }
                      {}
                      ++ _4766;
                    }
                  }
                  _ptr__4746[safe_add( safe_add( _4738,_4767 ),(int)1 )] = _4766;
                  ++ _4767;
                }
              }
            }
          }
        }
      }
      _4720->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _4773){
  _checked_ptr_1<int> _ptr__4773(_4773 ? _4773->raw() : nullptr, _4773 ? _4773->size(0) : 0);
  if (((int)((_4773)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4773[(int)1]),(int)(_ptr__4773[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprRepeat::ExprRepeat(mosek::fusion::p_ExprRepeat *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprRepeat()" << this << std::endl; */ }mosek::fusion::ExprRepeat::~ExprRepeat() {  /* std::cout << "~ExprRepeat()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprRepeat::p_ExprRepeat  (::mosek::fusion::ExprRepeat * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprRepeat::t mosek::fusion::p_ExprRepeat::_new_ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4774,    int _4775,    int _4776){ return new mosek::fusion::ExprRepeat(_4774,_4775,_4776); }mosek::fusion::ExprRepeat::ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4774,    int _4775,    int _4776) :    ExprRepeat(new mosek::fusion::p_ExprRepeat(this)){ mosek::fusion::p_ExprRepeat::_get_impl(this)->_initialize(_4774,_4775,_4776); }void mosek::fusion::p_ExprRepeat::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4774,    int _4775,    int _4776){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprRepeat::getshape(_4774,_4775,_4776));
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->expr = _4774;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->dim = _4775;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->n = _4776;
  }
}void mosek::fusion::ExprRepeat :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4777,monty::rc_ptr< ::mosek::fusion::WorkStack > _4778,monty::rc_ptr< ::mosek::fusion::WorkStack > _4779) { mosek::fusion::p_ExprRepeat::_get_impl(this)->eval(_4777,_4778,_4779); }void mosek::fusion::p_ExprRepeat::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4777,monty::rc_ptr< ::mosek::fusion::WorkStack > _4778,monty::rc_ptr< ::mosek::fusion::WorkStack > _4779){
  expr->eval(_4778,_4777,_4779);
  _4778->pop_expr();
  int _4780 = mosek::fusion::p_WorkStack::_get_impl(_4778)->nd;
  int _4781 = mosek::fusion::p_WorkStack::_get_impl(_4778)->shape_base;
  int _4782 = mosek::fusion::p_WorkStack::_get_impl(_4778)->nelem;
  int _4783 = mosek::fusion::p_WorkStack::_get_impl(_4778)->nnz;
  int _4784 = mosek::fusion::p_WorkStack::_get_impl(_4778)->ncodeatom;
  bool _4785 = mosek::fusion::p_WorkStack::_get_impl(_4778)->hassp;
  int _4786 = mosek::fusion::p_WorkStack::_get_impl(_4778)->ptr_base;
  int _4787 = mosek::fusion::p_WorkStack::_get_impl(_4778)->sp_base;
  int _4788 = mosek::fusion::p_WorkStack::_get_impl(_4778)->nidxs_base;
  int _4789 = mosek::fusion::p_WorkStack::_get_impl(_4778)->cof_base;
  int _4790 = mosek::fusion::p_WorkStack::_get_impl(_4778)->code_base;
  int _4791 = mosek::fusion::p_WorkStack::_get_impl(_4778)->codeptr_base;
  int _4792 = mosek::fusion::p_WorkStack::_get_impl(_4778)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4793 = mosek::fusion::p_WorkStack::_get_impl(_4778)->i32;
  _checked_ptr_1<int> _ptr__4793(_4793 ? _4793->raw() : nullptr,_4793 ? _4793->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4794 = mosek::fusion::p_WorkStack::_get_impl(_4778)->i64;
  _checked_ptr_1<long long> _ptr__4794(_4794 ? _4794->raw() : nullptr,_4794 ? _4794->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4795 = mosek::fusion::p_WorkStack::_get_impl(_4778)->f64;
  _checked_ptr_1<double> _ptr__4795(_4795 ? _4795->raw() : nullptr,_4795 ? _4795->size(0) : 0);
  int _10814;
  bool _10815 = (dim < _4780);
  if (_10815)
  {
    _10814 = _4780;
  }
  else
  {
    _10814 = safe_add( _4780,(int)1 );
  }
  int _4796 = _10814;
  int _4797 = safe_mul( _4782,n );
  int _4798 = safe_mul( _4783,n );
  int _4799 = safe_mul( _4784,n );
  _4777->alloc_expr(_4796,_4797,_4798,_4785,_4799);
  std::shared_ptr< monty::ndarray< int,1 > > _4800 = mosek::fusion::p_WorkStack::_get_impl(_4777)->i32;
  _checked_ptr_1<int> _ptr__4800(_4800 ? _4800->raw() : nullptr,_4800 ? _4800->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4801 = mosek::fusion::p_WorkStack::_get_impl(_4777)->i64;
  _checked_ptr_1<long long> _ptr__4801(_4801 ? _4801->raw() : nullptr,_4801 ? _4801->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4802 = mosek::fusion::p_WorkStack::_get_impl(_4777)->f64;
  _checked_ptr_1<double> _ptr__4802(_4802 ? _4802->raw() : nullptr,_4802 ? _4802->size(0) : 0);
  int _4803 = mosek::fusion::p_WorkStack::_get_impl(_4777)->shape_base;
  int _4804 = mosek::fusion::p_WorkStack::_get_impl(_4777)->ptr_base;
  int _4805 = mosek::fusion::p_WorkStack::_get_impl(_4777)->sp_base;
  int _4806 = mosek::fusion::p_WorkStack::_get_impl(_4777)->nidxs_base;
  int _4807 = mosek::fusion::p_WorkStack::_get_impl(_4777)->cof_base;
  int _4808 = mosek::fusion::p_WorkStack::_get_impl(_4777)->code_base;
  int _4809 = mosek::fusion::p_WorkStack::_get_impl(_4777)->codeptr_base;
  int _4810 = mosek::fusion::p_WorkStack::_get_impl(_4777)->cconst_base;
  int _4811 = (int)1;
  int _10816 = (int)0;
  int _10817 = dim;
  for (int _4812 = _10816; _4812 < _10817; ++_4812)
  {
    {
      _4811 *= _ptr__4793[safe_add( _4781,_4812 )];
    }
  }
  int _10818;
  bool _10819 = (dim < _4780);
  if (_10819)
  {
    _10818 = _ptr__4793[safe_add( _4781,dim )];
  }
  else
  {
    _10818 = (int)1;
  }
  int _4813 = _10818;
  int _4814 = safe_mul( n,_4813 );
  int _4815 = (int)1;
  int _10820 = safe_add( dim,(int)1 );
  int _10821 = _4780;
  for (int _4816 = _10820; _4816 < _10821; ++_4816)
  {
    {
      _4815 *= _ptr__4793[safe_add( _4781,_4816 )];
    }
  }
  {
    int _10822 = (int)0;
    int _10823 = _4780;
    for (int _4817 = _10822; _4817 < _10823; ++_4817)
    {
      {
        _ptr__4800[safe_add( _4803,_4817 )] = _ptr__4793[safe_add( _4781,_4817 )];
      }
    }
    _ptr__4800[safe_add( _4803,dim )] = _4814;
    _ptr__4800[_4804] = (int)0;
    if ((_4799 != (int)0))
    {
      {
        _ptr__4800[_4809] = (int)0;
      }
    }
    {}
    if (_4785)
    {
      {
        int _4818 = (int)0;
        int _4819 = (int)0;
        int _4820 = (int)0;
        int _4821 = (int)0;
        int _4822 = (int)0;
        while ( (_4820 < _4782) )
        {
          {
            long long _4823 = _ptr__4794[safe_add( _4787,_4820 )];
            long long _4824 = safe_add( (_4823 - (_4823 % safe_mul( _4813,_4815 ))),safe_mul( _4813,_4815 ) );
            int _4825 = _4820;
            ++ _4820;
            while ( ((_4820 < _4782) && (_ptr__4794[safe_add( _4787,_4820 )] < _4824)) )
            {
              {
                ++ _4820;
              }
            }
            int _4826 = _4820;
            int _10824 = (int)0;
            int _10825 = n;
            for (int _4827 = _10824; _4827 < _10825; ++_4827)
            {
              {
                int _10826 = _4825;
                int _10827 = _4826;
                for (int _4828 = _10826; _4828 < _10827; ++_4828)
                {
                  {
                    long long _4829 = (_ptr__4794[safe_add( _4787,_4828 )] / safe_mul( _4813,_4815 ));
                    long long _4830 = ((_ptr__4794[safe_add( _4787,_4828 )] / _4815) % _4813);
                    long long _4831 = (_ptr__4794[safe_add( _4787,_4828 )] % _4815);
                    int _10828 = _ptr__4793[safe_add( _4786,_4828 )];
                    int _10829 = _ptr__4793[safe_add( safe_add( _4786,_4828 ),(int)1 )];
                    for (int _4832 = _10828; _4832 < _10829; ++_4832)
                    {
                      {
                        _ptr__4801[safe_add( _4806,_4822 )] = _ptr__4794[safe_add( _4788,_4832 )];
                        _ptr__4802[safe_add( _4807,_4822 )] = _ptr__4795[safe_add( _4789,_4832 )];
                        if ((_4784 > (int)0))
                        {
                          {
                            int _10830 = _ptr__4793[safe_add( _4791,_4832 )];
                            int _10831 = _ptr__4793[safe_add( safe_add( _4791,_4832 ),(int)1 )];
                            for (int _4833 = _10830; _4833 < _10831; ++_4833)
                            {
                              {
                                _ptr__4800[safe_add( _4808,_4818 )] = _ptr__4793[safe_add( _4790,_4833 )];
                                _ptr__4802[safe_add( _4810,_4818 )] = _ptr__4795[safe_add( _4792,_4833 )];
                                ++ _4818;
                              }
                            }
                            _ptr__4800[safe_add( safe_add( _4809,_4822 ),(int)1 )] = _4818;
                          }
                        }
                        {}
                        ++ _4822;
                      }
                    }
                    _ptr__4800[safe_add( safe_add( _4804,_4821 ),(int)1 )] = _4822;
                    _ptr__4801[safe_add( _4805,_4821 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4829,_4814 ),safe_mul( _4827,_4813 ) ),_4830 ),_4815 ),_4831 );
                    ++ _4821;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _4834 = (int)0;
        int _4835 = (int)0;
        int _4836 = (int)0;
        int _4837 = (int)0;
        int _10832 = (int)0;
        int _10833 = _4811;
        for (int _4838 = _10832; _4838 < _10833; ++_4838)
        {
          {
            int _10834 = (int)0;
            int _10835 = n;
            for (int _4839 = _10834; _4839 < _10835; ++_4839)
            {
              {
                int _4840 = safe_mul( safe_mul( _4838,_4813 ),_4815 );
                int _10836 = (int)0;
                int _10837 = safe_mul( _4813,_4815 );
                for (int _4841 = _10836; _4841 < _10837; ++_4841)
                {
                  {
                    int _10838 = _ptr__4793[safe_add( _4786,_4840 )];
                    int _10839 = _ptr__4793[safe_add( safe_add( _4786,_4840 ),(int)1 )];
                    for (int _4842 = _10838; _4842 < _10839; ++_4842)
                    {
                      {
                        _ptr__4801[safe_add( _4806,_4836 )] = _ptr__4794[safe_add( _4788,_4842 )];
                        _ptr__4802[safe_add( _4807,_4836 )] = _ptr__4795[safe_add( _4789,_4842 )];
                        if ((_4784 > (int)0))
                        {
                          {
                            int _10840 = _ptr__4793[safe_add( _4791,_4842 )];
                            int _10841 = _ptr__4793[safe_add( safe_add( _4791,_4842 ),(int)1 )];
                            for (int _4843 = _10840; _4843 < _10841; ++_4843)
                            {
                              {
                                _ptr__4800[safe_add( _4808,_4834 )] = _ptr__4793[safe_add( _4790,_4843 )];
                                _ptr__4802[safe_add( _4810,_4834 )] = _ptr__4795[safe_add( _4792,_4843 )];
                                ++ _4834;
                              }
                            }
                            _ptr__4800[safe_add( safe_add( _4809,_4836 ),(int)1 )] = _4834;
                          }
                        }
                        {}
                        ++ _4836;
                      }
                    }
                    _ptr__4800[safe_add( safe_add( _4804,_4835 ),(int)1 )] = _4836;
                    ++ _4835;
                    ++ _4840;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprRepeat::getshape(monty::rc_ptr< ::mosek::fusion::Expression > _4844,int _4845,int _4846){
  std::shared_ptr< monty::ndarray< int,1 > > _4847 = _4844->getShape();
  _checked_ptr_1<int> _ptr__4847(_4847 ? _4847->raw() : nullptr,_4847 ? _4847->size(0) : 0);
  int _4848 = (int)((_4847)->size(0));
  if ((_4845 < _4848))
  {
    {
      _ptr__4847[_4845] *= _4846;
      return _4847;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _10842;
      bool _10843 = (_4845 == _4848);
      if (_10843)
      {
        _10842 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4848,(int)1 ))));
      }
      else
      {
        _10842 = _4847;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4849 = _10842;
      _checked_ptr_1<int> _ptr__4849(_4849 ? _4849->raw() : nullptr,_4849 ? _4849->size(0) : 0);
      int _10844 = (int)0;
      int _10845 = _4848;
      for (int _4850 = _10844; _4850 < _10845; ++_4850)
      {
        {
          _ptr__4849[_4850] = _ptr__4847[_4850];
        }
      }
      _ptr__4849[_4845] = _4846;
      return _4849;
    }
  }
}
std::string mosek::fusion::ExprRepeat :: toString() { return mosek::fusion::p_ExprRepeat::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprRepeat::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprRepeat(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprRepeat::destroy(){expr.reset();}void mosek::fusion::ExprRepeat::destroy() { mosek::fusion::p_ExprRepeat::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4851,    int _4852){ return new mosek::fusion::ExprStack(_4851,_4852); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4851,    int _4852) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_4851,_4852); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4851,    int _4852){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_4851,_4852));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _10846;
    for (int _4853 = (int)0, _10847 = (int)((_4851)->size(0)); _4853 < _10847 ; ++_4853)
    {
      _10846.push_back(((*_4851)(_4853)));
    }
    auto _10848 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_10846.size()),_10846.begin(),_10846.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _10848;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _4852;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4854,monty::rc_ptr< ::mosek::fusion::WorkStack > _4855,monty::rc_ptr< ::mosek::fusion::WorkStack > _4856) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_4854,_4855,_4856); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4854,monty::rc_ptr< ::mosek::fusion::WorkStack > _4855,monty::rc_ptr< ::mosek::fusion::WorkStack > _4856){
  int _4857 = (int)((exprs)->size(0));
  if ((_4857 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_4854,_4855,_4856);
    }
  }
  else
  {
    {
      int _10849 = (int)0;
      int _10850 = _4857;
      for (int _4858 = _10849; _4858 < _10850; ++_4858)
      {
        {
          ((*exprs)(((_4857 - _4858) - (int)1)))->eval(_4855,_4854,_4856);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4859 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4859(_4859 ? _4859->raw() : nullptr,_4859 ? _4859->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4860 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4860(_4860 ? _4860->raw() : nullptr,_4860 ? _4860->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4861 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4861(_4861 ? _4861->raw() : nullptr,_4861 ? _4861->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4862 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4862(_4862 ? _4862->raw() : nullptr,_4862 ? _4862->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4863 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4863(_4863 ? _4863->raw() : nullptr,_4863 ? _4863->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4864 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4864(_4864 ? _4864->raw() : nullptr,_4864 ? _4864->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4865 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4865(_4865 ? _4865->raw() : nullptr,_4865 ? _4865->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4866(_4866 ? _4866->raw() : nullptr,_4866 ? _4866->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4867(_4867 ? _4867->raw() : nullptr,_4867 ? _4867->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4868 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4868(_4868 ? _4868->raw() : nullptr,_4868 ? _4868->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4869 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4869(_4869 ? _4869->raw() : nullptr,_4869 ? _4869->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4870 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4870(_4870 ? _4870->raw() : nullptr,_4870 ? _4870->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4871 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4871(_4871 ? _4871->raw() : nullptr,_4871 ? _4871->size(0) : 0);
      int _10851 = (int)0;
      int _10852 = _4857;
      for (int _4872 = _10851; _4872 < _10852; ++_4872)
      {
        {
          _4855->pop_expr();
          _ptr__4859[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->nd;
          _ptr__4860[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->shape_base;
          _ptr__4861[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->nelem;
          _ptr__4862[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->nnz;
          _ptr__4863[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->ncodeatom;
          int _10853;
          bool _10854 = mosek::fusion::p_WorkStack::_get_impl(_4855)->hassp;
          if (_10854)
          {
            _10853 = (int)1;
          }
          else
          {
            _10853 = (int)0;
          }
          _ptr__4864[_4872] = _10853;
          _ptr__4865[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->ptr_base;
          _ptr__4867[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->sp_base;
          _ptr__4866[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->nidxs_base;
          _ptr__4868[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->cof_base;
          _ptr__4869[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->code_base;
          _ptr__4870[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->codeptr_base;
          _ptr__4871[_4872] = mosek::fusion::p_WorkStack::_get_impl(_4855)->cconst_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4873 = mosek::fusion::p_WorkStack::_get_impl(_4855)->i32;
      _checked_ptr_1<int> _ptr__4873(_4873 ? _4873->raw() : nullptr,_4873 ? _4873->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4874 = mosek::fusion::p_WorkStack::_get_impl(_4855)->i64;
      _checked_ptr_1<long long> _ptr__4874(_4874 ? _4874->raw() : nullptr,_4874 ? _4874->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4875 = mosek::fusion::p_WorkStack::_get_impl(_4855)->f64;
      _checked_ptr_1<double> _ptr__4875(_4875 ? _4875->raw() : nullptr,_4875 ? _4875->size(0) : 0);
      int _4876 = _ptr__4859[(int)0];
      int _4877 = _ptr__4860[(int)0];
      bool _4878 = (_ptr__4864[(int)0] == (int)0);
      bool _4879 = false;
      int _10855 = (int)1;
      int _10856 = _4857;
      for (int _4880 = _10855; _4880 < _10856; ++_4880)
      {
        {
          _4879 = (_4879 || ((dim != _4880) && (_ptr__4859[_4880] != _4876)));
          if ((!_4879))
          {
            {
              int _10857 = (int)0;
              int _10858 = dim;
              for (int _4881 = _10857; _4881 < _10858; ++_4881)
              {
                {
                  _4879 = (_4879 || (_ptr__4873[safe_add( _4877,_4881 )] != _ptr__4873[safe_add( _ptr__4860[_4880],_4881 )]));
                }
              }
            }
          }
          {}
          if ((!_4879))
          {
            {
              int _10859 = safe_add( dim,(int)1 );
              int _10860 = _4876;
              for (int _4882 = _10859; _4882 < _10860; ++_4882)
              {
                {
                  _4879 = (_4879 || (_ptr__4873[safe_add( _4877,_4882 )] != _ptr__4873[safe_add( _ptr__4860[_4880],_4882 )]));
                }
              }
            }
          }
          {}
          _4878 = (_4878 && ((int)0 == _ptr__4864[_4880]));
        }
      }
      if (_4879)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _4883 = (int)0;
      if ((dim < _4876))
      {
        {
          int _10861 = (int)0;
          int _10862 = _4857;
          for (int _4884 = _10861; _4884 < _10862; ++_4884)
          {
            {
              _4883 += _ptr__4873[safe_add( _ptr__4860[_4884],dim )];
            }
          }
        }
      }
      else
      {
        {
          _4883 = _4857;
        }
      }
      int _10863;
      bool _10864 = (dim < _4876);
      if (_10864)
      {
        _10863 = _4876;
      }
      else
      {
        _10863 = safe_add( _4876,(int)1 );
      }
      int _4885 = _10863;
      if ((_4885 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching dimensions"));
        }
      }
      {}
      int _4886 = (int)0;
      int _4887 = (int)0;
      int _4888 = (int)0;
      bool _4889 = false;
      {
        int _10865 = (int)0;
        int _10866 = _4857;
        for (int _4890 = _10865; _4890 < _10866; ++_4890)
        {
          {
            _4889 = (_4889 || (_ptr__4863[_4890] > (int)0));
          }
        }
        int _10867 = (int)0;
        int _10868 = _4857;
        for (int _4891 = _10867; _4891 < _10868; ++_4891)
        {
          {
            _4888 += _ptr__4862[_4891];
          }
        }
        int _10869 = (int)0;
        int _10870 = _4857;
        for (int _4892 = _10869; _4892 < _10870; ++_4892)
        {
          {
            _4887 += _ptr__4861[_4892];
          }
        }
        if (_4889)
        {
          {
            int _10871 = (int)0;
            int _10872 = _4857;
            for (int _4893 = _10871; _4893 < _10872; ++_4893)
            {
              {
                int _10873;
                bool _10874 = (_ptr__4863[_4893] > (int)0);
                if (_10874)
                {
                  _10873 = _ptr__4863[_4893];
                }
                else
                {
                  _10873 = _ptr__4862[_4893];
                }
                _4886 += _10873;
              }
            }
          }
        }
        {}
      }
      int _4894 = (int)1;
      int _10875 = (int)0;
      int _10876 = dim;
      for (int _4895 = _10875; _4895 < _10876; ++_4895)
      {
        {
          _4894 *= _ptr__4873[safe_add( _4877,_4895 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _10877;
      bool _10878 = (dim < _4876);
      if (_10878)
      {
        std::vector<int> _10879;
        for (int _4897 = (int)0, _10880 = _4857; _4897 < _10880 ; ++_4897)
        {
          _10879.push_back(_ptr__4873[safe_add( _ptr__4860[_4897],dim )]);
        }
        auto _10881 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10879.size()),_10879.begin(),_10879.end()));
        _10877 = _10881;
      }
      else
      {
        std::vector<int> _10882;
        for (int _4898 = (int)0, _10883 = _4857; _4898 < _10883 ; ++_4898)
        {
          _10882.push_back((int)1);
        }
        auto _10884 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10882.size()),_10882.begin(),_10882.end()));
        _10877 = _10884;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4896 = _10877;
      _checked_ptr_1<int> _ptr__4896(_4896 ? _4896->raw() : nullptr,_4896 ? _4896->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4899 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4857)));
      _checked_ptr_1<int> _ptr__4899(_4899 ? _4899->raw() : nullptr,_4899 ? _4899->size(0) : 0);
      _ptr__4899[(int)0] = (int)0;
      int _10885 = (int)1;
      int _10886 = _4857;
      for (int _4900 = _10885; _4900 < _10886; ++_4900)
      {
        {
          _ptr__4899[_4900] = safe_add( _ptr__4899[(_4900 - (int)1)],_ptr__4896[(_4900 - (int)1)] );
        }
      }
      int _4901 = (int)0;
      int _10887 = (int)0;
      int _10888 = _4857;
      for (int _4902 = _10887; _4902 < _10888; ++_4902)
      {
        {
          _4901 += _ptr__4896[_4902];
        }
      }
      int _4903 = (int)1;
      int _10889 = safe_add( dim,(int)1 );
      int _10890 = _4876;
      for (int _4904 = _10889; _4904 < _10890; ++_4904)
      {
        {
          _4903 *= _ptr__4873[safe_add( _4877,_4904 )];
        }
      }
      if (_4878)
      {
        {
          _4854->alloc_expr(_4885,_4887,_4888,false,_4886);
          int _4905 = mosek::fusion::p_WorkStack::_get_impl(_4854)->ptr_base;
          int _4906 = mosek::fusion::p_WorkStack::_get_impl(_4854)->shape_base;
          int _4907 = mosek::fusion::p_WorkStack::_get_impl(_4854)->nidxs_base;
          int _4908 = mosek::fusion::p_WorkStack::_get_impl(_4854)->cof_base;
          int _4909 = mosek::fusion::p_WorkStack::_get_impl(_4854)->code_base;
          int _4910 = mosek::fusion::p_WorkStack::_get_impl(_4854)->codeptr_base;
          int _4911 = mosek::fusion::p_WorkStack::_get_impl(_4854)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _4912 = mosek::fusion::p_WorkStack::_get_impl(_4854)->i32;
          _checked_ptr_1<int> _ptr__4912(_4912 ? _4912->raw() : nullptr,_4912 ? _4912->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4913 = mosek::fusion::p_WorkStack::_get_impl(_4854)->i64;
          _checked_ptr_1<long long> _ptr__4913(_4913 ? _4913->raw() : nullptr,_4913 ? _4913->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4914 = mosek::fusion::p_WorkStack::_get_impl(_4854)->f64;
          _checked_ptr_1<double> _ptr__4914(_4914 ? _4914->raw() : nullptr,_4914 ? _4914->size(0) : 0);
          int _10891;
          bool _10892 = (_4886 > (int)0);
          if (_10892)
          {
            _10891 = _4856->alloci32(safe_add( _4887,(int)1 ));
          }
          else
          {
            _10891 = (-(int)9999);
          }
          int _4915 = _10891;
          std::shared_ptr< monty::ndarray< int,1 > > _4916 = mosek::fusion::p_WorkStack::_get_impl(_4856)->i32;
          _checked_ptr_1<int> _ptr__4916(_4916 ? _4916->raw() : nullptr,_4916 ? _4916->size(0) : 0);
          int _10893 = (int)0;
          int _10894 = _4876;
          for (int _4917 = _10893; _4917 < _10894; ++_4917)
          {
            {
              _ptr__4912[safe_add( _4906,_4917 )] = _ptr__4873[safe_add( _4877,_4917 )];
            }
          }
          _ptr__4912[safe_add( _4906,dim )] = _4883;
          {
            int _4918 = (int)0;
            int _4919 = (int)0;
            int _4920 = (int)0;
            _ptr__4912[_4905] = (int)0;
            if (_4889)
            {
              {
                _ptr__4912[_4910] = (int)0;
              }
            }
            {}
            int _10895 = (int)0;
            int _10896 = _4894;
            for (int _4921 = _10895; _4921 < _10896; ++_4921)
            {
              {
                int _10897 = (int)0;
                int _10898 = _4857;
                for (int _4922 = _10897; _4922 < _10898; ++_4922)
                {
                  {
                    int _10899 = (int)0;
                    int _10900 = _ptr__4896[_4922];
                    for (int _4923 = _10899; _4923 < _10900; ++_4923)
                    {
                      {
                        int _10901 = (int)0;
                        int _10902 = _4903;
                        for (int _4924 = _10901; _4924 < _10902; ++_4924)
                        {
                          {
                            int _4925 = safe_add( safe_add( safe_mul( safe_mul( _4921,_ptr__4896[_4922] ),_4903 ),safe_mul( _4923,_4903 ) ),_4924 );
                            int _10903 = _ptr__4873[safe_add( _ptr__4865[_4922],_4925 )];
                            int _10904 = _ptr__4873[safe_add( safe_add( _ptr__4865[_4922],_4925 ),(int)1 )];
                            for (int _4926 = _10903; _4926 < _10904; ++_4926)
                            {
                              {
                                _ptr__4913[safe_add( _4907,_4920 )] = _ptr__4874[safe_add( _ptr__4866[_4922],_4926 )];
                                _ptr__4914[safe_add( _4908,_4920 )] = _ptr__4875[safe_add( _ptr__4868[_4922],_4926 )];
                                if ((_ptr__4863[_4922] > (int)0))
                                {
                                  {
                                    int _10905 = _ptr__4873[safe_add( _ptr__4870[_4922],_4926 )];
                                    int _10906 = _ptr__4873[safe_add( safe_add( _ptr__4870[_4922],_4926 ),(int)1 )];
                                    for (int _4927 = _10905; _4927 < _10906; ++_4927)
                                    {
                                      {
                                        _ptr__4912[safe_add( _4909,_4918 )] = _ptr__4873[safe_add( _ptr__4869[_4922],_4927 )];
                                        _ptr__4914[safe_add( _4911,_4918 )] = _ptr__4875[safe_add( _ptr__4871[_4922],_4927 )];
                                        ++ _4918;
                                      }
                                    }
                                    _ptr__4912[safe_add( safe_add( _4910,_4920 ),(int)1 )] = _4918;
                                  }
                                }
                                else if(_4889)
                                {
                                  {
                                    _ptr__4912[safe_add( _4909,_4918 )] = 2;
                                    _ptr__4914[safe_add( _4911,_4918 )] = 0.0;
                                    ++ _4918;
                                    _ptr__4912[safe_add( safe_add( _4910,_4920 ),(int)1 )] = _4918;
                                  }
                                }
                                {}
                                ++ _4920;
                              }
                            }
                            _ptr__4912[safe_add( safe_add( _4905,_4919 ),(int)1 )] = _4920;
                            ++ _4919;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _4928 = (int)1;
          int _10907 = (int)0;
          int _10908 = dim;
          for (int _4929 = _10907; _4929 < _10908; ++_4929)
          {
            {
              _4928 *= _ptr__4873[safe_add( _4877,_4929 )];
            }
          }
          _4928 *= _4883;
          int _10909 = safe_add( dim,(int)1 );
          int _10910 = _4876;
          for (int _4930 = _10909; _4930 < _10910; ++_4930)
          {
            {
              _4928 *= _ptr__4873[safe_add( _4877,_4930 )];
            }
          }
          bool _4931 = (_4887 < _4928);
          _4854->alloc_expr(_4885,_4887,_4888,_4931,_4886);
          int _4932 = mosek::fusion::p_WorkStack::_get_impl(_4854)->ptr_base;
          int _4933 = mosek::fusion::p_WorkStack::_get_impl(_4854)->nidxs_base;
          int _10911;
          bool _10912 = _4931;
          if (_10912)
          {
            _10911 = mosek::fusion::p_WorkStack::_get_impl(_4854)->sp_base;
          }
          else
          {
            _10911 = _4854->alloci64(_4887);
          }
          int _4934 = _10911;
          int _4935 = mosek::fusion::p_WorkStack::_get_impl(_4854)->cof_base;
          int _4936 = mosek::fusion::p_WorkStack::_get_impl(_4854)->code_base;
          int _4937 = mosek::fusion::p_WorkStack::_get_impl(_4854)->codeptr_base;
          int _4938 = mosek::fusion::p_WorkStack::_get_impl(_4854)->cconst_base;
          int _4939 = mosek::fusion::p_WorkStack::_get_impl(_4854)->shape_base;
          int _10913 = (int)0;
          int _10914 = _4876;
          for (int _4940 = _10913; _4940 < _10914; ++_4940)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4854)->i32)(safe_add( _4939,_4940 ))) = _ptr__4873[safe_add( _4877,_4940 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_4854)->i32)(safe_add( _4939,dim ))) = _4883;
          std::shared_ptr< monty::ndarray< int,1 > > _4941 = mosek::fusion::p_WorkStack::_get_impl(_4854)->i32;
          _checked_ptr_1<int> _ptr__4941(_4941 ? _4941->raw() : nullptr,_4941 ? _4941->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4942 = mosek::fusion::p_WorkStack::_get_impl(_4854)->i64;
          _checked_ptr_1<long long> _ptr__4942(_4942 ? _4942->raw() : nullptr,_4942 ? _4942->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4943 = mosek::fusion::p_WorkStack::_get_impl(_4854)->f64;
          _checked_ptr_1<double> _ptr__4943(_4943 ? _4943->raw() : nullptr,_4943 ? _4943->size(0) : 0);
          if ((dim == (int)0))
          {
            {
              int _4944 = (int)0;
              int _4945 = (int)0;
              int _4946 = (int)0;
              long long _4947 = (long long)0;
              _ptr__4941[_4932] = (int)0;
              if ((_4886 > (int)0))
              {
                {
                  _ptr__4941[_4937] = (int)0;
                }
              }
              {}
              int _10915 = (int)0;
              int _10916 = _4857;
              for (int _4948 = _10915; _4948 < _10916; ++_4948)
              {
                {
                  int _10917 = (int)0;
                  int _10918 = _ptr__4861[_4948];
                  for (int _4949 = _10917; _4949 < _10918; ++_4949)
                  {
                    {
                      int _10919 = _ptr__4873[safe_add( _ptr__4865[_4948],_4949 )];
                      int _10920 = _ptr__4873[safe_add( safe_add( _ptr__4865[_4948],_4949 ),(int)1 )];
                      for (int _4950 = _10919; _4950 < _10920; ++_4950)
                      {
                        {
                          _ptr__4942[safe_add( _4933,_4945 )] = _ptr__4874[safe_add( _ptr__4866[_4948],_4950 )];
                          _ptr__4943[safe_add( _4935,_4945 )] = _ptr__4875[safe_add( _ptr__4868[_4948],_4950 )];
                          if ((_ptr__4863[_4948] > (int)0))
                          {
                            {
                              int _10921 = _ptr__4873[safe_add( _ptr__4870[_4948],_4950 )];
                              int _10922 = _ptr__4873[safe_add( safe_add( _ptr__4870[_4948],_4950 ),(int)1 )];
                              for (int _4951 = _10921; _4951 < _10922; ++_4951)
                              {
                                {
                                  _ptr__4941[safe_add( _4936,_4944 )] = _ptr__4873[safe_add( _ptr__4869[_4948],_4951 )];
                                  _ptr__4943[safe_add( _4938,_4944 )] = _ptr__4875[safe_add( _ptr__4871[_4948],_4951 )];
                                  ++ _4944;
                                }
                              }
                              _ptr__4941[safe_add( safe_add( _4937,_4945 ),(int)1 )] = _4944;
                            }
                          }
                          else if((_4886 > (int)0))
                          {
                            {
                              _ptr__4941[safe_add( _4936,_4944 )] = 2;
                              _ptr__4943[safe_add( _4938,_4944 )] = 0.0;
                              ++ _4944;
                              _ptr__4941[safe_add( safe_add( _4937,_4945 ),(int)1 )] = _4944;
                            }
                          }
                          {}
                          ++ _4945;
                        }
                      }
                      _ptr__4941[safe_add( safe_add( _4932,_4946 ),(int)1 )] = _4945;
                      if ((_ptr__4864[_4948] != (int)0))
                      {
                        {
                          _ptr__4942[safe_add( _4934,_4946 )] = safe_add( _4947,_ptr__4874[safe_add( _ptr__4867[_4948],_4949 )] );
                        }
                      }
                      else
                      {
                        {
                          _ptr__4942[safe_add( _4934,_4946 )] = safe_add( _4947,_4949 );
                        }
                      }
                      ++ _4946;
                    }
                  }
                  long long _4952 = (long long)1;
                  int _10923 = (int)0;
                  int _10924 = _4876;
                  for (int _4953 = _10923; _4953 < _10924; ++_4953)
                  {
                    {
                      _4952 *= _ptr__4873[safe_add( _ptr__4860[_4948],_4953 )];
                    }
                  }
                  _4947 += _4952;
                }
              }
            }
          }
          else
          {
            {
              int _4954 = (int)0;
              int _10925 = (int)0;
              int _10926 = _4885;
              for (int _4955 = _10925; _4955 < _10926; ++_4955)
              {
                {
                  if ((_4954 < _ptr__4941[safe_add( _4939,_4955 )]))
                  {
                    {
                      _4954 = _ptr__4941[safe_add( _4939,_4955 )];
                    }
                  }
                  {}
                }
              }
              int _4956 = _4856->alloci64(_4887);
              int _4957 = _4856->alloci32(_4887);
              int _4958 = _4856->alloci32(_4887);
              int _4959 = _4856->alloci32(_4887);
              int _4960 = _4856->alloci32(_4887);
              int _4961 = _4856->alloci32(safe_add( _4954,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _4962 = mosek::fusion::p_WorkStack::_get_impl(_4856)->i32;
              _checked_ptr_1<int> _ptr__4962(_4962 ? _4962->raw() : nullptr,_4962 ? _4962->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _4963 = mosek::fusion::p_WorkStack::_get_impl(_4856)->i64;
              _checked_ptr_1<long long> _ptr__4963(_4963 ? _4963->raw() : nullptr,_4963 ? _4963->size(0) : 0);
              {
                int _4964 = (int)0;
                int _10927 = (int)0;
                int _10928 = _4857;
                for (int _4965 = _10927; _4965 < _10928; ++_4965)
                {
                  {
                    int _4966 = _ptr__4896[_4965];
                    int _4967 = safe_mul( _4966,_4903 );
                    int _4968 = _4903;
                    if ((_ptr__4864[_4965] != (int)0))
                    {
                      {
                        int _10929 = (int)0;
                        int _10930 = _ptr__4861[_4965];
                        for (int _4969 = _10929; _4969 < _10930; ++_4969)
                        {
                          {
                            long long _4970 = (_ptr__4874[safe_add( _ptr__4867[_4965],_4969 )] / _4967);
                            long long _4971 = ((_ptr__4874[safe_add( _ptr__4867[_4965],_4969 )] / _4968) % _4966);
                            long long _4972 = (_ptr__4874[safe_add( _ptr__4867[_4965],_4969 )] % _4903);
                            _ptr__4963[safe_add( _4956,_4964 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4970,_4883 ),_4971 ),_ptr__4899[_4965] ),_4903 ),_4972 );
                            _ptr__4962[safe_add( _4957,_4964 )] = _4965;
                            _ptr__4962[safe_add( _4958,_4964 )] = _4969;
                            ++ _4964;
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        int _10931 = (int)0;
                        int _10932 = _ptr__4861[_4965];
                        for (int _4973 = _10931; _4973 < _10932; ++_4973)
                        {
                          {
                            long long _4974 = ((long long)_4973 / _4967);
                            long long _4975 = (((long long)_4973 / _4968) % _4966);
                            long long _4976 = ((long long)_4973 % _4903);
                            _ptr__4963[safe_add( _4956,_4964 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4974,_4883 ),_4975 ),_ptr__4899[_4965] ),_4903 ),_4976 );
                            _ptr__4962[safe_add( _4957,_4964 )] = _4965;
                            _ptr__4962[safe_add( _4958,_4964 )] = _4973;
                            ++ _4964;
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                std::shared_ptr< monty::ndarray< long long,1 > > _4977 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4885)));
                _checked_ptr_1<long long> _ptr__4977(_4977 ? _4977->raw() : nullptr,_4977 ? _4977->size(0) : 0);
                _ptr__4977[(_4885 - (int)1)] = (int)1;
                int _10933 = (int)1;
                int _10934 = _4885;
                for (int _4978 = _10933; _4978 < _10934; ++_4978)
                {
                  {
                    _ptr__4977[((_4885 - _4978) - (int)1)] = safe_mul( _ptr__4977[(_4885 - _4978)],_ptr__4941[(safe_add( _4939,_4885 ) - _4978)] );
                  }
                }
                int _10935 = (int)0;
                int _10936 = _4887;
                for (int _4979 = _10935; _4979 < _10936; ++_4979)
                {
                  {
                    _ptr__4962[safe_add( _4959,_4979 )] = _4979;
                  }
                }
                int _10937 = (int)0;
                int _10938 = _4885;
                for (int _4980 = _10937; _4980 < _10938; ++_4980)
                {
                  {
                    int _4981 = ((_4885 - _4980) - (int)1);
                    int _4982 = _ptr__4941[safe_add( _4939,_4981 )];
                    int _10939 = (int)0;
                    int _10940 = safe_add( _4982,(int)1 );
                    for (int _4983 = _10939; _4983 < _10940; ++_4983)
                    {
                      {
                        _ptr__4962[safe_add( _4961,_4983 )] = (int)0;
                      }
                    }
                    int _10941 = (int)0;
                    int _10942 = _4887;
                    for (int _4984 = _10941; _4984 < _10942; ++_4984)
                    {
                      {
                        int _4985 = _ptr__4962[safe_add( _4959,_4984 )];
                        long long _4986 = ((_ptr__4963[safe_add( _4956,_4985 )] / _ptr__4977[_4981]) % _4982);
                        ++ _ptr__4962[safe_add( safe_add( _4961,_4986 ),(int)1 )];
                      }
                    }
                    {
                      int _10943 = (int)0;
                      int _10944 = _4982;
                      for (int _4987 = _10943; _4987 < _10944; ++_4987)
                      {
                        {
                          _ptr__4962[safe_add( safe_add( _4961,_4987 ),(int)1 )] += _ptr__4962[safe_add( _4961,_4987 )];
                        }
                      }
                      int _10945 = (int)0;
                      int _10946 = _4887;
                      for (int _4988 = _10945; _4988 < _10946; ++_4988)
                      {
                        {
                          int _4989 = _ptr__4962[safe_add( _4959,_4988 )];
                          long long _4990 = ((_ptr__4963[safe_add( _4956,_4989 )] / _ptr__4977[_4981]) % _4982);
                          _ptr__4962[safe_add( _4960,_ptr__4962[safe_add( _4961,_4990 )] )] = _4989;
                          ++ _ptr__4962[safe_add( _4961,_4990 )];
                        }
                      }
                    }
                    int _4991 = _4959;
                    _4959 = _4960;
                    _4960 = _4991;
                  }
                }
              }
              {
                int _4992 = (int)0;
                int _4993 = (int)0;
                _ptr__4941[_4932] = (int)0;
                if ((_4886 > (int)0))
                {
                  {
                    _ptr__4941[_4937] = (int)0;
                  }
                }
                {}
                int _10947 = (int)0;
                int _10948 = _4887;
                for (int _4994 = _10947; _4994 < _10948; ++_4994)
                {
                  {
                    int _4995 = _ptr__4962[safe_add( _4959,_4994 )];
                    int _4996 = _ptr__4962[safe_add( _4957,_4995 )];
                    int _4997 = _ptr__4962[safe_add( _4958,_4995 )];
                    int _10949 = _ptr__4873[safe_add( _ptr__4865[_4996],_4997 )];
                    int _10950 = _ptr__4873[safe_add( safe_add( _ptr__4865[_4996],_4997 ),(int)1 )];
                    for (int _4998 = _10949; _4998 < _10950; ++_4998)
                    {
                      {
                        _ptr__4942[safe_add( _4933,_4993 )] = _ptr__4874[safe_add( _ptr__4866[_4996],_4998 )];
                        _ptr__4943[safe_add( _4935,_4993 )] = _ptr__4875[safe_add( _ptr__4868[_4996],_4998 )];
                        if ((_ptr__4863[_4996] > (int)0))
                        {
                          {
                            int _10951 = _ptr__4873[safe_add( _ptr__4870[_4996],_4998 )];
                            int _10952 = _ptr__4873[safe_add( safe_add( _ptr__4870[_4996],_4998 ),(int)1 )];
                            for (int _4999 = _10951; _4999 < _10952; ++_4999)
                            {
                              {
                                _ptr__4941[safe_add( _4936,_4992 )] = _ptr__4873[safe_add( _ptr__4869[_4996],_4999 )];
                                _ptr__4943[safe_add( _4938,_4992 )] = _ptr__4875[safe_add( _ptr__4871[_4996],_4999 )];
                                ++ _4992;
                              }
                            }
                            _ptr__4941[safe_add( safe_add( _4937,_4993 ),(int)1 )] = _4992;
                          }
                        }
                        else if(_4889)
                        {
                          {
                            _ptr__4941[safe_add( _4936,_4992 )] = 2;
                            _ptr__4943[safe_add( _4938,_4992 )] = 0.0;
                            ++ _4992;
                            _ptr__4941[safe_add( safe_add( _4937,_4993 ),(int)1 )] = _4992;
                          }
                        }
                        {}
                        ++ _4993;
                      }
                    }
                    _ptr__4941[safe_add( safe_add( _4932,_4994 ),(int)1 )] = _4993;
                    _ptr__4942[safe_add( _4934,_4994 )] = _ptr__4963[safe_add( _4956,_4995 )];
                  }
                }
              }
            }
          }
          if ((!_4931))
          {
            {
              _4854->popi64(_4887);
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5000,int _5001){
  if (((int)((_5000)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_5000)->size(0)) == (int)1))
  {
    {
      return ((*_5000)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10953;
      for (int _5003 = (int)0, _10954 = (int)((_5000)->size(0)); _5003 < _10954 ; ++_5003)
      {
        _10953.push_back(((*_5000)(_5003))->getShape());
      }
      auto _10955 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10953.size()),_10953.begin(),_10953.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5002 = _10955;
      std::shared_ptr< monty::ndarray< int,1 > > _5004 = ((*_5002)((int)0));
      _checked_ptr_1<int> _ptr__5004(_5004 ? _5004->raw() : nullptr,_5004 ? _5004->size(0) : 0);
      int _5005 = (int)((_5004)->size(0));
      int _10956 = (int)1;
      int _10957 = (int)((_5002)->size(0));
      for (int _5006 = _10956; _5006 < _10957; ++_5006)
      {
        {
          if ((_5005 != (int)((((*_5002)(_5006)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _10958 = (int)0;
          int _10959 = _5001;
          for (int _5007 = _10958; _5007 < _10959; ++_5007)
          {
            {
              if ((_ptr__5004[_5007] != ((*((*_5002)(_5006)))(_5007))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _10960 = safe_add( _5001,(int)1 );
          int _10961 = _5005;
          for (int _5008 = _10960; _5008 < _10961; ++_5008)
          {
            {
              if ((_ptr__5004[_5008] != ((*((*_5002)(_5006)))(_5008))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_5001 == _5005))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _5005,(int)1 ))));
          _checked_ptr_1<int> _ptr__5009(_5009 ? _5009->raw() : nullptr,_5009 ? _5009->size(0) : 0);
          int _10962 = (int)0;
          int _10963 = _5005;
          for (int _5010 = _10962; _5010 < _10963; ++_5010)
          {
            {
              _ptr__5009[_5010] = _ptr__5004[_5010];
            }
          }
          _ptr__5009[_5005] = (int)((_5002)->size(0));
          return _5009;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5011 = _5004;
          _checked_ptr_1<int> _ptr__5011(_5011 ? _5011->raw() : nullptr,_5011 ? _5011->size(0) : 0);
          int _10964 = (int)1;
          int _10965 = (int)((_5002)->size(0));
          for (int _5012 = _10964; _5012 < _10965; ++_5012)
          {
            {
              _ptr__5011[_5001] += ((*((*_5002)(_5012)))(_5001));
            }
          }
          return _5011;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5013 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _10966 = (int)1;
  int _10967 = (int)((exprs)->size(0));
  for (int _5014 = _10966; _5014 < _10967; ++_5014)
  {
    {
      _5013->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_5014))->toString());
    }
  }
  _5013->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _5013->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5015,    std::shared_ptr< monty::ndarray< long long,1 > > _5016,    std::shared_ptr< monty::ndarray< double,1 > > _5017){ return new mosek::fusion::ExprInner(_5015,_5016,_5017); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5015,    std::shared_ptr< monty::ndarray< long long,1 > > _5016,    std::shared_ptr< monty::ndarray< double,1 > > _5017) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5015,_5016,_5017); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5015,    std::shared_ptr< monty::ndarray< long long,1 > > _5016,    std::shared_ptr< monty::ndarray< double,1 > > _5017){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5016(_5016 ? _5016->raw() : nullptr, _5016 ? _5016->size(0) : 0);
    _checked_ptr_1<double> _ptr__5017(_5017 ? _5017->raw() : nullptr, _5017 ? _5017->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _5015;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _5016;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _5017;
    if (((int)((_5016)->size(0)) != (int)((_5017)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _5018 = _5015->getShape();
    _checked_ptr_1<int> _ptr__5018(_5018 ? _5018->raw() : nullptr,_5018 ? _5018->size(0) : 0);
    long long _5019 = ::mosek::fusion::p_Set::size(_5018);
    bool _5020 = false;
    bool _5021 = false;
    {
      int _10968 = (int)1;
      int _10969 = (int)((_5016)->size(0));
      for (int _5022 = _10968; _5022 < _10969; ++_5022)
      {
        {
          if ((_ptr__5016[_5022] <= _ptr__5016[(_5022 - (int)1)]))
          {
            {
              _5020 = true;
            }
          }
          {}
        }
      }
      if (((int)((_5016)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5016[(int)0] < (int)0) || (_ptr__5016[((int)((_5016)->size(0)) - (int)1)] > _5019)))
          {
            {
              _5021 = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_5020)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_5021)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5023,    std::shared_ptr< monty::ndarray< double,1 > > _5024){ return new mosek::fusion::ExprInner(_5023,_5024); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5023,    std::shared_ptr< monty::ndarray< double,1 > > _5024) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5023,_5024); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5023,    std::shared_ptr< monty::ndarray< double,1 > > _5024){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5024(_5024 ? _5024->raw() : nullptr, _5024 ? _5024->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5023,::mosek::fusion::p_ExprInner::range((int)((_5024)->size(0))),_5024);
    std::shared_ptr< monty::ndarray< int,1 > > _5025 = _5023->getShape();
    _checked_ptr_1<int> _ptr__5025(_5025 ? _5025->raw() : nullptr,_5025 ? _5025->size(0) : 0);
    if ((((int)((_5025)->size(0)) != (int)1) || (_ptr__5025[(int)0] != (int)((_5024)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5026,    std::shared_ptr< monty::ndarray< int,2 > > _5027,    std::shared_ptr< monty::ndarray< double,1 > > _5028){ return new mosek::fusion::ExprInner(_5026,_5027,_5028); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5026,    std::shared_ptr< monty::ndarray< int,2 > > _5027,    std::shared_ptr< monty::ndarray< double,1 > > _5028) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5026,_5027,_5028); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5026,    std::shared_ptr< monty::ndarray< int,2 > > _5027,    std::shared_ptr< monty::ndarray< double,1 > > _5028){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5028(_5028 ? _5028->raw() : nullptr, _5028 ? _5028->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5026,::mosek::fusion::p_ExprInner::convert(_5026->getShape(),_5027),_5028);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5029,monty::rc_ptr< ::mosek::fusion::WorkStack > _5030,monty::rc_ptr< ::mosek::fusion::WorkStack > _5031) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_5029,_5030,_5031); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5029,monty::rc_ptr< ::mosek::fusion::WorkStack > _5030,monty::rc_ptr< ::mosek::fusion::WorkStack > _5031){
  expr->eval(_5030,_5029,_5031);
  _5030->pop_expr();
  int _5032 = mosek::fusion::p_WorkStack::_get_impl(_5030)->nd;
  int _5033 = mosek::fusion::p_WorkStack::_get_impl(_5030)->nelem;
  int _5034 = mosek::fusion::p_WorkStack::_get_impl(_5030)->nnz;
  int _5035 = mosek::fusion::p_WorkStack::_get_impl(_5030)->ncodeatom;
  bool _5036 = mosek::fusion::p_WorkStack::_get_impl(_5030)->hassp;
  int _5037 = mosek::fusion::p_WorkStack::_get_impl(_5030)->shape_base;
  int _5038 = mosek::fusion::p_WorkStack::_get_impl(_5030)->ptr_base;
  int _5039 = mosek::fusion::p_WorkStack::_get_impl(_5030)->nidxs_base;
  int _5040 = mosek::fusion::p_WorkStack::_get_impl(_5030)->sp_base;
  int _5041 = mosek::fusion::p_WorkStack::_get_impl(_5030)->cof_base;
  int _5042 = mosek::fusion::p_WorkStack::_get_impl(_5030)->code_base;
  int _5043 = mosek::fusion::p_WorkStack::_get_impl(_5030)->codeptr_base;
  int _5044 = mosek::fusion::p_WorkStack::_get_impl(_5030)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5045 = mosek::fusion::p_WorkStack::_get_impl(_5030)->i32;
  _checked_ptr_1<int> _ptr__5045(_5045 ? _5045->raw() : nullptr,_5045 ? _5045->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5046 = mosek::fusion::p_WorkStack::_get_impl(_5030)->i64;
  _checked_ptr_1<long long> _ptr__5046(_5046 ? _5046->raw() : nullptr,_5046 ? _5046->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5047 = mosek::fusion::p_WorkStack::_get_impl(_5030)->f64;
  _checked_ptr_1<double> _ptr__5047(_5047 ? _5047->raw() : nullptr,_5047 ? _5047->size(0) : 0);
  int _5048 = (int)0;
  if (_5036)
  {
    {
      int _5049 = (int)0;
      int _5050 = (int)0;
      while ( ((_5050 < (int)((vsub)->size(0))) && (_5049 < _5033)) )
      {
        {
          if ((_ptr__5046[safe_add( _5040,_5049 )] < ((*vsub)(_5050))))
          {
            {
              ++ _5049;
            }
          }
          else if((_ptr__5046[safe_add( _5040,_5049 )] > ((*vsub)(_5050))))
          {
            {
              ++ _5050;
            }
          }
          else
          {
            {
              _5048 += (_ptr__5045[safe_add( safe_add( _5038,_5049 ),(int)1 )] - _ptr__5045[safe_add( _5038,_5049 )]);
              ++ _5050;
              ++ _5049;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10970 = (int)0;
      int _10971 = (int)((vsub)->size(0));
      for (int _5051 = _10970; _5051 < _10971; ++_5051)
      {
        {
          _5048 += (_ptr__5045[safe_add( safe_add( _5038,((*vsub)(_5051)) ),(int)1 )] - _ptr__5045[safe_add( _5038,((*vsub)(_5051)) )]);
        }
      }
    }
  }
  int _10972;
  bool _10973 = (_5035 > (int)0);
  if (_10973)
  {
    _10972 = safe_add( _5035,safe_mul( (int)2,_5034 ) );
  }
  else
  {
    _10972 = (int)0;
  }
  int _5052 = _10972;
  _5029->alloc_expr((int)0,(int)1,_5048,false,_5052);
  int _5053 = mosek::fusion::p_WorkStack::_get_impl(_5029)->ptr_base;
  int _5054 = mosek::fusion::p_WorkStack::_get_impl(_5029)->nidxs_base;
  int _5055 = mosek::fusion::p_WorkStack::_get_impl(_5029)->cof_base;
  int _5056 = mosek::fusion::p_WorkStack::_get_impl(_5029)->code_base;
  int _5057 = mosek::fusion::p_WorkStack::_get_impl(_5029)->codeptr_base;
  int _5058 = mosek::fusion::p_WorkStack::_get_impl(_5029)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5059 = mosek::fusion::p_WorkStack::_get_impl(_5029)->i32;
  _checked_ptr_1<int> _ptr__5059(_5059 ? _5059->raw() : nullptr,_5059 ? _5059->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5060 = mosek::fusion::p_WorkStack::_get_impl(_5029)->i64;
  _checked_ptr_1<long long> _ptr__5060(_5060 ? _5060->raw() : nullptr,_5060 ? _5060->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5061 = mosek::fusion::p_WorkStack::_get_impl(_5029)->f64;
  _checked_ptr_1<double> _ptr__5061(_5061 ? _5061->raw() : nullptr,_5061 ? _5061->size(0) : 0);
  _ptr__5059[_5053] = (int)0;
  _ptr__5059[safe_add( _5053,(int)1 )] = _5048;
  if ((_5052 > (int)0))
  {
    {
      _ptr__5059[_5057] = (int)0;
    }
  }
  {}
  int _5062 = (int)0;
  int _5063 = (int)0;
  if (_5036)
  {
    {
      int _5064 = (int)0;
      int _5065 = (int)0;
      while ( ((_5065 < (int)((vsub)->size(0))) && (_5064 < _5033)) )
      {
        {
          if ((_ptr__5046[safe_add( _5040,_5064 )] < ((*vsub)(_5065))))
          {
            {
              ++ _5064;
            }
          }
          else if((_ptr__5046[safe_add( _5040,_5064 )] > ((*vsub)(_5065))))
          {
            {
              ++ _5065;
            }
          }
          else
          {
            {
              int _5066 = _ptr__5045[safe_add( _5038,_5064 )];
              int _5067 = _ptr__5045[safe_add( safe_add( _5038,_5064 ),(int)1 )];
              int _10974 = _5066;
              int _10975 = _5067;
              for (int _5068 = _10974; _5068 < _10975; ++_5068)
              {
                {
                  _ptr__5060[safe_add( _5054,_5063 )] = _ptr__5046[safe_add( _5039,_5068 )];
                  _ptr__5061[safe_add( _5055,_5063 )] = (((*vcof)(_5065)) * _ptr__5047[safe_add( _5041,_5068 )]);
                  if ((_5052 > (int)0))
                  {
                    {
                      int _10976 = _ptr__5045[safe_add( _5043,_5068 )];
                      int _10977 = _ptr__5045[safe_add( safe_add( _5043,_5068 ),(int)1 )];
                      for (int _5069 = _10976; _5069 < _10977; ++_5069)
                      {
                        {
                          _ptr__5059[safe_add( _5056,_5062 )] = _ptr__5045[safe_add( _5042,_5069 )];
                          _ptr__5061[safe_add( _5058,_5062 )] = _ptr__5047[safe_add( _5044,_5069 )];
                          ++ _5062;
                        }
                      }
                      _ptr__5059[safe_add( _5056,_5062 )] = 2;
                      _ptr__5061[safe_add( _5058,_5062 )] = ((*vcof)(_5065));
                      ++ _5062;
                      _ptr__5059[safe_add( _5056,_5062 )] = 5;
                      ++ _5062;
                      _ptr__5059[safe_add( safe_add( _5057,_5063 ),(int)1 )] = _5062;
                    }
                  }
                  {}
                  ++ _5063;
                }
              }
              ++ _5065;
              ++ _5064;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10978 = (int)0;
      int _10979 = (int)((vsub)->size(0));
      for (int _5070 = _10978; _5070 < _10979; ++_5070)
      {
        {
          int _5071 = _ptr__5045[safe_add( _5038,((*vsub)(_5070)) )];
          int _5072 = _ptr__5045[safe_add( safe_add( _5038,((*vsub)(_5070)) ),(int)1 )];
          int _10980 = _5071;
          int _10981 = _5072;
          for (int _5073 = _10980; _5073 < _10981; ++_5073)
          {
            {
              _ptr__5060[safe_add( _5054,_5063 )] = _ptr__5046[safe_add( _5039,_5073 )];
              _ptr__5061[safe_add( _5055,_5063 )] = (((*vcof)(_5070)) * _ptr__5047[safe_add( _5041,_5073 )]);
              if ((_5052 > (int)0))
              {
                {
                  int _10982 = _ptr__5045[safe_add( _5043,_5073 )];
                  int _10983 = _ptr__5045[safe_add( safe_add( _5043,_5073 ),(int)1 )];
                  for (int _5074 = _10982; _5074 < _10983; ++_5074)
                  {
                    {
                      _ptr__5059[safe_add( _5056,_5062 )] = _ptr__5045[safe_add( _5042,_5074 )];
                      _ptr__5061[safe_add( _5058,_5062 )] = _ptr__5045[safe_add( _5044,_5074 )];
                      ++ _5062;
                    }
                  }
                  _ptr__5059[safe_add( _5056,_5062 )] = 2;
                  _ptr__5061[safe_add( _5058,_5062 )] = ((*vcof)(_5070));
                  ++ _5062;
                  _ptr__5059[safe_add( _5056,_5062 )] = 5;
                  ++ _5062;
                  _ptr__5059[safe_add( safe_add( _5057,_5063 ),(int)1 )] = _5062;
                }
              }
              {}
              ++ _5063;
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _5075){
  std::vector<long long> _10984;
  for (int _5076 = (int)0, _10985 = _5075; _5076 < _10985 ; ++_5076)
  {
    _10984.push_back(_5076);
  }
  auto _10986 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10984.size()),_10984.begin(),_10984.end()));
  return _10986;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _5077,std::shared_ptr< monty::ndarray< int,2 > > _5078){
  _checked_ptr_1<int> _ptr__5077(_5077 ? _5077->raw() : nullptr, _5077 ? _5077->size(0) : 0);
  int _5079 = (int)((_5077)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5080 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5079)));
  _checked_ptr_1<long long> _ptr__5080(_5080 ? _5080->raw() : nullptr,_5080 ? _5080->size(0) : 0);
  _ptr__5080[(_5079 - (int)1)] = (int)1;
  int _10987 = (int)1;
  int _10988 = _5079;
  for (int _5081 = _10987; _5081 < _10988; ++_5081)
  {
    {
      _ptr__5080[((_5079 - _5081) - (int)1)] = safe_mul( _ptr__5080[(_5079 - _5081)],_ptr__5077[(_5079 - _5081)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5078)->size(0)))));
  _checked_ptr_1<long long> _ptr__5082(_5082 ? _5082->raw() : nullptr,_5082 ? _5082->size(0) : 0);
  int _10989 = (int)0;
  int _10990 = (int)((_5078)->size(0));
  for (int _5083 = _10989; _5083 < _10990; ++_5083)
  {
    {
      int _10991 = (int)0;
      int _10992 = _5079;
      for (int _5084 = _10991; _5084 < _10992; ++_5084)
      {
        {
          _ptr__5082[_5083] += safe_mul( _ptr__5080[_5084],((*_5078)(_5083,_5084)) );
        }
      }
    }
  }
  return _5082;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5085,    int _5086,    std::shared_ptr< monty::ndarray< int,1 > > _5087,    std::shared_ptr< monty::ndarray< int,1 > > _5088,    std::shared_ptr< monty::ndarray< double,1 > > _5089,    monty::rc_ptr< ::mosek::fusion::Expression > _5090,    int _5091){ return new mosek::fusion::ExprMulDiagRight(_5085,_5086,_5087,_5088,_5089,_5090,_5091); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5085,    int _5086,    std::shared_ptr< monty::ndarray< int,1 > > _5087,    std::shared_ptr< monty::ndarray< int,1 > > _5088,    std::shared_ptr< monty::ndarray< double,1 > > _5089,    monty::rc_ptr< ::mosek::fusion::Expression > _5090,    int _5091) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5085,_5086,_5087,_5088,_5089,_5090,_5091); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5085,    int _5086,    std::shared_ptr< monty::ndarray< int,1 > > _5087,    std::shared_ptr< monty::ndarray< int,1 > > _5088,    std::shared_ptr< monty::ndarray< double,1 > > _5089,    monty::rc_ptr< ::mosek::fusion::Expression > _5090,    int _5091){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5087(_5087 ? _5087->raw() : nullptr, _5087 ? _5087->size(0) : 0);
    _checked_ptr_1<int> _ptr__5088(_5088 ? _5088->raw() : nullptr, _5088 ? _5088->size(0) : 0);
    _checked_ptr_1<double> _ptr__5089(_5089 ? _5089->raw() : nullptr, _5089 ? _5089->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5086)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _5085;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _5086;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _5087;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _5088;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _5089;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _5090;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5092,    int _5093,    std::shared_ptr< monty::ndarray< int,1 > > _5094,    std::shared_ptr< monty::ndarray< int,1 > > _5095,    std::shared_ptr< monty::ndarray< double,1 > > _5096,    monty::rc_ptr< ::mosek::fusion::Expression > _5097){ return new mosek::fusion::ExprMulDiagRight(_5092,_5093,_5094,_5095,_5096,_5097); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5092,    int _5093,    std::shared_ptr< monty::ndarray< int,1 > > _5094,    std::shared_ptr< monty::ndarray< int,1 > > _5095,    std::shared_ptr< monty::ndarray< double,1 > > _5096,    monty::rc_ptr< ::mosek::fusion::Expression > _5097) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5092,_5093,_5094,_5095,_5096,_5097); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5092,    int _5093,    std::shared_ptr< monty::ndarray< int,1 > > _5094,    std::shared_ptr< monty::ndarray< int,1 > > _5095,    std::shared_ptr< monty::ndarray< double,1 > > _5096,    monty::rc_ptr< ::mosek::fusion::Expression > _5097){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5094(_5094 ? _5094->raw() : nullptr, _5094 ? _5094->size(0) : 0);
    _checked_ptr_1<int> _ptr__5095(_5095 ? _5095->raw() : nullptr, _5095 ? _5095->size(0) : 0);
    _checked_ptr_1<double> _ptr__5096(_5096 ? _5096->raw() : nullptr, _5096 ? _5096->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_5092,_5093,_5094,_5095,_5096,_5097,::mosek::fusion::p_ExprMulDiagRight::validate(_5092,_5093,_5094,_5095,_5096,_5097));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5098,monty::rc_ptr< ::mosek::fusion::WorkStack > _5099,monty::rc_ptr< ::mosek::fusion::WorkStack > _5100) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_5098,_5099,_5100); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5098,monty::rc_ptr< ::mosek::fusion::WorkStack > _5099,monty::rc_ptr< ::mosek::fusion::WorkStack > _5100){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_5099,_5098,_5100);
  _5099->pop_expr();
  int _5101 = mosek::fusion::p_WorkStack::_get_impl(_5099)->nd;
  int _5102 = mosek::fusion::p_WorkStack::_get_impl(_5099)->nnz;
  int _5103 = mosek::fusion::p_WorkStack::_get_impl(_5099)->nelem;
  int _5104 = mosek::fusion::p_WorkStack::_get_impl(_5099)->ncodeatom;
  bool _5105 = mosek::fusion::p_WorkStack::_get_impl(_5099)->hassp;
  int _5106 = mosek::fusion::p_WorkStack::_get_impl(_5099)->shape_base;
  int _5107 = mosek::fusion::p_WorkStack::_get_impl(_5099)->ptr_base;
  int _5108 = mosek::fusion::p_WorkStack::_get_impl(_5099)->sp_base;
  int _5109 = mosek::fusion::p_WorkStack::_get_impl(_5099)->nidxs_base;
  int _5110 = mosek::fusion::p_WorkStack::_get_impl(_5099)->cof_base;
  int _5111 = mosek::fusion::p_WorkStack::_get_impl(_5099)->codeptr_base;
  int _5112 = mosek::fusion::p_WorkStack::_get_impl(_5099)->code_base;
  int _5113 = mosek::fusion::p_WorkStack::_get_impl(_5099)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5114 = mosek::fusion::p_WorkStack::_get_impl(_5099)->i32;
  _checked_ptr_1<int> _ptr__5114(_5114 ? _5114->raw() : nullptr,_5114 ? _5114->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5115 = mosek::fusion::p_WorkStack::_get_impl(_5099)->i64;
  _checked_ptr_1<long long> _ptr__5115(_5115 ? _5115->raw() : nullptr,_5115 ? _5115->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5116 = mosek::fusion::p_WorkStack::_get_impl(_5099)->f64;
  _checked_ptr_1<double> _ptr__5116(_5116 ? _5116->raw() : nullptr,_5116 ? _5116->size(0) : 0);
  int _5117 = _ptr__5114[_5106];
  int _5118 = _ptr__5114[safe_add( _5106,(int)1 )];
  int _5119 = (int)((mval)->size(0));
  int _5120 = _5100->alloci32(_5119);
  int _5121 = _5100->alloci32(safe_add( mdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5122 = mosek::fusion::p_WorkStack::_get_impl(_5100)->i32;
  _checked_ptr_1<int> _ptr__5122(_5122 ? _5122->raw() : nullptr,_5122 ? _5122->size(0) : 0);
  {
    int _10993 = (int)0;
    int _10994 = safe_add( mdim1,(int)1 );
    for (int _5123 = _10993; _5123 < _10994; ++_5123)
    {
      {
        _ptr__5122[safe_add( _5121,_5123 )] = (int)0;
      }
    }
    int _10995 = (int)0;
    int _10996 = _5119;
    for (int _5124 = _10995; _5124 < _10996; ++_5124)
    {
      {
        ++ _ptr__5122[safe_add( safe_add( _5121,((*msubj)(_5124)) ),(int)1 )];
      }
    }
    int _10997 = (int)0;
    int _10998 = mdim1;
    for (int _5125 = _10997; _5125 < _10998; ++_5125)
    {
      {
        _ptr__5122[safe_add( safe_add( _5121,_5125 ),(int)1 )] += _ptr__5122[safe_add( _5121,_5125 )];
      }
    }
    int _10999 = (int)0;
    int _11000 = _5119;
    for (int _5126 = _10999; _5126 < _11000; ++_5126)
    {
      {
        _ptr__5122[safe_add( _5120,_ptr__5122[safe_add( _5121,((*msubj)(_5126)) )] )] = _5126;
        ++ _ptr__5122[safe_add( _5121,((*msubj)(_5126)) )];
      }
    }
    int _11001 = (int)0;
    int _11002 = mdim1;
    for (int _5127 = _11001; _5127 < _11002; ++_5127)
    {
      {
        _ptr__5122[(safe_add( _5121,mdim1 ) - _5127)] = _ptr__5122[((safe_add( _5121,mdim1 ) - _5127) - (int)1)];
      }
    }
    _ptr__5122[_5121] = (int)0;
  }
  int _5128 = (int)0;
  int _5129 = (int)0;
  int _5130 = (int)0;
  if ((!_5105))
  {
    {
      int _5131 = (int)0;
      while ( (_5131 < _5119) )
      {
        {
          int _5132 = ((*msubj)(_ptr__5122[safe_add( _5120,_5131 )]));
          int _5133 = _5131;
          while ( ((_5131 < _5119) && (_5132 == ((*msubj)(_ptr__5122[safe_add( _5120,_5131 )])))) )
          {
            {
              ++ _5131;
            }
          }
          int _11003 = _5133;
          int _11004 = _5131;
          for (int _5134 = _11003; _5134 < _11004; ++_5134)
          {
            {
              int _5135 = safe_add( safe_mul( ((*msubj)(_ptr__5122[safe_add( _5120,_5134 )])),_5118 ),((*msubi)(_ptr__5122[safe_add( _5120,_5134 )])) );
              _5129 += (_ptr__5114[safe_add( safe_add( _5107,_5135 ),(int)1 )] - _ptr__5114[safe_add( _5107,_5135 )]);
              if ((_5104 > (int)0))
              {
                {
                  _5128 += safe_add( (_ptr__5114[safe_add( _5111,_ptr__5114[safe_add( safe_add( _5107,_5135 ),(int)1 )] )] - _ptr__5114[safe_add( _5111,_ptr__5114[safe_add( _5107,_5135 )] )]),safe_mul( (int)2,(_ptr__5114[safe_add( safe_add( _5107,_5135 ),(int)1 )] - _ptr__5114[safe_add( _5107,_5135 )]) ) );
                }
              }
              {}
            }
          }
          ++ _5130;
        }
      }
    }
  }
  else
  {
    {
      int _5136 = (int)0;
      int _5137 = (int)0;
      int _11005 = (int)0;
      int _11006 = mdim1;
      for (int _5138 = _11005; _5138 < _11006; ++_5138)
      {
        {
          int _5139 = _5136;
          int _5140 = _5137;
          while ( ((_5136 < _5119) && (_5138 == ((*msubj)(_ptr__5122[safe_add( _5120,_5136 )])))) )
          {
            {
              ++ _5136;
            }
          }
          while ( ((_5137 < _5103) && (_5138 == (_ptr__5115[safe_add( _5108,_5137 )] / _5118))) )
          {
            {
              ++ _5137;
            }
          }
          int _5141 = _5139;
          int _5142 = _5140;
          int _5143 = (int)0;
          while ( ((_5142 < _5137) && (_5141 < _5136)) )
          {
            {
              if (((_ptr__5115[safe_add( _5108,_5142 )] % _5118) < ((*msubi)(_ptr__5122[safe_add( _5120,_5141 )]))))
              {
                {
                  ++ _5142;
                }
              }
              else if(((_ptr__5115[safe_add( _5108,_5142 )] % _5118) > ((*msubi)(_ptr__5122[safe_add( _5120,_5141 )]))))
              {
                {
                  ++ _5141;
                }
              }
              else
              {
                {
                  _5129 += (_ptr__5114[safe_add( safe_add( _5107,_5142 ),(int)1 )] - _ptr__5114[safe_add( _5107,_5142 )]);
                  if ((_5104 > (int)0))
                  {
                    {
                      _5128 += safe_add( (_ptr__5114[safe_add( _5111,_ptr__5114[safe_add( safe_add( _5107,_5142 ),(int)1 )] )] - _ptr__5114[safe_add( _5111,_ptr__5114[safe_add( _5107,_5142 )] )]),safe_mul( (int)2,(_ptr__5114[safe_add( safe_add( _5107,_5142 ),(int)1 )] - _ptr__5114[safe_add( _5107,_5142 )]) ) );
                    }
                  }
                  {}
                  ++ _5143;
                  ++ _5142;
                  ++ _5141;
                }
              }
            }
          }
          if ((_5143 > (int)0))
          {
            {
              ++ _5130;
            }
          }
          {}
        }
      }
    }
  }
  bool _5144 = (_5130 < _5117);
  _5098->alloc_expr((int)1,_5130,_5129,_5144,_5128);
  int _5145 = mosek::fusion::p_WorkStack::_get_impl(_5098)->ptr_base;
  int _5146 = mosek::fusion::p_WorkStack::_get_impl(_5098)->nidxs_base;
  int _11007;
  bool _11008 = _5144;
  if (_11008)
  {
    _11007 = mosek::fusion::p_WorkStack::_get_impl(_5098)->sp_base;
  }
  else
  {
    _11007 = _5098->alloci64(_5130);
  }
  int _5147 = _11007;
  int _5148 = mosek::fusion::p_WorkStack::_get_impl(_5098)->cof_base;
  int _5149 = mosek::fusion::p_WorkStack::_get_impl(_5098)->shape_base;
  int _5150 = mosek::fusion::p_WorkStack::_get_impl(_5098)->code_base;
  int _5151 = mosek::fusion::p_WorkStack::_get_impl(_5098)->codeptr_base;
  int _5152 = mosek::fusion::p_WorkStack::_get_impl(_5098)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5153 = mosek::fusion::p_WorkStack::_get_impl(_5098)->i64;
  _checked_ptr_1<long long> _ptr__5153(_5153 ? _5153->raw() : nullptr,_5153 ? _5153->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5154 = mosek::fusion::p_WorkStack::_get_impl(_5098)->f64;
  _checked_ptr_1<double> _ptr__5154(_5154 ? _5154->raw() : nullptr,_5154 ? _5154->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5155 = mosek::fusion::p_WorkStack::_get_impl(_5098)->i32;
  _checked_ptr_1<int> _ptr__5155(_5155 ? _5155->raw() : nullptr,_5155 ? _5155->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5156 = mosek::fusion::p_WorkStack::_get_impl(_5100)->i32;
  _checked_ptr_1<int> _ptr__5156(_5156 ? _5156->raw() : nullptr,_5156 ? _5156->size(0) : 0);
  {
    int _5157 = (int)0;
    int _5158 = (int)0;
    int _5159 = (int)0;
    _ptr__5155[_5145] = (int)0;
    if ((_5128 > (int)0))
    {
      {
        _ptr__5155[_5151] = (int)0;
      }
    }
    {}
    _ptr__5155[_5149] = mdim1;
    if ((!_5105))
    {
      {
        int _5160 = (int)0;
        while ( (_5160 < _5119) )
        {
          {
            int _5161 = ((*msubj)(_ptr__5156[safe_add( _5120,_5160 )]));
            int _5162 = _5160;
            while ( ((_5160 < _5119) && (_5161 == ((*msubj)(_ptr__5156[safe_add( _5120,_5160 )])))) )
            {
              {
                ++ _5160;
              }
            }
            int _11009 = _5162;
            int _11010 = _5160;
            for (int _5163 = _11009; _5163 < _11010; ++_5163)
            {
              {
                int _5164 = _ptr__5156[safe_add( _5120,_5163 )];
                int _5165 = safe_add( safe_mul( ((*msubj)(_5164)),_5118 ),((*msubi)(_5164)) );
                int _11011 = _ptr__5114[safe_add( _5107,_5165 )];
                int _11012 = _ptr__5114[safe_add( safe_add( _5107,_5165 ),(int)1 )];
                for (int _5166 = _11011; _5166 < _11012; ++_5166)
                {
                  {
                    _ptr__5153[safe_add( _5146,_5158 )] = _ptr__5115[safe_add( _5109,_5166 )];
                    _ptr__5154[safe_add( _5148,_5158 )] = (_ptr__5116[safe_add( _5110,_5166 )] * ((*mval)(_5164)));
                    if ((_5104 > (int)0))
                    {
                      {
                        int _11013 = _ptr__5114[safe_add( _5111,_5166 )];
                        int _11014 = _ptr__5114[safe_add( safe_add( _5111,_5166 ),(int)1 )];
                        for (int _5167 = _11013; _5167 < _11014; ++_5167)
                        {
                          {
                            _ptr__5155[safe_add( _5150,_5157 )] = _ptr__5114[safe_add( _5112,_5167 )];
                            _ptr__5154[safe_add( _5152,_5157 )] = _ptr__5116[safe_add( _5113,_5167 )];
                            ++ _5157;
                          }
                        }
                        _ptr__5155[safe_add( _5150,_5157 )] = 2;
                        _ptr__5154[safe_add( _5152,_5157 )] = ((*mval)(_5164));
                        ++ _5157;
                        _ptr__5155[safe_add( _5150,_5157 )] = 5;
                        ++ _5157;
                        _ptr__5155[safe_add( safe_add( _5151,_5158 ),(int)1 )] = _5157;
                      }
                    }
                    {}
                    ++ _5158;
                  }
                }
              }
            }
            _ptr__5153[safe_add( _5147,_5159 )] = _5161;
            _ptr__5155[safe_add( safe_add( _5145,_5159 ),(int)1 )] = _5158;
            ++ _5159;
          }
        }
      }
    }
    else
    {
      {
        int _5168 = (int)0;
        int _5169 = (int)0;
        int _11015 = (int)0;
        int _11016 = mdim1;
        for (int _5170 = _11015; _5170 < _11016; ++_5170)
        {
          {
            int _5171 = _5168;
            int _5172 = _5169;
            while ( ((_5169 < _5103) && (_5170 == (_ptr__5115[safe_add( _5108,_5169 )] / _5118))) )
            {
              {
                ++ _5169;
              }
            }
            while ( ((_5168 < _5119) && (_5170 == ((*msubj)(_ptr__5156[safe_add( _5120,_5168 )])))) )
            {
              {
                ++ _5168;
              }
            }
            int _5173 = _5171;
            int _5174 = _5172;
            int _5175 = (int)0;
            while ( ((_5174 < _5169) && (_5173 < _5168)) )
            {
              {
                if (((_ptr__5115[safe_add( _5108,_5174 )] % _5118) < ((*msubi)(_ptr__5156[safe_add( _5120,_5173 )]))))
                {
                  {
                    ++ _5174;
                  }
                }
                else if(((_ptr__5115[safe_add( _5108,_5174 )] % _5118) > ((*msubi)(_ptr__5156[safe_add( _5120,_5173 )]))))
                {
                  {
                    ++ _5173;
                  }
                }
                else
                {
                  {
                    int _5176 = _ptr__5156[safe_add( _5120,_5173 )];
                    int _11017 = _ptr__5114[safe_add( _5107,_5174 )];
                    int _11018 = _ptr__5114[safe_add( safe_add( _5107,_5174 ),(int)1 )];
                    for (int _5177 = _11017; _5177 < _11018; ++_5177)
                    {
                      {
                        _ptr__5153[safe_add( _5146,_5158 )] = _ptr__5115[safe_add( _5109,_5177 )];
                        _ptr__5154[safe_add( _5148,_5158 )] = (_ptr__5116[safe_add( _5110,_5177 )] * ((*mval)(_5176)));
                        if ((_5104 > (int)0))
                        {
                          {
                            int _11019 = _ptr__5114[safe_add( _5111,_5177 )];
                            int _11020 = _ptr__5114[safe_add( safe_add( _5111,_5177 ),(int)1 )];
                            for (int _5178 = _11019; _5178 < _11020; ++_5178)
                            {
                              {
                                _ptr__5155[safe_add( _5150,_5157 )] = _ptr__5114[safe_add( _5112,_5178 )];
                                _ptr__5154[safe_add( _5152,_5157 )] = _ptr__5116[safe_add( _5113,_5178 )];
                                ++ _5157;
                              }
                            }
                            _ptr__5155[safe_add( _5150,_5157 )] = 2;
                            _ptr__5154[safe_add( _5152,_5157 )] = ((*mval)(_5176));
                            ++ _5157;
                            _ptr__5155[safe_add( _5150,_5157 )] = 5;
                            ++ _5157;
                            _ptr__5155[safe_add( safe_add( _5151,_5158 ),(int)1 )] = _5157;
                          }
                        }
                        {}
                        ++ _5158;
                      }
                    }
                    ++ _5175;
                    ++ _5174;
                    ++ _5173;
                  }
                }
              }
            }
            if ((_5175 > (int)0))
            {
              {
                _ptr__5155[safe_add( safe_add( _5145,_5159 ),(int)1 )] = _5158;
                _ptr__5153[safe_add( _5147,_5159 )] = _5170;
                ++ _5159;
              }
            }
            {}
          }
        }
      }
    }
    if ((!_5144))
    {
      {
        _5098->popi64(_5130);
      }
    }
    {}
    if ((!(_5129 == _5158)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of non-zeros"));
      }
    }
    {}
    if ((!(_5130 == _5159)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of elements"));
      }
    }
    {}
  }
  _5100->clear();
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _5179,int _5180,std::shared_ptr< monty::ndarray< int,1 > > _5181,std::shared_ptr< monty::ndarray< int,1 > > _5182,std::shared_ptr< monty::ndarray< double,1 > > _5183,monty::rc_ptr< ::mosek::fusion::Expression > _5184){
  _checked_ptr_1<int> _ptr__5181(_5181 ? _5181->raw() : nullptr, _5181 ? _5181->size(0) : 0);
  _checked_ptr_1<int> _ptr__5182(_5182 ? _5182->raw() : nullptr, _5182 ? _5182->size(0) : 0);
  _checked_ptr_1<double> _ptr__5183(_5183 ? _5183->raw() : nullptr, _5183 ? _5183->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5185 = _5184->getShape();
  _checked_ptr_1<int> _ptr__5185(_5185 ? _5185->raw() : nullptr,_5185 ? _5185->size(0) : 0);
  if (((int)((_5185)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5186 = _ptr__5185[(int)0];
  int _5187 = _ptr__5185[(int)1];
  if (((_5179 < (int)0) || ((_5180 < (int)0) || ((_5186 < (int)0) || (_5187 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5179 != _5187) || (_5180 != _5186)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5181)->size(0)) != (int)((_5182)->size(0))) || ((int)((_5181)->size(0)) != (int)((_5183)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5188 = (int)((_5181)->size(0));
  bool _5189 = false;
  bool _5190 = false;
  {
    int _11021 = (int)0;
    int _11022 = _5188;
    for (int _5191 = _11021; _5191 < _11022; ++_5191)
    {
      {
        if (((_ptr__5181[_5191] < (int)0) || ((_ptr__5181[_5191] >= _5179) || ((_ptr__5182[_5191] < (int)0) || (_ptr__5182[_5191] >= _5180)))))
        {
          {
            _5189 = true;
          }
        }
        {}
      }
    }
    int _11023 = (int)0;
    int _11024 = (_5188 - (int)1);
    for (int _5192 = _11023; _5192 < _11024; ++_5192)
    {
      {
        if (((_ptr__5181[_5192] > _ptr__5181[safe_add( _5192,(int)1 )]) || ((_ptr__5181[_5192] == _ptr__5181[safe_add( _5192,(int)1 )]) && (_ptr__5182[_5192] >= _ptr__5182[safe_add( _5192,(int)1 )]))))
        {
          {
            _5190 = true;
          }
        }
        {}
      }
    }
  }
  if (_5189)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5190)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",m)"))->toString();
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5193,    int _5194,    std::shared_ptr< monty::ndarray< int,1 > > _5195,    std::shared_ptr< monty::ndarray< int,1 > > _5196,    std::shared_ptr< monty::ndarray< double,1 > > _5197,    monty::rc_ptr< ::mosek::fusion::Expression > _5198,    int _5199){ return new mosek::fusion::ExprMulDiagLeft(_5193,_5194,_5195,_5196,_5197,_5198,_5199); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5193,    int _5194,    std::shared_ptr< monty::ndarray< int,1 > > _5195,    std::shared_ptr< monty::ndarray< int,1 > > _5196,    std::shared_ptr< monty::ndarray< double,1 > > _5197,    monty::rc_ptr< ::mosek::fusion::Expression > _5198,    int _5199) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5193,_5194,_5195,_5196,_5197,_5198,_5199); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5193,    int _5194,    std::shared_ptr< monty::ndarray< int,1 > > _5195,    std::shared_ptr< monty::ndarray< int,1 > > _5196,    std::shared_ptr< monty::ndarray< double,1 > > _5197,    monty::rc_ptr< ::mosek::fusion::Expression > _5198,    int _5199){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5195(_5195 ? _5195->raw() : nullptr, _5195 ? _5195->size(0) : 0);
    _checked_ptr_1<int> _ptr__5196(_5196 ? _5196->raw() : nullptr, _5196 ? _5196->size(0) : 0);
    _checked_ptr_1<double> _ptr__5197(_5197 ? _5197->raw() : nullptr, _5197 ? _5197->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5193)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _5193;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _5194;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _5195;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _5196;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _5197;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _5198;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5200,    int _5201,    std::shared_ptr< monty::ndarray< int,1 > > _5202,    std::shared_ptr< monty::ndarray< int,1 > > _5203,    std::shared_ptr< monty::ndarray< double,1 > > _5204,    monty::rc_ptr< ::mosek::fusion::Expression > _5205){ return new mosek::fusion::ExprMulDiagLeft(_5200,_5201,_5202,_5203,_5204,_5205); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5200,    int _5201,    std::shared_ptr< monty::ndarray< int,1 > > _5202,    std::shared_ptr< monty::ndarray< int,1 > > _5203,    std::shared_ptr< monty::ndarray< double,1 > > _5204,    monty::rc_ptr< ::mosek::fusion::Expression > _5205) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5200,_5201,_5202,_5203,_5204,_5205); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5200,    int _5201,    std::shared_ptr< monty::ndarray< int,1 > > _5202,    std::shared_ptr< monty::ndarray< int,1 > > _5203,    std::shared_ptr< monty::ndarray< double,1 > > _5204,    monty::rc_ptr< ::mosek::fusion::Expression > _5205){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5202(_5202 ? _5202->raw() : nullptr, _5202 ? _5202->size(0) : 0);
    _checked_ptr_1<int> _ptr__5203(_5203 ? _5203->raw() : nullptr, _5203 ? _5203->size(0) : 0);
    _checked_ptr_1<double> _ptr__5204(_5204 ? _5204->raw() : nullptr, _5204 ? _5204->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_5200,_5201,_5202,_5203,_5204,_5205,::mosek::fusion::p_ExprMulDiagLeft::validate(_5200,_5201,_5202,_5203,_5204,_5205));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5206,monty::rc_ptr< ::mosek::fusion::WorkStack > _5207,monty::rc_ptr< ::mosek::fusion::WorkStack > _5208) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_5206,_5207,_5208); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5206,monty::rc_ptr< ::mosek::fusion::WorkStack > _5207,monty::rc_ptr< ::mosek::fusion::WorkStack > _5208){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_5207,_5206,_5208);
  _5207->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5209 = mosek::fusion::p_WorkStack::_get_impl(_5207)->i32;
  _checked_ptr_1<int> _ptr__5209(_5209 ? _5209->raw() : nullptr,_5209 ? _5209->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5210 = mosek::fusion::p_WorkStack::_get_impl(_5207)->i64;
  _checked_ptr_1<long long> _ptr__5210(_5210 ? _5210->raw() : nullptr,_5210 ? _5210->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5211 = mosek::fusion::p_WorkStack::_get_impl(_5207)->f64;
  _checked_ptr_1<double> _ptr__5211(_5211 ? _5211->raw() : nullptr,_5211 ? _5211->size(0) : 0);
  int _5212 = mosek::fusion::p_WorkStack::_get_impl(_5207)->nd;
  int _5213 = mosek::fusion::p_WorkStack::_get_impl(_5207)->nelem;
  int _5214 = mosek::fusion::p_WorkStack::_get_impl(_5207)->nnz;
  bool _5215 = mosek::fusion::p_WorkStack::_get_impl(_5207)->hassp;
  int _5216 = mosek::fusion::p_WorkStack::_get_impl(_5207)->ncodeatom;
  int _5217 = mosek::fusion::p_WorkStack::_get_impl(_5207)->ptr_base;
  int _5218 = mosek::fusion::p_WorkStack::_get_impl(_5207)->code_base;
  int _5219 = mosek::fusion::p_WorkStack::_get_impl(_5207)->cconst_base;
  int _5220 = mosek::fusion::p_WorkStack::_get_impl(_5207)->codeptr_base;
  int _5221 = mosek::fusion::p_WorkStack::_get_impl(_5207)->shape_base;
  int _5222 = mosek::fusion::p_WorkStack::_get_impl(_5207)->sp_base;
  int _5223 = mosek::fusion::p_WorkStack::_get_impl(_5207)->nidxs_base;
  int _5224 = mosek::fusion::p_WorkStack::_get_impl(_5207)->cof_base;
  int _5225 = mosek::fusion::p_WorkStack::_get_impl(_5207)->cconst_base;
  if ((_5212 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5226 = _ptr__5209[_5221];
  int _5227 = _ptr__5209[safe_add( _5221,(int)1 )];
  int _5228 = (int)((msubi)->size(0));
  if ((!_5215))
  {
    {
      int _5229 = (int)0;
      int _5230 = (int)0;
      int _5231 = (int)0;
      int _5232 = (int)0;
      while ( (_5232 < (int)((msubi)->size(0))) )
      {
        {
          int _5233 = ((*msubi)(_5232));
          while ( ((_5232 < (int)((msubi)->size(0))) && (((*msubi)(_5232)) == _5233)) )
          {
            {
              int _5234 = safe_add( safe_mul( ((*msubj)(_5232)),_5227 ),((*msubi)(_5232)) );
              _5229 += (_ptr__5209[safe_add( safe_add( _5217,_5234 ),(int)1 )] - _ptr__5209[safe_add( _5217,_5234 )]);
              if ((_5216 > (int)0))
              {
                {
                  _5231 += safe_add( (_ptr__5209[safe_add( _5220,_ptr__5209[safe_add( safe_add( _5217,_5234 ),(int)1 )] )] - _ptr__5209[safe_add( _5220,_ptr__5209[safe_add( _5217,_5234 )] )]),safe_mul( (int)2,(_ptr__5209[safe_add( safe_add( _5217,_5234 ),(int)1 )] - _ptr__5209[safe_add( _5217,_5234 )]) ) );
                }
              }
              {}
              ++ _5232;
            }
          }
          ++ _5230;
        }
      }
      bool _5235 = (_5230 < mdim0);
      _5206->alloc_expr((int)1,_5230,_5229,_5235,_5231);
      int _5236 = mosek::fusion::p_WorkStack::_get_impl(_5206)->ptr_base;
      int _5237 = mosek::fusion::p_WorkStack::_get_impl(_5206)->nidxs_base;
      int _11025;
      bool _11026 = _5235;
      if (_11026)
      {
        _11025 = mosek::fusion::p_WorkStack::_get_impl(_5206)->sp_base;
      }
      else
      {
        _11025 = _5206->alloci64(_5230);
      }
      int _5238 = _11025;
      int _5239 = mosek::fusion::p_WorkStack::_get_impl(_5206)->cof_base;
      int _5240 = mosek::fusion::p_WorkStack::_get_impl(_5206)->shape_base;
      int _5241 = mosek::fusion::p_WorkStack::_get_impl(_5206)->code_base;
      int _5242 = mosek::fusion::p_WorkStack::_get_impl(_5206)->codeptr_base;
      int _5243 = mosek::fusion::p_WorkStack::_get_impl(_5206)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5244 = mosek::fusion::p_WorkStack::_get_impl(_5206)->i64;
      _checked_ptr_1<long long> _ptr__5244(_5244 ? _5244->raw() : nullptr,_5244 ? _5244->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5245 = mosek::fusion::p_WorkStack::_get_impl(_5206)->f64;
      _checked_ptr_1<double> _ptr__5245(_5245 ? _5245->raw() : nullptr,_5245 ? _5245->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5246 = mosek::fusion::p_WorkStack::_get_impl(_5206)->i32;
      _checked_ptr_1<int> _ptr__5246(_5246 ? _5246->raw() : nullptr,_5246 ? _5246->size(0) : 0);
      {
        _ptr__5246[_5236] = (int)0;
        if ((_5216 > (int)0))
        {
          {
            _ptr__5246[_5242] = (int)0;
          }
        }
        {}
        _ptr__5246[_5240] = mdim0;
        int _5247 = (int)0;
        int _5248 = (int)0;
        int _5249 = (int)0;
        {
        }
        {
          int _5250 = (int)0;
          while ( (_5250 < (int)((msubi)->size(0))) )
          {
            {
              int _5251 = ((*msubi)(_5250));
              while ( ((_5250 < (int)((msubi)->size(0))) && (((*msubi)(_5250)) == _5251)) )
              {
                {
                  int _5252 = safe_add( safe_mul( ((*msubj)(_5250)),_5227 ),((*msubi)(_5250)) );
                  int _11027 = _ptr__5209[safe_add( _5217,_5252 )];
                  int _11028 = _ptr__5209[safe_add( safe_add( _5217,_5252 ),(int)1 )];
                  for (int _5253 = _11027; _5253 < _11028; ++_5253)
                  {
                    {
                      _ptr__5244[safe_add( _5237,_5247 )] = _ptr__5210[safe_add( _5223,_5253 )];
                      _ptr__5245[safe_add( _5239,_5247 )] = (_ptr__5211[safe_add( _5224,_5253 )] * ((*mval)(_5250)));
                      if ((_5231 > (int)0))
                      {
                        {
                          int _11029 = _ptr__5209[safe_add( _5220,_5253 )];
                          int _11030 = _ptr__5209[safe_add( safe_add( _5220,_5253 ),(int)1 )];
                          for (int _5254 = _11029; _5254 < _11030; ++_5254)
                          {
                            {
                              _ptr__5246[safe_add( _5241,_5249 )] = _ptr__5209[safe_add( _5218,_5254 )];
                              _ptr__5245[safe_add( _5243,_5249 )] = _ptr__5211[safe_add( _5219,_5254 )];
                              ++ _5249;
                            }
                          }
                          _ptr__5246[safe_add( _5241,_5249 )] = 2;
                          _ptr__5245[safe_add( _5243,_5249 )] = ((*mval)(_5250));
                          ++ _5249;
                          _ptr__5246[safe_add( _5241,_5249 )] = 5;
                          ++ _5249;
                          _ptr__5246[safe_add( safe_add( _5242,_5247 ),(int)1 )] = _5249;
                        }
                      }
                      {}
                      ++ _5247;
                    }
                  }
                  ++ _5250;
                }
              }
              _ptr__5246[safe_add( safe_add( _5236,_5248 ),(int)1 )] = _5247;
              _ptr__5244[safe_add( _5238,_5248 )] = _5251;
              ++ _5248;
            }
          }
        }
      }
      if ((!_5235))
      {
        {
          _5206->popi64(_5230);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5255 = _5208->alloci32(safe_add( _5227,(int)1 ));
      int _5256 = _5208->alloci32(_5213);
      int _5257 = _5208->alloci32(safe_add( mdim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5258 = mosek::fusion::p_WorkStack::_get_impl(_5208)->i32;
      _checked_ptr_1<int> _ptr__5258(_5258 ? _5258->raw() : nullptr,_5258 ? _5258->size(0) : 0);
      int _5259 = (int)0;
      int _5260 = (int)0;
      int _5261 = (int)0;
      {
        int _11031 = (int)0;
        int _11032 = safe_add( _5227,(int)1 );
        for (int _5262 = _11031; _5262 < _11032; ++_5262)
        {
          {
            _ptr__5258[safe_add( _5255,_5262 )] = (int)0;
          }
        }
        int _11033 = (int)0;
        int _11034 = _5213;
        for (int _5263 = _11033; _5263 < _11034; ++_5263)
        {
          {
            ++ _ptr__5258[safe_add( safe_add( _5255,(_ptr__5210[safe_add( _5222,_5263 )] % _5227) ),(int)1 )];
          }
        }
        int _11035 = (int)0;
        int _11036 = _5227;
        for (int _5264 = _11035; _5264 < _11036; ++_5264)
        {
          {
            _ptr__5258[safe_add( safe_add( _5255,_5264 ),(int)1 )] += _ptr__5258[safe_add( _5255,_5264 )];
          }
        }
        int _11037 = (int)0;
        int _11038 = _5213;
        for (int _5265 = _11037; _5265 < _11038; ++_5265)
        {
          {
            long long _5266 = (_ptr__5210[safe_add( _5222,_5265 )] % _5227);
            _ptr__5258[safe_add( _5256,_ptr__5258[safe_add( _5255,_5266 )] )] = _5265;
            ++ _ptr__5258[safe_add( _5255,_5266 )];
          }
        }
        int _11039 = (int)0;
        int _11040 = _5227;
        for (int _5267 = _11039; _5267 < _11040; ++_5267)
        {
          {
            _ptr__5258[(safe_add( _5255,_5227 ) - _5267)] = _ptr__5258[((safe_add( _5255,_5227 ) - _5267) - (int)1)];
          }
        }
        _ptr__5258[_5255] = (int)0;
        int _5268 = (int)0;
        int _5269 = (int)0;
        while ( ((_5269 < (int)((msubi)->size(0))) && (_5268 < _5213)) )
        {
          {
            if ((((*msubi)(_5269)) < (_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5268 )] )] % _5227)))
            {
              {
                ++ _5269;
              }
            }
            else if((((*msubi)(_5269)) > (_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5268 )] )] % _5227)))
            {
              {
                ++ _5268;
              }
            }
            else
            {
              {
                int _5270 = (int)0;
                long long _5271 = (_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5268 )] )] % _5227);
                int _5272 = _5269;
                while ( ((_5269 < (int)((msubi)->size(0))) && (((*msubi)(_5269)) == ((*msubi)(_5272)))) )
                {
                  {
                    ++ _5269;
                  }
                }
                int _5273 = _5268;
                while ( ((_5268 < _5213) && ((_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5268 )] )] % _5227) == _5271)) )
                {
                  {
                    ++ _5268;
                  }
                }
                int _5274 = _5273;
                int _5275 = _5272;
                int _5276 = (int)0;
                while ( ((_5275 < _5269) && (_5274 < _5268)) )
                {
                  {
                    int _5277 = _ptr__5258[safe_add( _5256,_5274 )];
                    if ((((*msubj)(_5275)) < (_ptr__5210[safe_add( _5222,_5277 )] / _5227)))
                    {
                      {
                        ++ _5275;
                      }
                    }
                    else if((((*msubj)(_5275)) > (_ptr__5210[safe_add( _5222,_5277 )] / _5227)))
                    {
                      {
                        ++ _5274;
                      }
                    }
                    else
                    {
                      {
                        _5260 += (_ptr__5209[safe_add( safe_add( _5217,_5277 ),(int)1 )] - _ptr__5209[safe_add( _5217,_5277 )]);
                        if ((_5216 > (int)0))
                        {
                          {
                            _5259 += safe_add( (_ptr__5209[safe_add( _5220,_ptr__5209[safe_add( safe_add( _5217,_5277 ),(int)1 )] )] - _ptr__5209[safe_add( _5220,_ptr__5209[safe_add( _5217,_5277 )] )]),safe_mul( (int)2,(_ptr__5209[safe_add( safe_add( _5217,_5277 ),(int)1 )] - _ptr__5209[safe_add( _5217,_5277 )]) ) );
                          }
                        }
                        {}
                        ++ _5276;
                        ++ _5275;
                        ++ _5274;
                      }
                    }
                  }
                }
                if ((_5276 > (int)0))
                {
                  {
                    ++ _5261;
                  }
                }
                {}
              }
            }
          }
        }
      }
      bool _5278 = (_5261 < mdim0);
      _5206->alloc_expr((int)1,_5261,_5260,_5278,_5259);
      int _5279 = mosek::fusion::p_WorkStack::_get_impl(_5206)->ptr_base;
      int _5280 = mosek::fusion::p_WorkStack::_get_impl(_5206)->nidxs_base;
      int _11041;
      bool _11042 = _5278;
      if (_11042)
      {
        _11041 = mosek::fusion::p_WorkStack::_get_impl(_5206)->sp_base;
      }
      else
      {
        _11041 = _5206->alloci64(_5261);
      }
      int _5281 = _11041;
      int _5282 = mosek::fusion::p_WorkStack::_get_impl(_5206)->cof_base;
      int _5283 = mosek::fusion::p_WorkStack::_get_impl(_5206)->shape_base;
      int _5284 = mosek::fusion::p_WorkStack::_get_impl(_5206)->code_base;
      int _5285 = mosek::fusion::p_WorkStack::_get_impl(_5206)->codeptr_base;
      int _5286 = mosek::fusion::p_WorkStack::_get_impl(_5206)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5287 = mosek::fusion::p_WorkStack::_get_impl(_5206)->i64;
      _checked_ptr_1<long long> _ptr__5287(_5287 ? _5287->raw() : nullptr,_5287 ? _5287->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5288 = mosek::fusion::p_WorkStack::_get_impl(_5206)->f64;
      _checked_ptr_1<double> _ptr__5288(_5288 ? _5288->raw() : nullptr,_5288 ? _5288->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5289 = mosek::fusion::p_WorkStack::_get_impl(_5206)->i32;
      _checked_ptr_1<int> _ptr__5289(_5289 ? _5289->raw() : nullptr,_5289 ? _5289->size(0) : 0);
      {
        int _5290 = (int)0;
        int _5291 = (int)0;
        int _5292 = (int)0;
        int _5293 = (int)0;
        int _5294 = (int)0;
        _ptr__5289[_5279] = (int)0;
        if ((_5216 > (int)0))
        {
          {
            _ptr__5289[_5285] = (int)0;
          }
        }
        {}
        _ptr__5289[_5283] = mdim0;
        while ( ((_5294 < (int)((msubi)->size(0))) && (_5293 < _5213)) )
        {
          {
            if ((((*msubi)(_5294)) < (_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5293 )] )] % _5227)))
            {
              {
                ++ _5294;
              }
            }
            else if((((*msubi)(_5294)) > (_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5293 )] )] % _5227)))
            {
              {
                ++ _5293;
              }
            }
            else
            {
              {
                int _5295 = (int)0;
                long long _5296 = (_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5293 )] )] % _5227);
                int _5297 = _5294;
                while ( ((_5294 < (int)((msubi)->size(0))) && (((*msubi)(_5294)) == ((*msubi)(_5297)))) )
                {
                  {
                    ++ _5294;
                  }
                }
                int _5298 = _5293;
                while ( ((_5293 < _5213) && ((_ptr__5210[safe_add( _5222,_ptr__5258[safe_add( _5256,_5293 )] )] % _5227) == _5296)) )
                {
                  {
                    ++ _5293;
                  }
                }
                int _5299 = _5298;
                int _5300 = _5297;
                int _5301 = (int)0;
                int _5302 = ((*msubi)(_5297));
                while ( ((_5300 < _5294) && (_5299 < _5293)) )
                {
                  {
                    int _5303 = _ptr__5258[safe_add( _5256,_5299 )];
                    if ((((*msubj)(_5300)) < (_ptr__5210[safe_add( _5222,_5303 )] / _5227)))
                    {
                      {
                        ++ _5300;
                      }
                    }
                    else if((((*msubj)(_5300)) > (_ptr__5210[safe_add( _5222,_5303 )] / _5227)))
                    {
                      {
                        ++ _5299;
                      }
                    }
                    else
                    {
                      {
                        int _11043 = _ptr__5209[safe_add( _5217,_5303 )];
                        int _11044 = _ptr__5209[safe_add( safe_add( _5217,_5303 ),(int)1 )];
                        for (int _5304 = _11043; _5304 < _11044; ++_5304)
                        {
                          {
                            _ptr__5287[safe_add( _5280,_5291 )] = _ptr__5210[safe_add( _5223,_5304 )];
                            _ptr__5288[safe_add( _5282,_5291 )] = (_ptr__5211[safe_add( _5224,_5304 )] * ((*mval)(_5300)));
                            if ((_5216 > (int)0))
                            {
                              {
                                int _11045 = _ptr__5209[safe_add( _5220,_5304 )];
                                int _11046 = _ptr__5209[safe_add( safe_add( _5220,_5304 ),(int)1 )];
                                for (int _5305 = _11045; _5305 < _11046; ++_5305)
                                {
                                  {
                                    _ptr__5289[safe_add( _5284,_5292 )] = _ptr__5209[safe_add( _5218,_5305 )];
                                    _ptr__5288[safe_add( _5286,_5292 )] = _ptr__5211[safe_add( _5219,_5305 )];
                                    ++ _5292;
                                  }
                                }
                                _ptr__5289[safe_add( _5284,_5292 )] = 2;
                                _ptr__5288[safe_add( _5286,_5292 )] = ((*mval)(_5300));
                                ++ _5292;
                                _ptr__5289[safe_add( _5284,_5292 )] = 5;
                                ++ _5292;
                                _ptr__5289[safe_add( safe_add( _5285,_5291 ),(int)1 )] = _5292;
                              }
                            }
                            {}
                            ++ _5291;
                            ++ _5301;
                          }
                        }
                        ++ _5300;
                        ++ _5299;
                      }
                    }
                  }
                }
                if ((_5301 > (int)0))
                {
                  {
                    _ptr__5289[safe_add( safe_add( _5279,_5290 ),(int)1 )] = _5291;
                    _ptr__5287[safe_add( _5281,_5290 )] = _5302;
                    ++ _5290;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_5291 != _5260))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
          }
        }
        {}
        if ((_5290 != _5261))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((!_5278))
      {
        {
          _5206->popi64(_5261);
        }
      }
      {}
    }
  }
  _5208->clear();
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _5306,int _5307,std::shared_ptr< monty::ndarray< int,1 > > _5308,std::shared_ptr< monty::ndarray< int,1 > > _5309,std::shared_ptr< monty::ndarray< double,1 > > _5310,monty::rc_ptr< ::mosek::fusion::Expression > _5311){
  _checked_ptr_1<int> _ptr__5308(_5308 ? _5308->raw() : nullptr, _5308 ? _5308->size(0) : 0);
  _checked_ptr_1<int> _ptr__5309(_5309 ? _5309->raw() : nullptr, _5309 ? _5309->size(0) : 0);
  _checked_ptr_1<double> _ptr__5310(_5310 ? _5310->raw() : nullptr, _5310 ? _5310->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5312 = _5311->getShape();
  _checked_ptr_1<int> _ptr__5312(_5312 ? _5312->raw() : nullptr,_5312 ? _5312->size(0) : 0);
  if (((int)((_5312)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5313 = _ptr__5312[(int)0];
  int _5314 = _ptr__5312[(int)1];
  if (((_5306 < (int)0) || (_5307 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5307 != _5313) || (_5306 != _5314)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5308)->size(0)) != (int)((_5309)->size(0))) || ((int)((_5308)->size(0)) != (int)((_5310)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5315 = (int)((_5308)->size(0));
  bool _5316 = false;
  bool _5317 = false;
  {
    int _11047 = (int)0;
    int _11048 = _5315;
    for (int _5318 = _11047; _5318 < _11048; ++_5318)
    {
      {
        if (((_ptr__5308[_5318] < (int)0) || ((_ptr__5308[_5318] >= _5306) || ((_ptr__5309[_5318] < (int)0) || (_ptr__5309[_5318] >= _5307)))))
        {
          {
            _5316 = true;
          }
        }
        {}
      }
    }
    int _11049 = (int)0;
    int _11050 = (_5315 - (int)1);
    for (int _5319 = _11049; _5319 < _11050; ++_5319)
    {
      {
        if (((_ptr__5308[_5319] > _ptr__5308[safe_add( _5319,(int)1 )]) || ((_ptr__5308[_5319] == _ptr__5308[safe_add( _5319,(int)1 )]) && (_ptr__5309[_5319] >= _ptr__5309[safe_add( _5319,(int)1 )]))))
        {
          {
            _5317 = true;
          }
        }
        {}
      }
    }
  }
  if (_5316)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5317)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagLeft(m,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5320,    std::shared_ptr< monty::ndarray< long long,1 > > _5321,    monty::rc_ptr< ::mosek::fusion::Expression > _5322){ return new mosek::fusion::ExprMulElement(_5320,_5321,_5322); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5320,    std::shared_ptr< monty::ndarray< long long,1 > > _5321,    monty::rc_ptr< ::mosek::fusion::Expression > _5322) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5320,_5321,_5322); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5320,    std::shared_ptr< monty::ndarray< long long,1 > > _5321,    monty::rc_ptr< ::mosek::fusion::Expression > _5322){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5320(_5320 ? _5320->raw() : nullptr, _5320 ? _5320->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5321(_5321 ? _5321->raw() : nullptr, _5321 ? _5321->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_5320,_5321,_5322,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5323 = _5322->getShape();
    _checked_ptr_1<int> _ptr__5323(_5323 ? _5323->raw() : nullptr,_5323 ? _5323->size(0) : 0);
    if (((int)((_5320)->size(0)) != (int)((_5321)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _5324 = ::mosek::fusion::p_Set::size(_5323);
    bool _5325 = false;
    bool _5326 = false;
    {
      int _11051 = (int)0;
      int _11052 = (int)((_5321)->size(0));
      for (int _5327 = _11051; _5327 < _11052; ++_5327)
      {
        {
          if (((_ptr__5321[_5327] < (int)0) || (_ptr__5321[_5327] >= _5324)))
          {
            {
              _5325 = true;
            }
          }
          {}
        }
      }
      int _11053 = (int)0;
      int _11054 = ((int)((_5321)->size(0)) - (int)1);
      for (int _5328 = _11053; _5328 < _11054; ++_5328)
      {
        {
          if ((_ptr__5321[_5328] >= _ptr__5321[safe_add( _5328,(int)1 )]))
          {
            {
              _5326 = true;
            }
          }
          {}
        }
      }
    }
    if (_5325)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_5326)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5329,    std::shared_ptr< monty::ndarray< long long,1 > > _5330,    monty::rc_ptr< ::mosek::fusion::Expression > _5331,    int _5332){ return new mosek::fusion::ExprMulElement(_5329,_5330,_5331,_5332); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5329,    std::shared_ptr< monty::ndarray< long long,1 > > _5330,    monty::rc_ptr< ::mosek::fusion::Expression > _5331,    int _5332) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5329,_5330,_5331,_5332); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5329,    std::shared_ptr< monty::ndarray< long long,1 > > _5330,    monty::rc_ptr< ::mosek::fusion::Expression > _5331,    int _5332){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5329(_5329 ? _5329->raw() : nullptr, _5329 ? _5329->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5330(_5330 ? _5330->raw() : nullptr, _5330 ? _5330->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5331->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _5331;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _5329;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _5330;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5333,monty::rc_ptr< ::mosek::fusion::WorkStack > _5334,monty::rc_ptr< ::mosek::fusion::WorkStack > _5335) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_5333,_5334,_5335); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5333,monty::rc_ptr< ::mosek::fusion::WorkStack > _5334,monty::rc_ptr< ::mosek::fusion::WorkStack > _5335){
  expr->eval(_5334,_5333,_5335);
  _5334->pop_expr();
  int _5336 = mosek::fusion::p_WorkStack::_get_impl(_5334)->nd;
  int _5337 = mosek::fusion::p_WorkStack::_get_impl(_5334)->nelem;
  int _5338 = mosek::fusion::p_WorkStack::_get_impl(_5334)->nnz;
  int _5339 = mosek::fusion::p_WorkStack::_get_impl(_5334)->ncodeatom;
  bool _5340 = mosek::fusion::p_WorkStack::_get_impl(_5334)->hassp;
  int _5341 = mosek::fusion::p_WorkStack::_get_impl(_5334)->shape_base;
  int _5342 = mosek::fusion::p_WorkStack::_get_impl(_5334)->ptr_base;
  int _5343 = mosek::fusion::p_WorkStack::_get_impl(_5334)->nidxs_base;
  int _5344 = mosek::fusion::p_WorkStack::_get_impl(_5334)->sp_base;
  int _5345 = mosek::fusion::p_WorkStack::_get_impl(_5334)->cof_base;
  int _5346 = mosek::fusion::p_WorkStack::_get_impl(_5334)->code_base;
  int _5347 = mosek::fusion::p_WorkStack::_get_impl(_5334)->codeptr_base;
  int _5348 = mosek::fusion::p_WorkStack::_get_impl(_5334)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5349 = mosek::fusion::p_WorkStack::_get_impl(_5334)->i32;
  _checked_ptr_1<int> _ptr__5349(_5349 ? _5349->raw() : nullptr,_5349 ? _5349->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5350 = mosek::fusion::p_WorkStack::_get_impl(_5334)->i64;
  _checked_ptr_1<long long> _ptr__5350(_5350 ? _5350->raw() : nullptr,_5350 ? _5350->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5351 = mosek::fusion::p_WorkStack::_get_impl(_5334)->f64;
  _checked_ptr_1<double> _ptr__5351(_5351 ? _5351->raw() : nullptr,_5351 ? _5351->size(0) : 0);
  int _5352 = (int)0;
  int _5353 = (int)0;
  int _5354 = (int)0;
  if ((!_5340))
  {
    {
      _5354 = (int)((msp)->size(0));
      int _11055 = (int)0;
      int _11056 = (int)((msp)->size(0));
      for (int _5355 = _11055; _5355 < _11056; ++_5355)
      {
        {
          _5353 += (_ptr__5349[safe_add( safe_add( _5342,((*msp)(_5355)) ),(int)1 )] - _ptr__5349[safe_add( _5342,((*msp)(_5355)) )]);
        }
      }
      if ((_5339 > (int)0))
      {
        {
          int _11057 = (int)0;
          int _11058 = (int)((msp)->size(0));
          for (int _5356 = _11057; _5356 < _11058; ++_5356)
          {
            {
              _5352 += safe_add( (_ptr__5349[safe_add( _5347,_ptr__5349[safe_add( safe_add( _5342,((*msp)(_5356)) ),(int)1 )] )] - _ptr__5349[safe_add( _5347,_ptr__5349[safe_add( _5342,((*msp)(_5356)) )] )]),safe_mul( (int)2,(_ptr__5349[safe_add( safe_add( _5342,((*msp)(_5356)) ),(int)1 )] - _ptr__5349[safe_add( _5342,((*msp)(_5356)) )]) ) );
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5357 = (int)((msp)->size(0));
      int _5358 = (int)0;
      int _5359 = _5337;
      int _5360 = (int)0;
      while ( ((_5358 < _5357) && (_5360 < _5359)) )
      {
        {
          if ((((*msp)(_5358)) < _ptr__5350[safe_add( _5344,_5360 )]))
          {
            {
              ++ _5358;
            }
          }
          else if((((*msp)(_5358)) > _ptr__5350[safe_add( _5344,_5360 )]))
          {
            {
              ++ _5360;
            }
          }
          else
          {
            {
              _5353 += (_ptr__5349[safe_add( safe_add( _5342,_5360 ),(int)1 )] - _ptr__5349[safe_add( _5342,_5360 )]);
              if ((_5339 > (int)0))
              {
                {
                  _5352 += safe_add( (_ptr__5349[safe_add( _5347,_ptr__5349[safe_add( safe_add( _5342,_5360 ),(int)1 )] )] - _ptr__5349[safe_add( _5347,_ptr__5349[safe_add( _5342,_5360 )] )]),safe_mul( (int)2,(_ptr__5349[safe_add( safe_add( _5342,_5360 ),(int)1 )] - _ptr__5349[safe_add( _5342,_5360 )]) ) );
                }
              }
              {}
              ++ _5358;
              ++ _5360;
              ++ _5354;
            }
          }
        }
      }
    }
  }
  long long _5361 = (long long)1;
  int _11059 = (int)0;
  int _11060 = _5336;
  for (int _5362 = _11059; _5362 < _11060; ++_5362)
  {
    {
      _5361 *= _ptr__5349[safe_add( _5341,_5362 )];
    }
  }
  bool _5363 = (_5354 < _5361);
  int _5364 = _5336;
  _5333->alloc_expr(_5364,_5354,_5353,_5363,_5352);
  int _5365 = mosek::fusion::p_WorkStack::_get_impl(_5333)->ptr_base;
  int _5366 = mosek::fusion::p_WorkStack::_get_impl(_5333)->shape_base;
  int _5367 = mosek::fusion::p_WorkStack::_get_impl(_5333)->nidxs_base;
  int _11061;
  bool _11062 = _5363;
  if (_11062)
  {
    _11061 = mosek::fusion::p_WorkStack::_get_impl(_5333)->sp_base;
  }
  else
  {
    _11061 = _5333->alloci64(_5354);
  }
  int _5368 = _11061;
  int _5369 = mosek::fusion::p_WorkStack::_get_impl(_5333)->cof_base;
  int _5370 = mosek::fusion::p_WorkStack::_get_impl(_5333)->code_base;
  int _5371 = mosek::fusion::p_WorkStack::_get_impl(_5333)->codeptr_base;
  int _5372 = mosek::fusion::p_WorkStack::_get_impl(_5333)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5373 = mosek::fusion::p_WorkStack::_get_impl(_5333)->i32;
  _checked_ptr_1<int> _ptr__5373(_5373 ? _5373->raw() : nullptr,_5373 ? _5373->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5374 = mosek::fusion::p_WorkStack::_get_impl(_5333)->i64;
  _checked_ptr_1<long long> _ptr__5374(_5374 ? _5374->raw() : nullptr,_5374 ? _5374->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5375 = mosek::fusion::p_WorkStack::_get_impl(_5333)->f64;
  _checked_ptr_1<double> _ptr__5375(_5375 ? _5375->raw() : nullptr,_5375 ? _5375->size(0) : 0);
  {
    int _5376 = (int)0;
    int _5377 = (int)0;
    int _5378 = (int)0;
    _ptr__5373[_5365] = (int)0;
    if ((_5352 > (int)0))
    {
      {
        _ptr__5373[_5371] = (int)0;
      }
    }
    {}
    int _11063 = (int)0;
    int _11064 = _5364;
    for (int _5379 = _11063; _5379 < _11064; ++_5379)
    {
      {
        _ptr__5373[safe_add( _5366,_5379 )] = _ptr__5349[safe_add( _5341,_5379 )];
      }
    }
    if ((!_5340))
    {
      {
        int _11065 = (int)0;
        int _11066 = (int)((msp)->size(0));
        for (int _5380 = _11065; _5380 < _11066; ++_5380)
        {
          {
            int _5381 = _ptr__5349[safe_add( _5342,((*msp)(_5380)) )];
            int _5382 = _ptr__5349[safe_add( safe_add( _5342,((*msp)(_5380)) ),(int)1 )];
            int _11067 = _5381;
            int _11068 = _5382;
            for (int _5383 = _11067; _5383 < _11068; ++_5383)
            {
              {
                _ptr__5374[safe_add( _5367,_5378 )] = _ptr__5350[safe_add( _5343,_5383 )];
                _ptr__5375[safe_add( _5369,_5378 )] = (_ptr__5351[safe_add( _5345,_5383 )] * ((*mcof)(_5380)));
                if ((_5339 > (int)0))
                {
                  {
                    int _11069 = _ptr__5349[safe_add( _5347,_5383 )];
                    int _11070 = _ptr__5349[safe_add( safe_add( _5347,_5383 ),(int)1 )];
                    for (int _5384 = _11069; _5384 < _11070; ++_5384)
                    {
                      {
                        _ptr__5373[safe_add( _5370,_5376 )] = _ptr__5349[safe_add( _5346,_5384 )];
                        _ptr__5375[safe_add( _5372,_5376 )] = _ptr__5351[safe_add( _5348,_5384 )];
                        ++ _5376;
                      }
                    }
                    _ptr__5373[safe_add( _5370,_5376 )] = 2;
                    _ptr__5375[safe_add( _5372,_5376 )] = ((*mcof)(_5380));
                    ++ _5376;
                    _ptr__5373[safe_add( _5370,_5376 )] = 5;
                    ++ _5376;
                    _ptr__5373[safe_add( safe_add( _5371,_5378 ),(int)1 )] = _5376;
                  }
                }
                {}
                ++ _5378;
              }
            }
            _ptr__5373[safe_add( safe_add( _5365,_5380 ),(int)1 )] = _5378;
            _ptr__5374[safe_add( _5368,_5380 )] = ((*msp)(_5380));
          }
        }
      }
    }
    else
    {
      {
        int _5385 = (int)((msp)->size(0));
        int _5386 = (int)0;
        int _5387 = _5337;
        int _5388 = (int)0;
        while ( ((_5386 < _5385) && (_5388 < _5387)) )
        {
          {
            if ((((*msp)(_5386)) < _ptr__5350[safe_add( _5344,_5388 )]))
            {
              {
                ++ _5386;
              }
            }
            else if((((*msp)(_5386)) > _ptr__5350[safe_add( _5344,_5388 )]))
            {
              {
                ++ _5388;
              }
            }
            else
            {
              {
                int _5389 = _ptr__5349[safe_add( _5342,_5388 )];
                int _5390 = _ptr__5349[safe_add( safe_add( _5342,_5388 ),(int)1 )];
                int _11071 = _5389;
                int _11072 = _5390;
                for (int _5391 = _11071; _5391 < _11072; ++_5391)
                {
                  {
                    _ptr__5374[safe_add( _5367,_5378 )] = _ptr__5350[safe_add( _5343,_5391 )];
                    _ptr__5375[safe_add( _5369,_5378 )] = (_ptr__5351[safe_add( _5343,_5391 )] * ((*mcof)(_5386)));
                    if ((_5339 > (int)0))
                    {
                      {
                        int _11073 = _ptr__5349[safe_add( _5347,_5391 )];
                        int _11074 = _ptr__5349[safe_add( safe_add( _5347,_5391 ),(int)1 )];
                        for (int _5392 = _11073; _5392 < _11074; ++_5392)
                        {
                          {
                            _ptr__5373[safe_add( _5370,_5376 )] = _ptr__5349[safe_add( _5346,_5392 )];
                            _ptr__5375[safe_add( _5372,_5376 )] = _ptr__5351[safe_add( _5348,_5392 )];
                            ++ _5376;
                          }
                        }
                        _ptr__5373[safe_add( _5370,_5376 )] = 2;
                        _ptr__5375[safe_add( _5372,_5376 )] = ((*mcof)(_5386));
                        ++ _5376;
                        _ptr__5373[safe_add( _5370,_5376 )] = 5;
                        ++ _5376;
                        _ptr__5373[safe_add( safe_add( _5371,_5378 ),(int)1 )] = _5376;
                      }
                    }
                    {}
                    ++ _5378;
                  }
                }
                _ptr__5373[safe_add( safe_add( _5365,_5377 ),(int)1 )] = _5378;
                _ptr__5374[safe_add( _5368,_5377 )] = ((*msp)(_5386));
                ++ _5377;
                ++ _5386;
                ++ _5388;
              }
            }
          }
        }
      }
    }
  }
  if ((!_5363))
  {
    {
      _5333->popi64(_5354);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulElement(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _5393,    monty::rc_ptr< ::mosek::fusion::Expression > _5394){ return new mosek::fusion::ExprMulScalarConst(_5393,_5394); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _5393,    monty::rc_ptr< ::mosek::fusion::Expression > _5394) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_5393,_5394); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _5393,    monty::rc_ptr< ::mosek::fusion::Expression > _5394){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_5394->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _5393;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _5394;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5395,monty::rc_ptr< ::mosek::fusion::WorkStack > _5396,monty::rc_ptr< ::mosek::fusion::WorkStack > _5397) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_5395,_5396,_5397); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5395,monty::rc_ptr< ::mosek::fusion::WorkStack > _5396,monty::rc_ptr< ::mosek::fusion::WorkStack > _5397){
  expr->eval(_5396,_5395,_5397);
  _5396->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5398 = mosek::fusion::p_WorkStack::_get_impl(_5396)->i32;
  _checked_ptr_1<int> _ptr__5398(_5398 ? _5398->raw() : nullptr,_5398 ? _5398->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5399 = mosek::fusion::p_WorkStack::_get_impl(_5396)->i64;
  _checked_ptr_1<long long> _ptr__5399(_5399 ? _5399->raw() : nullptr,_5399 ? _5399->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5400 = mosek::fusion::p_WorkStack::_get_impl(_5396)->f64;
  _checked_ptr_1<double> _ptr__5400(_5400 ? _5400->raw() : nullptr,_5400 ? _5400->size(0) : 0);
  int _5401 = mosek::fusion::p_WorkStack::_get_impl(_5396)->nd;
  int _5402 = mosek::fusion::p_WorkStack::_get_impl(_5396)->nelem;
  int _5403 = mosek::fusion::p_WorkStack::_get_impl(_5396)->nnz;
  bool _5404 = mosek::fusion::p_WorkStack::_get_impl(_5396)->hassp;
  int _5405 = mosek::fusion::p_WorkStack::_get_impl(_5396)->ncodeatom;
  int _5406 = mosek::fusion::p_WorkStack::_get_impl(_5396)->ptr_base;
  int _5407 = mosek::fusion::p_WorkStack::_get_impl(_5396)->code_base;
  int _5408 = mosek::fusion::p_WorkStack::_get_impl(_5396)->cconst_base;
  int _5409 = mosek::fusion::p_WorkStack::_get_impl(_5396)->codeptr_base;
  int _5410 = mosek::fusion::p_WorkStack::_get_impl(_5396)->shape_base;
  int _5411 = mosek::fusion::p_WorkStack::_get_impl(_5396)->sp_base;
  int _5412 = mosek::fusion::p_WorkStack::_get_impl(_5396)->nidxs_base;
  int _5413 = mosek::fusion::p_WorkStack::_get_impl(_5396)->cof_base;
  int _5414 = mosek::fusion::p_WorkStack::_get_impl(_5396)->cconst_base;
  int _11075;
  bool _11076 = (_5405 == (int)0);
  if (_11076)
  {
    _11075 = (int)0;
  }
  else
  {
    _11075 = safe_add( _5405,safe_mul( (int)2,_5403 ) );
  }
  int _5415 = _11075;
  _5395->alloc_expr(_5401,_5402,_5403,_5404,_5415);
  std::shared_ptr< monty::ndarray< long long,1 > > _5416 = mosek::fusion::p_WorkStack::_get_impl(_5395)->i64;
  _checked_ptr_1<long long> _ptr__5416(_5416 ? _5416->raw() : nullptr,_5416 ? _5416->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5417 = mosek::fusion::p_WorkStack::_get_impl(_5395)->f64;
  _checked_ptr_1<double> _ptr__5417(_5417 ? _5417->raw() : nullptr,_5417 ? _5417->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5418 = mosek::fusion::p_WorkStack::_get_impl(_5395)->i32;
  _checked_ptr_1<int> _ptr__5418(_5418 ? _5418->raw() : nullptr,_5418 ? _5418->size(0) : 0);
  int _5419 = mosek::fusion::p_WorkStack::_get_impl(_5395)->ptr_base;
  int _5420 = mosek::fusion::p_WorkStack::_get_impl(_5395)->nidxs_base;
  int _5421 = mosek::fusion::p_WorkStack::_get_impl(_5395)->cof_base;
  int _5422 = mosek::fusion::p_WorkStack::_get_impl(_5395)->code_base;
  int _5423 = mosek::fusion::p_WorkStack::_get_impl(_5395)->codeptr_base;
  int _5424 = mosek::fusion::p_WorkStack::_get_impl(_5395)->cconst_base;
  bool _5425 = mosek::fusion::p_WorkStack::_get_impl(_5395)->hassp;
  int _5426 = mosek::fusion::p_WorkStack::_get_impl(_5395)->shape_base;
  int _5427 = mosek::fusion::p_WorkStack::_get_impl(_5395)->sp_base;
  {
    int _11077 = (int)0;
    int _11078 = safe_add( _5402,(int)1 );
    for (int _5428 = _11077; _5428 < _11078; ++_5428)
    {
      {
        _ptr__5418[safe_add( _5419,_5428 )] = _ptr__5398[safe_add( _5406,_5428 )];
      }
    }
    int _11079 = (int)0;
    int _11080 = _5403;
    for (int _5429 = _11079; _5429 < _11080; ++_5429)
    {
      {
        _ptr__5416[safe_add( _5420,_5429 )] = _ptr__5399[safe_add( _5412,_5429 )];
        _ptr__5417[safe_add( _5421,_5429 )] = (_ptr__5400[safe_add( _5413,_5429 )] * c);
      }
    }
    if (_5404)
    {
      {
        int _11081 = (int)0;
        int _11082 = _5402;
        for (int _5430 = _11081; _5430 < _11082; ++_5430)
        {
          {
            _ptr__5416[safe_add( _5427,_5430 )] = _ptr__5399[safe_add( _5411,_5430 )];
          }
        }
      }
    }
    {}
    int _11083 = (int)0;
    int _11084 = _5401;
    for (int _5431 = _11083; _5431 < _11084; ++_5431)
    {
      {
        _ptr__5418[safe_add( _5426,_5431 )] = _ptr__5398[safe_add( _5410,_5431 )];
      }
    }
    if ((_5405 > (int)0))
    {
      {
        _ptr__5418[_5423] = (int)0;
        int _5432 = (int)0;
        int _11085 = (int)0;
        int _11086 = _5403;
        for (int _5433 = _11085; _5433 < _11086; ++_5433)
        {
          {
            int _11087 = _ptr__5398[safe_add( _5409,_5433 )];
            int _11088 = _ptr__5398[safe_add( safe_add( _5409,_5433 ),(int)1 )];
            for (int _5434 = _11087; _5434 < _11088; ++_5434)
            {
              {
                _ptr__5418[safe_add( _5422,_5432 )] = _ptr__5398[safe_add( _5407,_5434 )];
                _ptr__5417[safe_add( _5424,_5432 )] = _ptr__5400[safe_add( _5408,_5434 )];
                ++ _5432;
              }
            }
            _ptr__5418[safe_add( _5422,_5432 )] = 2;
            _ptr__5417[safe_add( _5424,_5432 )] = c;
            ++ _5432;
            _ptr__5418[safe_add( _5422,_5432 )] = 5;
            ++ _5432;
            _ptr__5418[safe_add( safe_add( _5423,_5433 ),(int)1 )] = _5432;
          }
        }
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5435,    int _5436,    std::shared_ptr< monty::ndarray< int,1 > > _5437,    std::shared_ptr< monty::ndarray< int,1 > > _5438,    std::shared_ptr< monty::ndarray< double,1 > > _5439,    monty::rc_ptr< ::mosek::fusion::Expression > _5440,    int _5441){ return new mosek::fusion::ExprScalarMul(_5435,_5436,_5437,_5438,_5439,_5440,_5441); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5435,    int _5436,    std::shared_ptr< monty::ndarray< int,1 > > _5437,    std::shared_ptr< monty::ndarray< int,1 > > _5438,    std::shared_ptr< monty::ndarray< double,1 > > _5439,    monty::rc_ptr< ::mosek::fusion::Expression > _5440,    int _5441) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5435,_5436,_5437,_5438,_5439,_5440,_5441); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5435,    int _5436,    std::shared_ptr< monty::ndarray< int,1 > > _5437,    std::shared_ptr< monty::ndarray< int,1 > > _5438,    std::shared_ptr< monty::ndarray< double,1 > > _5439,    monty::rc_ptr< ::mosek::fusion::Expression > _5440,    int _5441){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5437(_5437 ? _5437->raw() : nullptr, _5437 ? _5437->size(0) : 0);
    _checked_ptr_1<int> _ptr__5438(_5438 ? _5438->raw() : nullptr, _5438 ? _5438->size(0) : 0);
    _checked_ptr_1<double> _ptr__5439(_5439 ? _5439->raw() : nullptr, _5439 ? _5439->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5435),(int)(_5436)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _5435;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _5436;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _5437;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _5438;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _5439;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _5440;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5442,    int _5443,    std::shared_ptr< monty::ndarray< int,1 > > _5444,    std::shared_ptr< monty::ndarray< int,1 > > _5445,    std::shared_ptr< monty::ndarray< double,1 > > _5446,    monty::rc_ptr< ::mosek::fusion::Expression > _5447){ return new mosek::fusion::ExprScalarMul(_5442,_5443,_5444,_5445,_5446,_5447); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5442,    int _5443,    std::shared_ptr< monty::ndarray< int,1 > > _5444,    std::shared_ptr< monty::ndarray< int,1 > > _5445,    std::shared_ptr< monty::ndarray< double,1 > > _5446,    monty::rc_ptr< ::mosek::fusion::Expression > _5447) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5442,_5443,_5444,_5445,_5446,_5447); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5442,    int _5443,    std::shared_ptr< monty::ndarray< int,1 > > _5444,    std::shared_ptr< monty::ndarray< int,1 > > _5445,    std::shared_ptr< monty::ndarray< double,1 > > _5446,    monty::rc_ptr< ::mosek::fusion::Expression > _5447){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5444(_5444 ? _5444->raw() : nullptr, _5444 ? _5444->size(0) : 0);
    _checked_ptr_1<int> _ptr__5445(_5445 ? _5445->raw() : nullptr, _5445 ? _5445->size(0) : 0);
    _checked_ptr_1<double> _ptr__5446(_5446 ? _5446->raw() : nullptr, _5446 ? _5446->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_5442,_5443,_5444,_5445,_5446,_5447,::mosek::fusion::p_ExprScalarMul::validate(_5442,_5443,_5444,_5445,_5446,_5447));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5448,monty::rc_ptr< ::mosek::fusion::WorkStack > _5449,monty::rc_ptr< ::mosek::fusion::WorkStack > _5450) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_5448,_5449,_5450); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5448,monty::rc_ptr< ::mosek::fusion::WorkStack > _5449,monty::rc_ptr< ::mosek::fusion::WorkStack > _5450){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_5449,_5448,_5450);
  _5449->pop_expr();
  int _5451 = mosek::fusion::p_WorkStack::_get_impl(_5449)->nd;
  int _5452 = mosek::fusion::p_WorkStack::_get_impl(_5449)->nelem;
  int _5453 = mosek::fusion::p_WorkStack::_get_impl(_5449)->nnz;
  bool _5454 = mosek::fusion::p_WorkStack::_get_impl(_5449)->hassp;
  int _5455 = mosek::fusion::p_WorkStack::_get_impl(_5449)->ncodeatom;
  int _5456 = mosek::fusion::p_WorkStack::_get_impl(_5449)->ptr_base;
  int _5457 = mosek::fusion::p_WorkStack::_get_impl(_5449)->sp_base;
  int _5458 = mosek::fusion::p_WorkStack::_get_impl(_5449)->nidxs_base;
  int _5459 = mosek::fusion::p_WorkStack::_get_impl(_5449)->cof_base;
  int _5460 = mosek::fusion::p_WorkStack::_get_impl(_5449)->code_base;
  int _5461 = mosek::fusion::p_WorkStack::_get_impl(_5449)->codeptr_base;
  int _5462 = mosek::fusion::p_WorkStack::_get_impl(_5449)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5463 = mosek::fusion::p_WorkStack::_get_impl(_5449)->i32;
  _checked_ptr_1<int> _ptr__5463(_5463 ? _5463->raw() : nullptr,_5463 ? _5463->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5464 = mosek::fusion::p_WorkStack::_get_impl(_5449)->i64;
  _checked_ptr_1<long long> _ptr__5464(_5464 ? _5464->raw() : nullptr,_5464 ? _5464->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5465 = mosek::fusion::p_WorkStack::_get_impl(_5449)->f64;
  _checked_ptr_1<double> _ptr__5465(_5465 ? _5465->raw() : nullptr,_5465 ? _5465->size(0) : 0);
  int _5466 = (int)((mval)->size(0));
  if ((_5451 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_5452 == (int)0))
  {
    {
      _5448->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_5448)->i32)(mosek::fusion::p_WorkStack::_get_impl(_5448)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_5448)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_5448)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      int _11089;
      bool _11090 = (_5455 > (int)0);
      if (_11090)
      {
        _11089 = safe_mul( (int)2,_5453 );
      }
      else
      {
        _11089 = (int)0;
      }
      int _5467 = safe_mul( _5466,safe_add( _5455,_11089 ) );
      _5448->alloc_expr((int)2,_5466,safe_mul( _5466,_5453 ),true,_5467);
      int _5468 = mosek::fusion::p_WorkStack::_get_impl(_5448)->ptr_base;
      int _5469 = mosek::fusion::p_WorkStack::_get_impl(_5448)->nidxs_base;
      int _5470 = mosek::fusion::p_WorkStack::_get_impl(_5448)->sp_base;
      int _5471 = mosek::fusion::p_WorkStack::_get_impl(_5448)->cof_base;
      int _5472 = mosek::fusion::p_WorkStack::_get_impl(_5448)->shape_base;
      int _5473 = mosek::fusion::p_WorkStack::_get_impl(_5448)->code_base;
      int _5474 = mosek::fusion::p_WorkStack::_get_impl(_5448)->codeptr_base;
      int _5475 = mosek::fusion::p_WorkStack::_get_impl(_5448)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5476 = mosek::fusion::p_WorkStack::_get_impl(_5448)->i32;
      _checked_ptr_1<int> _ptr__5476(_5476 ? _5476->raw() : nullptr,_5476 ? _5476->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5477 = mosek::fusion::p_WorkStack::_get_impl(_5448)->i64;
      _checked_ptr_1<long long> _ptr__5477(_5477 ? _5477->raw() : nullptr,_5477 ? _5477->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5478 = mosek::fusion::p_WorkStack::_get_impl(_5448)->f64;
      _checked_ptr_1<double> _ptr__5478(_5478 ? _5478->raw() : nullptr,_5478 ? _5478->size(0) : 0);
      _ptr__5476[_5472] = mdim0;
      _ptr__5476[safe_add( _5472,(int)1 )] = mdim1;
      int _5479 = (int)0;
      int _5480 = (int)0;
      _ptr__5476[_5468] = (int)0;
      if ((_5455 > (int)0))
      {
        {
          _ptr__5476[_5474] = (int)0;
          int _11091 = (int)0;
          int _11092 = _5466;
          for (int _5481 = _11091; _5481 < _11092; ++_5481)
          {
            {
              int _11093 = (int)0;
              int _11094 = _5453;
              for (int _5482 = _11093; _5482 < _11094; ++_5482)
              {
                {
                  _ptr__5477[safe_add( _5469,_5480 )] = _ptr__5464[safe_add( _5458,_5482 )];
                  _ptr__5478[safe_add( _5471,_5480 )] = (_ptr__5465[safe_add( _5459,_5482 )] * ((*mval)(_5481)));
                  int _11095 = _ptr__5463[safe_add( _5461,_5482 )];
                  int _11096 = _ptr__5463[safe_add( safe_add( _5461,_5482 ),(int)1 )];
                  for (int _5483 = _11095; _5483 < _11096; ++_5483)
                  {
                    {
                      _ptr__5476[safe_add( _5473,_5479 )] = _ptr__5463[safe_add( _5460,_5483 )];
                      _ptr__5478[safe_add( _5475,_5479 )] = _ptr__5465[safe_add( _5462,_5483 )];
                      ++ _5479;
                    }
                  }
                  _ptr__5476[safe_add( _5473,_5479 )] = 2;
                  _ptr__5478[safe_add( _5475,_5479 )] = ((*mval)(_5481));
                  ++ _5479;
                  _ptr__5476[safe_add( _5473,_5479 )] = 5;
                  ++ _5479;
                  _ptr__5476[safe_add( safe_add( _5474,_5480 ),(int)1 )] = _5479;
                  ++ _5480;
                }
              }
              _ptr__5477[safe_add( _5470,_5481 )] = safe_add( safe_mul( ((*msubi)(_5481)),mdim1 ),((*msubj)(_5481)) );
              _ptr__5476[safe_add( safe_add( _5468,_5481 ),(int)1 )] = _5480;
            }
          }
        }
      }
      else
      {
        {
          int _11097 = (int)0;
          int _11098 = _5466;
          for (int _5484 = _11097; _5484 < _11098; ++_5484)
          {
            {
              int _11099 = (int)0;
              int _11100 = _5453;
              for (int _5485 = _11099; _5485 < _11100; ++_5485)
              {
                {
                  _ptr__5477[safe_add( _5469,_5480 )] = _ptr__5464[safe_add( _5458,_5485 )];
                  _ptr__5478[safe_add( _5471,_5480 )] = (_ptr__5465[safe_add( _5459,_5485 )] * ((*mval)(_5484)));
                  ++ _5480;
                }
              }
              _ptr__5477[safe_add( _5470,_5484 )] = safe_add( safe_mul( ((*msubi)(_5484)),mdim1 ),((*msubj)(_5484)) );
              _ptr__5476[safe_add( safe_add( _5468,_5484 ),(int)1 )] = _5480;
            }
          }
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _5486,int _5487,std::shared_ptr< monty::ndarray< int,1 > > _5488,std::shared_ptr< monty::ndarray< int,1 > > _5489,std::shared_ptr< monty::ndarray< double,1 > > _5490,monty::rc_ptr< ::mosek::fusion::Expression > _5491){
  _checked_ptr_1<int> _ptr__5488(_5488 ? _5488->raw() : nullptr, _5488 ? _5488->size(0) : 0);
  _checked_ptr_1<int> _ptr__5489(_5489 ? _5489->raw() : nullptr, _5489 ? _5489->size(0) : 0);
  _checked_ptr_1<double> _ptr__5490(_5490 ? _5490->raw() : nullptr, _5490 ? _5490->size(0) : 0);
  int _5492 = _5491->getND();
  if ((_5492 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5486 < (int)0) || (_5487 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_5488)->size(0)) != (int)((_5489)->size(0))) || ((int)((_5488)->size(0)) != (int)((_5490)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5493 = (int)((_5488)->size(0));
  bool _5494 = false;
  bool _5495 = false;
  {
    int _11101 = (int)0;
    int _11102 = _5493;
    for (int _5496 = _11101; _5496 < _11102; ++_5496)
    {
      {
        if (((_ptr__5488[_5496] < (int)0) || ((_ptr__5488[_5496] >= _5486) || ((_ptr__5489[_5496] < (int)0) || (_ptr__5489[_5496] >= _5487)))))
        {
          {
            _5494 = true;
          }
        }
        {}
      }
    }
    int _11103 = (int)0;
    int _11104 = (_5493 - (int)1);
    for (int _5497 = _11103; _5497 < _11104; ++_5497)
    {
      {
        if (((_ptr__5488[_5497] > _ptr__5488[safe_add( _5497,(int)1 )]) || ((_ptr__5488[_5497] == _ptr__5488[safe_add( _5497,(int)1 )]) && (_ptr__5489[_5497] >= _ptr__5489[safe_add( _5497,(int)1 )]))))
        {
          {
            _5495 = true;
          }
        }
        {}
      }
    }
  }
  if (_5494)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5495)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5498,    int _5499,    std::shared_ptr< monty::ndarray< int,1 > > _5500,    std::shared_ptr< monty::ndarray< int,1 > > _5501,    std::shared_ptr< monty::ndarray< double,1 > > _5502,    monty::rc_ptr< ::mosek::fusion::Expression > _5503,    int _5504){ return new mosek::fusion::ExprMulRight(_5498,_5499,_5500,_5501,_5502,_5503,_5504); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5498,    int _5499,    std::shared_ptr< monty::ndarray< int,1 > > _5500,    std::shared_ptr< monty::ndarray< int,1 > > _5501,    std::shared_ptr< monty::ndarray< double,1 > > _5502,    monty::rc_ptr< ::mosek::fusion::Expression > _5503,    int _5504) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5498,_5499,_5500,_5501,_5502,_5503,_5504); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5498,    int _5499,    std::shared_ptr< monty::ndarray< int,1 > > _5500,    std::shared_ptr< monty::ndarray< int,1 > > _5501,    std::shared_ptr< monty::ndarray< double,1 > > _5502,    monty::rc_ptr< ::mosek::fusion::Expression > _5503,    int _5504){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5500(_5500 ? _5500->raw() : nullptr, _5500 ? _5500->size(0) : 0);
    _checked_ptr_1<int> _ptr__5501(_5501 ? _5501->raw() : nullptr, _5501 ? _5501->size(0) : 0);
    _checked_ptr_1<double> _ptr__5502(_5502 ? _5502->raw() : nullptr, _5502 ? _5502->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_5499,_5503->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _5498;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _5499;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _5500;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _5501;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _5502;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _5503;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5505,    int _5506,    std::shared_ptr< monty::ndarray< int,1 > > _5507,    std::shared_ptr< monty::ndarray< int,1 > > _5508,    std::shared_ptr< monty::ndarray< double,1 > > _5509,    monty::rc_ptr< ::mosek::fusion::Expression > _5510){ return new mosek::fusion::ExprMulRight(_5505,_5506,_5507,_5508,_5509,_5510); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5505,    int _5506,    std::shared_ptr< monty::ndarray< int,1 > > _5507,    std::shared_ptr< monty::ndarray< int,1 > > _5508,    std::shared_ptr< monty::ndarray< double,1 > > _5509,    monty::rc_ptr< ::mosek::fusion::Expression > _5510) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5505,_5506,_5507,_5508,_5509,_5510); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5505,    int _5506,    std::shared_ptr< monty::ndarray< int,1 > > _5507,    std::shared_ptr< monty::ndarray< int,1 > > _5508,    std::shared_ptr< monty::ndarray< double,1 > > _5509,    monty::rc_ptr< ::mosek::fusion::Expression > _5510){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5507(_5507 ? _5507->raw() : nullptr, _5507 ? _5507->size(0) : 0);
    _checked_ptr_1<int> _ptr__5508(_5508 ? _5508->raw() : nullptr, _5508 ? _5508->size(0) : 0);
    _checked_ptr_1<double> _ptr__5509(_5509 ? _5509->raw() : nullptr, _5509 ? _5509->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_5505,_5506,_5507,_5508,_5509,_5510,::mosek::fusion::p_ExprMulRight::validate(_5505,_5506,_5507,_5508,_5509,_5510));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5511,monty::rc_ptr< ::mosek::fusion::WorkStack > _5512,monty::rc_ptr< ::mosek::fusion::WorkStack > _5513) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_5511,_5512,_5513); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5511,monty::rc_ptr< ::mosek::fusion::WorkStack > _5512,monty::rc_ptr< ::mosek::fusion::WorkStack > _5513){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_5512,_5511,_5513);
  _5512->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5514 = mosek::fusion::p_WorkStack::_get_impl(_5512)->i32;
  _checked_ptr_1<int> _ptr__5514(_5514 ? _5514->raw() : nullptr,_5514 ? _5514->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5515 = mosek::fusion::p_WorkStack::_get_impl(_5512)->i64;
  _checked_ptr_1<long long> _ptr__5515(_5515 ? _5515->raw() : nullptr,_5515 ? _5515->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5516 = mosek::fusion::p_WorkStack::_get_impl(_5512)->f64;
  _checked_ptr_1<double> _ptr__5516(_5516 ? _5516->raw() : nullptr,_5516 ? _5516->size(0) : 0);
  int _5517 = mosek::fusion::p_WorkStack::_get_impl(_5512)->nd;
  if ((_5517 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5518 = mosek::fusion::p_WorkStack::_get_impl(_5512)->nelem;
  int _5519 = mosek::fusion::p_WorkStack::_get_impl(_5512)->nnz;
  int _5520 = mosek::fusion::p_WorkStack::_get_impl(_5512)->ncodeatom;
  bool _5521 = mosek::fusion::p_WorkStack::_get_impl(_5512)->hassp;
  int _5522 = mosek::fusion::p_WorkStack::_get_impl(_5512)->ptr_base;
  int _5523 = mosek::fusion::p_WorkStack::_get_impl(_5512)->shape_base;
  int _5524 = mosek::fusion::p_WorkStack::_get_impl(_5512)->sp_base;
  int _5525 = mosek::fusion::p_WorkStack::_get_impl(_5512)->nidxs_base;
  int _5526 = mosek::fusion::p_WorkStack::_get_impl(_5512)->cof_base;
  int _5527 = mosek::fusion::p_WorkStack::_get_impl(_5512)->codeptr_base;
  int _5528 = mosek::fusion::p_WorkStack::_get_impl(_5512)->code_base;
  int _5529 = mosek::fusion::p_WorkStack::_get_impl(_5512)->cconst_base;
  int _5530 = _ptr__5514[_5523];
  int _5531 = _ptr__5514[safe_add( _5523,(int)1 )];
  int _5532 = (int)((mval)->size(0));
  bool _5533 = (_5532 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  if (_5533)
  {
    {
      int _5534 = _5513->alloci32(safe_add( mdim1,(int)1 ));
      int _5535 = _5513->alloci32(_5532);
      int _5536 = _5513->alloci32(safe_add( _5530,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5537 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i32;
      _checked_ptr_1<int> _ptr__5537(_5537 ? _5537->raw() : nullptr,_5537 ? _5537->size(0) : 0);
      {
        int _11105 = (int)0;
        int _11106 = safe_add( mdim1,(int)1 );
        for (int _5538 = _11105; _5538 < _11106; ++_5538)
        {
          {
            _ptr__5537[safe_add( _5534,_5538 )] = (int)0;
          }
        }
        int _11107 = (int)0;
        int _11108 = _5532;
        for (int _5539 = _11107; _5539 < _11108; ++_5539)
        {
          {
            ++ _ptr__5537[safe_add( safe_add( _5534,((*msubj)(_5539)) ),(int)1 )];
          }
        }
        int _11109 = (int)0;
        int _11110 = mdim1;
        for (int _5540 = _11109; _5540 < _11110; ++_5540)
        {
          {
            _ptr__5537[safe_add( safe_add( _5534,_5540 ),(int)1 )] += _ptr__5537[safe_add( _5534,_5540 )];
          }
        }
        int _11111 = (int)0;
        int _11112 = _5532;
        for (int _5541 = _11111; _5541 < _11112; ++_5541)
        {
          {
            _ptr__5537[safe_add( _5535,_ptr__5537[safe_add( _5534,((*msubj)(_5541)) )] )] = _5541;
            ++ _ptr__5537[safe_add( _5534,((*msubj)(_5541)) )];
          }
        }
        int _11113 = (int)0;
        int _11114 = mdim1;
        for (int _5542 = _11113; _5542 < _11114; ++_5542)
        {
          {
            _ptr__5537[(safe_add( _5534,mdim1 ) - _5542)] = _ptr__5537[((safe_add( _5534,mdim1 ) - _5542) - (int)1)];
          }
        }
        _ptr__5537[_5534] = (int)0;
        int _11115 = (int)0;
        int _11116 = safe_add( _5530,(int)1 );
        for (int _5543 = _11115; _5543 < _11116; ++_5543)
        {
          {
            _ptr__5537[safe_add( _5536,_5543 )] = (int)0;
          }
        }
      }
      if (_5521)
      {
        {
          int _5544 = (int)0;
          int _5545 = (int)0;
          long long _5546 = (long long)0;
          {
            int _5547 = (int)0;
            while ( (_5547 < _5518) )
            {
              {
                long long _5548 = (_ptr__5515[safe_add( _5524,_5547 )] / _5531);
                int _5549 = _5547;
                ++ _5547;
                while ( ((_5547 < _5518) && ((_ptr__5515[safe_add( _5524,_5547 )] / _5531) == _5548)) )
                {
                  {
                    ++ _5547;
                  }
                }
                int _5550 = _5547;
                int _5551 = (int)0;
                while ( (_5551 < _5532) )
                {
                  {
                    int _5552 = ((*msubj)(_ptr__5537[safe_add( _5535,_5551 )]));
                    int _5553 = _5551;
                    ++ _5551;
                    while ( ((_5551 < _5532) && (((*msubj)(_ptr__5537[safe_add( _5535,_5551 )])) == _5552)) )
                    {
                      {
                        ++ _5551;
                      }
                    }
                    int _5554 = _5551;
                    bool _5555 = false;
                    int _5556 = _5553;
                    int _5557 = _5549;
                    while ( ((_5557 < _5550) && (_5556 < _5554)) )
                    {
                      {
                        int _5558 = _ptr__5537[safe_add( _5535,_5556 )];
                        if (((_ptr__5515[safe_add( _5524,_5557 )] % _5531) < ((*msubi)(_5558))))
                        {
                          {
                            ++ _5557;
                          }
                        }
                        else if(((_ptr__5515[safe_add( _5524,_5557 )] % _5531) > ((*msubi)(_5558))))
                        {
                          {
                            ++ _5556;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5558)) > (int)0) || ((int)0 < ((*mval)(_5558)))))
                            {
                              {
                                _5546 += (_ptr__5514[safe_add( safe_add( _5522,_5557 ),(int)1 )] - _ptr__5514[safe_add( _5522,_5557 )]);
                                if ((_5520 > (int)0))
                                {
                                  {
                                    _5544 += safe_add( (_ptr__5514[safe_add( _5527,_ptr__5514[safe_add( safe_add( _5522,_5557 ),(int)1 )] )] - _ptr__5514[safe_add( _5527,_ptr__5514[safe_add( _5522,_5557 )] )]),safe_mul( (int)2,(_ptr__5514[safe_add( safe_add( _5522,_5557 ),(int)1 )] - _ptr__5514[safe_add( _5522,_5557 )]) ) );
                                  }
                                }
                                {}
                                ++ _5557;
                                ++ _5556;
                                _5555 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5555)
                    {
                      {
                        ++ _5545;
                      }
                    }
                    {}
                  }
                }
              }
            }
          }
          bool _5559 = (_5545 < safe_mul( _5530,mdim1 ));
          _5511->alloc_expr((int)2,_5545,(int)_5546,_5559,_5544);
          int _5560 = mosek::fusion::p_WorkStack::_get_impl(_5511)->ptr_base;
          int _5561 = mosek::fusion::p_WorkStack::_get_impl(_5511)->nidxs_base;
          int _11117;
          bool _11118 = _5559;
          if (_11118)
          {
            _11117 = mosek::fusion::p_WorkStack::_get_impl(_5511)->sp_base;
          }
          else
          {
            _11117 = _5511->alloci64(_5545);
          }
          int _5562 = _11117;
          int _5563 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cof_base;
          int _5564 = mosek::fusion::p_WorkStack::_get_impl(_5511)->shape_base;
          int _5565 = mosek::fusion::p_WorkStack::_get_impl(_5511)->codeptr_base;
          int _5566 = mosek::fusion::p_WorkStack::_get_impl(_5511)->code_base;
          int _5567 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5568 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i32;
          _checked_ptr_1<int> _ptr__5568(_5568 ? _5568->raw() : nullptr,_5568 ? _5568->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5569 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i64;
          _checked_ptr_1<long long> _ptr__5569(_5569 ? _5569->raw() : nullptr,_5569 ? _5569->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5570 = mosek::fusion::p_WorkStack::_get_impl(_5511)->f64;
          _checked_ptr_1<double> _ptr__5570(_5570 ? _5570->raw() : nullptr,_5570 ? _5570->size(0) : 0);
          _ptr__5568[_5564] = _5530;
          _ptr__5568[safe_add( _5564,(int)1 )] = mdim1;
          _ptr__5568[_5560] = (int)0;
          if ((_5544 > (int)0))
          {
            {
              _ptr__5568[_5565] = (int)0;
            }
          }
          {}
          {
            int _5571 = (int)0;
            int _5572 = (int)0;
            int _5573 = (int)0;
            int _5574 = (int)0;
            while ( (_5571 < _5518) )
            {
              {
                long long _5575 = (_ptr__5515[safe_add( _5524,_5571 )] / _5531);
                int _5576 = _5571;
                ++ _5571;
                while ( ((_5571 < _5518) && ((_ptr__5515[safe_add( _5524,_5571 )] / _5531) == _5575)) )
                {
                  {
                    ++ _5571;
                  }
                }
                int _5577 = _5571;
                int _5578 = (int)0;
                while ( (_5578 < _5532) )
                {
                  {
                    int _5579 = ((*msubj)(_ptr__5537[safe_add( _5535,_5578 )]));
                    int _5580 = _5578;
                    ++ _5578;
                    while ( ((_5578 < _5532) && (((*msubj)(_ptr__5537[safe_add( _5535,_5578 )])) == _5579)) )
                    {
                      {
                        ++ _5578;
                      }
                    }
                    int _5581 = _5578;
                    int _5582 = _5580;
                    int _5583 = _5576;
                    bool _5584 = false;
                    while ( ((_5583 < _5577) && (_5582 < _5581)) )
                    {
                      {
                        int _5585 = _ptr__5537[safe_add( _5535,_5582 )];
                        if (((_ptr__5515[safe_add( _5524,_5583 )] % _5531) < ((*msubi)(_5585))))
                        {
                          {
                            ++ _5583;
                          }
                        }
                        else if(((_ptr__5515[safe_add( _5524,_5583 )] % _5531) > ((*msubi)(_5585))))
                        {
                          {
                            ++ _5582;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5585)) > (int)0) || ((int)0 < ((*mval)(_5585)))))
                            {
                              {
                                int _11119 = _ptr__5514[safe_add( _5522,_5583 )];
                                int _11120 = _ptr__5514[safe_add( safe_add( _5522,_5583 ),(int)1 )];
                                for (int _5586 = _11119; _5586 < _11120; ++_5586)
                                {
                                  {
                                    _ptr__5569[safe_add( _5561,_5574 )] = _ptr__5515[safe_add( _5525,_5586 )];
                                    _ptr__5570[safe_add( _5563,_5574 )] = (_ptr__5516[safe_add( _5526,_5586 )] * ((*mval)(_5585)));
                                    if ((_5520 > (int)0))
                                    {
                                      {
                                        int _11121 = _ptr__5514[safe_add( _5527,_5586 )];
                                        int _11122 = _ptr__5514[safe_add( safe_add( _5527,_5586 ),(int)1 )];
                                        for (int _5587 = _11121; _5587 < _11122; ++_5587)
                                        {
                                          {
                                            _ptr__5568[safe_add( _5566,_5572 )] = _ptr__5514[safe_add( _5528,_5587 )];
                                            _ptr__5570[safe_add( _5567,_5572 )] = _ptr__5516[safe_add( _5529,_5587 )];
                                            ++ _5572;
                                          }
                                        }
                                        _ptr__5568[safe_add( _5566,_5572 )] = 2;
                                        _ptr__5570[safe_add( _5567,_5572 )] = ((*mval)(_5582));
                                        ++ _5572;
                                        _ptr__5568[safe_add( _5566,_5572 )] = 5;
                                        ++ _5572;
                                        _ptr__5568[safe_add( safe_add( _5565,_5574 ),(int)1 )] = _5572;
                                      }
                                    }
                                    {}
                                    ++ _5574;
                                  }
                                }
                                ++ _5583;
                                ++ _5582;
                                _5584 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5584)
                    {
                      {
                        _ptr__5568[safe_add( safe_add( _5560,_5573 ),(int)1 )] = _5574;
                        _ptr__5569[safe_add( _5562,_5573 )] = safe_add( safe_mul( _5575,mdim1 ),_5579 );
                        ++ _5573;
                      }
                    }
                    {}
                  }
                }
              }
            }
            if ((_5574 != _5546))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_5573 != _5545))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_ptr__5568[safe_add( _5560,_5545 )] != _5546))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
          }
          if ((!_5559))
          {
            {
              _5511->popi64(_5545);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _5588 = (int)0;
          int _5589 = safe_mul( _5530,mdim1 );
          int _5590 = (int)0;
          int _11123 = (int)0;
          int _11124 = _5530;
          for (int _5591 = _11123; _5591 < _11124; ++_5591)
          {
            {
              int _11125 = (int)0;
              int _11126 = mdim1;
              for (int _5592 = _11125; _5592 < _11126; ++_5592)
              {
                {
                  int _11127 = _ptr__5537[safe_add( _5534,_5592 )];
                  int _11128 = _ptr__5537[safe_add( safe_add( _5534,_5592 ),(int)1 )];
                  for (int _5593 = _11127; _5593 < _11128; ++_5593)
                  {
                    {
                      int _5594 = _ptr__5537[safe_add( _5535,_5593 )];
                      int _5595 = safe_add( safe_mul( _5591,_5531 ),((*msubi)(_5594)) );
                      _5590 += (_ptr__5514[safe_add( safe_add( _5522,_5595 ),(int)1 )] - _ptr__5514[safe_add( _5522,_5595 )]);
                      if ((_5520 > (int)0))
                      {
                        {
                          _5588 += safe_add( (_ptr__5514[safe_add( _5527,_ptr__5514[safe_add( safe_add( _5522,_5595 ),(int)1 )] )] - _ptr__5514[safe_add( _5527,_ptr__5514[safe_add( _5522,_5595 )] )]),safe_mul( (int)2,(_ptr__5514[safe_add( safe_add( _5522,_5595 ),(int)1 )] - _ptr__5514[safe_add( _5522,_5595 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          bool _5596 = (_5589 < safe_mul( _5530,mdim1 ));
          if ((!(_5590 <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
            }
          }
          {}
          _5511->alloc_expr((int)2,_5589,(int)_5590,_5596,_5588);
          int _5597 = mosek::fusion::p_WorkStack::_get_impl(_5511)->shape_base;
          int _5598 = mosek::fusion::p_WorkStack::_get_impl(_5511)->ptr_base;
          int _5599 = mosek::fusion::p_WorkStack::_get_impl(_5511)->nidxs_base;
          int _11129;
          bool _11130 = _5596;
          if (_11130)
          {
            _11129 = mosek::fusion::p_WorkStack::_get_impl(_5511)->sp_base;
          }
          else
          {
            _11129 = _5511->alloci64(_5589);
          }
          int _5600 = _11129;
          int _5601 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cof_base;
          int _5602 = mosek::fusion::p_WorkStack::_get_impl(_5511)->code_base;
          int _5603 = mosek::fusion::p_WorkStack::_get_impl(_5511)->codeptr_base;
          int _5604 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5605 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i32;
          _checked_ptr_1<int> _ptr__5605(_5605 ? _5605->raw() : nullptr,_5605 ? _5605->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5606 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i64;
          _checked_ptr_1<long long> _ptr__5606(_5606 ? _5606->raw() : nullptr,_5606 ? _5606->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5607 = mosek::fusion::p_WorkStack::_get_impl(_5511)->f64;
          _checked_ptr_1<double> _ptr__5607(_5607 ? _5607->raw() : nullptr,_5607 ? _5607->size(0) : 0);
          _ptr__5605[_5597] = _5530;
          _ptr__5605[safe_add( _5597,(int)1 )] = mdim1;
          int _5608 = (int)0;
          int _5609 = (int)0;
          int _5610 = (int)0;
          _ptr__5605[_5598] = (int)0;
          if ((_5588 > (int)0))
          {
            {
              _ptr__5605[_5603] = (int)0;
            }
          }
          {}
          int _11131 = (int)0;
          int _11132 = _5530;
          for (int _5611 = _11131; _5611 < _11132; ++_5611)
          {
            {
              int _11133 = (int)0;
              int _11134 = mdim1;
              for (int _5612 = _11133; _5612 < _11134; ++_5612)
              {
                {
                  int _5613 = safe_mul( _5611,_5531 );
                  int _11135 = _ptr__5537[safe_add( _5534,_5612 )];
                  int _11136 = _ptr__5537[safe_add( safe_add( _5534,_5612 ),(int)1 )];
                  for (int _5614 = _11135; _5614 < _11136; ++_5614)
                  {
                    {
                      int _5615 = _ptr__5537[safe_add( _5535,_5614 )];
                      int _5616 = safe_add( _5613,((*msubi)(_5615)) );
                      if ((_5588 == (int)0))
                      {
                        {
                          int _11137 = _ptr__5514[safe_add( _5522,_5616 )];
                          int _11138 = _ptr__5514[safe_add( safe_add( _5522,_5616 ),(int)1 )];
                          for (int _5617 = _11137; _5617 < _11138; ++_5617)
                          {
                            {
                              _ptr__5606[safe_add( _5599,_5610 )] = _ptr__5515[safe_add( _5525,_5617 )];
                              _ptr__5607[safe_add( _5601,_5610 )] = (_ptr__5516[safe_add( _5526,_5617 )] * ((*mval)(_5615)));
                              ++ _5610;
                            }
                          }
                        }
                      }
                      else
                      {
                        {
                          int _11139 = _ptr__5514[safe_add( _5522,_5616 )];
                          int _11140 = _ptr__5514[safe_add( safe_add( _5522,_5616 ),(int)1 )];
                          for (int _5618 = _11139; _5618 < _11140; ++_5618)
                          {
                            {
                              _ptr__5606[safe_add( _5599,_5610 )] = _ptr__5515[safe_add( _5525,_5618 )];
                              _ptr__5607[safe_add( _5601,_5610 )] = (_ptr__5516[safe_add( _5526,_5618 )] * ((*mval)(_5615)));
                              int _11141 = _ptr__5514[safe_add( _5527,_5618 )];
                              int _11142 = _ptr__5514[safe_add( safe_add( _5527,_5618 ),(int)1 )];
                              for (int _5619 = _11141; _5619 < _11142; ++_5619)
                              {
                                {
                                  _ptr__5605[safe_add( _5602,_5608 )] = _ptr__5514[safe_add( _5528,_5619 )];
                                  _ptr__5607[safe_add( _5604,_5608 )] = _ptr__5516[safe_add( _5529,_5619 )];
                                  ++ _5608;
                                }
                              }
                              _ptr__5605[safe_add( _5602,_5608 )] = 2;
                              _ptr__5607[safe_add( _5604,_5608 )] = ((*mval)(_5615));
                              ++ _5608;
                              _ptr__5605[safe_add( _5602,_5608 )] = 5;
                              ++ _5608;
                              _ptr__5605[safe_add( safe_add( _5603,_5610 ),(int)1 )] = _5608;
                              ++ _5610;
                            }
                          }
                        }
                      }
                    }
                  }
                  _ptr__5605[safe_add( safe_add( _5598,_5609 ),(int)1 )] = _5610;
                  _ptr__5606[safe_add( _5600,_5609 )] = safe_add( safe_mul( _5611,mdim1 ),_5612 );
                  ++ _5609;
                }
              }
            }
          }
          if ((!_5596))
          {
            {
              _5511->popi64(_5589);
            }
          }
          {}
        }
      }
      _5513->clear();
    }
  }
  else
  {
    {
      int _5620 = _5513->alloci32(safe_add( _5530,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5621 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i32;
      _checked_ptr_1<int> _ptr__5621(_5621 ? _5621->raw() : nullptr,_5621 ? _5621->size(0) : 0);
      int _11143 = (int)0;
      int _11144 = safe_add( _5530,(int)1 );
      for (int _5622 = _11143; _5622 < _11144; ++_5622)
      {
        {
          _ptr__5621[safe_add( _5620,_5622 )] = (int)0;
        }
      }
      long long _5623 = safe_mul( (long long)_5519,mdim1 );
      int _5624 = safe_mul( _5530,mdim1 );
      int _11145;
      bool _11146 = (_5520 == (int)0);
      if (_11146)
      {
        _11145 = (int)0;
      }
      else
      {
        _11145 = safe_mul( (int)_5623,(int)2 );
      }
      int _5625 = safe_add( safe_mul( _5520,mdim1 ),_11145 );
      bool _5626 = false;
      int _5627 = (int)2;
      if ((!(_5623 <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
        }
      }
      {}
      _5511->alloc_expr(_5627,_5624,(int)_5623,_5626,_5625);
      std::shared_ptr< monty::ndarray< int,1 > > _5628 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i32;
      _checked_ptr_1<int> _ptr__5628(_5628 ? _5628->raw() : nullptr,_5628 ? _5628->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5629 = mosek::fusion::p_WorkStack::_get_impl(_5511)->i64;
      _checked_ptr_1<long long> _ptr__5629(_5629 ? _5629->raw() : nullptr,_5629 ? _5629->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5630 = mosek::fusion::p_WorkStack::_get_impl(_5511)->f64;
      _checked_ptr_1<double> _ptr__5630(_5630 ? _5630->raw() : nullptr,_5630 ? _5630->size(0) : 0);
      int _5631 = mosek::fusion::p_WorkStack::_get_impl(_5511)->shape_base;
      int _5632 = mosek::fusion::p_WorkStack::_get_impl(_5511)->ptr_base;
      int _5633 = mosek::fusion::p_WorkStack::_get_impl(_5511)->nidxs_base;
      int _5634 = mosek::fusion::p_WorkStack::_get_impl(_5511)->sp_base;
      int _5635 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cof_base;
      int _5636 = mosek::fusion::p_WorkStack::_get_impl(_5511)->code_base;
      int _5637 = mosek::fusion::p_WorkStack::_get_impl(_5511)->codeptr_base;
      int _5638 = mosek::fusion::p_WorkStack::_get_impl(_5511)->cconst_base;
      _ptr__5628[_5631] = _5530;
      _ptr__5628[safe_add( _5631,(int)1 )] = mdim1;
      int _5639 = (int)0;
      int _5640 = (int)0;
      int _5641 = (int)0;
      _ptr__5628[_5632] = (int)0;
      if ((_5625 > (int)0))
      {
        {
          _ptr__5628[_5637] = (int)0;
        }
      }
      {}
      if (_5521)
      {
        {
          {
            int _11147 = (int)0;
            int _11148 = _5518;
            for (int _5642 = _11147; _5642 < _11148; ++_5642)
            {
              {
                ++ _ptr__5621[safe_add( safe_add( _5620,(_ptr__5515[safe_add( _5524,_5642 )] / _5531) ),(int)1 )];
              }
            }
            int _11149 = (int)0;
            int _11150 = _5530;
            for (int _5643 = _11149; _5643 < _11150; ++_5643)
            {
              {
                _ptr__5621[safe_add( safe_add( _5620,_5643 ),(int)1 )] += _ptr__5621[safe_add( _5620,_5643 )];
              }
            }
            int _11151 = (int)0;
            int _11152 = _5530;
            for (int _5644 = _11151; _5644 < _11152; ++_5644)
            {
              {
                int _11153 = (int)0;
                int _11154 = mdim1;
                for (int _5645 = _11153; _5645 < _11154; ++_5645)
                {
                  {
                    int _11155 = _ptr__5621[safe_add( _5620,_5644 )];
                    int _11156 = _ptr__5621[safe_add( safe_add( _5620,_5644 ),(int)1 )];
                    for (int _5646 = _11155; _5646 < _11156; ++_5646)
                    {
                      {
                        long long _5647 = safe_add( _5645,safe_mul( (_ptr__5515[safe_add( _5524,_5646 )] % _5531),mdim1 ) );
                        int _11157 = _ptr__5514[safe_add( _5522,_5646 )];
                        int _11158 = _ptr__5514[safe_add( safe_add( _5522,_5646 ),(int)1 )];
                        for (int _5648 = _11157; _5648 < _11158; ++_5648)
                        {
                          {
                            _ptr__5629[safe_add( _5633,_5640 )] = _ptr__5515[safe_add( _5525,_5648 )];
                            _ptr__5630[safe_add( _5635,_5640 )] = (_ptr__5516[safe_add( _5526,_5648 )] * ((*mval)(_5647)));
                            if ((_5520 > (int)0))
                            {
                              {
                                int _11159 = _ptr__5514[safe_add( _5527,_5648 )];
                                int _11160 = _ptr__5514[safe_add( safe_add( _5527,_5648 ),(int)1 )];
                                for (int _5649 = _11159; _5649 < _11160; ++_5649)
                                {
                                  {
                                    _ptr__5628[safe_add( _5636,_5639 )] = _ptr__5514[safe_add( _5528,_5649 )];
                                    _ptr__5630[safe_add( _5638,_5639 )] = _ptr__5516[safe_add( _5529,_5649 )];
                                    ++ _5639;
                                  }
                                }
                                _ptr__5628[safe_add( _5636,_5639 )] = 2;
                                _ptr__5630[safe_add( _5638,_5639 )] = ((*mval)(_5647));
                                ++ _5639;
                                _ptr__5628[safe_add( _5636,_5639 )] = 5;
                                ++ _5639;
                                _ptr__5628[safe_add( safe_add( _5637,_5640 ),(int)1 )] = _5639;
                              }
                            }
                            {}
                            ++ _5640;
                          }
                        }
                      }
                    }
                    _ptr__5628[safe_add( safe_add( _5632,_5641 ),(int)1 )] = _5640;
                    ++ _5641;
                  }
                }
              }
            }
          }
          if ((_5640 != _5623))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
          if ((_5641 != _5624))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_5639 != _5625))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num code atoms"));
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11161 = (int)0;
          int _11162 = _5530;
          for (int _5650 = _11161; _5650 < _11162; ++_5650)
          {
            {
              int _11163 = (int)0;
              int _11164 = mdim1;
              for (int _5651 = _11163; _5651 < _11164; ++_5651)
              {
                {
                  int _11165 = (int)0;
                  int _11166 = _5531;
                  for (int _5652 = _11165; _5652 < _11166; ++_5652)
                  {
                    {
                      int _5653 = safe_add( safe_mul( _5650,_5531 ),_5652 );
                      int _5654 = safe_add( _5651,safe_mul( _5652,mdim1 ) );
                      int _11167 = _ptr__5514[safe_add( _5522,_5653 )];
                      int _11168 = _ptr__5514[safe_add( safe_add( _5522,_5653 ),(int)1 )];
                      for (int _5655 = _11167; _5655 < _11168; ++_5655)
                      {
                        {
                          _ptr__5629[safe_add( _5633,_5640 )] = _ptr__5515[safe_add( _5525,_5655 )];
                          _ptr__5630[safe_add( _5635,_5640 )] = (_ptr__5516[safe_add( _5526,_5655 )] * ((*mval)(_5654)));
                          if ((_5520 > (int)0))
                          {
                            {
                              int _11169 = _ptr__5514[safe_add( _5527,_5655 )];
                              int _11170 = _ptr__5514[safe_add( safe_add( _5527,_5655 ),(int)1 )];
                              for (int _5656 = _11169; _5656 < _11170; ++_5656)
                              {
                                {
                                  _ptr__5628[safe_add( _5636,_5639 )] = _ptr__5514[safe_add( _5528,_5656 )];
                                  _ptr__5630[safe_add( _5638,_5639 )] = _ptr__5516[safe_add( _5529,_5656 )];
                                  ++ _5639;
                                }
                              }
                              _ptr__5628[safe_add( _5636,_5639 )] = 2;
                              _ptr__5630[safe_add( _5638,_5639 )] = ((*mval)(_5654));
                              ++ _5639;
                              _ptr__5628[safe_add( _5636,_5639 )] = 5;
                              ++ _5639;
                              _ptr__5628[safe_add( safe_add( _5637,_5640 ),(int)1 )] = _5639;
                            }
                          }
                          {}
                          ++ _5640;
                        }
                      }
                    }
                  }
                  _ptr__5628[safe_add( safe_add( _5632,_5641 ),(int)1 )] = _5640;
                  ++ _5641;
                }
              }
            }
          }
        }
      }
      _5513->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _5657,std::shared_ptr< monty::ndarray< int,1 > > _5658){
  _checked_ptr_1<int> _ptr__5658(_5658 ? _5658->raw() : nullptr, _5658 ? _5658->size(0) : 0);
  if (((int)((_5658)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5657)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5658[(int)0]),(int)(_5657)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _5659,int _5660,std::shared_ptr< monty::ndarray< int,1 > > _5661,std::shared_ptr< monty::ndarray< int,1 > > _5662,std::shared_ptr< monty::ndarray< double,1 > > _5663,monty::rc_ptr< ::mosek::fusion::Expression > _5664){
  _checked_ptr_1<int> _ptr__5661(_5661 ? _5661->raw() : nullptr, _5661 ? _5661->size(0) : 0);
  _checked_ptr_1<int> _ptr__5662(_5662 ? _5662->raw() : nullptr, _5662 ? _5662->size(0) : 0);
  _checked_ptr_1<double> _ptr__5663(_5663 ? _5663->raw() : nullptr, _5663 ? _5663->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5665 = _5664->getShape();
  _checked_ptr_1<int> _ptr__5665(_5665 ? _5665->raw() : nullptr,_5665 ? _5665->size(0) : 0);
  if (((int)((_5665)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5666 = _ptr__5665[(int)0];
  int _5667 = _ptr__5665[(int)1];
  if (((_5659 < (int)0) || ((_5660 < (int)0) || ((_5666 < (int)0) || (_5667 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5659 != _5667))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5661)->size(0)) != (int)((_5662)->size(0))) || ((int)((_5661)->size(0)) != (int)((_5663)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5668 = (int)((_5661)->size(0));
  {
    bool _5669 = false;
    int _11171 = (int)0;
    int _11172 = _5668;
    for (int _5670 = _11171; _5670 < _11172; ++_5670)
    {
      {
        _5669 = (_5669 || ((_ptr__5661[_5670] < (int)0) || ((_ptr__5661[_5670] >= _5659) || ((_ptr__5662[_5670] < (int)0) || (_ptr__5662[_5670] >= _5660)))));
      }
    }
    if (_5669)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _5671 = false;
    int _11173 = (int)0;
    int _11174 = (_5668 - (int)1);
    for (int _5672 = _11173; _5672 < _11174; ++_5672)
    {
      {
        _5671 = (_5671 || ((_ptr__5661[_5672] > _ptr__5661[safe_add( _5672,(int)1 )]) || ((_ptr__5661[_5672] == _ptr__5661[safe_add( _5672,(int)1 )]) && (_ptr__5662[_5672] >= _ptr__5662[safe_add( _5672,(int)1 )]))));
      }
    }
    if (_5671)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5673,    int _5674,    std::shared_ptr< monty::ndarray< int,1 > > _5675,    std::shared_ptr< monty::ndarray< int,1 > > _5676,    std::shared_ptr< monty::ndarray< double,1 > > _5677,    monty::rc_ptr< ::mosek::fusion::Expression > _5678,    int _5679){ return new mosek::fusion::ExprMulLeft(_5673,_5674,_5675,_5676,_5677,_5678,_5679); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5673,    int _5674,    std::shared_ptr< monty::ndarray< int,1 > > _5675,    std::shared_ptr< monty::ndarray< int,1 > > _5676,    std::shared_ptr< monty::ndarray< double,1 > > _5677,    monty::rc_ptr< ::mosek::fusion::Expression > _5678,    int _5679) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5673,_5674,_5675,_5676,_5677,_5678,_5679); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5673,    int _5674,    std::shared_ptr< monty::ndarray< int,1 > > _5675,    std::shared_ptr< monty::ndarray< int,1 > > _5676,    std::shared_ptr< monty::ndarray< double,1 > > _5677,    monty::rc_ptr< ::mosek::fusion::Expression > _5678,    int _5679){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5675(_5675 ? _5675->raw() : nullptr, _5675 ? _5675->size(0) : 0);
    _checked_ptr_1<int> _ptr__5676(_5676 ? _5676->raw() : nullptr, _5676 ? _5676->size(0) : 0);
    _checked_ptr_1<double> _ptr__5677(_5677 ? _5677->raw() : nullptr, _5677 ? _5677->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_5673,_5674,_5678->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _5673;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _5674;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _5675;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _5676;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _5677;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _5678;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5680,    int _5681,    std::shared_ptr< monty::ndarray< int,1 > > _5682,    std::shared_ptr< monty::ndarray< int,1 > > _5683,    std::shared_ptr< monty::ndarray< double,1 > > _5684,    monty::rc_ptr< ::mosek::fusion::Expression > _5685){ return new mosek::fusion::ExprMulLeft(_5680,_5681,_5682,_5683,_5684,_5685); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5680,    int _5681,    std::shared_ptr< monty::ndarray< int,1 > > _5682,    std::shared_ptr< monty::ndarray< int,1 > > _5683,    std::shared_ptr< monty::ndarray< double,1 > > _5684,    monty::rc_ptr< ::mosek::fusion::Expression > _5685) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5680,_5681,_5682,_5683,_5684,_5685); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5680,    int _5681,    std::shared_ptr< monty::ndarray< int,1 > > _5682,    std::shared_ptr< monty::ndarray< int,1 > > _5683,    std::shared_ptr< monty::ndarray< double,1 > > _5684,    monty::rc_ptr< ::mosek::fusion::Expression > _5685){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5682(_5682 ? _5682->raw() : nullptr, _5682 ? _5682->size(0) : 0);
    _checked_ptr_1<int> _ptr__5683(_5683 ? _5683->raw() : nullptr, _5683 ? _5683->size(0) : 0);
    _checked_ptr_1<double> _ptr__5684(_5684 ? _5684->raw() : nullptr, _5684 ? _5684->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_5680,_5681,_5682,_5683,_5684,_5685,::mosek::fusion::p_ExprMulLeft::validate(_5680,_5681,_5682,_5683,_5684,_5685));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5686,monty::rc_ptr< ::mosek::fusion::WorkStack > _5687,monty::rc_ptr< ::mosek::fusion::WorkStack > _5688) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_5686,_5687,_5688); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5686,monty::rc_ptr< ::mosek::fusion::WorkStack > _5687,monty::rc_ptr< ::mosek::fusion::WorkStack > _5688){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_5687,_5686,_5688);
  _5687->pop_expr();
  int _5689 = mosek::fusion::p_WorkStack::_get_impl(_5687)->nd;
  int _5690 = mosek::fusion::p_WorkStack::_get_impl(_5687)->nnz;
  int _5691 = mosek::fusion::p_WorkStack::_get_impl(_5687)->nelem;
  int _5692 = mosek::fusion::p_WorkStack::_get_impl(_5687)->ncodeatom;
  bool _5693 = mosek::fusion::p_WorkStack::_get_impl(_5687)->hassp;
  int _5694 = mosek::fusion::p_WorkStack::_get_impl(_5687)->shape_base;
  int _5695 = mosek::fusion::p_WorkStack::_get_impl(_5687)->ptr_base;
  int _5696 = mosek::fusion::p_WorkStack::_get_impl(_5687)->sp_base;
  int _5697 = mosek::fusion::p_WorkStack::_get_impl(_5687)->nidxs_base;
  int _5698 = mosek::fusion::p_WorkStack::_get_impl(_5687)->cof_base;
  int _5699 = mosek::fusion::p_WorkStack::_get_impl(_5687)->codeptr_base;
  int _5700 = mosek::fusion::p_WorkStack::_get_impl(_5687)->code_base;
  int _5701 = mosek::fusion::p_WorkStack::_get_impl(_5687)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5702 = mosek::fusion::p_WorkStack::_get_impl(_5687)->i32;
  _checked_ptr_1<int> _ptr__5702(_5702 ? _5702->raw() : nullptr,_5702 ? _5702->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5703 = mosek::fusion::p_WorkStack::_get_impl(_5687)->i64;
  _checked_ptr_1<long long> _ptr__5703(_5703 ? _5703->raw() : nullptr,_5703 ? _5703->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5704 = mosek::fusion::p_WorkStack::_get_impl(_5687)->f64;
  _checked_ptr_1<double> _ptr__5704(_5704 ? _5704->raw() : nullptr,_5704 ? _5704->size(0) : 0);
  if ((_5689 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5705 = (int)9999;
  int _5706 = (int)9999;
  int _5707 = (int)9999;
  int _5708 = _ptr__5702[_5694];
  int _5709 = _ptr__5702[safe_add( _5694,(int)1 )];
  int _5710 = (int)((msubi)->size(0));
  bool _5711 = (_5710 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  bool _5712 = false;
  int _5713 = (int)0;
  int _5714 = (int)0;
  long long _5715 = (long long)0;
  if (_5693)
  {
    {
      _5705 = _5688->alloci32(_5691);
      _5706 = _5688->alloci32(_5691);
      _5707 = _5688->alloci32(safe_add( _5709,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5716 = mosek::fusion::p_WorkStack::_get_impl(_5688)->i32;
      _checked_ptr_1<int> _ptr__5716(_5716 ? _5716->raw() : nullptr,_5716 ? _5716->size(0) : 0);
      {
        int _11175 = (int)0;
        int _11176 = safe_add( _5709,(int)1 );
        for (int _5717 = _11175; _5717 < _11176; ++_5717)
        {
          {
            _ptr__5716[safe_add( _5707,_5717 )] = (int)0;
          }
        }
        int _11177 = (int)0;
        int _11178 = _5691;
        for (int _5718 = _11177; _5718 < _11178; ++_5718)
        {
          {
            ++ _ptr__5716[safe_add( safe_add( _5707,(_ptr__5703[safe_add( _5696,_5718 )] % _5709) ),(int)1 )];
          }
        }
        int _11179 = (int)0;
        int _11180 = _5709;
        for (int _5719 = _11179; _5719 < _11180; ++_5719)
        {
          {
            _ptr__5716[safe_add( safe_add( _5707,_5719 ),(int)1 )] += _ptr__5716[safe_add( _5707,_5719 )];
          }
        }
        int _11181 = (int)0;
        int _11182 = _5691;
        for (int _5720 = _11181; _5720 < _11182; ++_5720)
        {
          {
            long long _5721 = (_ptr__5703[safe_add( _5696,_5720 )] % _5709);
            _ptr__5716[safe_add( _5705,_ptr__5716[safe_add( _5707,_5721 )] )] = _5720;
            ++ _ptr__5716[safe_add( _5707,_5721 )];
          }
        }
        int _11183 = (int)0;
        int _11184 = _5709;
        for (int _5722 = _11183; _5722 < _11184; ++_5722)
        {
          {
            _ptr__5716[(safe_add( _5707,_5709 ) - _5722)] = _ptr__5716[((safe_add( _5707,_5709 ) - _5722) - (int)1)];
          }
        }
        _ptr__5716[_5707] = (int)0;
      }
      if (_5711)
      {
        {
          int _5723 = (int)0;
          while ( (_5723 < _5710) )
          {
            {
              int _5724 = ((*msubi)(_5723));
              int _5725 = safe_add( _5723,(int)1 );
              while ( ((_5725 < _5710) && (((*msubi)(_5725)) == ((*msubi)(_5723)))) )
              {
                {
                  ++ _5725;
                }
              }
              int _11185 = (int)0;
              int _11186 = _5709;
              for (int _5726 = _11185; _5726 < _11186; ++_5726)
              {
                {
                  bool _5727 = false;
                  int _5728 = _5725;
                  int _5729 = _5723;
                  int _5730 = _ptr__5716[safe_add( safe_add( _5707,_5726 ),(int)1 )];
                  int _5731 = _ptr__5716[safe_add( _5707,_5726 )];
                  while ( ((_5729 < _5728) && (_5731 < _5730)) )
                  {
                    {
                      int _5732 = _ptr__5716[safe_add( _5705,_5731 )];
                      if ((((*msubj)(_5729)) < (_ptr__5703[safe_add( _5696,_5732 )] / _5709)))
                      {
                        {
                          ++ _5729;
                        }
                      }
                      else if((((*msubj)(_5729)) > (_ptr__5703[safe_add( _5696,_5732 )] / _5709)))
                      {
                        {
                          ++ _5731;
                        }
                      }
                      else
                      {
                        {
                          _5727 = true;
                          _5715 += (_ptr__5702[safe_add( safe_add( _5695,_5732 ),(int)1 )] - _ptr__5702[safe_add( _5695,_5732 )]);
                          if ((_5692 > (int)0))
                          {
                            {
                              _5713 += safe_add( (_ptr__5702[safe_add( _5699,_ptr__5702[safe_add( safe_add( _5695,_5732 ),(int)1 )] )] - _ptr__5702[safe_add( _5699,_ptr__5702[safe_add( _5695,_5732 )] )]),safe_mul( (int)2,(_ptr__5702[safe_add( safe_add( _5695,_5732 ),(int)1 )] - _ptr__5702[safe_add( _5695,_5732 )]) ) );
                            }
                          }
                          {}
                          ++ _5731;
                          ++ _5729;
                        }
                      }
                    }
                  }
                  if (_5727)
                  {
                    {
                      ++ _5714;
                    }
                  }
                  {}
                }
              }
              _5723 = _5725;
            }
          }
        }
      }
      else
      {
        {
          _5714 = safe_mul( mdim0,_5709 );
          _5715 = safe_mul( (long long)_5690,mdim0 );
          if ((_5692 > (int)0))
          {
            {
              _5713 = (int)safe_add( safe_mul( _5692,mdim0 ),safe_mul( (int)2,_5715 ) );
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      if (_5711)
      {
        {
          int _5733 = (int)0;
          while ( (_5733 < _5710) )
          {
            {
              int _5734 = safe_add( _5733,(int)1 );
              while ( ((_5734 < _5710) && (((*msubi)(_5733)) == ((*msubi)(_5734)))) )
              {
                {
                  ++ _5734;
                }
              }
              int _5735 = ((*msubi)(_5733));
              int _11187 = (int)0;
              int _11188 = _5709;
              for (int _5736 = _11187; _5736 < _11188; ++_5736)
              {
                {
                  bool _5737 = false;
                  int _11189 = _5733;
                  int _11190 = _5734;
                  for (int _5738 = _11189; _5738 < _11190; ++_5738)
                  {
                    {
                      int _5739 = safe_add( safe_mul( ((*msubj)(_5738)),_5709 ),_5736 );
                      _5715 += (_ptr__5702[safe_add( safe_add( _5695,_5739 ),(int)1 )] - _ptr__5702[safe_add( _5695,_5739 )]);
                      if ((_5692 > (int)0))
                      {
                        {
                          _5713 += safe_add( (_ptr__5702[safe_add( _5699,_ptr__5702[safe_add( safe_add( _5695,_5739 ),(int)1 )] )] - _ptr__5702[safe_add( _5699,_ptr__5702[safe_add( _5695,_5739 )] )]),safe_mul( (int)2,(_ptr__5702[safe_add( safe_add( _5695,_5739 ),(int)1 )] - _ptr__5702[safe_add( _5695,_5739 )]) ) );
                        }
                      }
                      {}
                      _5737 = true;
                    }
                  }
                  if (_5737)
                  {
                    {
                      ++ _5714;
                    }
                  }
                  {}
                }
              }
              _5733 = _5734;
            }
          }
        }
      }
      else
      {
        {
          _5715 = safe_mul( (long long)_5690,mdim0 );
          if ((_5692 > (int)0))
          {
            {
              _5713 = (int)safe_add( safe_mul( _5692,mdim0 ),safe_mul( (int)2,_5715 ) );
            }
          }
          {}
          _5714 = safe_mul( mdim0,_5709 );
        }
      }
    }
  }
  if ((!(_5715 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
    }
  }
  {}
  _5712 = (_5714 < safe_mul( mdim0,_5709 ));
  int _5740 = (int)2;
  _5686->alloc_expr(_5740,_5714,(int)_5715,_5712,_5713);
  int _5741 = mosek::fusion::p_WorkStack::_get_impl(_5686)->ptr_base;
  int _5742 = mosek::fusion::p_WorkStack::_get_impl(_5686)->nidxs_base;
  int _11191;
  bool _11192 = _5712;
  if (_11192)
  {
    _11191 = mosek::fusion::p_WorkStack::_get_impl(_5686)->sp_base;
  }
  else
  {
    _11191 = _5686->alloci64(_5714);
  }
  int _5743 = _11191;
  int _5744 = mosek::fusion::p_WorkStack::_get_impl(_5686)->cof_base;
  int _5745 = mosek::fusion::p_WorkStack::_get_impl(_5686)->shape_base;
  int _5746 = mosek::fusion::p_WorkStack::_get_impl(_5686)->code_base;
  int _5747 = mosek::fusion::p_WorkStack::_get_impl(_5686)->codeptr_base;
  int _5748 = mosek::fusion::p_WorkStack::_get_impl(_5686)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5749 = mosek::fusion::p_WorkStack::_get_impl(_5686)->i64;
  _checked_ptr_1<long long> _ptr__5749(_5749 ? _5749->raw() : nullptr,_5749 ? _5749->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5750 = mosek::fusion::p_WorkStack::_get_impl(_5686)->f64;
  _checked_ptr_1<double> _ptr__5750(_5750 ? _5750->raw() : nullptr,_5750 ? _5750->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5751 = mosek::fusion::p_WorkStack::_get_impl(_5686)->i32;
  _checked_ptr_1<int> _ptr__5751(_5751 ? _5751->raw() : nullptr,_5751 ? _5751->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5752 = mosek::fusion::p_WorkStack::_get_impl(_5688)->i32;
  _checked_ptr_1<int> _ptr__5752(_5752 ? _5752->raw() : nullptr,_5752 ? _5752->size(0) : 0);
  _ptr__5751[_5745] = mdim0;
  _ptr__5751[safe_add( _5745,(int)1 )] = _5709;
  _ptr__5751[_5741] = (int)0;
  if ((_5713 > (int)0))
  {
    {
      _ptr__5751[_5747] = (int)0;
    }
  }
  {}
  if (_5693)
  {
    {
      if (_5711)
      {
        {
          int _5753 = (int)0;
          int _5754 = (int)0;
          int _5755 = (int)0;
          int _5756 = (int)0;
          while ( (_5756 < _5710) )
          {
            {
              int _5757 = ((*msubi)(_5756));
              int _5758 = safe_add( _5756,(int)1 );
              while ( ((_5758 < _5710) && (((*msubi)(_5758)) == ((*msubi)(_5756)))) )
              {
                {
                  ++ _5758;
                }
              }
              int _11193 = (int)0;
              int _11194 = _5709;
              for (int _5759 = _11193; _5759 < _11194; ++_5759)
              {
                {
                  bool _5760 = false;
                  int _5761 = _5758;
                  int _5762 = _5756;
                  int _5763 = _ptr__5752[safe_add( safe_add( _5707,_5759 ),(int)1 )];
                  int _5764 = _ptr__5752[safe_add( _5707,_5759 )];
                  while ( ((_5762 < _5761) && (_5764 < _5763)) )
                  {
                    {
                      int _5765 = _ptr__5752[safe_add( _5705,_5764 )];
                      if ((((*msubj)(_5762)) < (_ptr__5703[safe_add( _5696,_5765 )] / _5709)))
                      {
                        {
                          ++ _5762;
                        }
                      }
                      else if((((*msubj)(_5762)) > (_ptr__5703[safe_add( _5696,_5765 )] / _5709)))
                      {
                        {
                          ++ _5764;
                        }
                      }
                      else
                      {
                        {
                          _5760 = true;
                          int _11195 = _ptr__5702[safe_add( _5695,_5765 )];
                          int _11196 = _ptr__5702[safe_add( safe_add( _5695,_5765 ),(int)1 )];
                          for (int _5766 = _11195; _5766 < _11196; ++_5766)
                          {
                            {
                              _ptr__5749[safe_add( _5742,_5755 )] = _ptr__5703[safe_add( _5697,_5766 )];
                              _ptr__5750[safe_add( _5744,_5755 )] = (_ptr__5704[safe_add( _5698,_5766 )] * ((*mval)(_5762)));
                              if ((_5713 > (int)0))
                              {
                                {
                                  int _11197 = _ptr__5702[safe_add( _5699,_5766 )];
                                  int _11198 = _ptr__5702[safe_add( safe_add( _5699,_5766 ),(int)1 )];
                                  for (int _5767 = _11197; _5767 < _11198; ++_5767)
                                  {
                                    {
                                      _ptr__5751[safe_add( _5746,_5753 )] = _ptr__5702[safe_add( _5700,_5767 )];
                                      _ptr__5750[safe_add( _5748,_5753 )] = _ptr__5750[safe_add( _5701,_5767 )];
                                      ++ _5753;
                                    }
                                  }
                                  _ptr__5751[safe_add( _5746,_5753 )] = 2;
                                  _ptr__5750[safe_add( _5748,_5753 )] = ((*mval)(_5762));
                                  ++ _5753;
                                  _ptr__5751[safe_add( _5746,_5753 )] = 5;
                                  _ptr__5751[safe_add( safe_add( _5747,_5755 ),(int)1 )] = _5753;
                                }
                              }
                              {}
                              ++ _5755;
                            }
                          }
                          ++ _5762;
                          ++ _5764;
                        }
                      }
                    }
                  }
                  if (_5760)
                  {
                    {
                      _ptr__5751[safe_add( safe_add( _5741,_5754 ),(int)1 )] = _5755;
                      _ptr__5749[safe_add( _5743,_5754 )] = safe_add( safe_mul( _5757,_5709 ),_5759 );
                      ++ _5754;
                    }
                  }
                  {}
                }
              }
              _5756 = _5758;
            }
          }
        }
      }
      else
      {
        {
          int _5768 = (int)0;
          int _5769 = (int)0;
          int _5770 = (int)0;
          int _11199 = (int)0;
          int _11200 = mdim0;
          for (int _5771 = _11199; _5771 < _11200; ++_5771)
          {
            {
              int _11201 = (int)0;
              int _11202 = _5709;
              for (int _5772 = _11201; _5772 < _11202; ++_5772)
              {
                {
                  int _11203 = _ptr__5752[safe_add( _5707,_5772 )];
                  int _11204 = _ptr__5752[safe_add( safe_add( _5707,_5772 ),(int)1 )];
                  for (int _5773 = _11203; _5773 < _11204; ++_5773)
                  {
                    {
                      int _5774 = _ptr__5752[safe_add( _5705,_5773 )];
                      long long _5775 = safe_add( safe_mul( _5771,mdim1 ),(_ptr__5703[safe_add( _5696,_5774 )] / _5709) );
                      int _11205 = _ptr__5702[safe_add( _5695,_5774 )];
                      int _11206 = _ptr__5702[safe_add( safe_add( _5695,_5774 ),(int)1 )];
                      for (int _5776 = _11205; _5776 < _11206; ++_5776)
                      {
                        {
                          _ptr__5749[safe_add( _5742,_5770 )] = _ptr__5703[safe_add( _5697,_5776 )];
                          _ptr__5750[safe_add( _5744,_5770 )] = (_ptr__5704[safe_add( _5698,_5776 )] * ((*mval)(_5775)));
                          if ((_5713 > (int)0))
                          {
                            {
                              int _11207 = _ptr__5702[safe_add( _5699,_5776 )];
                              int _11208 = _ptr__5702[safe_add( safe_add( _5699,_5776 ),(int)1 )];
                              for (int _5777 = _11207; _5777 < _11208; ++_5777)
                              {
                                {
                                  _ptr__5751[safe_add( _5746,_5768 )] = _ptr__5702[safe_add( _5700,_5777 )];
                                  _ptr__5750[safe_add( _5748,_5768 )] = _ptr__5704[safe_add( _5701,_5777 )];
                                  ++ _5768;
                                }
                              }
                              _ptr__5751[safe_add( _5746,_5768 )] = 2;
                              _ptr__5750[safe_add( _5748,_5768 )] = ((*mval)(_5775));
                              ++ _5768;
                              _ptr__5751[safe_add( _5746,_5768 )] = 5;
                              ++ _5768;
                              _ptr__5751[safe_add( safe_add( _5747,_5770 ),(int)1 )] = _5768;
                            }
                          }
                          {}
                          ++ _5770;
                        }
                      }
                    }
                  }
                  _ptr__5751[safe_add( safe_add( _5741,_5769 ),(int)1 )] = _5770;
                  ++ _5769;
                }
              }
            }
          }
          if ((_5769 != _5714))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
            }
          }
          {}
          if ((_5770 != _5715))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
            }
          }
          {}
          if ((_5768 != _5713))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _5778 = (int)0;
      int _5779 = (int)0;
      int _5780 = (int)0;
      int _5781 = (int)0;
      while ( (_5779 < _5710) )
      {
        {
          int _5782 = safe_add( _5779,(int)1 );
          while ( ((_5782 < _5710) && (((*msubi)(_5779)) == ((*msubi)(_5782)))) )
          {
            {
              ++ _5782;
            }
          }
          int _5783 = ((*msubi)(_5779));
          int _11209 = (int)0;
          int _11210 = _5709;
          for (int _5784 = _11209; _5784 < _11210; ++_5784)
          {
            {
              bool _5785 = false;
              int _11211 = _5779;
              int _11212 = _5782;
              for (int _5786 = _11211; _5786 < _11212; ++_5786)
              {
                {
                  int _5787 = safe_add( safe_mul( ((*msubj)(_5786)),_5709 ),_5784 );
                  int _11213 = _ptr__5702[safe_add( _5695,_5787 )];
                  int _11214 = _ptr__5702[safe_add( safe_add( _5695,_5787 ),(int)1 )];
                  for (int _5788 = _11213; _5788 < _11214; ++_5788)
                  {
                    {
                      _ptr__5749[safe_add( _5742,_5781 )] = _ptr__5703[safe_add( _5697,_5788 )];
                      _ptr__5750[safe_add( _5744,_5781 )] = (_ptr__5704[safe_add( _5698,_5788 )] * ((*mval)(_5786)));
                      if ((_5713 > (int)0))
                      {
                        {
                          int _11215 = _ptr__5702[safe_add( _5699,_5788 )];
                          int _11216 = _ptr__5702[safe_add( safe_add( _5699,_5788 ),(int)1 )];
                          for (int _5789 = _11215; _5789 < _11216; ++_5789)
                          {
                            {
                              _ptr__5751[safe_add( _5746,_5778 )] = _ptr__5702[safe_add( _5700,_5789 )];
                              _ptr__5750[safe_add( _5748,_5778 )] = _ptr__5704[safe_add( _5701,_5789 )];
                              ++ _5778;
                            }
                          }
                          _ptr__5751[safe_add( _5746,_5778 )] = 2;
                          _ptr__5750[safe_add( _5748,_5778 )] = ((*mval)(_5786));
                          ++ _5778;
                          _ptr__5751[safe_add( _5746,_5778 )] = 5;
                          ++ _5778;
                          _ptr__5751[safe_add( safe_add( _5747,_5781 ),(int)1 )] = _5778;
                        }
                      }
                      {}
                      ++ _5781;
                    }
                  }
                  _5785 = true;
                }
              }
              if (_5785)
              {
                {
                  _ptr__5749[safe_add( _5743,_5780 )] = safe_add( safe_mul( _5783,_5709 ),_5784 );
                  _ptr__5751[safe_add( safe_add( _5741,_5780 ),(int)1 )] = _5781;
                  ++ _5780;
                }
              }
              {}
            }
          }
          _5779 = _5782;
        }
      }
      if ((_5780 != _5714))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
        }
      }
      {}
      if ((_5781 != _5715))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
        }
      }
      {}
      if ((_5778 != _5713))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
        }
      }
      {}
    }
  }
  if ((!_5712))
  {
    {
      _5686->popi64(_5714);
    }
  }
  {}
  _5688->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _5790,int _5791,std::shared_ptr< monty::ndarray< int,1 > > _5792){
  _checked_ptr_1<int> _ptr__5792(_5792 ? _5792->raw() : nullptr, _5792 ? _5792->size(0) : 0);
  if (((int)((_5792)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_5791 != _ptr__5792[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5790),(int)(_ptr__5792[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _5793,int _5794,std::shared_ptr< monty::ndarray< int,1 > > _5795,std::shared_ptr< monty::ndarray< int,1 > > _5796,std::shared_ptr< monty::ndarray< double,1 > > _5797,monty::rc_ptr< ::mosek::fusion::Expression > _5798){
  _checked_ptr_1<int> _ptr__5795(_5795 ? _5795->raw() : nullptr, _5795 ? _5795->size(0) : 0);
  _checked_ptr_1<int> _ptr__5796(_5796 ? _5796->raw() : nullptr, _5796 ? _5796->size(0) : 0);
  _checked_ptr_1<double> _ptr__5797(_5797 ? _5797->raw() : nullptr, _5797 ? _5797->size(0) : 0);
  if ((_5798->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5799 = _5798->getDim((int)0);
  int _5800 = _5798->getDim((int)0);
  if (((_5793 < (int)0) || (_5794 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5794 != _5799))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5795)->size(0)) != (int)((_5796)->size(0))) || ((int)((_5795)->size(0)) != (int)((_5797)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5801 = (int)((_5795)->size(0));
  bool _5802 = false;
  bool _5803 = false;
  {
    int _11217 = (int)0;
    int _11218 = _5801;
    for (int _5804 = _11217; _5804 < _11218; ++_5804)
    {
      {
        _5802 = (_5802 || ((_ptr__5795[_5804] < (int)0) || ((_ptr__5795[_5804] >= _5793) || ((_ptr__5796[_5804] < (int)0) || (_ptr__5796[_5804] >= _5794)))));
      }
    }
    if ((!_5802))
    {
      {
        int _11219 = (int)0;
        int _11220 = (_5801 - (int)1);
        for (int _5805 = _11219; _5805 < _11220; ++_5805)
        {
          {
            _5803 = (_5803 || ((_ptr__5795[_5805] > _ptr__5795[safe_add( _5805,(int)1 )]) || ((_ptr__5795[_5805] == _ptr__5795[safe_add( _5805,(int)1 )]) && (_ptr__5796[_5805] >= _ptr__5796[safe_add( _5805,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_5802)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5803)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5806,    int _5807,    int _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< int,1 > > _5810,    std::shared_ptr< monty::ndarray< double,1 > > _5811,    monty::rc_ptr< ::mosek::fusion::Variable > _5812){ return new mosek::fusion::ExprMulVar(_5806,_5807,_5808,_5809,_5810,_5811,_5812); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5806,    int _5807,    int _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< int,1 > > _5810,    std::shared_ptr< monty::ndarray< double,1 > > _5811,    monty::rc_ptr< ::mosek::fusion::Variable > _5812) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5806,_5807,_5808,_5809,_5810,_5811,_5812); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5806,    int _5807,    int _5808,    std::shared_ptr< monty::ndarray< int,1 > > _5809,    std::shared_ptr< monty::ndarray< int,1 > > _5810,    std::shared_ptr< monty::ndarray< double,1 > > _5811,    monty::rc_ptr< ::mosek::fusion::Variable > _5812){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5809(_5809 ? _5809->raw() : nullptr, _5809 ? _5809->size(0) : 0);
    _checked_ptr_1<int> _ptr__5810(_5810 ? _5810->raw() : nullptr, _5810 ? _5810->size(0) : 0);
    _checked_ptr_1<double> _ptr__5811(_5811 ? _5811->raw() : nullptr, _5811 ? _5811->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_5806,_5807,_5808,_5809,_5810,_5811,_5812,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5813 = _5812->getShape();
    _checked_ptr_1<int> _ptr__5813(_5813 ? _5813->raw() : nullptr,_5813 ? _5813->size(0) : 0);
    int _5814 = (int)((_5813)->size(0));
    if ((_5814 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_5806 && (_ptr__5813[(int)0] != _5808)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_5806) && (_ptr__5813[(int)1] != _5807)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_5809)->size(0)) != (int)((_5810)->size(0))) || ((int)((_5809)->size(0)) != (int)((_5811)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_5807,_5808,_5809,_5810,_5811);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5815,    int _5816,    int _5817,    std::shared_ptr< monty::ndarray< int,1 > > _5818,    std::shared_ptr< monty::ndarray< int,1 > > _5819,    std::shared_ptr< monty::ndarray< double,1 > > _5820,    monty::rc_ptr< ::mosek::fusion::Variable > _5821,    int _5822){ return new mosek::fusion::ExprMulVar(_5815,_5816,_5817,_5818,_5819,_5820,_5821,_5822); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5815,    int _5816,    int _5817,    std::shared_ptr< monty::ndarray< int,1 > > _5818,    std::shared_ptr< monty::ndarray< int,1 > > _5819,    std::shared_ptr< monty::ndarray< double,1 > > _5820,    monty::rc_ptr< ::mosek::fusion::Variable > _5821,    int _5822) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5815,_5816,_5817,_5818,_5819,_5820,_5821,_5822); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5815,    int _5816,    int _5817,    std::shared_ptr< monty::ndarray< int,1 > > _5818,    std::shared_ptr< monty::ndarray< int,1 > > _5819,    std::shared_ptr< monty::ndarray< double,1 > > _5820,    monty::rc_ptr< ::mosek::fusion::Variable > _5821,    int _5822){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5818(_5818 ? _5818->raw() : nullptr, _5818 ? _5818->size(0) : 0);
    _checked_ptr_1<int> _ptr__5819(_5819 ? _5819->raw() : nullptr, _5819 ? _5819->size(0) : 0);
    _checked_ptr_1<double> _ptr__5820(_5820 ? _5820->raw() : nullptr, _5820 ? _5820->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_5816,_5817,_5821->getShape(),_5815));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _5815;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _5821;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _5816;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _5817;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_5818);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_5819);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_5820);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5823,monty::rc_ptr< ::mosek::fusion::WorkStack > _5824,monty::rc_ptr< ::mosek::fusion::WorkStack > _5825) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_5823,_5824,_5825); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5823,monty::rc_ptr< ::mosek::fusion::WorkStack > _5824,monty::rc_ptr< ::mosek::fusion::WorkStack > _5825){
  if (left)
  {
    {
      _pubthis->eval_left(_5823,_5824,_5825);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_5823,_5824,_5825);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5826,monty::rc_ptr< ::mosek::fusion::WorkStack > _5827,monty::rc_ptr< ::mosek::fusion::WorkStack > _5828) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_5826,_5827,_5828); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5826,monty::rc_ptr< ::mosek::fusion::WorkStack > _5827,monty::rc_ptr< ::mosek::fusion::WorkStack > _5828){
  int _5829 = mosek::fusion::p_WorkStack::_get_impl(_5827)->pi32;
  int _5830 = mosek::fusion::p_WorkStack::_get_impl(_5827)->pi64;
  int _5831 = x->numInst();
  int _5832 = _5827->alloci64(_5831);
  int _5833 = _5827->alloci64(_5831);
  int _5834 = _5827->alloci32(_5831);
  int _5835 = _5827->alloci32(_5831);
  std::shared_ptr< monty::ndarray< int,1 > > _5836 = x->getShape();
  _checked_ptr_1<int> _ptr__5836(_5836 ? _5836->raw() : nullptr,_5836 ? _5836->size(0) : 0);
  int _5837 = (int)((_5836)->size(0));
  long long _5838 = safe_mul( _ptr__5836[(int)0],_ptr__5836[(int)1] );
  int _5839 = _ptr__5836[(int)1];
  int _5840 = _ptr__5836[(int)0];
  int _5841 = _5827->alloci32(safe_add( _5840,(int)1 ));
  int _5842 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5843 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5843(_5843 ? _5843->raw() : nullptr,_5843 ? _5843->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5844 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5844(_5844 ? _5844->raw() : nullptr,_5844 ? _5844->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5845 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5845(_5845 ? _5845->raw() : nullptr,_5845 ? _5845->size(0) : 0);
  int _5846 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5847 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _5848 = ((_5842 / _5846) == _5847);
  int _5849 = _5827->alloci32(_5842);
  int _5850 = _5827->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5851 = mosek::fusion::p_WorkStack::_get_impl(_5827)->i32;
  _checked_ptr_1<int> _ptr__5851(_5851 ? _5851->raw() : nullptr,_5851 ? _5851->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5852 = mosek::fusion::p_WorkStack::_get_impl(_5827)->i64;
  _checked_ptr_1<long long> _ptr__5852(_5852 ? _5852->raw() : nullptr,_5852 ? _5852->size(0) : 0);
  int _5853 = (int)0;
  int _5854 = (int)0;
  x->inst(_5833,_5852,_5832,_5852);
  if (_5848)
  {
    {
      int _5855 = (int)0;
      if ((_5831 > (int)0))
      {
        {
          _5855 = (int)1;
          if ((_5840 > (int)1))
          {
            {
              if ((_5839 == (int)1))
              {
                {
                  int _11221 = (int)1;
                  int _11222 = _5831;
                  for (int _5856 = _11221; _5856 < _11222; ++_5856)
                  {
                    {
                      if ((_ptr__5852[safe_add( _5833,_5856 )] > _ptr__5852[(safe_add( _5833,_5856 ) - (int)1)]))
                      {
                        {
                          ++ _5855;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _11223 = (int)1;
                  int _11224 = _5831;
                  for (int _5857 = _11223; _5857 < _11224; ++_5857)
                  {
                    {
                      if (((_ptr__5852[safe_add( _5833,_5857 )] / _5839) > (_ptr__5852[(safe_add( _5833,_5857 ) - (int)1)] / _5839)))
                      {
                        {
                          ++ _5855;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _5854 = safe_mul( _5855,_5847 );
      _5853 = safe_mul( _5831,_5847 );
      bool _5858 = (_5855 < _5840);
      _5826->alloc_expr((int)2,_5854,_5853,_5858);
      int _5859 = mosek::fusion::p_WorkStack::_get_impl(_5826)->ptr_base;
      int _5860 = mosek::fusion::p_WorkStack::_get_impl(_5826)->shape_base;
      int _5861 = mosek::fusion::p_WorkStack::_get_impl(_5826)->nidxs_base;
      int _11225;
      bool _11226 = _5858;
      if (_11226)
      {
        _11225 = mosek::fusion::p_WorkStack::_get_impl(_5826)->sp_base;
      }
      else
      {
        _11225 = _5826->alloci64(_5854);
      }
      int _5862 = _11225;
      int _5863 = mosek::fusion::p_WorkStack::_get_impl(_5826)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5864 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i32;
      _checked_ptr_1<int> _ptr__5864(_5864 ? _5864->raw() : nullptr,_5864 ? _5864->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5865 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i64;
      _checked_ptr_1<long long> _ptr__5865(_5865 ? _5865->raw() : nullptr,_5865 ? _5865->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5866 = mosek::fusion::p_WorkStack::_get_impl(_5826)->f64;
      _checked_ptr_1<double> _ptr__5866(_5866 ? _5866->raw() : nullptr,_5866 ? _5866->size(0) : 0);
      _ptr__5864[_5860] = _5840;
      _ptr__5864[safe_add( _5860,(int)1 )] = _5847;
      {
        int _5867 = (int)0;
        int _5868 = (int)0;
        int _5869 = (int)0;
        _ptr__5864[_5859] = (int)0;
        while ( (_5867 < _5831) )
        {
          {
            int _5870 = _5867;
            ++ _5867;
            while ( ((_5867 < _5831) && ((_ptr__5852[safe_add( _5833,_5867 )] / _5839) == (_ptr__5852[safe_add( _5833,_5870 )] / _5839))) )
            {
              {
                ++ _5867;
              }
            }
            long long _5871 = (_ptr__5852[safe_add( _5833,_5870 )] / _5839);
            int _11227 = (int)0;
            int _11228 = _5847;
            for (int _5872 = _11227; _5872 < _11228; ++_5872)
            {
              {
                int _11229 = _5870;
                int _11230 = _5867;
                for (int _5873 = _11229; _5873 < _11230; ++_5873)
                {
                  {
                    long long _5874 = (_ptr__5852[safe_add( _5833,_5873 )] % _5839);
                    _ptr__5865[safe_add( _5861,_5869 )] = _ptr__5852[safe_add( _5832,_5873 )];
                    _ptr__5866[safe_add( _5863,_5869 )] = _ptr__5845[safe_add( safe_mul( _5874,_5847 ),_5872 )];
                    ++ _5869;
                  }
                }
                _ptr__5864[safe_add( safe_add( _5859,_5868 ),(int)1 )] = _5869;
                _ptr__5865[safe_add( _5862,_5868 )] = safe_add( safe_mul( _5871,_5847 ),_5872 );
                ++ _5868;
              }
            }
          }
        }
      }
      if ((!_5858))
      {
        {
          _5826->popi64(_5854);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_5847 == (int)1))
        {
          {
            int _11231 = (int)0;
            int _11232 = _5842;
            for (int _5875 = _11231; _5875 < _11232; ++_5875)
            {
              {
                _ptr__5851[safe_add( _5849,_5875 )] = _5875;
              }
            }
            _ptr__5851[_5850] = (int)0;
            _ptr__5851[safe_add( _5850,(int)1 )] = _5842;
          }
        }
        else
        {
          {
            _ptr__5851[_5850] = (int)0;
            int _11233 = (int)0;
            int _11234 = safe_add( _5847,(int)1 );
            for (int _5876 = _11233; _5876 < _11234; ++_5876)
            {
              {
                _ptr__5851[safe_add( _5850,_5876 )] = (int)0;
              }
            }
            int _11235 = (int)0;
            int _11236 = _5842;
            for (int _5877 = _11235; _5877 < _11236; ++_5877)
            {
              {
                ++ _ptr__5851[safe_add( safe_add( _5850,_ptr__5844[_5877] ),(int)1 )];
              }
            }
            int _11237 = (int)0;
            int _11238 = mdimj;
            for (int _5878 = _11237; _5878 < _11238; ++_5878)
            {
              {
                _ptr__5851[safe_add( safe_add( _5850,_5878 ),(int)1 )] += _ptr__5851[safe_add( _5850,_5878 )];
              }
            }
            int _11239 = (int)0;
            int _11240 = _5842;
            for (int _5879 = _11239; _5879 < _11240; ++_5879)
            {
              {
                _ptr__5851[safe_add( _5849,_ptr__5851[safe_add( _5850,_ptr__5844[_5879] )] )] = _5879;
                ++ _ptr__5851[safe_add( _5850,_ptr__5844[_5879] )];
              }
            }
            int _11241 = (int)0;
            int _11242 = _5847;
            for (int _5880 = _11241; _5880 < _11242; ++_5880)
            {
              {
                _ptr__5851[(safe_add( _5850,_5847 ) - _5880)] = _ptr__5851[((safe_add( _5850,_5847 ) - _5880) - (int)1)];
              }
            }
            _ptr__5851[_5850] = (int)0;
          }
        }
      }
      if (((_5831 / _5840) == _5839))
      {
        {
          int _5881 = (int)0;
          {
            int _5882 = (int)0;
            while ( (_5882 < _5842) )
            {
              {
                ++ _5882;
                while ( ((_5882 < _5842) && (_ptr__5844[_ptr__5851[(safe_add( _5849,_5882 ) - (int)1)]] == _ptr__5844[_ptr__5851[safe_add( _5849,_5882 )]])) )
                {
                  {
                    ++ _5882;
                  }
                }
                ++ _5881;
              }
            }
          }
          _5854 = safe_mul( _5881,_5840 );
          _5853 = safe_mul( _5842,_5840 );
          bool _5883 = (_5881 < _5847);
          _5826->alloc_expr((int)2,_5854,_5853,_5883);
          int _5884 = mosek::fusion::p_WorkStack::_get_impl(_5826)->ptr_base;
          int _5885 = mosek::fusion::p_WorkStack::_get_impl(_5826)->shape_base;
          int _5886 = mosek::fusion::p_WorkStack::_get_impl(_5826)->nidxs_base;
          int _11243;
          bool _11244 = _5883;
          if (_11244)
          {
            _11243 = mosek::fusion::p_WorkStack::_get_impl(_5826)->sp_base;
          }
          else
          {
            _11243 = _5826->alloci64(_5854);
          }
          int _5887 = _11243;
          int _5888 = mosek::fusion::p_WorkStack::_get_impl(_5826)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5826)->i32)(_5885)) = _5840;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5826)->i32)(safe_add( _5885,(int)1 ))) = _5847;
          std::shared_ptr< monty::ndarray< int,1 > > _5889 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i32;
          _checked_ptr_1<int> _ptr__5889(_5889 ? _5889->raw() : nullptr,_5889 ? _5889->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5890 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i64;
          _checked_ptr_1<long long> _ptr__5890(_5890 ? _5890->raw() : nullptr,_5890 ? _5890->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5891 = mosek::fusion::p_WorkStack::_get_impl(_5826)->f64;
          _checked_ptr_1<double> _ptr__5891(_5891 ? _5891->raw() : nullptr,_5891 ? _5891->size(0) : 0);
          _ptr__5889[_5884] = (int)0;
          int _5892 = (int)0;
          int _5893 = (int)0;
          int _11245 = (int)0;
          int _11246 = _5840;
          for (int _5894 = _11245; _5894 < _11246; ++_5894)
          {
            {
              int _5895 = (int)0;
              while ( (_5895 < _5842) )
              {
                {
                  int _5896 = _5895;
                  ++ _5895;
                  while ( ((_5895 < _5842) && (_ptr__5844[_ptr__5851[safe_add( _5849,_5896 )]] == _ptr__5844[_ptr__5851[safe_add( _5849,_5895 )]])) )
                  {
                    {
                      ++ _5895;
                    }
                  }
                  int _5897 = _ptr__5844[_ptr__5851[safe_add( _5849,_5896 )]];
                  int _11247 = _5896;
                  int _11248 = _5895;
                  for (int _5898 = _11247; _5898 < _11248; ++_5898)
                  {
                    {
                      int _5899 = _ptr__5843[_ptr__5851[safe_add( _5849,_5898 )]];
                      _ptr__5890[safe_add( _5886,_5893 )] = _ptr__5852[safe_add( safe_add( _5832,safe_mul( _5894,_5839 ) ),_5899 )];
                      _ptr__5891[safe_add( _5888,_5893 )] = _ptr__5845[_ptr__5851[safe_add( _5849,_5898 )]];
                      ++ _5893;
                    }
                  }
                  _ptr__5890[safe_add( _5887,_5892 )] = safe_add( safe_mul( _5894,_5847 ),_5897 );
                  _ptr__5889[safe_add( safe_add( _5884,_5892 ),(int)1 )] = _5893;
                  ++ _5892;
                }
              }
            }
          }
          if ((!_5883))
          {
            {
              _5826->popi64(_5854);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11249 = (int)0;
          int _11250 = safe_add( _5840,(int)1 );
          for (int _5900 = _11249; _5900 < _11250; ++_5900)
          {
            {
              _ptr__5851[safe_add( _5841,_5900 )] = (int)0;
            }
          }
          if ((_5837 == (int)1))
          {
            {
              int _11251 = (int)0;
              int _11252 = _5831;
              for (int _5901 = _11251; _5901 < _11252; ++_5901)
              {
                {
                  _ptr__5851[safe_add( _5834,_5901 )] = (int)0;
                }
              }
              int _11253 = (int)0;
              int _11254 = _5831;
              for (int _5902 = _11253; _5902 < _11254; ++_5902)
              {
                {
                  _ptr__5851[safe_add( _5835,_5902 )] = (int)_ptr__5852[safe_add( _5833,_5902 )];
                }
              }
              _ptr__5851[_5841] = (int)0;
              _ptr__5851[safe_add( _5841,(int)1 )] = _5831;
            }
          }
          else
          {
            {
              int _11255 = (int)0;
              int _11256 = _5831;
              for (int _5903 = _11255; _5903 < _11256; ++_5903)
              {
                {
                  _ptr__5851[safe_add( _5834,_5903 )] = (int)(_ptr__5852[safe_add( _5833,_5903 )] / _ptr__5836[(int)1]);
                }
              }
              int _11257 = (int)0;
              int _11258 = _5831;
              for (int _5904 = _11257; _5904 < _11258; ++_5904)
              {
                {
                  _ptr__5851[safe_add( _5835,_5904 )] = (int)(_ptr__5852[safe_add( _5833,_5904 )] % _ptr__5836[(int)1]);
                }
              }
              _ptr__5851[_5841] = (int)0;
              int _11259 = (int)0;
              int _11260 = _5831;
              for (int _5905 = _11259; _5905 < _11260; ++_5905)
              {
                {
                  ++ _ptr__5851[safe_add( safe_add( _5841,_ptr__5851[safe_add( _5834,_5905 )] ),(int)1 )];
                }
              }
              int _11261 = (int)0;
              int _11262 = _5840;
              for (int _5906 = _11261; _5906 < _11262; ++_5906)
              {
                {
                  _ptr__5851[safe_add( safe_add( _5841,_5906 ),(int)1 )] += _ptr__5851[safe_add( _5841,_5906 )];
                }
              }
            }
          }
          int _11263 = (int)0;
          int _11264 = _5840;
          for (int _5907 = _11263; _5907 < _11264; ++_5907)
          {
            {
              int _11265 = (int)0;
              int _11266 = mdimj;
              for (int _5908 = _11265; _5908 < _11266; ++_5908)
              {
                {
                  int _5909 = (int)0;
                  int _5910 = _ptr__5851[safe_add( safe_add( _5841,_5907 ),(int)1 )];
                  int _5911 = _ptr__5851[safe_add( safe_add( _5850,_5908 ),(int)1 )];
                  int _5912 = _ptr__5851[safe_add( _5841,_5907 )];
                  int _5913 = _ptr__5851[safe_add( _5850,_5908 )];
                  while ( ((_5913 < _5911) && (_5912 < _5910)) )
                  {
                    {
                      if ((_ptr__5843[_ptr__5851[safe_add( _5849,_5913 )]] < _ptr__5851[safe_add( _5835,_5912 )]))
                      {
                        {
                          ++ _5913;
                        }
                      }
                      else if((_ptr__5843[_ptr__5851[safe_add( _5849,_5913 )]] > _ptr__5851[safe_add( _5835,_5912 )]))
                      {
                        {
                          ++ _5912;
                        }
                      }
                      else
                      {
                        {
                          ++ _5909;
                          ++ _5913;
                          ++ _5912;
                        }
                      }
                    }
                  }
                  if ((_5909 > (int)0))
                  {
                    {
                      _5853 += _5909;
                      ++ _5854;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _5914 = (_5854 < safe_mul( _5839,mdimi ));
          _5826->alloc_expr((int)2,_5854,_5853,_5914);
          int _5915 = mosek::fusion::p_WorkStack::_get_impl(_5826)->ptr_base;
          int _5916 = mosek::fusion::p_WorkStack::_get_impl(_5826)->shape_base;
          int _5917 = mosek::fusion::p_WorkStack::_get_impl(_5826)->nidxs_base;
          int _5918 = mosek::fusion::p_WorkStack::_get_impl(_5826)->sp_base;
          int _5919 = mosek::fusion::p_WorkStack::_get_impl(_5826)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5826)->i32)(_5916)) = _5840;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5826)->i32)(safe_add( _5916,(int)1 ))) = mdimj;
          std::shared_ptr< monty::ndarray< int,1 > > _5920 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i32;
          _checked_ptr_1<int> _ptr__5920(_5920 ? _5920->raw() : nullptr,_5920 ? _5920->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5921 = mosek::fusion::p_WorkStack::_get_impl(_5826)->i64;
          _checked_ptr_1<long long> _ptr__5921(_5921 ? _5921->raw() : nullptr,_5921 ? _5921->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5922 = mosek::fusion::p_WorkStack::_get_impl(_5826)->f64;
          _checked_ptr_1<double> _ptr__5922(_5922 ? _5922->raw() : nullptr,_5922 ? _5922->size(0) : 0);
          {
            int _5923 = (int)0;
            int _5924 = (int)0;
            int _5925 = (int)0;
            _ptr__5920[_5915] = (int)0;
            int _11267 = (int)0;
            int _11268 = _5840;
            for (int _5926 = _11267; _5926 < _11268; ++_5926)
            {
              {
                int _11269 = (int)0;
                int _11270 = mdimj;
                for (int _5927 = _11269; _5927 < _11270; ++_5927)
                {
                  {
                    int _5928 = (int)0;
                    int _5929 = _ptr__5851[safe_add( safe_add( _5841,_5926 ),(int)1 )];
                    int _5930 = _ptr__5851[safe_add( safe_add( _5850,_5927 ),(int)1 )];
                    int _5931 = _ptr__5851[safe_add( _5841,_5926 )];
                    int _5932 = _ptr__5851[safe_add( _5850,_5927 )];
                    while ( ((_5932 < _5930) && (_5931 < _5929)) )
                    {
                      {
                        if ((_ptr__5843[_ptr__5851[safe_add( _5849,_5932 )]] < _ptr__5851[safe_add( _5835,_5931 )]))
                        {
                          {
                            ++ _5932;
                          }
                        }
                        else if((_ptr__5843[_ptr__5851[safe_add( _5849,_5932 )]] > _ptr__5851[safe_add( _5835,_5931 )]))
                        {
                          {
                            ++ _5931;
                          }
                        }
                        else
                        {
                          {
                            _ptr__5921[safe_add( _5917,_5925 )] = _ptr__5852[safe_add( _5832,_5931 )];
                            _ptr__5922[safe_add( _5919,_5925 )] = _ptr__5845[_ptr__5851[safe_add( _5849,_5932 )]];
                            ++ _5928;
                            ++ _5925;
                            ++ _5932;
                            ++ _5931;
                          }
                        }
                      }
                    }
                    if ((_5928 > (int)0))
                    {
                      {
                        _ptr__5920[safe_add( safe_add( _5915,_5924 ),(int)1 )] = _5925;
                        _ptr__5921[safe_add( _5918,_5924 )] = _5923;
                        ++ _5924;
                      }
                    }
                    {}
                    ++ _5923;
                  }
                }
              }
            }
          }
          if ((!_5914))
          {
            {
              _5826->popi64(_5854);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_5827)->pi32 = _5829;
  mosek::fusion::p_WorkStack::_get_impl(_5827)->pi64 = _5830;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5933,monty::rc_ptr< ::mosek::fusion::WorkStack > _5934,monty::rc_ptr< ::mosek::fusion::WorkStack > _5935) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_5933,_5934,_5935); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5933,monty::rc_ptr< ::mosek::fusion::WorkStack > _5934,monty::rc_ptr< ::mosek::fusion::WorkStack > _5935){
  int _5936 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _5937 = x->getShape();
  _checked_ptr_1<int> _ptr__5937(_5937 ? _5937->raw() : nullptr,_5937 ? _5937->size(0) : 0);
  int _5938 = (int)((_5937)->size(0));
  int _5939 = _5935->alloci64(_5936);
  int _5940 = _5935->alloci64(_5936);
  int _5941 = _5935->alloci32(_5936);
  int _5942 = _5935->alloci32(_5936);
  int _5943 = _5935->alloci32(_5936);
  int _5944 = _5935->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5945 = x->getShape();
  _checked_ptr_1<int> _ptr__5945(_5945 ? _5945->raw() : nullptr,_5945 ? _5945->size(0) : 0);
  int _5946 = (int)((_5945)->size(0));
  int _11271;
  bool _11272 = (_5946 == (int)1);
  if (_11272)
  {
    _11271 = (int)1;
  }
  else
  {
    _11271 = _ptr__5945[(int)1];
  }
  int _5947 = _11271;
  int _5948 = _ptr__5945[(int)0];
  int _5949 = _5935->alloci32(safe_add( _5947,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5950 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5950(_5950 ? _5950->raw() : nullptr,_5950 ? _5950->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5951 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5951(_5951 ? _5951->raw() : nullptr,_5951 ? _5951->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5952 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5952(_5952 ? _5952->raw() : nullptr,_5952 ? _5952->size(0) : 0);
  int _5953 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5954 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _5955 = (int)0;
  int _5956 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _5957 = mosek::fusion::p_WorkStack::_get_impl(_5935)->i32;
  _checked_ptr_1<int> _ptr__5957(_5957 ? _5957->raw() : nullptr,_5957 ? _5957->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5958 = mosek::fusion::p_WorkStack::_get_impl(_5935)->i64;
  _checked_ptr_1<long long> _ptr__5958(_5958 ? _5958->raw() : nullptr,_5958 ? _5958->size(0) : 0);
  int _5959 = (int)((_5952)->size(0));
  x->inst(_5940,_5958,_5939,_5958);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int _11273 = (int)0;
        int _11274 = safe_add( _5953,(int)1 );
        for (int _5960 = _11273; _5960 < _11274; ++_5960)
        {
          {
            _ptr__5957[safe_add( _5944,_5960 )] = (int)0;
          }
        }
        int _11275 = (int)0;
        int _11276 = (int)((_5950)->size(0));
        for (int _5961 = _11275; _5961 < _11276; ++_5961)
        {
          {
            ++ _ptr__5957[safe_add( safe_add( _5944,_ptr__5950[_5961] ),(int)1 )];
          }
        }
        int _11277 = (int)0;
        int _11278 = _5953;
        for (int _5962 = _11277; _5962 < _11278; ++_5962)
        {
          {
            _ptr__5957[safe_add( safe_add( _5944,_5962 ),(int)1 )] += _ptr__5957[safe_add( _5944,_5962 )];
          }
        }
        if ((_5946 == (int)1))
        {
          {
            int _11279 = (int)0;
            int _11280 = _5936;
            for (int _5963 = _11279; _5963 < _11280; ++_5963)
            {
              {
                _ptr__5957[safe_add( _5941,_5963 )] = (int)_ptr__5958[safe_add( _5940,_5963 )];
              }
            }
            int _11281 = (int)0;
            int _11282 = _5936;
            for (int _5964 = _11281; _5964 < _11282; ++_5964)
            {
              {
                _ptr__5957[safe_add( _5942,_5964 )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int _11283 = (int)0;
            int _11284 = _5936;
            for (int _5965 = _11283; _5965 < _11284; ++_5965)
            {
              {
                _ptr__5957[safe_add( _5941,_5965 )] = (int)(_ptr__5958[safe_add( _5940,_5965 )] / _5947);
              }
            }
            int _11285 = (int)0;
            int _11286 = _5936;
            for (int _5966 = _11285; _5966 < _11286; ++_5966)
            {
              {
                _ptr__5957[safe_add( _5942,_5966 )] = (int)(_ptr__5958[safe_add( _5940,_5966 )] % _5947);
              }
            }
          }
        }
        if ((_5946 > (int)1))
        {
          {
            int _11287 = (int)0;
            int _11288 = safe_add( _5947,(int)1 );
            for (int _5967 = _11287; _5967 < _11288; ++_5967)
            {
              {
                _ptr__5957[safe_add( _5949,_5967 )] = (int)0;
              }
            }
            int _11289 = (int)0;
            int _11290 = _5936;
            for (int _5968 = _11289; _5968 < _11290; ++_5968)
            {
              {
                ++ _ptr__5957[safe_add( safe_add( _5949,_ptr__5957[safe_add( _5942,_5968 )] ),(int)1 )];
              }
            }
            int _11291 = (int)0;
            int _11292 = _5947;
            for (int _5969 = _11291; _5969 < _11292; ++_5969)
            {
              {
                _ptr__5957[safe_add( safe_add( _5949,_5969 ),(int)1 )] += _ptr__5957[safe_add( _5949,_5969 )];
              }
            }
            int _11293 = (int)0;
            int _11294 = _5936;
            for (int _5970 = _11293; _5970 < _11294; ++_5970)
            {
              {
                _ptr__5957[safe_add( _5943,_ptr__5957[safe_add( _5949,_ptr__5957[safe_add( _5942,_5970 )] )] )] = _5970;
                ++ _ptr__5957[safe_add( _5949,_ptr__5957[safe_add( _5942,_5970 )] )];
              }
            }
            int _11295 = (int)0;
            int _11296 = _5947;
            for (int _5971 = _11295; _5971 < _11296; ++_5971)
            {
              {
                _ptr__5957[(safe_add( _5949,_5947 ) - _5971)] = _ptr__5957[((safe_add( _5949,_5947 ) - _5971) - (int)1)];
              }
            }
            _ptr__5957[_5949] = (int)0;
          }
        }
        else
        {
          {
            _ptr__5957[_5949] = (int)0;
            _ptr__5957[safe_add( _5949,(int)1 )] = _5936;
            int _11297 = (int)0;
            int _11298 = _5936;
            for (int _5972 = _11297; _5972 < _11298; ++_5972)
            {
              {
                _ptr__5957[safe_add( _5943,_5972 )] = _5972;
              }
            }
          }
        }
        int _11299 = (int)0;
        int _11300 = _5953;
        for (int _5973 = _11299; _5973 < _11300; ++_5973)
        {
          {
            int _11301 = (int)0;
            int _11302 = _5947;
            for (int _5974 = _11301; _5974 < _11302; ++_5974)
            {
              {
                int _5975 = (int)0;
                int _5976 = _ptr__5957[safe_add( safe_add( _5949,_5974 ),(int)1 )];
                int _5977 = _ptr__5957[safe_add( safe_add( _5944,_5973 ),(int)1 )];
                int _5978 = _ptr__5957[safe_add( _5949,_5974 )];
                int _5979 = _ptr__5957[safe_add( _5944,_5973 )];
                while ( ((_5979 < _5977) && (_5978 < _5976)) )
                {
                  {
                    if ((_ptr__5951[_5979] < _ptr__5957[safe_add( _5941,_ptr__5957[safe_add( _5943,_5978 )] )]))
                    {
                      {
                        ++ _5979;
                      }
                    }
                    else if((_ptr__5951[_5979] > _ptr__5957[safe_add( _5941,_ptr__5957[safe_add( _5943,_5978 )] )]))
                    {
                      {
                        ++ _5978;
                      }
                    }
                    else
                    {
                      {
                        ++ _5975;
                        ++ _5979;
                        ++ _5978;
                      }
                    }
                  }
                }
                if ((_5975 > (int)0))
                {
                  {
                    _5955 += _5975;
                    ++ _5956;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _5955 = safe_mul( _5959,_5947 );
      int _5980 = (int)0;
      while ( (_5980 < _5959) )
      {
        {
          int _5981 = safe_add( _5980,(int)1 );
          while ( ((_5981 < _5959) && (_ptr__5950[_5980] == _ptr__5950[_5981])) )
          {
            {
              ++ _5981;
            }
          }
          ++ _5956;
          _5980 = _5981;
        }
      }
      _5956 *= _5947;
    }
  }
  bool _11303;
  bool _11304 = (_5956 < safe_mul( _5947,_5953 ));
  if (_11304)
  {
    _11303 = true;
  }
  else
  {
    _11303 = false;
  }
  bool _5982 = _11303;
  int _5983 = _5946;
  _5933->alloc_expr(_5983,_5956,_5955,_5982);
  int _5984 = mosek::fusion::p_WorkStack::_get_impl(_5933)->ptr_base;
  int _5985 = mosek::fusion::p_WorkStack::_get_impl(_5933)->shape_base;
  int _5986 = mosek::fusion::p_WorkStack::_get_impl(_5933)->nidxs_base;
  int _11305;
  bool _11306 = _5982;
  if (_11306)
  {
    _11305 = mosek::fusion::p_WorkStack::_get_impl(_5933)->sp_base;
  }
  else
  {
    _11305 = _5933->alloci64(_5956);
  }
  int _5987 = _11305;
  int _5988 = mosek::fusion::p_WorkStack::_get_impl(_5933)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5989 = mosek::fusion::p_WorkStack::_get_impl(_5933)->i32;
  _checked_ptr_1<int> _ptr__5989(_5989 ? _5989->raw() : nullptr,_5989 ? _5989->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5990 = mosek::fusion::p_WorkStack::_get_impl(_5933)->i64;
  _checked_ptr_1<long long> _ptr__5990(_5990 ? _5990->raw() : nullptr,_5990 ? _5990->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5991 = mosek::fusion::p_WorkStack::_get_impl(_5933)->f64;
  _checked_ptr_1<double> _ptr__5991(_5991 ? _5991->raw() : nullptr,_5991 ? _5991->size(0) : 0);
  _ptr__5989[_5985] = _5953;
  if ((_5946 > (int)1))
  {
    {
      _ptr__5989[safe_add( _5985,(int)1 )] = _5947;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int _5992 = (int)0;
      int _5993 = (int)0;
      int _5994 = (int)0;
      _ptr__5989[_5984] = (int)0;
      int _11307 = (int)0;
      int _11308 = _5953;
      for (int _5995 = _11307; _5995 < _11308; ++_5995)
      {
        {
          int _11309 = (int)0;
          int _11310 = _5947;
          for (int _5996 = _11309; _5996 < _11310; ++_5996)
          {
            {
              int _5997 = (int)0;
              int _5998 = _ptr__5957[safe_add( safe_add( _5949,_5996 ),(int)1 )];
              int _5999 = _ptr__5957[safe_add( safe_add( _5944,_5995 ),(int)1 )];
              int _6000 = _ptr__5957[safe_add( _5949,_5996 )];
              int _6001 = _ptr__5957[safe_add( _5944,_5995 )];
              while ( ((_6001 < _5999) && (_6000 < _5998)) )
              {
                {
                  if ((_ptr__5951[_6001] < _ptr__5957[safe_add( _5941,_ptr__5957[safe_add( _5943,_6000 )] )]))
                  {
                    {
                      ++ _6001;
                    }
                  }
                  else if((_ptr__5951[_6001] > _ptr__5957[safe_add( _5941,_ptr__5957[safe_add( _5943,_6000 )] )]))
                  {
                    {
                      ++ _6000;
                    }
                  }
                  else
                  {
                    {
                      _ptr__5990[safe_add( _5986,_5994 )] = _ptr__5958[safe_add( _5939,_ptr__5957[safe_add( _5943,_6000 )] )];
                      _ptr__5991[safe_add( _5988,_5994 )] = _ptr__5952[_6001];
                      ++ _5997;
                      ++ _5994;
                      ++ _6001;
                      ++ _6000;
                    }
                  }
                }
              }
              if ((_5997 > (int)0))
              {
                {
                  _ptr__5989[safe_add( safe_add( _5984,_5993 ),(int)1 )] = _5994;
                  _ptr__5990[safe_add( _5987,_5993 )] = _5992;
                  ++ _5993;
                }
              }
              {}
              ++ _5992;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _6002 = (int)0;
      int _6003 = (int)0;
      _ptr__5989[_5984] = (int)0;
      int _6004 = (int)0;
      while ( (_6004 < _5959) )
      {
        {
          int _6005 = safe_add( _6004,(int)1 );
          while ( ((_6005 < _5959) && (_ptr__5950[_6005] == _ptr__5950[_6004])) )
          {
            {
              ++ _6005;
            }
          }
          int _11311 = (int)0;
          int _11312 = _5947;
          for (int _6006 = _11311; _6006 < _11312; ++_6006)
          {
            {
              int _11313 = _6004;
              int _11314 = _6005;
              for (int _6007 = _11313; _6007 < _11314; ++_6007)
              {
                {
                  _ptr__5990[safe_add( _5986,_6002 )] = _ptr__5958[safe_add( safe_add( _5939,safe_mul( _ptr__5951[_6007],_5947 ) ),_6006 )];
                  _ptr__5991[safe_add( _5988,_6002 )] = _ptr__5952[_6007];
                  ++ _6002;
                }
              }
              _ptr__5989[safe_add( safe_add( _5984,_6003 ),(int)1 )] = _6002;
              _ptr__5990[safe_add( _5987,_6003 )] = safe_add( safe_mul( _ptr__5950[_6004],_5947 ),_6006 );
              ++ _6003;
            }
          }
          _6004 = _6005;
        }
      }
    }
  }
  if ((!_5982))
  {
    {
      _5933->popi64(_5956);
    }
  }
  {}
  _5935->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _6008,int _6009,std::shared_ptr< monty::ndarray< int,1 > > _6010,std::shared_ptr< monty::ndarray< int,1 > > _6011,std::shared_ptr< monty::ndarray< double,1 > > _6012){
  _checked_ptr_1<int> _ptr__6010(_6010 ? _6010->raw() : nullptr, _6010 ? _6010->size(0) : 0);
  _checked_ptr_1<int> _ptr__6011(_6011 ? _6011->raw() : nullptr, _6011 ? _6011->size(0) : 0);
  _checked_ptr_1<double> _ptr__6012(_6012 ? _6012->raw() : nullptr, _6012 ? _6012->size(0) : 0);
  bool _6013 = true;
  {
    int _11315 = (int)0;
    int _11316 = (int)((_6010)->size(0));
    for (int _6014 = _11315; _6014 < _11316; ++_6014)
    {
      {
        if (((_ptr__6010[_6014] < (int)0) || ((_ptr__6010[_6014] >= _6008) || ((_ptr__6011[_6014] < (int)0) || (_ptr__6011[_6014] >= _6009)))))
        {
          {
            _6013 = false;
          }
        }
        {}
      }
    }
    int _11317 = (int)1;
    int _11318 = (int)((_6010)->size(0));
    for (int _6015 = _11317; _6015 < _11318; ++_6015)
    {
      {
        if (((_ptr__6010[(_6015 - (int)1)] > _ptr__6010[_6015]) || ((_ptr__6010[(_6015 - (int)1)] == _ptr__6010[_6015]) && (_ptr__6011[(_6015 - (int)1)] >= _ptr__6011[_6015]))))
        {
          {
            _6013 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_6013))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _6016,int _6017,std::shared_ptr< monty::ndarray< int,1 > > _6018,bool _6019){
  _checked_ptr_1<int> _ptr__6018(_6018 ? _6018->raw() : nullptr, _6018 ? _6018->size(0) : 0);
  if (_6019)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6016),(int)(_ptr__6018[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__6018[(int)0]),(int)(_6017)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6020,    int _6021,    std::shared_ptr< monty::ndarray< int,1 > > _6022,    std::shared_ptr< monty::ndarray< int,1 > > _6023,    std::shared_ptr< monty::ndarray< double,1 > > _6024,    monty::rc_ptr< ::mosek::fusion::Variable > _6025){ return new mosek::fusion::ExprMulScalarVar(_6020,_6021,_6022,_6023,_6024,_6025); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6020,    int _6021,    std::shared_ptr< monty::ndarray< int,1 > > _6022,    std::shared_ptr< monty::ndarray< int,1 > > _6023,    std::shared_ptr< monty::ndarray< double,1 > > _6024,    monty::rc_ptr< ::mosek::fusion::Variable > _6025) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6020,_6021,_6022,_6023,_6024,_6025); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6020,    int _6021,    std::shared_ptr< monty::ndarray< int,1 > > _6022,    std::shared_ptr< monty::ndarray< int,1 > > _6023,    std::shared_ptr< monty::ndarray< double,1 > > _6024,    monty::rc_ptr< ::mosek::fusion::Variable > _6025){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6022(_6022 ? _6022->raw() : nullptr, _6022 ? _6022->size(0) : 0);
    _checked_ptr_1<int> _ptr__6023(_6023 ? _6023->raw() : nullptr, _6023 ? _6023->size(0) : 0);
    _checked_ptr_1<double> _ptr__6024(_6024 ? _6024->raw() : nullptr, _6024 ? _6024->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_6020,_6021,::mosek::fusion::Utils::Tools::arraycopy(_6022),::mosek::fusion::Utils::Tools::arraycopy(_6023),::mosek::fusion::Utils::Tools::arraycopy(_6024),_6025,(int)1);
    if ((_6025->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_6020 < (int)0) || ((_6021 < (int)0) || (((int)((_6022)->size(0)) != (int)((_6023)->size(0))) || ((int)((_6022)->size(0)) != (int)((_6024)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6026 = false;
    int _11319 = (int)0;
    int _11320 = (int)((_6022)->size(0));
    for (int _6027 = _11319; _6027 < _11320; ++_6027)
    {
      {
        if (((_ptr__6022[_6027] < (int)0) || ((_ptr__6022[_6027] >= _6020) || ((_ptr__6023[_6027] < (int)0) || (_ptr__6023[_6027] >= _6021)))))
        {
          {
            _6026 = true;
          }
        }
        {}
      }
    }
    if (_6026)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6028 = false;
    int _11321 = (int)1;
    int _11322 = (int)((_6022)->size(0));
    for (int _6029 = _11321; _6029 < _11322; ++_6029)
    {
      {
        if (((_ptr__6022[_6029] < _ptr__6022[(_6029 - (int)1)]) || ((_ptr__6022[_6029] == _ptr__6022[(_6029 - (int)1)]) && (_ptr__6023[_6029] <= _ptr__6023[(_6029 - (int)1)]))))
        {
          {
            _6028 = true;
          }
        }
        {}
      }
    }
    if (_6028)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6030,    int _6031,    std::shared_ptr< monty::ndarray< int,1 > > _6032,    std::shared_ptr< monty::ndarray< int,1 > > _6033,    std::shared_ptr< monty::ndarray< double,1 > > _6034,    monty::rc_ptr< ::mosek::fusion::Variable > _6035,    int _6036){ return new mosek::fusion::ExprMulScalarVar(_6030,_6031,_6032,_6033,_6034,_6035,_6036); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6030,    int _6031,    std::shared_ptr< monty::ndarray< int,1 > > _6032,    std::shared_ptr< monty::ndarray< int,1 > > _6033,    std::shared_ptr< monty::ndarray< double,1 > > _6034,    monty::rc_ptr< ::mosek::fusion::Variable > _6035,    int _6036) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6030,_6031,_6032,_6033,_6034,_6035,_6036); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6030,    int _6031,    std::shared_ptr< monty::ndarray< int,1 > > _6032,    std::shared_ptr< monty::ndarray< int,1 > > _6033,    std::shared_ptr< monty::ndarray< double,1 > > _6034,    monty::rc_ptr< ::mosek::fusion::Variable > _6035,    int _6036){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6032(_6032 ? _6032->raw() : nullptr, _6032 ? _6032->size(0) : 0);
    _checked_ptr_1<int> _ptr__6033(_6033 ? _6033->raw() : nullptr, _6033 ? _6033->size(0) : 0);
    _checked_ptr_1<double> _ptr__6034(_6034 ? _6034->raw() : nullptr, _6034 ? _6034->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6030),(int)(_6031)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _6030;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _6031;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _6032;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _6033;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _6034;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _6035;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6037,monty::rc_ptr< ::mosek::fusion::WorkStack > _6038,monty::rc_ptr< ::mosek::fusion::WorkStack > _6039) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_6037,_6038,_6039); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6037,monty::rc_ptr< ::mosek::fusion::WorkStack > _6038,monty::rc_ptr< ::mosek::fusion::WorkStack > _6039){
  if ((x->numInst() == (int)0))
  {
    {
      _6037->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_6037)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6037)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6037)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6037)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _6040 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__6040(_6040 ? _6040->raw() : nullptr,_6040 ? _6040->size(0) : 0);
      x->inst((int)0,_6040);
      long long _6041 = _ptr__6040[(int)0];
      int _6042 = (int)((msubi)->size(0));
      int _6043 = _6042;
      bool _6044 = (_6042 < safe_mul( mdimi,mdimj ));
      _6037->alloc_expr((int)2,_6042,_6043,_6044);
      int _6045 = mosek::fusion::p_WorkStack::_get_impl(_6037)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6037)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6037)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6037)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6037)->shape_base,(int)1 ))) = mdimj;
      int _6046 = mosek::fusion::p_WorkStack::_get_impl(_6037)->nidxs_base;
      int _6047 = mosek::fusion::p_WorkStack::_get_impl(_6037)->sp_base;
      int _6048 = mosek::fusion::p_WorkStack::_get_impl(_6037)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6049 = mosek::fusion::p_WorkStack::_get_impl(_6037)->i32;
      _checked_ptr_1<int> _ptr__6049(_6049 ? _6049->raw() : nullptr,_6049 ? _6049->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6050 = mosek::fusion::p_WorkStack::_get_impl(_6037)->i64;
      _checked_ptr_1<long long> _ptr__6050(_6050 ? _6050->raw() : nullptr,_6050 ? _6050->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6051 = mosek::fusion::p_WorkStack::_get_impl(_6037)->f64;
      _checked_ptr_1<double> _ptr__6051(_6051 ? _6051->raw() : nullptr,_6051 ? _6051->size(0) : 0);
      {
        int _11323 = (int)0;
        int _11324 = _6043;
        for (int _6052 = _11323; _6052 < _11324; ++_6052)
        {
          {
            _ptr__6051[safe_add( _6048,_6052 )] = ((*mcof)(_6052));
          }
        }
        int _11325 = (int)0;
        int _11326 = _6043;
        for (int _6053 = _11325; _6053 < _11326; ++_6053)
        {
          {
            _ptr__6050[safe_add( _6046,_6053 )] = _6041;
          }
        }
        if (_6044)
        {
          {
            int _11327 = (int)0;
            int _11328 = _6042;
            for (int _6054 = _11327; _6054 < _11328; ++_6054)
            {
              {
                _ptr__6050[safe_add( _6047,_6054 )] = safe_add( safe_mul( ((*msubi)(_6054)),mdimj ),((*msubj)(_6054)) );
              }
            }
          }
        }
        {}
        int _11329 = (int)0;
        int _11330 = safe_add( _6042,(int)1 );
        for (int _6055 = _11329; _6055 < _11330; ++_6055)
        {
          {
            _ptr__6049[safe_add( _6045,_6055 )] = _6055;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6056,    double _6057){ return new mosek::fusion::ExprMulVarScalarConst(_6056,_6057); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6056,    double _6057) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_6056,_6057); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6056,    double _6057){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6056->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _6056;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _6057;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6058,monty::rc_ptr< ::mosek::fusion::WorkStack > _6059,monty::rc_ptr< ::mosek::fusion::WorkStack > _6060) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_6058,_6059,_6060); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6058,monty::rc_ptr< ::mosek::fusion::WorkStack > _6059,monty::rc_ptr< ::mosek::fusion::WorkStack > _6060){
  int _6061 = x->numInst();
  int _6062 = _6061;
  std::shared_ptr< monty::ndarray< int,1 > > _6063 = x->getShape();
  _checked_ptr_1<int> _ptr__6063(_6063 ? _6063->raw() : nullptr,_6063 ? _6063->size(0) : 0);
  int _6064 = (int)((_6063)->size(0));
  bool _6065 = (::mosek::fusion::p_Set::size(_6063) > _6062);
  _6058->alloc_expr(_6064,_6062,_6061,_6065);
  int _6066 = mosek::fusion::p_WorkStack::_get_impl(_6058)->ptr_base;
  int _6067 = mosek::fusion::p_WorkStack::_get_impl(_6058)->nidxs_base;
  int _6068 = mosek::fusion::p_WorkStack::_get_impl(_6058)->sp_base;
  int _6069 = mosek::fusion::p_WorkStack::_get_impl(_6058)->cof_base;
  int _6070 = mosek::fusion::p_WorkStack::_get_impl(_6058)->shape_base;
  if (_6065)
  {
    {
      x->inst(_6068,mosek::fusion::p_WorkStack::_get_impl(_6058)->i64,_6067,mosek::fusion::p_WorkStack::_get_impl(_6058)->i64);
    }
  }
  else
  {
    {
      x->inst(_6067,mosek::fusion::p_WorkStack::_get_impl(_6058)->i64);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6071 = mosek::fusion::p_WorkStack::_get_impl(_6058)->i32;
  _checked_ptr_1<int> _ptr__6071(_6071 ? _6071->raw() : nullptr,_6071 ? _6071->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6072 = mosek::fusion::p_WorkStack::_get_impl(_6058)->i64;
  _checked_ptr_1<long long> _ptr__6072(_6072 ? _6072->raw() : nullptr,_6072 ? _6072->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6073 = mosek::fusion::p_WorkStack::_get_impl(_6058)->f64;
  _checked_ptr_1<double> _ptr__6073(_6073 ? _6073->raw() : nullptr,_6073 ? _6073->size(0) : 0);
  {
    int _11331 = (int)0;
    int _11332 = _6064;
    for (int _6074 = _11331; _6074 < _11332; ++_6074)
    {
      {
        _ptr__6071[safe_add( _6070,_6074 )] = _ptr__6063[_6074];
      }
    }
    int _11333 = (int)0;
    int _11334 = safe_add( _6062,(int)1 );
    for (int _6075 = _11333; _6075 < _11334; ++_6075)
    {
      {
        _ptr__6071[safe_add( _6066,_6075 )] = _6075;
      }
    }
    int _11335 = (int)0;
    int _11336 = _6061;
    for (int _6076 = _11335; _6076 < _11336; ++_6076)
    {
      {
        _ptr__6073[safe_add( _6069,_6076 )] = 1.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6077,    monty::rc_ptr< ::mosek::fusion::Expression > _6078,    double _6079,    double _6080){ return new mosek::fusion::ExprAdd(_6077,_6078,_6079,_6080); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6077,    monty::rc_ptr< ::mosek::fusion::Expression > _6078,    double _6079,    double _6080) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_6077,_6078,_6079,_6080); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6077,    monty::rc_ptr< ::mosek::fusion::Expression > _6078,    double _6079,    double _6080){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6077->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _6077;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _6078;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _6079;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _6080;
    if ((_6077->getND() != _6078->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _11337 = (int)0;
    int _11338 = _6077->getND();
    for (int _6081 = _11337; _6081 < _11338; ++_6081)
    {
      {
        if ((_6077->getDim(_6081) != _6078->getDim(_6081)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6082,monty::rc_ptr< ::mosek::fusion::WorkStack > _6083,monty::rc_ptr< ::mosek::fusion::WorkStack > _6084) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_6082,_6083,_6084); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6082,monty::rc_ptr< ::mosek::fusion::WorkStack > _6083,monty::rc_ptr< ::mosek::fusion::WorkStack > _6084){
  e1->eval(_6083,_6082,_6084);
  e2->eval(_6083,_6082,_6084);
  _6083->pop_expr();
  int _6085 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nd;
  int _6086 = mosek::fusion::p_WorkStack::_get_impl(_6083)->shape_base;
  int _6087 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nelem;
  int _6088 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nnz;
  int _6089 = mosek::fusion::p_WorkStack::_get_impl(_6083)->ncodeatom;
  bool _6090 = mosek::fusion::p_WorkStack::_get_impl(_6083)->hassp;
  int _6091 = mosek::fusion::p_WorkStack::_get_impl(_6083)->ptr_base;
  int _6092 = mosek::fusion::p_WorkStack::_get_impl(_6083)->sp_base;
  int _6093 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nidxs_base;
  int _6094 = mosek::fusion::p_WorkStack::_get_impl(_6083)->cof_base;
  int _6095 = mosek::fusion::p_WorkStack::_get_impl(_6083)->code_base;
  int _6096 = mosek::fusion::p_WorkStack::_get_impl(_6083)->codeptr_base;
  int _6097 = mosek::fusion::p_WorkStack::_get_impl(_6083)->cconst_base;
  _6083->pop_expr();
  int _6098 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nd;
  int _6099 = mosek::fusion::p_WorkStack::_get_impl(_6083)->shape_base;
  int _6100 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nelem;
  int _6101 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nnz;
  int _6102 = mosek::fusion::p_WorkStack::_get_impl(_6083)->ncodeatom;
  bool _6103 = mosek::fusion::p_WorkStack::_get_impl(_6083)->hassp;
  int _6104 = mosek::fusion::p_WorkStack::_get_impl(_6083)->ptr_base;
  int _6105 = mosek::fusion::p_WorkStack::_get_impl(_6083)->sp_base;
  int _6106 = mosek::fusion::p_WorkStack::_get_impl(_6083)->nidxs_base;
  int _6107 = mosek::fusion::p_WorkStack::_get_impl(_6083)->cof_base;
  int _6108 = mosek::fusion::p_WorkStack::_get_impl(_6083)->code_base;
  int _6109 = mosek::fusion::p_WorkStack::_get_impl(_6083)->codeptr_base;
  int _6110 = mosek::fusion::p_WorkStack::_get_impl(_6083)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6111 = mosek::fusion::p_WorkStack::_get_impl(_6083)->i32;
  _checked_ptr_1<int> _ptr__6111(_6111 ? _6111->raw() : nullptr,_6111 ? _6111->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6112 = mosek::fusion::p_WorkStack::_get_impl(_6083)->i64;
  _checked_ptr_1<long long> _ptr__6112(_6112 ? _6112->raw() : nullptr,_6112 ? _6112->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6113 = mosek::fusion::p_WorkStack::_get_impl(_6083)->f64;
  _checked_ptr_1<double> _ptr__6113(_6113 ? _6113->raw() : nullptr,_6113 ? _6113->size(0) : 0);
  bool _6114 = ((_6102 > (int)0) || (_6089 > (int)0));
  if ((_6098 != _6085))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _11339 = (int)0;
  int _11340 = _6098;
  for (int _6115 = _11339; _6115 < _11340; ++_6115)
  {
    {
      if ((_ptr__6111[safe_add( _6099,_6115 )] != _ptr__6111[safe_add( _6086,_6115 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_6103) && (!_6090)))
  {
    {
      int _6116 = _6100;
      int _6117 = safe_add( _6101,_6088 );
      int _6118 = (int)0;
      if (_6114)
      {
        {
          int _11341;
          bool _11342 = (_6102 > (int)0);
          if (_11342)
          {
            _11341 = safe_add( _6102,safe_mul( _6101,(int)2 ) );
          }
          else
          {
            _11341 = _6101;
          }
          _6118 += _11341;
          int _11343;
          bool _11344 = (_6089 > (int)0);
          if (_11344)
          {
            _11343 = safe_add( _6089,safe_mul( _6088,(int)2 ) );
          }
          else
          {
            _11343 = _6088;
          }
          _6118 += _11343;
        }
      }
      {}
      int _6119 = _6098;
      _6082->alloc_expr(_6119,_6116,_6117,false,_6118);
      int _6120 = mosek::fusion::p_WorkStack::_get_impl(_6082)->shape_base;
      int _6121 = mosek::fusion::p_WorkStack::_get_impl(_6082)->ptr_base;
      int _6122 = mosek::fusion::p_WorkStack::_get_impl(_6082)->sp_base;
      int _6123 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nidxs_base;
      int _6124 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cof_base;
      int _6125 = mosek::fusion::p_WorkStack::_get_impl(_6082)->code_base;
      int _6126 = mosek::fusion::p_WorkStack::_get_impl(_6082)->codeptr_base;
      int _6127 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6128 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i32;
      _checked_ptr_1<int> _ptr__6128(_6128 ? _6128->raw() : nullptr,_6128 ? _6128->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6129 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i64;
      _checked_ptr_1<long long> _ptr__6129(_6129 ? _6129->raw() : nullptr,_6129 ? _6129->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6130 = mosek::fusion::p_WorkStack::_get_impl(_6082)->f64;
      _checked_ptr_1<double> _ptr__6130(_6130 ? _6130->raw() : nullptr,_6130 ? _6130->size(0) : 0);
      int _11345 = (int)0;
      int _11346 = _6119;
      for (int _6131 = _11345; _6131 < _11346; ++_6131)
      {
        {
          _ptr__6128[safe_add( _6120,_6131 )] = _ptr__6111[safe_add( _6099,_6131 )];
        }
      }
      int _6132 = (int)0;
      int _6133 = (int)0;
      if ((_6118 > (int)0))
      {
        {
          _ptr__6128[_6126] = (int)0;
        }
      }
      {}
      _ptr__6128[_6121] = (int)0;
      int _11347 = (int)0;
      int _11348 = _6116;
      for (int _6134 = _11347; _6134 < _11348; ++_6134)
      {
        {
          int _11349 = _ptr__6111[safe_add( _6104,_6134 )];
          int _11350 = _ptr__6111[safe_add( safe_add( _6104,_6134 ),(int)1 )];
          for (int _6135 = _11349; _6135 < _11350; ++_6135)
          {
            {
              _ptr__6129[safe_add( _6123,_6133 )] = _ptr__6112[safe_add( _6106,_6135 )];
              _ptr__6130[safe_add( _6124,_6133 )] = (_ptr__6113[safe_add( _6107,_6135 )] * m1);
              if ((_6102 > (int)0))
              {
                {
                  int _11351 = _ptr__6111[safe_add( _6109,_6135 )];
                  int _11352 = _ptr__6111[safe_add( safe_add( _6109,_6135 ),(int)1 )];
                  for (int _6136 = _11351; _6136 < _11352; ++_6136)
                  {
                    {
                      _ptr__6128[safe_add( _6125,_6132 )] = _ptr__6111[safe_add( _6108,_6136 )];
                      _ptr__6130[safe_add( _6127,_6132 )] = _ptr__6113[safe_add( _6110,_6136 )];
                      ++ _6132;
                    }
                  }
                  _ptr__6128[safe_add( _6125,_6132 )] = 2;
                  _ptr__6130[safe_add( _6127,_6132 )] = m1;
                  ++ _6132;
                  _ptr__6128[safe_add( _6125,_6132 )] = 5;
                  ++ _6132;
                  _ptr__6128[safe_add( safe_add( _6126,_6133 ),(int)1 )] = _6132;
                }
              }
              else
              {
                {
                  if ((_6118 > (int)0))
                  {
                    {
                      _ptr__6128[safe_add( _6125,_6132 )] = 2;
                      _ptr__6130[safe_add( _6127,_6132 )] = 0.0;
                      ++ _6132;
                      _ptr__6128[safe_add( safe_add( _6126,_6133 ),(int)1 )] = _6132;
                    }
                  }
                  {}
                }
              }
              ++ _6133;
            }
          }
          int _11353 = _ptr__6111[safe_add( _6091,_6134 )];
          int _11354 = _ptr__6111[safe_add( safe_add( _6091,_6134 ),(int)1 )];
          for (int _6137 = _11353; _6137 < _11354; ++_6137)
          {
            {
              _ptr__6129[safe_add( _6123,_6133 )] = _ptr__6112[safe_add( _6093,_6137 )];
              _ptr__6130[safe_add( _6124,_6133 )] = (_ptr__6113[safe_add( _6094,_6137 )] * m2);
              if ((_6089 > (int)0))
              {
                {
                  int _11355 = _ptr__6111[safe_add( _6096,_6137 )];
                  int _11356 = _ptr__6111[safe_add( safe_add( _6096,_6137 ),(int)1 )];
                  for (int _6138 = _11355; _6138 < _11356; ++_6138)
                  {
                    {
                      _ptr__6128[safe_add( _6125,_6132 )] = _ptr__6111[safe_add( _6095,_6138 )];
                      _ptr__6130[safe_add( _6127,_6132 )] = _ptr__6113[safe_add( _6097,_6138 )];
                      ++ _6132;
                    }
                  }
                  _ptr__6128[safe_add( _6125,_6132 )] = 2;
                  _ptr__6130[safe_add( _6127,_6132 )] = m2;
                  ++ _6132;
                  _ptr__6128[safe_add( _6125,_6132 )] = 5;
                  ++ _6132;
                  _ptr__6128[safe_add( safe_add( _6126,_6133 ),(int)1 )] = _6132;
                }
              }
              else
              {
                {
                  if ((_6118 > (int)0))
                  {
                    {
                      _ptr__6128[safe_add( _6125,_6132 )] = 2;
                      _ptr__6130[safe_add( _6127,_6132 )] = 0.0;
                      ++ _6132;
                      _ptr__6128[safe_add( safe_add( _6126,_6133 ),(int)1 )] = _6132;
                    }
                  }
                  {}
                }
              }
              ++ _6133;
            }
          }
          _ptr__6128[safe_add( safe_add( _6121,_6134 ),(int)1 )] = _6133;
        }
      }
    }
  }
  else if(((!_6103) || (!_6090)))
  {
    {
      if ((!_6090))
      {
        {
          int _6139 = _6087;
          int _6140 = _6088;
          int _6141 = _6091;
          int _6142 = _6092;
          int _6143 = _6093;
          int _6144 = _6089;
          int _6145 = _6096;
          int _6146 = _6095;
          int _6147 = _6097;
          int _6148 = _6094;
          _6087 = _6100;
          _6088 = _6101;
          _6091 = _6104;
          _6092 = _6105;
          _6093 = _6106;
          _6089 = _6102;
          _6096 = _6109;
          _6095 = _6108;
          _6097 = _6110;
          _6094 = _6107;
          _6100 = _6139;
          _6101 = _6140;
          _6104 = _6141;
          _6105 = _6142;
          _6106 = _6143;
          _6102 = _6144;
          _6109 = _6145;
          _6108 = _6146;
          _6110 = _6147;
          _6107 = _6148;
        }
      }
      {}
      double _11357;
      bool _11358 = (!_6103);
      if (_11358)
      {
        _11357 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _11357 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _6149 = _11357;
      double _11359;
      bool _11360 = (!_6103);
      if (_11360)
      {
        _11359 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _11359 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _6150 = _11359;
      int _6151 = _6100;
      int _6152 = safe_add( _6101,_6088 );
      int _6153 = _6098;
      int _6154 = safe_add( _6102,_6089 );
      if (_6114)
      {
        {
          int _11361;
          bool _11362 = (_6102 > (int)0);
          if (_11362)
          {
            _11361 = safe_mul( (int)2,_6101 );
          }
          else
          {
            _11361 = _6101;
          }
          _6154 += _11361;
          int _11363;
          bool _11364 = (_6089 > (int)0);
          if (_11364)
          {
            _11363 = safe_mul( (int)2,_6088 );
          }
          else
          {
            _11363 = _6088;
          }
          _6154 += _11363;
        }
      }
      {}
      _6082->alloc_expr(_6153,_6151,_6152,false,_6154);
      int _6155 = mosek::fusion::p_WorkStack::_get_impl(_6082)->shape_base;
      int _6156 = mosek::fusion::p_WorkStack::_get_impl(_6082)->ptr_base;
      int _6157 = mosek::fusion::p_WorkStack::_get_impl(_6082)->sp_base;
      int _6158 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nidxs_base;
      int _6159 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cof_base;
      int _6160 = mosek::fusion::p_WorkStack::_get_impl(_6082)->code_base;
      int _6161 = mosek::fusion::p_WorkStack::_get_impl(_6082)->codeptr_base;
      int _6162 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6163 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i32;
      _checked_ptr_1<int> _ptr__6163(_6163 ? _6163->raw() : nullptr,_6163 ? _6163->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6164 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i64;
      _checked_ptr_1<long long> _ptr__6164(_6164 ? _6164->raw() : nullptr,_6164 ? _6164->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6165 = mosek::fusion::p_WorkStack::_get_impl(_6082)->f64;
      _checked_ptr_1<double> _ptr__6165(_6165 ? _6165->raw() : nullptr,_6165 ? _6165->size(0) : 0);
      {
        int _6166 = (int)0;
        int _6167 = (int)0;
        int _6168 = (int)0;
        int _11365 = (int)0;
        int _11366 = _6153;
        for (int _6169 = _11365; _6169 < _11366; ++_6169)
        {
          {
            _ptr__6163[safe_add( _6155,_6169 )] = _ptr__6111[safe_add( _6099,_6169 )];
          }
        }
        _ptr__6163[_6156] = (int)0;
        if ((_6154 > (int)0))
        {
          {
            _ptr__6163[_6161] = (int)0;
          }
        }
        {}
        int _6170 = (int)0;
        int _6171 = (int)0;
        while ( ((_6171 < _6100) || (_6170 < _6087)) )
        {
          {
            if (((_6171 < _6100) && ((_6170 >= _6087) || (_6171 < _ptr__6112[safe_add( _6092,_6170 )]))))
            {
              {
                int _11367 = _ptr__6111[safe_add( _6104,_6171 )];
                int _11368 = _ptr__6111[safe_add( safe_add( _6104,_6171 ),(int)1 )];
                for (int _6172 = _11367; _6172 < _11368; ++_6172)
                {
                  {
                    _ptr__6164[safe_add( _6158,_6168 )] = _ptr__6112[safe_add( _6106,_6172 )];
                    _ptr__6165[safe_add( _6159,_6168 )] = (_ptr__6113[safe_add( _6107,_6172 )] * _6149);
                    if ((_6102 > (int)0))
                    {
                      {
                        int _11369 = _ptr__6111[safe_add( _6109,_6172 )];
                        int _11370 = _ptr__6111[safe_add( safe_add( _6109,_6172 ),(int)1 )];
                        for (int _6173 = _11369; _6173 < _11370; ++_6173)
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = _ptr__6111[safe_add( _6108,_6173 )];
                            _ptr__6165[safe_add( _6162,_6166 )] = _ptr__6113[safe_add( _6110,_6173 )];
                            ++ _6166;
                          }
                        }
                        _ptr__6163[safe_add( _6160,_6166 )] = 2;
                        _ptr__6165[safe_add( _6162,_6166 )] = _6149;
                        ++ _6166;
                        _ptr__6163[safe_add( _6160,_6166 )] = 5;
                        ++ _6166;
                        _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                      }
                    }
                    else
                    {
                      {
                        if ((_6154 > (int)0))
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = 2;
                            _ptr__6165[safe_add( _6162,_6166 )] = 0.0;
                            ++ _6166;
                            _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6168;
                  }
                }
                _ptr__6163[safe_add( safe_add( _6156,_6167 ),(int)1 )] = _6168;
                ++ _6171;
              }
            }
            else if(((_6170 < _6087) && ((_6171 >= _6100) || (_6171 > _ptr__6112[safe_add( _6092,_6170 )]))))
            {
              {
                int _11371 = _ptr__6111[safe_add( _6091,_6170 )];
                int _11372 = _ptr__6111[safe_add( safe_add( _6091,_6170 ),(int)1 )];
                for (int _6174 = _11371; _6174 < _11372; ++_6174)
                {
                  {
                    _ptr__6164[safe_add( _6158,_6168 )] = _ptr__6112[safe_add( _6093,_6174 )];
                    _ptr__6165[safe_add( _6159,_6168 )] = (_ptr__6113[safe_add( _6094,_6174 )] * _6150);
                    if ((_6089 > (int)0))
                    {
                      {
                        int _11373 = _ptr__6111[safe_add( _6096,_6174 )];
                        int _11374 = _ptr__6111[safe_add( safe_add( _6096,_6174 ),(int)1 )];
                        for (int _6175 = _11373; _6175 < _11374; ++_6175)
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = _ptr__6111[safe_add( _6095,_6175 )];
                            _ptr__6165[safe_add( _6162,_6166 )] = _ptr__6113[safe_add( _6097,_6175 )];
                            ++ _6166;
                          }
                        }
                        _ptr__6163[safe_add( _6160,_6166 )] = 2;
                        _ptr__6165[safe_add( _6162,_6166 )] = _6150;
                        ++ _6166;
                        _ptr__6163[safe_add( _6160,_6166 )] = 5;
                        ++ _6166;
                        _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                      }
                    }
                    else
                    {
                      {
                        if ((_6154 > (int)0))
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = 2;
                            _ptr__6165[safe_add( _6162,_6166 )] = 0.0;
                            ++ _6166;
                            _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6168;
                  }
                }
                _ptr__6163[safe_add( safe_add( _6156,_6167 ),(int)1 )] = _6168;
                ++ _6170;
              }
            }
            else
            {
              {
                int _11375 = _ptr__6111[safe_add( _6104,_6171 )];
                int _11376 = _ptr__6111[safe_add( safe_add( _6104,_6171 ),(int)1 )];
                for (int _6176 = _11375; _6176 < _11376; ++_6176)
                {
                  {
                    _ptr__6164[safe_add( _6158,_6168 )] = _ptr__6112[safe_add( _6106,_6176 )];
                    _ptr__6165[safe_add( _6159,_6168 )] = (_ptr__6113[safe_add( _6107,_6176 )] * _6149);
                    if ((_6102 > (int)0))
                    {
                      {
                        int _11377 = _ptr__6111[safe_add( _6109,_6176 )];
                        int _11378 = _ptr__6111[safe_add( safe_add( _6109,_6176 ),(int)1 )];
                        for (int _6177 = _11377; _6177 < _11378; ++_6177)
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = _ptr__6111[safe_add( _6108,_6177 )];
                            _ptr__6165[safe_add( _6162,_6166 )] = _ptr__6113[safe_add( _6110,_6177 )];
                            ++ _6166;
                          }
                        }
                        _ptr__6163[safe_add( _6160,_6166 )] = 2;
                        _ptr__6165[safe_add( _6162,_6166 )] = _6149;
                        ++ _6166;
                        _ptr__6163[safe_add( _6160,_6166 )] = 5;
                        ++ _6166;
                        _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                      }
                    }
                    else
                    {
                      {
                        if ((_6154 > (int)0))
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = 2;
                            _ptr__6165[safe_add( _6162,_6166 )] = 0.0;
                            ++ _6166;
                            _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6168;
                  }
                }
                int _11379 = _ptr__6111[safe_add( _6091,_6170 )];
                int _11380 = _ptr__6111[safe_add( safe_add( _6091,_6170 ),(int)1 )];
                for (int _6178 = _11379; _6178 < _11380; ++_6178)
                {
                  {
                    _ptr__6164[safe_add( _6158,_6168 )] = _ptr__6112[safe_add( _6093,_6178 )];
                    _ptr__6165[safe_add( _6159,_6168 )] = (_ptr__6113[safe_add( _6094,_6178 )] * _6150);
                    if ((_6089 > (int)0))
                    {
                      {
                        int _11381 = _ptr__6111[safe_add( _6096,_6178 )];
                        int _11382 = _ptr__6111[safe_add( safe_add( _6096,_6178 ),(int)1 )];
                        for (int _6179 = _11381; _6179 < _11382; ++_6179)
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = _ptr__6111[safe_add( _6095,_6179 )];
                            _ptr__6165[safe_add( _6162,_6166 )] = _ptr__6113[safe_add( _6097,_6179 )];
                            ++ _6166;
                          }
                        }
                        _ptr__6163[safe_add( _6160,_6166 )] = 2;
                        _ptr__6165[safe_add( _6162,_6166 )] = _6150;
                        ++ _6166;
                        _ptr__6163[safe_add( _6160,_6166 )] = 5;
                        ++ _6166;
                        _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                      }
                    }
                    else
                    {
                      {
                        if ((_6154 > (int)0))
                        {
                          {
                            _ptr__6163[safe_add( _6160,_6166 )] = 2;
                            _ptr__6165[safe_add( _6162,_6166 )] = 0.0;
                            ++ _6166;
                            _ptr__6163[safe_add( safe_add( _6161,_6168 ),(int)1 )] = _6166;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6168;
                  }
                }
                _ptr__6163[safe_add( safe_add( _6156,_6167 ),(int)1 )] = _6168;
                ++ _6171;
                ++ _6170;
              }
            }
            ++ _6167;
          }
        }
        if ((_6168 != _6152))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
          }
        }
        {}
        if ((_6166 != _6154))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      int _6180 = safe_add( _6101,_6088 );
      int _6181 = (int)0;
      int _6182 = _6098;
      int _6183 = safe_add( _6102,_6089 );
      if (_6114)
      {
        {
          int _11383;
          bool _11384 = (_6102 > (int)0);
          if (_11384)
          {
            _11383 = safe_mul( (int)2,_6101 );
          }
          else
          {
            _11383 = _6101;
          }
          _6183 += _11383;
          int _11385;
          bool _11386 = (_6089 > (int)0);
          if (_11386)
          {
            _11385 = safe_mul( (int)2,_6088 );
          }
          else
          {
            _11385 = _6088;
          }
          _6183 += _11385;
        }
      }
      {}
      long long _6184 = (long long)1;
      int _11387 = (int)0;
      int _11388 = _6182;
      for (int _6185 = _11387; _6185 < _11388; ++_6185)
      {
        {
          _6184 *= _ptr__6111[safe_add( _6099,_6185 )];
        }
      }
      {
        int _6186 = (int)0;
        int _6187 = (int)0;
        while ( ((_6187 < _6100) && (_6186 < _6087)) )
        {
          {
            if ((_ptr__6112[safe_add( _6105,_6187 )] < _ptr__6112[safe_add( _6092,_6186 )]))
            {
              {
                ++ _6181;
                ++ _6187;
              }
            }
            else if((_ptr__6112[safe_add( _6105,_6187 )] > _ptr__6112[safe_add( _6092,_6186 )]))
            {
              {
                ++ _6181;
                ++ _6186;
              }
            }
            else
            {
              {
                ++ _6181;
                ++ _6187;
                ++ _6186;
              }
            }
          }
        }
        _6181 += (safe_add( (_6100 - _6187),_6087 ) - _6186);
      }
      bool _6188 = (_6181 < _6184);
      _6082->alloc_expr(_6182,_6181,_6180,_6188,_6183);
      int _6189 = mosek::fusion::p_WorkStack::_get_impl(_6082)->shape_base;
      int _6190 = mosek::fusion::p_WorkStack::_get_impl(_6082)->ptr_base;
      int _11389;
      bool _11390 = _6188;
      if (_11390)
      {
        _11389 = mosek::fusion::p_WorkStack::_get_impl(_6082)->sp_base;
      }
      else
      {
        _11389 = _6082->alloci64(_6181);
      }
      int _6191 = _11389;
      int _6192 = mosek::fusion::p_WorkStack::_get_impl(_6082)->nidxs_base;
      int _6193 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cof_base;
      int _6194 = mosek::fusion::p_WorkStack::_get_impl(_6082)->code_base;
      int _6195 = mosek::fusion::p_WorkStack::_get_impl(_6082)->codeptr_base;
      int _6196 = mosek::fusion::p_WorkStack::_get_impl(_6082)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6197 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i32;
      _checked_ptr_1<int> _ptr__6197(_6197 ? _6197->raw() : nullptr,_6197 ? _6197->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6198 = mosek::fusion::p_WorkStack::_get_impl(_6082)->i64;
      _checked_ptr_1<long long> _ptr__6198(_6198 ? _6198->raw() : nullptr,_6198 ? _6198->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6199 = mosek::fusion::p_WorkStack::_get_impl(_6082)->f64;
      _checked_ptr_1<double> _ptr__6199(_6199 ? _6199->raw() : nullptr,_6199 ? _6199->size(0) : 0);
      int _11391 = (int)0;
      int _11392 = _6182;
      for (int _6200 = _11391; _6200 < _11392; ++_6200)
      {
        {
          _ptr__6197[safe_add( _6189,_6200 )] = _ptr__6111[safe_add( _6099,_6200 )];
        }
      }
      {
        _ptr__6197[_6190] = (int)0;
        if ((_6183 > (int)0))
        {
          {
            _ptr__6197[_6195] = (int)0;
          }
        }
        {}
        int _6201 = (int)0;
        int _6202 = (int)0;
        int _6203 = (int)0;
        int _6204 = (int)0;
        int _6205 = (int)0;
        while ( ((_6205 < _6100) && (_6204 < _6087)) )
        {
          {
            if ((_ptr__6112[safe_add( _6105,_6205 )] < _ptr__6112[safe_add( _6092,_6204 )]))
            {
              {
                int _11393 = _ptr__6111[safe_add( _6104,_6205 )];
                int _11394 = _ptr__6111[safe_add( safe_add( _6104,_6205 ),(int)1 )];
                for (int _6206 = _11393; _6206 < _11394; ++_6206)
                {
                  {
                    _ptr__6198[safe_add( _6192,_6203 )] = _ptr__6112[safe_add( _6106,_6206 )];
                    _ptr__6199[safe_add( _6193,_6203 )] = (m1 * _ptr__6113[safe_add( _6107,_6206 )]);
                    if ((_6102 > (int)0))
                    {
                      {
                        int _11395 = _ptr__6111[safe_add( _6109,_6206 )];
                        int _11396 = _ptr__6111[safe_add( safe_add( _6109,_6206 ),(int)1 )];
                        for (int _6207 = _11395; _6207 < _11396; ++_6207)
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = _ptr__6111[safe_add( _6108,_6207 )];
                            _ptr__6199[safe_add( _6196,_6201 )] = _ptr__6113[safe_add( _6110,_6207 )];
                            ++ _6201;
                          }
                        }
                        _ptr__6197[safe_add( _6194,_6201 )] = 2;
                        _ptr__6199[safe_add( _6196,_6201 )] = m1;
                        ++ _6201;
                        _ptr__6197[safe_add( _6194,_6201 )] = 5;
                        ++ _6201;
                        _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                      }
                    }
                    else
                    {
                      {
                        if ((_6183 > (int)0))
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = 2;
                            _ptr__6199[safe_add( _6196,_6201 )] = (int)0;
                            ++ _6201;
                            _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6203;
                  }
                }
                _ptr__6198[safe_add( _6191,_6202 )] = _ptr__6112[safe_add( _6105,_6205 )];
                _ptr__6197[safe_add( safe_add( _6190,_6202 ),(int)1 )] = _6203;
                ++ _6202;
                ++ _6205;
              }
            }
            else if((_ptr__6112[safe_add( _6092,_6204 )] < _ptr__6112[safe_add( _6105,_6205 )]))
            {
              {
                int _11397 = _ptr__6111[safe_add( _6091,_6204 )];
                int _11398 = _ptr__6111[safe_add( safe_add( _6091,_6204 ),(int)1 )];
                for (int _6208 = _11397; _6208 < _11398; ++_6208)
                {
                  {
                    _ptr__6198[safe_add( _6192,_6203 )] = _ptr__6112[safe_add( _6093,_6208 )];
                    _ptr__6199[safe_add( _6193,_6203 )] = (m2 * _ptr__6113[safe_add( _6094,_6208 )]);
                    if ((_6089 > (int)0))
                    {
                      {
                        int _11399 = _ptr__6111[safe_add( _6096,_6208 )];
                        int _11400 = _ptr__6111[safe_add( safe_add( _6096,_6208 ),(int)1 )];
                        for (int _6209 = _11399; _6209 < _11400; ++_6209)
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = _ptr__6111[safe_add( _6095,_6209 )];
                            _ptr__6199[safe_add( _6196,_6201 )] = _ptr__6113[safe_add( _6097,_6209 )];
                            ++ _6201;
                          }
                        }
                        _ptr__6197[safe_add( _6194,_6201 )] = 2;
                        _ptr__6199[safe_add( _6196,_6201 )] = m2;
                        ++ _6201;
                        _ptr__6197[safe_add( _6194,_6201 )] = 5;
                        ++ _6201;
                        _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                      }
                    }
                    else
                    {
                      {
                        if ((_6183 > (int)0))
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = 2;
                            _ptr__6199[safe_add( _6196,_6201 )] = (int)0;
                            ++ _6201;
                            _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6203;
                  }
                }
                _ptr__6198[safe_add( _6191,_6202 )] = _ptr__6112[safe_add( _6092,_6204 )];
                _ptr__6197[safe_add( safe_add( _6190,_6202 ),(int)1 )] = _6203;
                ++ _6202;
                ++ _6204;
              }
            }
            else
            {
              {
                int _11401 = _ptr__6111[safe_add( _6104,_6205 )];
                int _11402 = _ptr__6111[safe_add( safe_add( _6104,_6205 ),(int)1 )];
                for (int _6210 = _11401; _6210 < _11402; ++_6210)
                {
                  {
                    _ptr__6198[safe_add( _6192,_6203 )] = _ptr__6112[safe_add( _6106,_6210 )];
                    _ptr__6199[safe_add( _6193,_6203 )] = (m1 * _ptr__6113[safe_add( _6107,_6210 )]);
                    if ((_6102 > (int)0))
                    {
                      {
                        int _11403 = _ptr__6111[safe_add( _6109,_6210 )];
                        int _11404 = _ptr__6111[safe_add( safe_add( _6109,_6210 ),(int)1 )];
                        for (int _6211 = _11403; _6211 < _11404; ++_6211)
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = _ptr__6111[safe_add( _6108,_6211 )];
                            _ptr__6199[safe_add( _6196,_6201 )] = _ptr__6113[safe_add( _6110,_6211 )];
                            ++ _6201;
                          }
                        }
                        _ptr__6197[safe_add( _6194,_6201 )] = 2;
                        _ptr__6199[safe_add( _6196,_6201 )] = m1;
                        ++ _6201;
                        _ptr__6197[safe_add( _6194,_6201 )] = 5;
                        ++ _6201;
                        _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                      }
                    }
                    else
                    {
                      {
                        if ((_6183 > (int)0))
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = 2;
                            _ptr__6199[safe_add( _6196,_6201 )] = (int)0;
                            ++ _6201;
                            _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6203;
                  }
                }
                int _11405 = _ptr__6111[safe_add( _6091,_6204 )];
                int _11406 = _ptr__6111[safe_add( safe_add( _6091,_6204 ),(int)1 )];
                for (int _6212 = _11405; _6212 < _11406; ++_6212)
                {
                  {
                    _ptr__6198[safe_add( _6192,_6203 )] = _ptr__6112[safe_add( _6093,_6212 )];
                    _ptr__6199[safe_add( _6193,_6203 )] = (m2 * _ptr__6113[safe_add( _6094,_6212 )]);
                    if ((_6089 > (int)0))
                    {
                      {
                        int _11407 = _ptr__6111[safe_add( _6096,_6212 )];
                        int _11408 = _ptr__6111[safe_add( safe_add( _6096,_6212 ),(int)1 )];
                        for (int _6213 = _11407; _6213 < _11408; ++_6213)
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = _ptr__6111[safe_add( _6095,_6213 )];
                            _ptr__6199[safe_add( _6196,_6201 )] = _ptr__6113[safe_add( _6097,_6213 )];
                            ++ _6201;
                          }
                        }
                        _ptr__6197[safe_add( _6194,_6201 )] = 2;
                        _ptr__6199[safe_add( _6196,_6201 )] = m2;
                        ++ _6201;
                        _ptr__6197[safe_add( _6194,_6201 )] = 5;
                        ++ _6201;
                        _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                      }
                    }
                    else
                    {
                      {
                        if ((_6183 > (int)0))
                        {
                          {
                            _ptr__6197[safe_add( _6194,_6201 )] = 2;
                            _ptr__6199[safe_add( _6196,_6201 )] = (int)0;
                            ++ _6201;
                            _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6203;
                  }
                }
                _ptr__6198[safe_add( _6191,_6202 )] = _ptr__6112[safe_add( _6105,_6205 )];
                _ptr__6197[safe_add( safe_add( _6190,_6202 ),(int)1 )] = _6203;
                ++ _6202;
                ++ _6205;
                ++ _6204;
              }
            }
          }
        }
        while ( (_6205 < _6100) )
        {
          {
            int _11409 = _ptr__6111[safe_add( _6104,_6205 )];
            int _11410 = _ptr__6111[safe_add( safe_add( _6104,_6205 ),(int)1 )];
            for (int _6214 = _11409; _6214 < _11410; ++_6214)
            {
              {
                _ptr__6198[safe_add( _6192,_6203 )] = _ptr__6112[safe_add( _6106,_6214 )];
                _ptr__6199[safe_add( _6193,_6203 )] = (m1 * _ptr__6113[safe_add( _6107,_6214 )]);
                if ((_6102 > (int)0))
                {
                  {
                    int _11411 = _ptr__6111[safe_add( _6109,_6214 )];
                    int _11412 = _ptr__6111[safe_add( safe_add( _6109,_6214 ),(int)1 )];
                    for (int _6215 = _11411; _6215 < _11412; ++_6215)
                    {
                      {
                        _ptr__6197[safe_add( _6194,_6201 )] = _ptr__6111[safe_add( _6108,_6215 )];
                        _ptr__6199[safe_add( _6196,_6201 )] = _ptr__6113[safe_add( _6110,_6215 )];
                        ++ _6201;
                      }
                    }
                    _ptr__6197[safe_add( _6194,_6201 )] = 2;
                    _ptr__6199[safe_add( _6196,_6201 )] = m1;
                    ++ _6201;
                    _ptr__6197[safe_add( _6194,_6201 )] = 5;
                    ++ _6201;
                    _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                  }
                }
                else
                {
                  {
                    if ((_6183 > (int)0))
                    {
                      {
                        _ptr__6197[safe_add( _6194,_6201 )] = 2;
                        _ptr__6199[safe_add( _6196,_6201 )] = (int)0;
                        ++ _6201;
                        _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                      }
                    }
                    {}
                  }
                }
                ++ _6203;
              }
            }
            _ptr__6198[safe_add( _6191,_6202 )] = _ptr__6112[safe_add( _6105,_6205 )];
            _ptr__6197[safe_add( safe_add( _6190,_6202 ),(int)1 )] = _6203;
            ++ _6202;
            ++ _6205;
          }
        }
        while ( (_6204 < _6087) )
        {
          {
            int _11413 = _ptr__6111[safe_add( _6091,_6204 )];
            int _11414 = _ptr__6111[safe_add( safe_add( _6091,_6204 ),(int)1 )];
            for (int _6216 = _11413; _6216 < _11414; ++_6216)
            {
              {
                _ptr__6198[safe_add( _6192,_6203 )] = _ptr__6112[safe_add( _6093,_6216 )];
                _ptr__6199[safe_add( _6193,_6203 )] = (m2 * _ptr__6113[safe_add( _6094,_6216 )]);
                if ((_6089 > (int)0))
                {
                  {
                    int _11415 = _ptr__6111[safe_add( _6096,_6216 )];
                    int _11416 = _ptr__6111[safe_add( safe_add( _6096,_6216 ),(int)1 )];
                    for (int _6217 = _11415; _6217 < _11416; ++_6217)
                    {
                      {
                        _ptr__6197[safe_add( _6194,_6201 )] = _ptr__6111[safe_add( _6095,_6217 )];
                        _ptr__6199[safe_add( _6196,_6201 )] = _ptr__6113[safe_add( _6097,_6217 )];
                        ++ _6201;
                      }
                    }
                    _ptr__6197[safe_add( _6194,_6201 )] = 2;
                    _ptr__6199[safe_add( _6196,_6201 )] = m2;
                    ++ _6201;
                    _ptr__6197[safe_add( _6194,_6201 )] = 5;
                    ++ _6201;
                    _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                  }
                }
                else
                {
                  {
                    if ((_6183 > (int)0))
                    {
                      {
                        _ptr__6197[safe_add( _6194,_6201 )] = 2;
                        _ptr__6199[safe_add( _6196,_6201 )] = (int)0;
                        ++ _6201;
                        _ptr__6197[safe_add( safe_add( _6195,_6203 ),(int)1 )] = _6201;
                      }
                    }
                    {}
                  }
                }
                ++ _6203;
              }
            }
            _ptr__6198[safe_add( _6191,_6202 )] = _ptr__6112[safe_add( _6092,_6204 )];
            _ptr__6197[safe_add( safe_add( _6190,_6202 ),(int)1 )] = _6203;
            ++ _6202;
            ++ _6204;
          }
        }
      }
      if ((!_6188))
      {
        {
          _6082->popi64(_6181);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("; "))->__mosek_2fusion_2Utils_2StringBuffer__a(m1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(m2)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6218,    std::shared_ptr< monty::ndarray< double,1 > > _6219){ return new mosek::fusion::ExprWSum(_6218,_6219); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6218,    std::shared_ptr< monty::ndarray< double,1 > > _6219) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_6218,_6219); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6218,    std::shared_ptr< monty::ndarray< double,1 > > _6219){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__6219(_6219 ? _6219->raw() : nullptr, _6219 ? _6219->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_6218)((int)0))->getShape());
    if (((int)((_6219)->size(0)) != (int)((_6218)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_6219);
    std::shared_ptr< monty::ndarray< int,1 > > _6220 = ((*_6218)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__6220(_6220 ? _6220->raw() : nullptr,_6220 ? _6220->size(0) : 0);
    int _6221 = (int)((_6220)->size(0));
    int _11417 = (int)1;
    int _11418 = (int)((_6218)->size(0));
    for (int _6222 = _11417; _6222 < _11418; ++_6222)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _6223 = ((*_6218)(_6222))->getShape();
        _checked_ptr_1<int> _ptr__6223(_6223 ? _6223->raw() : nullptr,_6223 ? _6223->size(0) : 0);
        if ((_6221 != (int)((_6223)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _11419 = (int)0;
            int _11420 = _6221;
            for (int _6224 = _11419; _6224 < _11420; ++_6224)
            {
              {
                if ((_ptr__6220[_6224] != _ptr__6223[_6224]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11421;
    for (int _6225 = (int)0, _11422 = (int)((_6218)->size(0)); _6225 < _11422 ; ++_6225)
    {
      _11421.push_back(((*_6218)(_6225)));
    }
    auto _11423 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11421.size()),_11421.begin(),_11421.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _11423;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6226,monty::rc_ptr< ::mosek::fusion::WorkStack > _6227,monty::rc_ptr< ::mosek::fusion::WorkStack > _6228) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_6226,_6227,_6228); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6226,monty::rc_ptr< ::mosek::fusion::WorkStack > _6227,monty::rc_ptr< ::mosek::fusion::WorkStack > _6228){
  int _6229 = (int)((es)->size(0));
  int _11424 = (int)0;
  int _11425 = _6229;
  for (int _6230 = _11424; _6230 < _11425; ++_6230)
  {
    {
      ((*es)(_6230))->eval(_6227,_6226,_6228);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6231 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6231(_6231 ? _6231->raw() : nullptr,_6231 ? _6231->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6232 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6232(_6232 ? _6232->raw() : nullptr,_6232 ? _6232->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6233(_6233 ? _6233->raw() : nullptr,_6233 ? _6233->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6234(_6234 ? _6234->raw() : nullptr,_6234 ? _6234->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6235 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6235(_6235 ? _6235->raw() : nullptr,_6235 ? _6235->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6236 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6236(_6236 ? _6236->raw() : nullptr,_6236 ? _6236->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6237 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6237(_6237 ? _6237->raw() : nullptr,_6237 ? _6237->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6238(_6238 ? _6238->raw() : nullptr,_6238 ? _6238->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6239 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6239(_6239 ? _6239->raw() : nullptr,_6239 ? _6239->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6240 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6240(_6240 ? _6240->raw() : nullptr,_6240 ? _6240->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6241(_6241 ? _6241->raw() : nullptr,_6241 ? _6241->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6242 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
  _checked_ptr_1<int> _ptr__6242(_6242 ? _6242->raw() : nullptr,_6242 ? _6242->size(0) : 0);
  std::shared_ptr< monty::ndarray< bool,1 > > _6243 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6229)));
  int _11426 = (int)0;
  int _11427 = _6229;
  for (int _6244 = _11426; _6244 < _11427; ++_6244)
  {
    {
      _6227->pop_expr();
      _ptr__6231[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->nd;
      _ptr__6232[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->nelem;
      _ptr__6233[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->nnz;
      _ptr__6234[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->ncodeatom;
      _ptr__6235[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->ptr_base;
      _ptr__6237[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->sp_base;
      _ptr__6236[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->nidxs_base;
      _ptr__6238[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->cof_base;
      _ptr__6239[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->shape_base;
      _ptr__6240[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->code_base;
      _ptr__6241[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->codeptr_base;
      _ptr__6242[((_6229 - (int)1) - _6244)] = mosek::fusion::p_WorkStack::_get_impl(_6227)->cconst_base;
      ((*_6243)(((_6229 - (int)1) - _6244))) = mosek::fusion::p_WorkStack::_get_impl(_6227)->hassp;
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6245 = mosek::fusion::p_WorkStack::_get_impl(_6227)->i32;
  _checked_ptr_1<int> _ptr__6245(_6245 ? _6245->raw() : nullptr,_6245 ? _6245->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6246 = mosek::fusion::p_WorkStack::_get_impl(_6227)->i64;
  _checked_ptr_1<long long> _ptr__6246(_6246 ? _6246->raw() : nullptr,_6246 ? _6246->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6247 = mosek::fusion::p_WorkStack::_get_impl(_6227)->f64;
  _checked_ptr_1<double> _ptr__6247(_6247 ? _6247->raw() : nullptr,_6247 ? _6247->size(0) : 0);
  {
    bool _6248 = true;
    int _11428 = (int)1;
    int _11429 = _6229;
    for (int _6249 = _11428; _6249 < _11429; ++_6249)
    {
      {
        _6248 = (_6248 && (_ptr__6231[(int)0] == _ptr__6231[_6249]));
        int _11430 = (int)0;
        int _11431 = _ptr__6231[(int)0];
        for (int _6250 = _11430; _6250 < _11431; ++_6250)
        {
          {
            _6248 = (_6248 && (_ptr__6245[safe_add( _ptr__6239[(int)0],_6250 )] == _ptr__6245[safe_add( _ptr__6239[_6249],_6250 )]));
          }
        }
      }
    }
    if ((!_6248))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
  }
  std::vector<int> _11432;
  for (int _6252 = (int)0, _11433 = _ptr__6231[(int)0]; _6252 < _11433 ; ++_6252)
  {
    _11432.push_back(_ptr__6245[safe_add( _ptr__6239[(int)0],_6252 )]);
  }
  auto _11434 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11432.size()),_11432.begin(),_11432.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6251 = _11434;
  _checked_ptr_1<int> _ptr__6251(_6251 ? _6251->raw() : nullptr,_6251 ? _6251->size(0) : 0);
  bool _6253 = false;
  int _11435 = (int)0;
  int _11436 = _6229;
  for (int _6254 = _11435; _6254 < _11436; ++_6254)
  {
    {
      if ((!((*_6243)(_6254))))
      {
        {
          _6253 = true;
        }
      }
      {}
    }
  }
  bool _6255 = false;
  int _11437 = (int)0;
  int _11438 = _6229;
  for (int _6256 = _11437; _6256 < _11438; ++_6256)
  {
    {
      if ((_ptr__6234[_6256] > (int)0))
      {
        {
          _6255 = true;
        }
      }
      {}
    }
  }
  int _6257 = (int)0;
  int _6258 = (int)0;
  int _6259 = (int)0;
  if (_6253)
  {
    {
      _6258 = (int)::mosek::fusion::p_Set::size(_6251);
      int _11439 = (int)0;
      int _11440 = _6229;
      for (int _6260 = _11439; _6260 < _11440; ++_6260)
      {
        {
          _6259 += _ptr__6233[_6260];
          if (_6255)
          {
            {
              int _11441;
              bool _11442 = (_ptr__6234[_6260] > (int)0);
              if (_11442)
              {
                _11441 = safe_add( _ptr__6234[_6260],safe_mul( (int)2,_ptr__6233[_6260] ) );
              }
              else
              {
                _11441 = _ptr__6233[_6260];
              }
              _6257 += _11441;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      bool _6261 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6262 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
      _checked_ptr_1<int> _ptr__6262(_6262 ? _6262->raw() : nullptr,_6262 ? _6262->size(0) : 0);
      int _11443 = (int)0;
      int _11444 = _6229;
      for (int _6263 = _11443; _6263 < _11444; ++_6263)
      {
        {
          _6259 += _ptr__6233[_6263];
          if (_6255)
          {
            {
              int _11445;
              bool _11446 = (_ptr__6234[_6263] > (int)0);
              if (_11446)
              {
                _11445 = safe_add( _ptr__6234[_6263],safe_mul( (int)2,_ptr__6233[_6263] ) );
              }
              else
              {
                _11445 = _ptr__6233[_6263];
              }
              _6257 += _11445;
            }
          }
          {}
        }
      }
      while ( (!_6261) )
      {
        {
          long long _6264 = (-(int)1);
          int _11447 = (int)0;
          int _11448 = _6229;
          for (int _6265 = _11447; _6265 < _11448; ++_6265)
          {
            {
              if (((_ptr__6262[_6265] < _ptr__6232[_6265]) && ((_6264 < (int)0) || (_ptr__6246[safe_add( _ptr__6237[_6265],_ptr__6262[_6265] )] < _6264))))
              {
                {
                  _6264 = _ptr__6246[safe_add( _ptr__6237[_6265],_ptr__6262[_6265] )];
                }
              }
              {}
            }
          }
          if ((_6264 < (int)0))
          {
            {
              _6261 = true;
            }
          }
          else
          {
            {
              int _11449 = (int)0;
              int _11450 = _6229;
              for (int _6266 = _11449; _6266 < _11450; ++_6266)
              {
                {
                  if (((_ptr__6262[_6266] < _ptr__6232[_6266]) && (_6264 == _ptr__6246[safe_add( _ptr__6237[_6266],_ptr__6262[_6266] )])))
                  {
                    {
                      ++ _ptr__6262[_6266];
                    }
                  }
                  {}
                }
              }
              ++ _6258;
            }
          }
        }
      }
    }
  }
  _6226->alloc_expr(_ptr__6231[(int)0],_6258,_6259,(!_6253),_6257);
  int _6267 = mosek::fusion::p_WorkStack::_get_impl(_6226)->ptr_base;
  int _6268 = mosek::fusion::p_WorkStack::_get_impl(_6226)->nidxs_base;
  int _6269 = mosek::fusion::p_WorkStack::_get_impl(_6226)->sp_base;
  int _6270 = mosek::fusion::p_WorkStack::_get_impl(_6226)->shape_base;
  int _6271 = mosek::fusion::p_WorkStack::_get_impl(_6226)->cof_base;
  int _6272 = mosek::fusion::p_WorkStack::_get_impl(_6226)->code_base;
  int _6273 = mosek::fusion::p_WorkStack::_get_impl(_6226)->codeptr_base;
  int _6274 = mosek::fusion::p_WorkStack::_get_impl(_6226)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6275 = mosek::fusion::p_WorkStack::_get_impl(_6226)->i32;
  _checked_ptr_1<int> _ptr__6275(_6275 ? _6275->raw() : nullptr,_6275 ? _6275->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6276 = mosek::fusion::p_WorkStack::_get_impl(_6226)->i64;
  _checked_ptr_1<long long> _ptr__6276(_6276 ? _6276->raw() : nullptr,_6276 ? _6276->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6277 = mosek::fusion::p_WorkStack::_get_impl(_6226)->f64;
  _checked_ptr_1<double> _ptr__6277(_6277 ? _6277->raw() : nullptr,_6277 ? _6277->size(0) : 0);
  int _11451 = (int)0;
  int _11452 = _ptr__6231[(int)0];
  for (int _6278 = _11451; _6278 < _11452; ++_6278)
  {
    {
      _ptr__6275[safe_add( _6270,_6278 )] = _ptr__6245[safe_add( _ptr__6239[(int)0],_6278 )];
    }
  }
  if ((_6257 > (int)0))
  {
    {
      _ptr__6275[_6273] = (int)0;
    }
  }
  {}
  int _11453 = (int)0;
  int _11454 = safe_add( _6258,(int)1 );
  for (int _6279 = _11453; _6279 < _11454; ++_6279)
  {
    {
      _ptr__6275[safe_add( _6267,_6279 )] = (int)0;
    }
  }
  if (_6253)
  {
    {
      int _6280 = (-(int)9999);
      if ((_6257 > (int)0))
      {
        {
          _6280 = _6228->alloci32(safe_add( _6258,(int)1 ));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _6281 = mosek::fusion::p_WorkStack::_get_impl(_6228)->i32;
      _checked_ptr_1<int> _ptr__6281(_6281 ? _6281->raw() : nullptr,_6281 ? _6281->size(0) : 0);
      if ((_6257 > (int)0))
      {
        {
          int _11455 = (int)0;
          int _11456 = safe_add( _6258,(int)1 );
          for (int _6282 = _11455; _6282 < _11456; ++_6282)
          {
            {
              _ptr__6281[safe_add( _6280,_6282 )] = (int)0;
            }
          }
        }
      }
      {}
      int _11457 = (int)0;
      int _11458 = _6229;
      for (int _6283 = _11457; _6283 < _11458; ++_6283)
      {
        {
          if (((*_6243)(_6283)))
          {
            {
              int _11459 = (int)0;
              int _11460 = _ptr__6232[_6283];
              for (int _6284 = _11459; _6284 < _11460; ++_6284)
              {
                {
                  _ptr__6275[safe_add( safe_add( _6267,_ptr__6246[safe_add( _ptr__6237[_6283],_6284 )] ),(int)1 )] += (_ptr__6245[safe_add( safe_add( _ptr__6235[_6283],_6284 ),(int)1 )] - _ptr__6245[safe_add( _ptr__6235[_6283],_6284 )]);
                }
              }
              if ((_ptr__6234[_6283] > (int)0))
              {
                {
                  int _11461 = (int)0;
                  int _11462 = _ptr__6232[_6283];
                  for (int _6285 = _11461; _6285 < _11462; ++_6285)
                  {
                    {
                      _ptr__6281[safe_add( safe_add( _6280,_ptr__6246[safe_add( _ptr__6237[_6283],_6285 )] ),(int)1 )] += safe_add( (_ptr__6245[safe_add( _ptr__6241[_6283],_ptr__6245[safe_add( safe_add( _ptr__6235[_6283],_6285 ),(int)1 )] )] - _ptr__6245[safe_add( _ptr__6241[_6283],_ptr__6245[safe_add( _ptr__6235[_6283],_6285 )] )]),safe_mul( (int)2,(_ptr__6245[safe_add( safe_add( _ptr__6235[_6283],_6285 ),(int)1 )] - _ptr__6245[safe_add( _ptr__6235[_6283],_6285 )]) ) );
                    }
                  }
                }
              }
              else if(_6255)
              {
                {
                  int _11463 = (int)0;
                  int _11464 = _ptr__6232[_6283];
                  for (int _6286 = _11463; _6286 < _11464; ++_6286)
                  {
                    {
                      _ptr__6281[safe_add( safe_add( _6280,_ptr__6246[safe_add( _ptr__6237[_6283],_6286 )] ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
          else
          {
            {
              int _11465 = (int)0;
              int _11466 = _ptr__6232[_6283];
              for (int _6287 = _11465; _6287 < _11466; ++_6287)
              {
                {
                  _ptr__6275[safe_add( safe_add( _6267,_6287 ),(int)1 )] += (_ptr__6245[safe_add( safe_add( _ptr__6235[_6283],_6287 ),(int)1 )] - _ptr__6245[safe_add( _ptr__6235[_6283],_6287 )]);
                }
              }
              if ((_ptr__6234[_6283] > (int)0))
              {
                {
                  int _11467 = (int)0;
                  int _11468 = _ptr__6232[_6283];
                  for (int _6288 = _11467; _6288 < _11468; ++_6288)
                  {
                    {
                      _ptr__6281[safe_add( safe_add( _6280,_6288 ),(int)1 )] += safe_add( (_ptr__6245[safe_add( _ptr__6241[_6283],_ptr__6245[safe_add( safe_add( _ptr__6235[_6283],_6288 ),(int)1 )] )] - _ptr__6245[safe_add( _ptr__6241[_6283],_ptr__6245[safe_add( _ptr__6235[_6283],_6288 )] )]),safe_mul( (int)2,(_ptr__6245[safe_add( safe_add( _ptr__6235[_6283],_6288 ),(int)1 )] - _ptr__6245[safe_add( _ptr__6235[_6283],_6288 )]) ) );
                    }
                  }
                }
              }
              else if(_6255)
              {
                {
                  int _11469 = (int)0;
                  int _11470 = _ptr__6232[_6283];
                  for (int _6289 = _11469; _6289 < _11470; ++_6289)
                  {
                    {
                      _ptr__6281[safe_add( safe_add( _6280,_6289 ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      int _11471 = (int)0;
      int _11472 = _6258;
      for (int _6290 = _11471; _6290 < _11472; ++_6290)
      {
        {
          _ptr__6275[safe_add( safe_add( _6267,_6290 ),(int)1 )] += _ptr__6275[safe_add( _6267,_6290 )];
        }
      }
      if ((_6257 > (int)0))
      {
        {
          int _11473 = (int)0;
          int _11474 = _6258;
          for (int _6291 = _11473; _6291 < _11474; ++_6291)
          {
            {
              _ptr__6281[safe_add( safe_add( _6280,_6291 ),(int)1 )] += _ptr__6281[safe_add( _6280,_6291 )];
            }
          }
        }
      }
      {}
      int _11475 = (int)0;
      int _11476 = _6229;
      for (int _6292 = _11475; _6292 < _11476; ++_6292)
      {
        {
          if (((*_6243)(_6292)))
          {
            {
              int _11477 = (int)0;
              int _11478 = _ptr__6232[_6292];
              for (int _6293 = _11477; _6293 < _11478; ++_6293)
              {
                {
                  int _6294 = _ptr__6245[safe_add( _ptr__6235[_6292],_6293 )];
                  int _6295 = _ptr__6245[safe_add( safe_add( _ptr__6235[_6292],_6293 ),(int)1 )];
                  long long _6296 = _ptr__6246[safe_add( _ptr__6237[_6292],_6293 )];
                  int _6297 = _ptr__6275[safe_add( _6267,_6296 )];
                  int _11479;
                  bool _11480 = _6255;
                  if (_11480)
                  {
                    _11479 = _ptr__6281[safe_add( _6280,_6296 )];
                  }
                  else
                  {
                    _11479 = (-(int)10000);
                  }
                  int _6298 = _11479;
                  int _11481 = _6294;
                  int _11482 = _6295;
                  for (int _6299 = _11481; _6299 < _11482; ++_6299)
                  {
                    {
                      _ptr__6276[safe_add( _6268,_6297 )] = _ptr__6246[safe_add( _ptr__6236[_6292],_6299 )];
                      _ptr__6277[safe_add( _6271,_6297 )] = (((*w)(_6292)) * _ptr__6247[safe_add( _ptr__6238[_6292],_6299 )]);
                      if (_6255)
                      {
                        {
                          if ((_ptr__6234[_6292] > (int)0))
                          {
                            {
                              int _11483 = _ptr__6245[safe_add( _ptr__6241[_6292],_6299 )];
                              int _11484 = _ptr__6245[safe_add( safe_add( _ptr__6241[_6292],_6299 ),(int)1 )];
                              for (int _6300 = _11483; _6300 < _11484; ++_6300)
                              {
                                {
                                  _ptr__6275[safe_add( _6272,_6298 )] = _ptr__6245[safe_add( _ptr__6240[_6292],_6300 )];
                                  _ptr__6277[safe_add( _6274,_6298 )] = _ptr__6247[safe_add( _ptr__6242[_6292],_6300 )];
                                  ++ _6298;
                                }
                              }
                              _ptr__6275[safe_add( _6272,_6298 )] = 2;
                              _ptr__6277[safe_add( _6274,_6298 )] = ((*w)(_6292));
                              ++ _6298;
                              _ptr__6275[safe_add( _6272,_6298 )] = 5;
                              ++ _6298;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6275[safe_add( _6272,_6298 )] = 2;
                              _ptr__6277[safe_add( _6274,_6298 )] = 0.0;
                              ++ _6298;
                            }
                          }
                          _ptr__6275[safe_add( safe_add( _6273,_6297 ),(int)1 )] = _6298;
                        }
                      }
                      {}
                      ++ _6297;
                    }
                  }
                  if (_6255)
                  {
                    {
                      _ptr__6281[safe_add( _6280,_6296 )] = _6298;
                    }
                  }
                  {}
                  _ptr__6275[safe_add( _6267,_6296 )] += (_6295 - _6294);
                }
              }
            }
          }
          else
          {
            {
              int _11485 = (int)0;
              int _11486 = _ptr__6232[_6292];
              for (int _6301 = _11485; _6301 < _11486; ++_6301)
              {
                {
                  int _6302 = _ptr__6245[safe_add( _ptr__6235[_6292],_6301 )];
                  int _6303 = _ptr__6245[safe_add( safe_add( _ptr__6235[_6292],_6301 ),(int)1 )];
                  int _6304 = _6301;
                  int _6305 = _ptr__6275[safe_add( _6267,_6304 )];
                  int _11487;
                  bool _11488 = _6255;
                  if (_11488)
                  {
                    _11487 = _ptr__6281[safe_add( _6280,_6304 )];
                  }
                  else
                  {
                    _11487 = (-(int)10000);
                  }
                  int _6306 = _11487;
                  int _11489 = _6302;
                  int _11490 = _6303;
                  for (int _6307 = _11489; _6307 < _11490; ++_6307)
                  {
                    {
                      _ptr__6276[safe_add( _6268,_6305 )] = _ptr__6246[safe_add( _ptr__6236[_6292],_6307 )];
                      _ptr__6277[safe_add( _6271,_6305 )] = (((*w)(_6292)) * _ptr__6247[safe_add( _ptr__6238[_6292],_6307 )]);
                      if (_6255)
                      {
                        {
                          if ((_ptr__6234[_6292] > (int)0))
                          {
                            {
                              int _11491 = _ptr__6245[safe_add( _ptr__6241[_6292],_6307 )];
                              int _11492 = _ptr__6245[safe_add( safe_add( _ptr__6241[_6292],_6307 ),(int)1 )];
                              for (int _6308 = _11491; _6308 < _11492; ++_6308)
                              {
                                {
                                  _ptr__6275[safe_add( _6272,_6306 )] = _ptr__6245[safe_add( _ptr__6240[_6292],_6308 )];
                                  _ptr__6277[safe_add( _6274,_6306 )] = _ptr__6247[safe_add( _ptr__6242[_6292],_6308 )];
                                  ++ _6306;
                                }
                              }
                              _ptr__6275[safe_add( _6272,_6306 )] = 2;
                              _ptr__6277[safe_add( _6274,_6306 )] = ((*w)(_6292));
                              ++ _6306;
                              _ptr__6275[safe_add( _6272,_6306 )] = 5;
                              ++ _6306;
                              _ptr__6275[safe_add( safe_add( _6273,_6305 ),(int)1 )] = _6306;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6275[safe_add( _6272,_6306 )] = 2;
                              _ptr__6277[safe_add( _6274,_6306 )] = 0.0;
                              ++ _6306;
                            }
                          }
                          _ptr__6275[safe_add( safe_add( _6273,_6305 ),(int)1 )] = _6306;
                        }
                      }
                      {}
                      ++ _6305;
                    }
                  }
                  if (_6255)
                  {
                    {
                      _ptr__6281[safe_add( _6280,_6304 )] = _6306;
                    }
                  }
                  {}
                  _ptr__6275[safe_add( _6267,_6304 )] += (_6303 - _6302);
                }
              }
            }
          }
        }
      }
      int _11493 = (int)0;
      int _11494 = _6258;
      for (int _6309 = _11493; _6309 < _11494; ++_6309)
      {
        {
          _ptr__6275[(safe_add( _6267,_6258 ) - _6309)] = _ptr__6275[((safe_add( _6267,_6258 ) - _6309) - (int)1)];
        }
      }
      _ptr__6275[_6267] = (int)0;
    }
  }
  else
  {
    {
      bool _6310 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6311 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6229)));
      _checked_ptr_1<int> _ptr__6311(_6311 ? _6311->raw() : nullptr,_6311 ? _6311->size(0) : 0);
      int _6312 = (int)0;
      int _6313 = (int)0;
      int _6314 = (int)0;
      while ( (!_6310) )
      {
        {
          long long _6315 = (-(int)1);
          int _11495 = (int)0;
          int _11496 = _6229;
          for (int _6316 = _11495; _6316 < _11496; ++_6316)
          {
            {
              if (((_ptr__6311[_6316] < _ptr__6232[_6316]) && ((_6315 < (int)0) || (_ptr__6246[safe_add( _ptr__6237[_6316],_ptr__6311[_6316] )] < _6315))))
              {
                {
                  _6315 = _ptr__6246[safe_add( _ptr__6237[_6316],_ptr__6311[_6316] )];
                }
              }
              {}
            }
          }
          if ((_6315 < (int)0))
          {
            {
              _6310 = true;
            }
          }
          else
          {
            {
              int _11497 = (int)0;
              int _11498 = _6229;
              for (int _6317 = _11497; _6317 < _11498; ++_6317)
              {
                {
                  if (((_ptr__6311[_6317] < _ptr__6232[_6317]) && (_6315 == _ptr__6246[safe_add( _ptr__6237[_6317],_ptr__6311[_6317] )])))
                  {
                    {
                      int _11499 = _ptr__6245[safe_add( _ptr__6235[_6317],_ptr__6311[_6317] )];
                      int _11500 = _ptr__6245[safe_add( safe_add( _ptr__6235[_6317],_ptr__6311[_6317] ),(int)1 )];
                      for (int _6318 = _11499; _6318 < _11500; ++_6318)
                      {
                        {
                          _ptr__6276[safe_add( _6268,_6314 )] = _ptr__6246[safe_add( _ptr__6236[_6317],_6318 )];
                          _ptr__6277[safe_add( _6271,_6314 )] = (((*w)(_6317)) * _ptr__6247[safe_add( _ptr__6238[_6317],_6318 )]);
                          if (_6255)
                          {
                            {
                              if ((_ptr__6234[_6317] > (int)0))
                              {
                                {
                                  int _11501 = _ptr__6245[safe_add( _ptr__6241[_6317],_6318 )];
                                  int _11502 = _ptr__6245[safe_add( safe_add( _ptr__6241[_6317],_6318 ),(int)1 )];
                                  for (int _6319 = _11501; _6319 < _11502; ++_6319)
                                  {
                                    {
                                      _ptr__6275[safe_add( _6272,_6312 )] = _ptr__6245[safe_add( _ptr__6240[_6317],_6319 )];
                                      _ptr__6277[safe_add( _6274,_6312 )] = _ptr__6247[safe_add( _ptr__6242[_6317],_6319 )];
                                      ++ _6312;
                                    }
                                  }
                                  _ptr__6275[safe_add( _6272,_6312 )] = 2;
                                  _ptr__6277[safe_add( _6274,_6312 )] = ((*w)(_6317));
                                  ++ _6312;
                                  _ptr__6275[safe_add( _6272,_6312 )] = 5;
                                  ++ _6312;
                                }
                              }
                              else
                              {
                                {
                                  _ptr__6275[safe_add( _6272,_6312 )] = 2;
                                  _ptr__6277[safe_add( _6274,_6312 )] = 0.0;
                                  ++ _6312;
                                }
                              }
                              _ptr__6275[safe_add( safe_add( _6273,_6314 ),(int)1 )] = _6312;
                            }
                          }
                          {}
                          ++ _6314;
                        }
                      }
                      ++ _ptr__6311[_6317];
                    }
                  }
                  {}
                }
              }
              _ptr__6275[safe_add( safe_add( _6267,_6313 ),(int)1 )] = _6314;
              _ptr__6276[safe_add( _6269,_6313 )] = _6315;
            }
          }
          ++ _6313;
        }
      }
    }
  }
  _6228->clear();
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6320 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprWSum(["));
  _6320->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)((int)0))->toString());
  int _11503 = (int)1;
  int _11504 = (int)((es)->size(0));
  for (int _6321 = _11503; _6321 < _11504; ++_6321)
  {
    {
      _6320->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)(_6321))->toString());
    }
  }
  _6320->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _6320->toString();
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _6322,    monty::rc_ptr< ::mosek::fusion::Expression > _6323){ return new mosek::fusion::ExprSumReduce(_6322,_6323); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _6322,    monty::rc_ptr< ::mosek::fusion::Expression > _6323) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_6322,_6323); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _6322,    monty::rc_ptr< ::mosek::fusion::Expression > _6323){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_6322,_6323->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _6323;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _6322;
    std::shared_ptr< monty::ndarray< int,1 > > _6324 = _6323->getShape();
    _checked_ptr_1<int> _ptr__6324(_6324 ? _6324->raw() : nullptr,_6324 ? _6324->size(0) : 0);
    if (((int)((_6324)->size(0)) <= _6322))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6325,monty::rc_ptr< ::mosek::fusion::WorkStack > _6326,monty::rc_ptr< ::mosek::fusion::WorkStack > _6327) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_6325,_6326,_6327); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6325,monty::rc_ptr< ::mosek::fusion::WorkStack > _6326,monty::rc_ptr< ::mosek::fusion::WorkStack > _6327){
  expr->eval(_6326,_6325,_6327);
  _6326->pop_expr();
  int _6328 = mosek::fusion::p_WorkStack::_get_impl(_6326)->nd;
  int _6329 = mosek::fusion::p_WorkStack::_get_impl(_6326)->shape_base;
  int _6330 = mosek::fusion::p_WorkStack::_get_impl(_6326)->nelem;
  int _6331 = mosek::fusion::p_WorkStack::_get_impl(_6326)->nnz;
  int _6332 = mosek::fusion::p_WorkStack::_get_impl(_6326)->ncodeatom;
  bool _6333 = mosek::fusion::p_WorkStack::_get_impl(_6326)->hassp;
  int _6334 = mosek::fusion::p_WorkStack::_get_impl(_6326)->ptr_base;
  int _6335 = mosek::fusion::p_WorkStack::_get_impl(_6326)->sp_base;
  int _6336 = mosek::fusion::p_WorkStack::_get_impl(_6326)->nidxs_base;
  int _6337 = mosek::fusion::p_WorkStack::_get_impl(_6326)->cof_base;
  int _6338 = mosek::fusion::p_WorkStack::_get_impl(_6326)->code_base;
  int _6339 = mosek::fusion::p_WorkStack::_get_impl(_6326)->codeptr_base;
  int _6340 = mosek::fusion::p_WorkStack::_get_impl(_6326)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6341 = mosek::fusion::p_WorkStack::_get_impl(_6326)->i32;
  _checked_ptr_1<int> _ptr__6341(_6341 ? _6341->raw() : nullptr,_6341 ? _6341->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6342 = mosek::fusion::p_WorkStack::_get_impl(_6326)->i64;
  _checked_ptr_1<long long> _ptr__6342(_6342 ? _6342->raw() : nullptr,_6342 ? _6342->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6343 = mosek::fusion::p_WorkStack::_get_impl(_6326)->f64;
  _checked_ptr_1<double> _ptr__6343(_6343 ? _6343->raw() : nullptr,_6343 ? _6343->size(0) : 0);
  int _6344 = (int)99999;
  int _6345 = (int)99999;
  int _6346 = (int)99999;
  if (_6333)
  {
    {
      int _6347 = (int)0;
      int _11505 = (int)0;
      int _11506 = _6328;
      for (int _6348 = _11505; _6348 < _11506; ++_6348)
      {
        {
          if ((_6347 < _ptr__6341[safe_add( _6329,_6348 )]))
          {
            {
              _6347 = _ptr__6341[safe_add( _6329,_6348 )];
            }
          }
          {}
        }
      }
      _6344 = _6327->alloci32(safe_add( _6347,(int)1 ));
      _6345 = _6327->alloci32(_6330);
      _6346 = _6327->alloci32(_6330);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _6349 = mosek::fusion::p_WorkStack::_get_impl(_6327)->i32;
  _checked_ptr_1<int> _ptr__6349(_6349 ? _6349->raw() : nullptr,_6349 ? _6349->size(0) : 0);
  if (_6333)
  {
    {
      int _6350 = _6345;
      int _6351 = _6346;
      int _11507 = (int)0;
      int _11508 = _6330;
      for (int _6352 = _11507; _6352 < _11508; ++_6352)
      {
        {
          _ptr__6349[safe_add( _6350,_6352 )] = _6352;
        }
      }
      if ((dim < (_6328 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _6353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6328)));
          _checked_ptr_1<long long> _ptr__6353(_6353 ? _6353->raw() : nullptr,_6353 ? _6353->size(0) : 0);
          _ptr__6353[(_6328 - (int)1)] = (int)1;
          int _11509 = (int)1;
          int _11510 = _6328;
          for (int _6354 = _11509; _6354 < _11510; ++_6354)
          {
            {
              _ptr__6353[((_6328 - _6354) - (int)1)] = safe_mul( _ptr__6353[(_6328 - _6354)],_ptr__6341[(safe_add( _6329,_6328 ) - _6354)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _6355 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_6328 - (int)1))));
          _checked_ptr_1<int> _ptr__6355(_6355 ? _6355->raw() : nullptr,_6355 ? _6355->size(0) : 0);
          int _11511 = (int)0;
          int _11512 = dim;
          for (int _6356 = _11511; _6356 < _11512; ++_6356)
          {
            {
              _ptr__6355[((_6328 - _6356) - (int)2)] = _6356;
            }
          }
          int _11513 = safe_add( dim,(int)1 );
          int _11514 = _6328;
          for (int _6357 = _11513; _6357 < _11514; ++_6357)
          {
            {
              _ptr__6355[((_6328 - _6357) - (int)1)] = _6357;
            }
          }
          int _11515 = (int)0;
          int _11516 = (_6328 - (int)1);
          for (int _6358 = _11515; _6358 < _11516; ++_6358)
          {
            {
              int _6359 = _ptr__6355[_6358];
              int _6360 = _ptr__6341[safe_add( _6329,_6359 )];
              int _11517 = (int)0;
              int _11518 = safe_add( _6360,(int)1 );
              for (int _6361 = _11517; _6361 < _11518; ++_6361)
              {
                {
                  _ptr__6349[safe_add( _6344,_6361 )] = (int)0;
                }
              }
              int _11519 = (int)0;
              int _11520 = _6330;
              for (int _6362 = _11519; _6362 < _11520; ++_6362)
              {
                {
                  ++ _ptr__6349[safe_add( safe_add( _6344,(int)1 ),((_ptr__6342[safe_add( _6335,_6362 )] / _ptr__6353[_6359]) % _6360) )];
                }
              }
              int _11521 = (int)0;
              int _11522 = _6360;
              for (int _6363 = _11521; _6363 < _11522; ++_6363)
              {
                {
                  _ptr__6349[safe_add( safe_add( _6344,_6363 ),(int)1 )] += _ptr__6349[safe_add( _6344,_6363 )];
                }
              }
              int _11523 = (int)0;
              int _11524 = _6330;
              for (int _6364 = _11523; _6364 < _11524; ++_6364)
              {
                {
                  int _6365 = _ptr__6349[safe_add( _6350,_6364 )];
                  long long _6366 = ((_ptr__6342[safe_add( _6335,_6365 )] / _ptr__6353[_6359]) % _6360);
                  _ptr__6349[safe_add( _6351,_ptr__6349[safe_add( _6344,_6366 )] )] = _6365;
                  ++ _ptr__6349[safe_add( _6344,_6366 )];
                }
              }
              int _6367 = _6351;
              _6351 = _6350;
              _6350 = _6367;
            }
          }
        }
      }
      {}
      int _6368 = (int)1;
      int _11525 = (int)0;
      int _11526 = dim;
      for (int _6369 = _11525; _6369 < _11526; ++_6369)
      {
        {
          _6368 *= _ptr__6341[safe_add( _6329,_6369 )];
        }
      }
      int _6370 = _ptr__6341[safe_add( _6329,dim )];
      int _6371 = (int)1;
      int _11527 = safe_add( dim,(int)1 );
      int _11528 = _6328;
      for (int _6372 = _11527; _6372 < _11528; ++_6372)
      {
        {
          _6371 *= _ptr__6341[safe_add( _6329,_6372 )];
        }
      }
      int _6373 = safe_mul( _6371,_6370 );
      int _6374 = _6371;
      int _6375 = (int)1;
      int _6376 = (int)0;
      long long _6377 = (-(int)1);
      long long _6378 = (-(int)1);
      int _11529 = (int)0;
      int _11530 = _6330;
      for (int _6379 = _11529; _6379 < _11530; ++_6379)
      {
        {
          int _6380 = _ptr__6349[safe_add( _6350,_6379 )];
          long long _6381 = ((_ptr__6342[safe_add( _6335,_6380 )] / _6373) % _6368);
          long long _6382 = (_ptr__6342[safe_add( _6335,_6380 )] % _6371);
          if (((_6378 != _6381) || (_6377 != _6382)))
          {
            {
              _6378 = _6381;
              _6377 = _6382;
              ++ _6376;
            }
          }
          {}
        }
      }
      int _6383 = (_6328 - (int)1);
      bool _6384 = (_6376 < safe_mul( _6368,_6371 ));
      int _6385 = _6331;
      int _6386 = _6332;
      _6325->alloc_expr(_6383,_6376,_6385,_6384,_6386);
      int _6387 = mosek::fusion::p_WorkStack::_get_impl(_6325)->ptr_base;
      int _6388 = mosek::fusion::p_WorkStack::_get_impl(_6325)->nidxs_base;
      int _11531;
      bool _11532 = _6384;
      if (_11532)
      {
        _11531 = mosek::fusion::p_WorkStack::_get_impl(_6325)->sp_base;
      }
      else
      {
        _11531 = _6325->alloci64(_6376);
      }
      int _6389 = _11531;
      int _6390 = mosek::fusion::p_WorkStack::_get_impl(_6325)->cof_base;
      int _6391 = mosek::fusion::p_WorkStack::_get_impl(_6325)->shape_base;
      int _6392 = mosek::fusion::p_WorkStack::_get_impl(_6325)->code_base;
      int _6393 = mosek::fusion::p_WorkStack::_get_impl(_6325)->codeptr_base;
      int _6394 = mosek::fusion::p_WorkStack::_get_impl(_6325)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6395 = mosek::fusion::p_WorkStack::_get_impl(_6325)->i32;
      _checked_ptr_1<int> _ptr__6395(_6395 ? _6395->raw() : nullptr,_6395 ? _6395->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6396 = mosek::fusion::p_WorkStack::_get_impl(_6325)->i64;
      _checked_ptr_1<long long> _ptr__6396(_6396 ? _6396->raw() : nullptr,_6396 ? _6396->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6397 = mosek::fusion::p_WorkStack::_get_impl(_6325)->f64;
      _checked_ptr_1<double> _ptr__6397(_6397 ? _6397->raw() : nullptr,_6397 ? _6397->size(0) : 0);
      int _11533 = (int)0;
      int _11534 = dim;
      for (int _6398 = _11533; _6398 < _11534; ++_6398)
      {
        {
          _ptr__6395[safe_add( _6391,_6398 )] = _ptr__6341[safe_add( _6329,_6398 )];
        }
      }
      int _11535 = safe_add( dim,(int)1 );
      int _11536 = _6328;
      for (int _6399 = _11535; _6399 < _11536; ++_6399)
      {
        {
          _ptr__6395[(safe_add( _6391,_6399 ) - (int)1)] = _ptr__6341[safe_add( _6329,_6399 )];
        }
      }
      _ptr__6395[_6387] = (int)0;
      if ((_6386 > (int)0))
      {
        {
          _ptr__6395[_6393] = (int)0;
        }
      }
      {}
      int _6400 = (int)0;
      int _6401 = (int)0;
      int _6402 = (int)0;
      int _6403 = (int)0;
      while ( (_6403 < _6330) )
      {
        {
          int _6404 = _6403;
          long long _6405 = ((_ptr__6342[safe_add( _6335,_ptr__6349[safe_add( _6350,_6404 )] )] / _6373) % _6368);
          long long _6406 = (_ptr__6342[safe_add( _6335,_ptr__6349[safe_add( _6350,_6404 )] )] % _6371);
          ++ _6403;
          while ( ((_6403 < _6330) && ((_6405 == ((_ptr__6342[safe_add( _6335,_ptr__6349[safe_add( _6350,_6403 )] )] / _6373) % _6368)) && (_6406 == (_ptr__6342[safe_add( _6335,_ptr__6349[safe_add( _6350,_6403 )] )] % _6371)))) )
          {
            {
              ++ _6403;
            }
          }
          int _11537 = _6404;
          int _11538 = _6403;
          for (int _6407 = _11537; _6407 < _11538; ++_6407)
          {
            {
              int _6408 = _ptr__6349[safe_add( _6350,_6407 )];
              int _11539 = _ptr__6341[safe_add( _6334,_6408 )];
              int _11540 = _ptr__6341[safe_add( safe_add( _6334,_6408 ),(int)1 )];
              for (int _6409 = _11539; _6409 < _11540; ++_6409)
              {
                {
                  _ptr__6396[safe_add( _6388,_6402 )] = _ptr__6342[safe_add( _6336,_6409 )];
                  _ptr__6397[safe_add( _6390,_6402 )] = _ptr__6343[safe_add( _6337,_6409 )];
                  if ((_6386 > (int)0))
                  {
                    {
                      int _11541 = _ptr__6341[safe_add( _6339,_6409 )];
                      int _11542 = _ptr__6341[safe_add( safe_add( _6339,_6409 ),(int)1 )];
                      for (int _6410 = _11541; _6410 < _11542; ++_6410)
                      {
                        {
                          _ptr__6395[safe_add( _6392,_6400 )] = _ptr__6341[safe_add( _6338,_6410 )];
                          _ptr__6397[safe_add( _6394,_6400 )] = _ptr__6343[safe_add( _6340,_6410 )];
                          ++ _6400;
                        }
                      }
                      _ptr__6395[safe_add( safe_add( _6393,_6402 ),(int)1 )] = _6400;
                    }
                  }
                  {}
                  ++ _6402;
                }
              }
            }
          }
          _ptr__6396[safe_add( _6389,_6401 )] = safe_add( safe_mul( _6405,_6371 ),_6406 );
          _ptr__6395[safe_add( safe_add( _6387,_6401 ),(int)1 )] = _6402;
          ++ _6401;
        }
      }
      if ((!_6384))
      {
        {
          _6325->popi64(_6376);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6411 = (int)1;
      int _11543 = (int)0;
      int _11544 = dim;
      for (int _6412 = _11543; _6412 < _11544; ++_6412)
      {
        {
          _6411 *= _ptr__6341[safe_add( _6329,_6412 )];
        }
      }
      int _6413 = _ptr__6341[safe_add( _6329,dim )];
      int _6414 = (int)1;
      int _11545 = safe_add( dim,(int)1 );
      int _11546 = _6328;
      for (int _6415 = _11545; _6415 < _11546; ++_6415)
      {
        {
          _6414 *= _ptr__6341[safe_add( _6329,_6415 )];
        }
      }
      int _6416 = safe_mul( _6414,_6413 );
      int _6417 = _6414;
      int _6418 = (int)1;
      int _6419 = safe_mul( _6411,_6414 );
      int _6420 = _6331;
      int _6421 = _6332;
      _6325->alloc_expr((_6328 - (int)1),_6419,_6420,false,_6421);
      int _6422 = mosek::fusion::p_WorkStack::_get_impl(_6325)->ptr_base;
      int _6423 = mosek::fusion::p_WorkStack::_get_impl(_6325)->nidxs_base;
      int _6424 = mosek::fusion::p_WorkStack::_get_impl(_6325)->cof_base;
      int _6425 = mosek::fusion::p_WorkStack::_get_impl(_6325)->shape_base;
      int _6426 = mosek::fusion::p_WorkStack::_get_impl(_6325)->code_base;
      int _6427 = mosek::fusion::p_WorkStack::_get_impl(_6325)->codeptr_base;
      int _6428 = mosek::fusion::p_WorkStack::_get_impl(_6325)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6429 = mosek::fusion::p_WorkStack::_get_impl(_6325)->i32;
      _checked_ptr_1<int> _ptr__6429(_6429 ? _6429->raw() : nullptr,_6429 ? _6429->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6430 = mosek::fusion::p_WorkStack::_get_impl(_6325)->i64;
      _checked_ptr_1<long long> _ptr__6430(_6430 ? _6430->raw() : nullptr,_6430 ? _6430->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6431 = mosek::fusion::p_WorkStack::_get_impl(_6325)->f64;
      _checked_ptr_1<double> _ptr__6431(_6431 ? _6431->raw() : nullptr,_6431 ? _6431->size(0) : 0);
      int _11547 = (int)0;
      int _11548 = dim;
      for (int _6432 = _11547; _6432 < _11548; ++_6432)
      {
        {
          _ptr__6429[safe_add( _6425,_6432 )] = _ptr__6341[safe_add( _6329,_6432 )];
        }
      }
      int _11549 = safe_add( dim,(int)1 );
      int _11550 = _6328;
      for (int _6433 = _11549; _6433 < _11550; ++_6433)
      {
        {
          _ptr__6429[(safe_add( _6425,_6433 ) - (int)1)] = _ptr__6341[safe_add( _6329,_6433 )];
        }
      }
      int _6434 = (int)0;
      int _6435 = (int)0;
      _ptr__6429[_6422] = (int)0;
      if ((_6421 > (int)0))
      {
        {
          _ptr__6429[_6427] = (int)0;
        }
      }
      {}
      int _6436 = (int)0;
      int _11551 = (int)0;
      int _11552 = _6411;
      for (int _6437 = _11551; _6437 < _11552; ++_6437)
      {
        {
          int _11553 = (int)0;
          int _11554 = _6414;
          for (int _6438 = _11553; _6438 < _11554; ++_6438)
          {
            {
              int _11555 = (int)0;
              int _11556 = _6413;
              for (int _6439 = _11555; _6439 < _11556; ++_6439)
              {
                {
                  int _6440 = safe_add( safe_add( safe_mul( _6437,_6416 ),safe_mul( _6439,_6417 ) ),_6438 );
                  int _11557 = _ptr__6341[safe_add( _6334,_6440 )];
                  int _11558 = _ptr__6341[safe_add( safe_add( _6334,_6440 ),(int)1 )];
                  for (int _6441 = _11557; _6441 < _11558; ++_6441)
                  {
                    {
                      _ptr__6430[safe_add( _6423,_6435 )] = _ptr__6342[safe_add( _6336,_6441 )];
                      _ptr__6431[safe_add( _6424,_6435 )] = _ptr__6343[safe_add( _6337,_6441 )];
                      if ((_6421 > (int)0))
                      {
                        {
                          int _11559 = _ptr__6341[safe_add( _6339,_6441 )];
                          int _11560 = _ptr__6341[safe_add( safe_add( _6339,_6441 ),(int)1 )];
                          for (int _6442 = _11559; _6442 < _11560; ++_6442)
                          {
                            {
                              _ptr__6429[safe_add( _6426,_6436 )] = _ptr__6341[safe_add( _6338,_6442 )];
                              _ptr__6431[safe_add( _6428,_6436 )] = _ptr__6343[safe_add( _6340,_6442 )];
                              ++ _6436;
                            }
                          }
                          _ptr__6429[safe_add( safe_add( _6427,_6435 ),(int)1 )] = _6436;
                        }
                      }
                      {}
                      ++ _6435;
                    }
                  }
                }
              }
              _ptr__6429[safe_add( safe_add( _6422,_6434 ),(int)1 )] = _6435;
              ++ _6434;
            }
          }
        }
      }
    }
  }
  _6327->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _6443,std::shared_ptr< monty::ndarray< int,1 > > _6444){
  _checked_ptr_1<int> _ptr__6444(_6444 ? _6444->raw() : nullptr, _6444 ? _6444->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6445 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_6444)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__6445(_6445 ? _6445->raw() : nullptr,_6445 ? _6445->size(0) : 0);
  int _11561 = (int)0;
  int _11562 = _6443;
  for (int _6446 = _11561; _6446 < _11562; ++_6446)
  {
    {
      _ptr__6445[_6446] = _ptr__6444[_6446];
    }
  }
  int _11563 = safe_add( _6443,(int)1 );
  int _11564 = (int)((_6444)->size(0));
  for (int _6447 = _11563; _6447 < _11564; ++_6447)
  {
    {
      _ptr__6445[(_6447 - (int)1)] = _ptr__6444[_6447];
    }
  }
  return _6445;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduce("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6448,    int _6449,    monty::rc_ptr< ::mosek::fusion::Expression > _6450,    int _6451){ return new mosek::fusion::ExprDenseTril(_6448,_6449,_6450,_6451); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6448,    int _6449,    monty::rc_ptr< ::mosek::fusion::Expression > _6450,    int _6451) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6448,_6449,_6450,_6451); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6448,    int _6449,    monty::rc_ptr< ::mosek::fusion::Expression > _6450,    int _6451){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6450->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _6450;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _6448;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _6449;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6452,    int _6453,    monty::rc_ptr< ::mosek::fusion::Expression > _6454){ return new mosek::fusion::ExprDenseTril(_6452,_6453,_6454); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6452,    int _6453,    monty::rc_ptr< ::mosek::fusion::Expression > _6454) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6452,_6453,_6454); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6452,    int _6453,    monty::rc_ptr< ::mosek::fusion::Expression > _6454){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_6452,_6453,_6454,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6455 = _6454->getShape();
    _checked_ptr_1<int> _ptr__6455(_6455 ? _6455->raw() : nullptr,_6455 ? _6455->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_6455)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_6455)->size(0))) || (_ptr__6455[dim0] != _ptr__6455[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6456,monty::rc_ptr< ::mosek::fusion::WorkStack > _6457,monty::rc_ptr< ::mosek::fusion::WorkStack > _6458) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_6456,_6457,_6458); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6456,monty::rc_ptr< ::mosek::fusion::WorkStack > _6457,monty::rc_ptr< ::mosek::fusion::WorkStack > _6458){
  expr->eval(_6457,_6456,_6458);
  _6457->pop_expr();
  int _6459 = mosek::fusion::p_WorkStack::_get_impl(_6457)->nd;
  int _6460 = mosek::fusion::p_WorkStack::_get_impl(_6457)->nnz;
  int _6461 = mosek::fusion::p_WorkStack::_get_impl(_6457)->nelem;
  int _6462 = mosek::fusion::p_WorkStack::_get_impl(_6457)->ncodeatom;
  bool _6463 = mosek::fusion::p_WorkStack::_get_impl(_6457)->hassp;
  int _6464 = mosek::fusion::p_WorkStack::_get_impl(_6457)->shape_base;
  int _6465 = mosek::fusion::p_WorkStack::_get_impl(_6457)->ptr_base;
  int _6466 = mosek::fusion::p_WorkStack::_get_impl(_6457)->code_base;
  int _6467 = mosek::fusion::p_WorkStack::_get_impl(_6457)->codeptr_base;
  int _6468 = mosek::fusion::p_WorkStack::_get_impl(_6457)->cconst_base;
  int _6469 = mosek::fusion::p_WorkStack::_get_impl(_6457)->nidxs_base;
  int _6470 = mosek::fusion::p_WorkStack::_get_impl(_6457)->sp_base;
  int _6471 = mosek::fusion::p_WorkStack::_get_impl(_6457)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6472 = mosek::fusion::p_WorkStack::_get_impl(_6457)->i32;
  _checked_ptr_1<int> _ptr__6472(_6472 ? _6472->raw() : nullptr,_6472 ? _6472->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6473 = mosek::fusion::p_WorkStack::_get_impl(_6457)->i64;
  _checked_ptr_1<long long> _ptr__6473(_6473 ? _6473->raw() : nullptr,_6473 ? _6473->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6474 = mosek::fusion::p_WorkStack::_get_impl(_6457)->f64;
  _checked_ptr_1<double> _ptr__6474(_6474 ? _6474->raw() : nullptr,_6474 ? _6474->size(0) : 0);
  int _11565;
  bool _11566 = (dim0 < dim1);
  if (_11566)
  {
    _11565 = dim0;
  }
  else
  {
    _11565 = dim1;
  }
  int _6475 = _11565;
  int _11567;
  bool _11568 = (dim0 > dim1);
  if (_11568)
  {
    _11567 = dim0;
  }
  else
  {
    _11567 = dim1;
  }
  int _6476 = _11567;
  bool _6477 = (dim0 < dim1);
  if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= _6459) || ((dim1 < (int)0) || (dim1 >= _6459))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6472[safe_add( _6464,dim0 )] != _ptr__6472[safe_add( _6464,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  std::vector<int> _11569;
  for (int _6479 = (int)0, _11570 = (int)5; _6479 < _11570 ; ++_6479)
  {
    _11569.push_back((int)1);
  }
  auto _11571 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11569.size()),_11569.begin(),_11569.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6478 = _11571;
  _checked_ptr_1<int> _ptr__6478(_6478 ? _6478->raw() : nullptr,_6478 ? _6478->size(0) : 0);
  int _11572 = (int)0;
  int _11573 = _6475;
  for (int _6480 = _11572; _6480 < _11573; ++_6480)
  {
    {
      _ptr__6478[(int)0] *= _ptr__6472[safe_add( _6464,_6480 )];
    }
  }
  _ptr__6478[(int)1] = _ptr__6472[safe_add( _6464,dim0 )];
  int _11574 = safe_add( _6475,(int)1 );
  int _11575 = _6476;
  for (int _6481 = _11574; _6481 < _11575; ++_6481)
  {
    {
      _ptr__6478[(int)2] *= _ptr__6472[safe_add( _6464,_6481 )];
    }
  }
  _ptr__6478[(int)3] = _ptr__6472[safe_add( _6464,dim1 )];
  int _11576 = safe_add( _6476,(int)1 );
  int _11577 = _6459;
  for (int _6482 = _11576; _6482 < _11577; ++_6482)
  {
    {
      _ptr__6478[(int)4] *= _ptr__6472[safe_add( _6464,_6482 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6483 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__6483(_6483 ? _6483->raw() : nullptr,_6483 ? _6483->size(0) : 0);
  _ptr__6483[(int)4] = (int)1;
  int _11578 = (int)1;
  int _11579 = (int)5;
  for (int _6484 = _11578; _6484 < _11579; ++_6484)
  {
    {
      _ptr__6483[(((int)5 - _6484) - (int)1)] = safe_mul( _ptr__6483[((int)5 - _6484)],_ptr__6478[((int)5 - _6484)] );
    }
  }
  int _6485 = (int)0;
  int _6486 = safe_mul( safe_mul( safe_mul( _ptr__6478[(int)0],_ptr__6478[(int)2] ),_ptr__6478[(int)4] ),(safe_mul( _ptr__6478[(int)1],safe_add( _ptr__6478[(int)1],(int)1 ) ) / (int)2) );
  int _6487 = (int)0;
  {
    if (_6463)
    {
      {
        int _6488 = _ptr__6478[(int)1];
        if (_6477)
        {
          {
            int _11580 = (int)0;
            int _11581 = _6461;
            for (int _6489 = _11580; _6489 < _11581; ++_6489)
            {
              {
                long long _6490 = ((_ptr__6473[safe_add( _6470,_6489 )] / _ptr__6483[(int)1]) % _6488);
                long long _6491 = ((_ptr__6473[safe_add( _6470,_6489 )] / _ptr__6483[(int)3]) % _6488);
                if ((_6490 >= _6491))
                {
                  {
                    _6485 += (_ptr__6472[safe_add( safe_add( _6465,_6489 ),(int)1 )] - _ptr__6472[safe_add( _6465,_6489 )]);
                    if ((_6462 > (int)0))
                    {
                      {
                        _6487 += (_ptr__6472[safe_add( _6467,_ptr__6472[safe_add( safe_add( _6465,_6489 ),(int)1 )] )] - _ptr__6472[safe_add( _6467,_ptr__6472[safe_add( _6465,_6489 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _11582 = (int)0;
            int _11583 = _6461;
            for (int _6492 = _11582; _6492 < _11583; ++_6492)
            {
              {
                long long _6493 = ((_ptr__6473[safe_add( _6470,_6492 )] / _ptr__6483[(int)1]) % _ptr__6478[(int)1]);
                long long _6494 = ((_ptr__6473[safe_add( _6470,_6492 )] / _ptr__6483[(int)3]) % _ptr__6478[(int)3]);
                if ((_6493 <= _6494))
                {
                  {
                    _6485 += (_ptr__6472[safe_add( safe_add( _6465,_6492 ),(int)1 )] - _ptr__6472[safe_add( _6465,_6492 )]);
                    if ((_6462 > (int)0))
                    {
                      {
                        _6487 += (_ptr__6472[safe_add( _6467,_ptr__6472[safe_add( safe_add( _6465,_6492 ),(int)1 )] )] - _ptr__6472[safe_add( _6467,_ptr__6472[safe_add( _6465,_6492 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        if (_6477)
        {
          {
            int _11584 = (int)0;
            int _11585 = _ptr__6478[(int)0];
            for (int _6495 = _11584; _6495 < _11585; ++_6495)
            {
              {
                int _11586 = (int)0;
                int _11587 = _ptr__6478[(int)1];
                for (int _6496 = _11586; _6496 < _11587; ++_6496)
                {
                  {
                    int _11588 = (int)0;
                    int _11589 = _ptr__6478[(int)2];
                    for (int _6497 = _11588; _6497 < _11589; ++_6497)
                    {
                      {
                        int _11590 = (int)0;
                        int _11591 = safe_add( _6496,(int)1 );
                        for (int _6498 = _11590; _6498 < _11591; ++_6498)
                        {
                          {
                            int _11592 = (int)0;
                            int _11593 = _ptr__6478[(int)4];
                            for (int _6499 = _11592; _6499 < _11593; ++_6499)
                            {
                              {
                                int _6500 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6495,_ptr__6483[(int)0] ),safe_mul( _6496,_ptr__6483[(int)1] ) ),safe_mul( _6497,_ptr__6483[(int)2] ) ),safe_mul( _6498,_ptr__6483[(int)3] ) ),safe_mul( _6499,_ptr__6483[(int)4] ) );
                                _6485 += (_ptr__6472[safe_add( safe_add( _6465,_6500 ),(int)1 )] - _ptr__6472[safe_add( _6465,_6500 )]);
                                if ((_6462 > (int)0))
                                {
                                  {
                                    _6487 += (_ptr__6472[safe_add( _6467,_ptr__6472[safe_add( safe_add( _6465,_6500 ),(int)1 )] )] - _ptr__6472[safe_add( _6467,_ptr__6472[safe_add( _6465,_6500 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _11594 = (int)0;
            int _11595 = _ptr__6478[(int)0];
            for (int _6501 = _11594; _6501 < _11595; ++_6501)
            {
              {
                int _11596 = (int)0;
                int _11597 = _ptr__6478[(int)1];
                for (int _6502 = _11596; _6502 < _11597; ++_6502)
                {
                  {
                    int _11598 = (int)0;
                    int _11599 = _ptr__6478[(int)2];
                    for (int _6503 = _11598; _6503 < _11599; ++_6503)
                    {
                      {
                        int _11600 = _6502;
                        int _11601 = _ptr__6478[(int)3];
                        for (int _6504 = _11600; _6504 < _11601; ++_6504)
                        {
                          {
                            int _11602 = (int)0;
                            int _11603 = _ptr__6478[(int)4];
                            for (int _6505 = _11602; _6505 < _11603; ++_6505)
                            {
                              {
                                int _6506 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6501,_ptr__6483[(int)0] ),safe_mul( _6502,_ptr__6483[(int)1] ) ),safe_mul( _6503,_ptr__6483[(int)2] ) ),safe_mul( _6504,_ptr__6483[(int)3] ) ),safe_mul( _6505,_ptr__6483[(int)4] ) );
                                _6485 += (_ptr__6472[safe_add( safe_add( _6465,_6506 ),(int)1 )] - _ptr__6472[safe_add( _6465,_6506 )]);
                                if ((_6462 > (int)0))
                                {
                                  {
                                    _6487 += (_ptr__6472[safe_add( _6467,_ptr__6472[safe_add( safe_add( _6465,_6506 ),(int)1 )] )] - _ptr__6472[safe_add( _6467,_ptr__6472[safe_add( _6465,_6506 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _6507 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__6478[(int)0],_ptr__6478[(int)2] ),_ptr__6478[(int)4] ),_ptr__6478[(int)1] ),safe_add( _ptr__6478[(int)1],(int)1 ) ) / (int)2);
  _6456->alloc_expr(_6459,_6486,_6485,true,_6487);
  int _6508 = mosek::fusion::p_WorkStack::_get_impl(_6456)->ptr_base;
  int _6509 = mosek::fusion::p_WorkStack::_get_impl(_6456)->shape_base;
  int _6510 = mosek::fusion::p_WorkStack::_get_impl(_6456)->nidxs_base;
  int _6511 = mosek::fusion::p_WorkStack::_get_impl(_6456)->sp_base;
  int _6512 = mosek::fusion::p_WorkStack::_get_impl(_6456)->cof_base;
  int _6513 = mosek::fusion::p_WorkStack::_get_impl(_6456)->code_base;
  int _6514 = mosek::fusion::p_WorkStack::_get_impl(_6456)->codeptr_base;
  int _6515 = mosek::fusion::p_WorkStack::_get_impl(_6456)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6516 = mosek::fusion::p_WorkStack::_get_impl(_6456)->i32;
  _checked_ptr_1<int> _ptr__6516(_6516 ? _6516->raw() : nullptr,_6516 ? _6516->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6517 = mosek::fusion::p_WorkStack::_get_impl(_6456)->i64;
  _checked_ptr_1<long long> _ptr__6517(_6517 ? _6517->raw() : nullptr,_6517 ? _6517->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6518 = mosek::fusion::p_WorkStack::_get_impl(_6456)->f64;
  _checked_ptr_1<double> _ptr__6518(_6518 ? _6518->raw() : nullptr,_6518 ? _6518->size(0) : 0);
  _ptr__6516[_6508] = (int)0;
  if ((_6487 > (int)0))
  {
    {
      _ptr__6516[_6514] = (int)0;
    }
  }
  {}
  int _11604 = (int)0;
  int _11605 = _6459;
  for (int _6519 = _11604; _6519 < _11605; ++_6519)
  {
    {
      _ptr__6516[safe_add( _6509,_6519 )] = _ptr__6472[safe_add( _6464,_6519 )];
    }
  }
  if (_6477)
  {
    {
      int _6520 = (int)0;
      int _11606 = (int)0;
      int _11607 = _ptr__6478[(int)0];
      for (int _6521 = _11606; _6521 < _11607; ++_6521)
      {
        {
          int _11608 = (int)0;
          int _11609 = _ptr__6478[(int)1];
          for (int _6522 = _11608; _6522 < _11609; ++_6522)
          {
            {
              int _11610 = (int)0;
              int _11611 = _ptr__6478[(int)2];
              for (int _6523 = _11610; _6523 < _11611; ++_6523)
              {
                {
                  int _11612 = (int)0;
                  int _11613 = safe_add( _6522,(int)1 );
                  for (int _6524 = _11612; _6524 < _11613; ++_6524)
                  {
                    {
                      int _11614 = (int)0;
                      int _11615 = _ptr__6478[(int)4];
                      for (int _6525 = _11614; _6525 < _11615; ++_6525)
                      {
                        {
                          _ptr__6517[safe_add( _6511,_6520 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6521,_ptr__6483[(int)0] ),safe_mul( _6522,_ptr__6483[(int)1] ) ),safe_mul( _6523,_ptr__6483[(int)2] ) ),safe_mul( _6524,_ptr__6483[(int)3] ) ),safe_mul( _6525,_ptr__6483[(int)4] ) );
                          ++ _6520;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6520 != _6486))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6526 = (int)0;
      int _11616 = (int)0;
      int _11617 = _ptr__6478[(int)0];
      for (int _6527 = _11616; _6527 < _11617; ++_6527)
      {
        {
          int _11618 = (int)0;
          int _11619 = _ptr__6478[(int)1];
          for (int _6528 = _11618; _6528 < _11619; ++_6528)
          {
            {
              int _11620 = (int)0;
              int _11621 = _ptr__6478[(int)2];
              for (int _6529 = _11620; _6529 < _11621; ++_6529)
              {
                {
                  int _11622 = _6528;
                  int _11623 = _ptr__6478[(int)3];
                  for (int _6530 = _11622; _6530 < _11623; ++_6530)
                  {
                    {
                      int _11624 = (int)0;
                      int _11625 = _ptr__6478[(int)4];
                      for (int _6531 = _11624; _6531 < _11625; ++_6531)
                      {
                        {
                          _ptr__6517[safe_add( _6511,_6526 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6527,_ptr__6483[(int)0] ),safe_mul( _6528,_ptr__6483[(int)1] ) ),safe_mul( _6529,_ptr__6483[(int)2] ) ),safe_mul( _6530,_ptr__6483[(int)3] ) ),safe_mul( _6531,_ptr__6483[(int)4] ) );
                          ++ _6526;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6526 != _6486))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  {
    int _6532 = (int)0;
    int _6533 = (int)0;
    if (_6463)
    {
      {
        int _6534 = (int)0;
        int _6535 = (int)0;
        while ( ((_6535 < _6461) && (_6534 < _6507)) )
        {
          {
            if ((_ptr__6473[safe_add( _6470,_6535 )] < _ptr__6517[safe_add( _6511,_6534 )]))
            {
              {
                ++ _6535;
              }
            }
            else if((_ptr__6473[safe_add( _6470,_6535 )] > _ptr__6517[safe_add( _6511,_6534 )]))
            {
              {
                _ptr__6516[safe_add( safe_add( _6508,_6534 ),(int)1 )] = _6532;
                ++ _6534;
              }
            }
            else
            {
              {
                int _11626 = _ptr__6472[safe_add( _6465,_6535 )];
                int _11627 = _ptr__6472[safe_add( safe_add( _6465,_6535 ),(int)1 )];
                for (int _6536 = _11626; _6536 < _11627; ++_6536)
                {
                  {
                    _ptr__6517[safe_add( _6510,_6532 )] = _ptr__6473[safe_add( _6469,_6536 )];
                    _ptr__6518[safe_add( _6512,_6532 )] = _ptr__6474[safe_add( _6471,_6536 )];
                    if ((_6487 > (int)0))
                    {
                      {
                        int _11628 = _ptr__6472[safe_add( _6467,_6536 )];
                        int _11629 = _ptr__6472[safe_add( safe_add( _6467,_6536 ),(int)1 )];
                        for (int _6537 = _11628; _6537 < _11629; ++_6537)
                        {
                          {
                            _ptr__6516[safe_add( _6513,_6533 )] = _ptr__6472[safe_add( _6466,_6537 )];
                            _ptr__6518[safe_add( _6515,_6533 )] = _ptr__6474[safe_add( _6468,_6537 )];
                            ++ _6533;
                          }
                        }
                        _ptr__6516[safe_add( safe_add( _6514,_6532 ),(int)1 )] = _6533;
                      }
                    }
                    {}
                    ++ _6532;
                  }
                }
                _ptr__6516[safe_add( safe_add( _6508,_6534 ),(int)1 )] = _6532;
                ++ _6535;
                ++ _6534;
              }
            }
          }
        }
        while ( (_6534 < _6507) )
        {
          {
            _ptr__6516[safe_add( safe_add( _6508,_6534 ),(int)1 )] = _6532;
            ++ _6534;
          }
        }
      }
    }
    else
    {
      {
        int _11630 = (int)0;
        int _11631 = _6507;
        for (int _6538 = _11630; _6538 < _11631; ++_6538)
        {
          {
            long long _6539 = _ptr__6517[safe_add( _6511,_6538 )];
            int _11632 = _ptr__6472[safe_add( _6465,_6539 )];
            int _11633 = _ptr__6472[safe_add( safe_add( _6465,_6539 ),(int)1 )];
            for (int _6540 = _11632; _6540 < _11633; ++_6540)
            {
              {
                _ptr__6517[safe_add( _6510,_6532 )] = _ptr__6473[safe_add( _6469,_6540 )];
                _ptr__6518[safe_add( _6512,_6532 )] = _ptr__6474[safe_add( _6471,_6540 )];
                if ((_6487 > (int)0))
                {
                  {
                    int _11634 = _ptr__6472[safe_add( _6467,_6540 )];
                    int _11635 = _ptr__6472[safe_add( safe_add( _6467,_6540 ),(int)1 )];
                    for (int _6541 = _11634; _6541 < _11635; ++_6541)
                    {
                      {
                        _ptr__6516[safe_add( _6513,_6533 )] = _ptr__6472[safe_add( _6466,_6541 )];
                        _ptr__6518[safe_add( _6515,_6533 )] = _ptr__6474[safe_add( _6468,_6541 )];
                        ++ _6533;
                      }
                    }
                    _ptr__6516[safe_add( safe_add( _6514,_6532 ),(int)1 )] = _6533;
                  }
                }
                {}
                ++ _6532;
              }
            }
            _ptr__6516[safe_add( safe_add( _6508,_6538 ),(int)1 )] = _6532;
          }
        }
      }
    }
    if ((_6532 != _6485))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprDenseTril :: toString() { return mosek::fusion::p_ExprDenseTril::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDenseTril::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDenseTril(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6542){ return new mosek::fusion::ExprDense(_6542); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6542) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_6542); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6542){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6542->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _6542;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6543,monty::rc_ptr< ::mosek::fusion::WorkStack > _6544,monty::rc_ptr< ::mosek::fusion::WorkStack > _6545) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_6543,_6544,_6545); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6543,monty::rc_ptr< ::mosek::fusion::WorkStack > _6544,monty::rc_ptr< ::mosek::fusion::WorkStack > _6545){
  expr->eval(_6544,_6543,_6545);
  _6544->pop_expr();
  int _6546 = mosek::fusion::p_WorkStack::_get_impl(_6544)->nd;
  int _6547 = mosek::fusion::p_WorkStack::_get_impl(_6544)->nnz;
  int _6548 = mosek::fusion::p_WorkStack::_get_impl(_6544)->nelem;
  int _6549 = mosek::fusion::p_WorkStack::_get_impl(_6544)->ncodeatom;
  bool _6550 = mosek::fusion::p_WorkStack::_get_impl(_6544)->hassp;
  int _6551 = mosek::fusion::p_WorkStack::_get_impl(_6544)->shape_base;
  int _6552 = mosek::fusion::p_WorkStack::_get_impl(_6544)->ptr_base;
  int _6553 = mosek::fusion::p_WorkStack::_get_impl(_6544)->nidxs_base;
  int _6554 = mosek::fusion::p_WorkStack::_get_impl(_6544)->cof_base;
  int _6555 = mosek::fusion::p_WorkStack::_get_impl(_6544)->sp_base;
  int _6556 = mosek::fusion::p_WorkStack::_get_impl(_6544)->codeptr_base;
  int _6557 = mosek::fusion::p_WorkStack::_get_impl(_6544)->code_base;
  int _6558 = mosek::fusion::p_WorkStack::_get_impl(_6544)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6559 = mosek::fusion::p_WorkStack::_get_impl(_6544)->i32;
  _checked_ptr_1<int> _ptr__6559(_6559 ? _6559->raw() : nullptr,_6559 ? _6559->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6560 = mosek::fusion::p_WorkStack::_get_impl(_6544)->i64;
  _checked_ptr_1<long long> _ptr__6560(_6560 ? _6560->raw() : nullptr,_6560 ? _6560->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6561 = mosek::fusion::p_WorkStack::_get_impl(_6544)->f64;
  _checked_ptr_1<double> _ptr__6561(_6561 ? _6561->raw() : nullptr,_6561 ? _6561->size(0) : 0);
  int _6562 = (int)1;
  if (_6550)
  {
    {
      bool _6563 = true;
      int _11636 = (int)0;
      int _11637 = _6546;
      for (int _6564 = _11636; _6564 < _11637; ++_6564)
      {
        {
          int _6565 = safe_mul( _6562,_ptr__6559[safe_add( _6551,_6564 )] );
          _6563 = (_6563 && ((_ptr__6559[safe_add( _6551,_6564 )] == (int)0) || ((_6565 / _ptr__6559[safe_add( _6551,_6564 )]) == _6562)));
          _6562 = _6565;
        }
      }
      if ((!_6563))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("The domain is too large"));
        }
      }
      {}
    }
  }
  else
  {
    {
      _6562 = _6548;
    }
  }
  _6543->alloc_expr(_6546,_6562,_6547,false,_6549);
  int _6566 = mosek::fusion::p_WorkStack::_get_impl(_6543)->shape_base;
  int _6567 = mosek::fusion::p_WorkStack::_get_impl(_6543)->ptr_base;
  int _6568 = mosek::fusion::p_WorkStack::_get_impl(_6543)->nidxs_base;
  int _6569 = mosek::fusion::p_WorkStack::_get_impl(_6543)->cof_base;
  int _6570 = mosek::fusion::p_WorkStack::_get_impl(_6543)->codeptr_base;
  int _6571 = mosek::fusion::p_WorkStack::_get_impl(_6543)->code_base;
  int _6572 = mosek::fusion::p_WorkStack::_get_impl(_6543)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6573 = mosek::fusion::p_WorkStack::_get_impl(_6543)->i32;
  _checked_ptr_1<int> _ptr__6573(_6573 ? _6573->raw() : nullptr,_6573 ? _6573->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6574 = mosek::fusion::p_WorkStack::_get_impl(_6543)->i64;
  _checked_ptr_1<long long> _ptr__6574(_6574 ? _6574->raw() : nullptr,_6574 ? _6574->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6575 = mosek::fusion::p_WorkStack::_get_impl(_6543)->f64;
  _checked_ptr_1<double> _ptr__6575(_6575 ? _6575->raw() : nullptr,_6575 ? _6575->size(0) : 0);
  {
    int _11638 = (int)0;
    int _11639 = _6546;
    for (int _6576 = _11638; _6576 < _11639; ++_6576)
    {
      {
        _ptr__6573[safe_add( _6566,_6576 )] = _ptr__6559[safe_add( _6551,_6576 )];
      }
    }
    int _11640 = (int)0;
    int _11641 = _6547;
    for (int _6577 = _11640; _6577 < _11641; ++_6577)
    {
      {
        _ptr__6574[safe_add( _6568,_6577 )] = _ptr__6560[safe_add( _6553,_6577 )];
      }
    }
    int _11642 = (int)0;
    int _11643 = _6547;
    for (int _6578 = _11642; _6578 < _11643; ++_6578)
    {
      {
        _ptr__6575[safe_add( _6569,_6578 )] = _ptr__6561[safe_add( _6554,_6578 )];
      }
    }
    if ((_6549 > (int)0))
    {
      {
        int _11644 = (int)0;
        int _11645 = safe_add( _6547,(int)1 );
        for (int _6579 = _11644; _6579 < _11645; ++_6579)
        {
          {
            _ptr__6573[safe_add( _6570,_6579 )] = _ptr__6559[safe_add( _6556,_6579 )];
          }
        }
        int _11646 = (int)0;
        int _11647 = _6549;
        for (int _6580 = _11646; _6580 < _11647; ++_6580)
        {
          {
            _ptr__6573[safe_add( _6571,_6580 )] = _ptr__6559[safe_add( _6557,_6580 )];
          }
        }
        int _11648 = (int)0;
        int _11649 = _6549;
        for (int _6581 = _11648; _6581 < _11649; ++_6581)
        {
          {
            _ptr__6575[safe_add( _6572,_6581 )] = _ptr__6561[safe_add( _6558,_6581 )];
          }
        }
      }
    }
    {}
    if ((!_6550))
    {
      {
        int _11650 = (int)0;
        int _11651 = safe_add( _6562,(int)1 );
        for (int _6582 = _11650; _6582 < _11651; ++_6582)
        {
          {
            _ptr__6573[safe_add( _6567,_6582 )] = _ptr__6559[safe_add( _6552,_6582 )];
          }
        }
      }
    }
    else
    {
      {
        int _11652 = (int)0;
        int _11653 = safe_add( _6562,(int)1 );
        for (int _6583 = _11652; _6583 < _11653; ++_6583)
        {
          {
            _ptr__6573[safe_add( _6567,_6583 )] = (int)0;
          }
        }
        int _11654 = (int)0;
        int _11655 = _6548;
        for (int _6584 = _11654; _6584 < _11655; ++_6584)
        {
          {
            _ptr__6573[safe_add( safe_add( _6567,_ptr__6560[safe_add( _6555,_6584 )] ),(int)1 )] = (_ptr__6559[safe_add( safe_add( _6552,_6584 ),(int)1 )] - _ptr__6559[safe_add( _6552,_6584 )]);
          }
        }
        int _11656 = (int)0;
        int _11657 = _6562;
        for (int _6585 = _11656; _6585 < _11657; ++_6585)
        {
          {
            _ptr__6573[safe_add( safe_add( _6567,_6585 ),(int)1 )] += _ptr__6573[safe_add( _6567,_6585 )];
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6586,    int _6587,    monty::rc_ptr< ::mosek::fusion::Expression > _6588,    int _6589){ return new mosek::fusion::ExprSymmetrize(_6586,_6587,_6588,_6589); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6586,    int _6587,    monty::rc_ptr< ::mosek::fusion::Expression > _6588,    int _6589) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6586,_6587,_6588,_6589); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6586,    int _6587,    monty::rc_ptr< ::mosek::fusion::Expression > _6588,    int _6589){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6588->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _6588;
    if ((_6586 < _6587))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6586;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6587;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6587;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6586;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6590,    int _6591,    monty::rc_ptr< ::mosek::fusion::Expression > _6592){ return new mosek::fusion::ExprSymmetrize(_6590,_6591,_6592); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6590,    int _6591,    monty::rc_ptr< ::mosek::fusion::Expression > _6592) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6590,_6591,_6592); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6590,    int _6591,    monty::rc_ptr< ::mosek::fusion::Expression > _6592){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_6590,_6591,_6592,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6593 = _6592->getShape();
    _checked_ptr_1<int> _ptr__6593(_6593 ? _6593->raw() : nullptr,_6593 ? _6593->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_6593)->size(0))) || (_ptr__6593[dim0] != _ptr__6593[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6594,monty::rc_ptr< ::mosek::fusion::WorkStack > _6595,monty::rc_ptr< ::mosek::fusion::WorkStack > _6596) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_6594,_6595,_6596); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6594,monty::rc_ptr< ::mosek::fusion::WorkStack > _6595,monty::rc_ptr< ::mosek::fusion::WorkStack > _6596){
  expr->eval(_6595,_6594,_6596);
  _6595->pop_expr();
  int _6597 = (int)0;
  int _6598 = mosek::fusion::p_WorkStack::_get_impl(_6595)->nd;
  int _6599 = mosek::fusion::p_WorkStack::_get_impl(_6595)->nnz;
  int _6600 = mosek::fusion::p_WorkStack::_get_impl(_6595)->nelem;
  int _6601 = mosek::fusion::p_WorkStack::_get_impl(_6595)->ncodeatom;
  bool _6602 = mosek::fusion::p_WorkStack::_get_impl(_6595)->hassp;
  int _6603 = mosek::fusion::p_WorkStack::_get_impl(_6595)->shape_base;
  int _6604 = mosek::fusion::p_WorkStack::_get_impl(_6595)->ptr_base;
  int _6605 = mosek::fusion::p_WorkStack::_get_impl(_6595)->code_base;
  int _6606 = mosek::fusion::p_WorkStack::_get_impl(_6595)->codeptr_base;
  int _6607 = mosek::fusion::p_WorkStack::_get_impl(_6595)->cconst_base;
  int _6608 = mosek::fusion::p_WorkStack::_get_impl(_6595)->nidxs_base;
  int _6609 = mosek::fusion::p_WorkStack::_get_impl(_6595)->sp_base;
  int _6610 = mosek::fusion::p_WorkStack::_get_impl(_6595)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6611 = mosek::fusion::p_WorkStack::_get_impl(_6595)->i32;
  _checked_ptr_1<int> _ptr__6611(_6611 ? _6611->raw() : nullptr,_6611 ? _6611->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6612 = mosek::fusion::p_WorkStack::_get_impl(_6595)->i64;
  _checked_ptr_1<long long> _ptr__6612(_6612 ? _6612->raw() : nullptr,_6612 ? _6612->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6613 = mosek::fusion::p_WorkStack::_get_impl(_6595)->f64;
  _checked_ptr_1<double> _ptr__6613(_6613 ? _6613->raw() : nullptr,_6613 ? _6613->size(0) : 0);
  int _11658 = (int)0;
  int _11659 = _6598;
  for (int _6614 = _11658; _6614 < _11659; ++_6614)
  {
    {
      int _6615 = _ptr__6611[safe_add( _6603,_6614 )];
      if ((_6615 > _6597))
      {
        {
          _6615 = _6597;
        }
      }
      {}
    }
  }
  int _6616 = _6596->alloci32(_6600);
  int _6617 = _6596->alloci32(_6600);
  int _6618 = _6596->alloci32(safe_add( _6597,(int)1 ));
  int _6619 = _6596->alloci64(_6600);
  std::shared_ptr< monty::ndarray< int,1 > > _6620 = mosek::fusion::p_WorkStack::_get_impl(_6596)->i32;
  _checked_ptr_1<int> _ptr__6620(_6620 ? _6620->raw() : nullptr,_6620 ? _6620->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6621 = mosek::fusion::p_WorkStack::_get_impl(_6596)->i64;
  _checked_ptr_1<long long> _ptr__6621(_6621 ? _6621->raw() : nullptr,_6621 ? _6621->size(0) : 0);
  int _6622 = (int)0;
  int _6623 = (int)0;
  int _6624 = (int)0;
  std::vector<int> _11660;
  for (int _6626 = (int)0, _11661 = (int)5; _6626 < _11661 ; ++_6626)
  {
    _11660.push_back((int)1);
  }
  auto _11662 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11660.size()),_11660.begin(),_11660.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6625 = _11662;
  _checked_ptr_1<int> _ptr__6625(_6625 ? _6625->raw() : nullptr,_6625 ? _6625->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6627 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__6627(_6627 ? _6627->raw() : nullptr,_6627 ? _6627->size(0) : 0);
  int _11663 = (int)0;
  int _11664 = dim0;
  for (int _6628 = _11663; _6628 < _11664; ++_6628)
  {
    {
      _ptr__6625[(int)0] *= _ptr__6611[safe_add( _6603,_6628 )];
    }
  }
  _ptr__6625[(int)1] = _ptr__6611[safe_add( _6603,dim0 )];
  int _11665 = safe_add( dim0,(int)1 );
  int _11666 = dim1;
  for (int _6629 = _11665; _6629 < _11666; ++_6629)
  {
    {
      _ptr__6625[(int)2] *= _ptr__6611[safe_add( _6603,_6629 )];
    }
  }
  _ptr__6625[(int)3] = _ptr__6611[safe_add( _6603,dim1 )];
  int _11667 = safe_add( dim1,(int)1 );
  int _11668 = _6598;
  for (int _6630 = _11667; _6630 < _11668; ++_6630)
  {
    {
      _ptr__6625[(int)4] *= _ptr__6611[safe_add( _6603,_6630 )];
    }
  }
  _ptr__6627[(int)4] = (int)1;
  int _11669 = (int)1;
  int _11670 = (int)5;
  for (int _6631 = _11669; _6631 < _11670; ++_6631)
  {
    {
      _ptr__6627[(((int)5 - _6631) - (int)1)] = safe_mul( _ptr__6627[((int)5 - _6631)],_ptr__6625[((int)5 - _6631)] );
    }
  }
  if (_6602)
  {
    {
      int _6632 = _6616;
      int _11671 = (int)0;
      int _11672 = _6600;
      for (int _6633 = _11671; _6633 < _11672; ++_6633)
      {
        {
          _ptr__6620[safe_add( _6632,_6633 )] = _6633;
        }
      }
      int _6634 = _6617;
      std::shared_ptr< monty::ndarray< int,1 > > _6635 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__6635(_6635 ? _6635->raw() : nullptr,_6635 ? _6635->size(0) : 0);
      int _11673 = (int)0;
      int _11674 = (int)4;
      for (int _6636 = _11673; _6636 < _11674; ++_6636)
      {
        {
          long long _6637 = _ptr__6627[_ptr__6635[_6636]];
          int _6638 = _ptr__6625[_ptr__6635[_6636]];
          if ((_6638 > (int)1))
          {
            {
              int _11675 = (int)0;
              int _11676 = safe_add( _6638,(int)1 );
              for (int _6639 = _11675; _6639 < _11676; ++_6639)
              {
                {
                  _ptr__6620[safe_add( _6618,_6639 )] = (int)0;
                }
              }
              int _11677 = (int)0;
              int _11678 = _6600;
              for (int _6640 = _11677; _6640 < _11678; ++_6640)
              {
                {
                  ++ _ptr__6620[safe_add( safe_add( _6618,((_ptr__6612[safe_add( _6609,_ptr__6620[safe_add( _6632,_6640 )] )] / _6637) % _6638) ),(int)1 )];
                }
              }
              int _11679 = (int)0;
              int _11680 = _ptr__6625[(int)3];
              for (int _6641 = _11679; _6641 < _11680; ++_6641)
              {
                {
                  _ptr__6620[safe_add( safe_add( _6618,_6641 ),(int)1 )] += _ptr__6620[safe_add( _6618,_6641 )];
                }
              }
              int _11681 = (int)0;
              int _11682 = _6600;
              for (int _6642 = _11681; _6642 < _11682; ++_6642)
              {
                {
                  int _6643 = _ptr__6620[safe_add( _6632,_6642 )];
                  long long _6644 = ((_ptr__6612[safe_add( _6609,_6643 )] / _6637) % _6638);
                  _ptr__6620[safe_add( _6634,_ptr__6620[safe_add( _6618,_6644 )] )] = _6643;
                  ++ _ptr__6620[safe_add( _6618,_6644 )];
                }
              }
              int _6645 = _6632;
              _6632 = _6634;
              _6634 = _6645;
            }
          }
          {}
        }
      }
      int _11683 = (int)0;
      int _11684 = _6600;
      for (int _6646 = _11683; _6646 < _11684; ++_6646)
      {
        {
          _ptr__6621[safe_add( _6619,_6646 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__6612[safe_add( _6609,_6646 )] / _ptr__6627[(int)0]) % _ptr__6625[(int)0]),_ptr__6627[(int)0] ),safe_mul( ((_ptr__6612[safe_add( _6609,_6646 )] / _ptr__6627[(int)1]) % _ptr__6625[(int)1]),_ptr__6627[(int)3] ) ),safe_mul( ((_ptr__6612[safe_add( _6609,_6646 )] / _ptr__6627[(int)2]) % _ptr__6625[(int)2]),_ptr__6627[(int)2] ) ),safe_mul( ((_ptr__6612[safe_add( _6609,_6646 )] / _ptr__6627[(int)3]) % _ptr__6625[(int)3]),_ptr__6627[(int)1] ) ),safe_mul( ((_ptr__6612[safe_add( _6609,_6646 )] / _ptr__6627[(int)4]) % _ptr__6625[(int)4]),_ptr__6627[(int)4] ) );
        }
      }
      {
        int _6647 = (int)0;
        int _6648 = (int)0;
        while ( ((_6648 < _6600) || (_6647 < _6600)) )
        {
          {
            int _6649 = _ptr__6620[safe_add( _6632,_6647 )];
            if (((_6648 < _6600) && ((_6647 == _6600) || (_ptr__6612[safe_add( _6609,_6648 )] < _ptr__6621[safe_add( _6619,_6649 )]))))
            {
              {
                _6623 += (_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6648 )]);
                if ((_6601 > (int)0))
                {
                  {
                    _6624 += safe_add( (_ptr__6611[safe_add( _6606,_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] )] - _ptr__6611[safe_add( _6606,_ptr__6611[safe_add( _6604,_6648 )] )]),safe_mul( (int)2,(_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6648 )]) ) );
                  }
                }
                {}
                ++ _6622;
                ++ _6648;
              }
            }
            else if(((_6647 < _6600) && ((_6648 == _6600) || (_ptr__6612[safe_add( _6609,_6648 )] > _ptr__6621[safe_add( _6619,_6649 )]))))
            {
              {
                _6623 += (_ptr__6611[safe_add( safe_add( _6604,_6649 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6649 )]);
                if ((_6601 > (int)0))
                {
                  {
                    _6624 += safe_add( (_ptr__6611[safe_add( _6606,_ptr__6611[safe_add( safe_add( _6604,_6649 ),(int)1 )] )] - _ptr__6611[safe_add( _6606,_ptr__6611[safe_add( _6604,_6649 )] )]),safe_mul( (int)2,(_ptr__6611[safe_add( safe_add( _6604,_6649 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6649 )]) ) );
                  }
                }
                {}
                ++ _6622;
                ++ _6647;
              }
            }
            else if((_ptr__6612[safe_add( _6609,_6648 )] != _ptr__6621[safe_add( _6619,_6649 )]))
            {
              {
                _6623 += (_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6648 )]);
                _6623 += (_ptr__6611[safe_add( safe_add( _6604,_6649 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6649 )]);
                if ((_6601 > (int)0))
                {
                  {
                    _6624 += safe_add( (_ptr__6611[safe_add( _6606,_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] )] - _ptr__6611[safe_add( _6606,_ptr__6611[safe_add( _6604,_6648 )] )]),safe_mul( (int)2,(_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6648 )]) ) );
                    _6624 += safe_add( (_ptr__6611[safe_add( _6606,_ptr__6611[safe_add( safe_add( _6604,_6649 ),(int)1 )] )] - _ptr__6611[safe_add( _6606,_ptr__6611[safe_add( _6604,_6649 )] )]),safe_mul( (int)2,(_ptr__6611[safe_add( safe_add( _6604,_6649 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6649 )]) ) );
                  }
                }
                {}
                ++ _6622;
                ++ _6647;
                ++ _6648;
              }
            }
            else
            {
              {
                _6623 += (_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6648 )]);
                if ((_6601 > (int)0))
                {
                  {
                    _6624 += (_ptr__6611[safe_add( _6606,_ptr__6611[safe_add( safe_add( _6604,_6648 ),(int)1 )] )] - _ptr__6611[safe_add( _6606,_ptr__6611[safe_add( _6604,_6648 )] )]);
                  }
                }
                {}
                ++ _6622;
                ++ _6647;
                ++ _6648;
              }
            }
          }
        }
      }
      _6594->alloc_expr(_6598,_6622,_6623,true,_6624);
      int _6650 = _6598;
      int _6651 = mosek::fusion::p_WorkStack::_get_impl(_6594)->ptr_base;
      int _6652 = mosek::fusion::p_WorkStack::_get_impl(_6594)->nidxs_base;
      int _6653 = mosek::fusion::p_WorkStack::_get_impl(_6594)->shape_base;
      int _6654 = mosek::fusion::p_WorkStack::_get_impl(_6594)->sp_base;
      int _6655 = mosek::fusion::p_WorkStack::_get_impl(_6594)->cof_base;
      int _6656 = mosek::fusion::p_WorkStack::_get_impl(_6594)->code_base;
      int _6657 = mosek::fusion::p_WorkStack::_get_impl(_6594)->codeptr_base;
      int _6658 = mosek::fusion::p_WorkStack::_get_impl(_6594)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6659 = mosek::fusion::p_WorkStack::_get_impl(_6594)->i32;
      _checked_ptr_1<int> _ptr__6659(_6659 ? _6659->raw() : nullptr,_6659 ? _6659->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6660 = mosek::fusion::p_WorkStack::_get_impl(_6594)->i64;
      _checked_ptr_1<long long> _ptr__6660(_6660 ? _6660->raw() : nullptr,_6660 ? _6660->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6661 = mosek::fusion::p_WorkStack::_get_impl(_6594)->f64;
      _checked_ptr_1<double> _ptr__6661(_6661 ? _6661->raw() : nullptr,_6661 ? _6661->size(0) : 0);
      int _11685 = (int)0;
      int _11686 = _6598;
      for (int _6662 = _11685; _6662 < _11686; ++_6662)
      {
        {
          _ptr__6659[safe_add( _6653,_6662 )] = _ptr__6611[safe_add( _6603,_6662 )];
        }
      }
      _ptr__6659[_6651] = (int)0;
      if ((_6624 > (int)0))
      {
        {
          _ptr__6659[_6657] = (int)0;
        }
      }
      {}
      {
        int _6663 = (int)0;
        int _6664 = (int)0;
        int _6665 = (int)0;
        int _6666 = (int)0;
        int _6667 = (int)0;
        _ptr__6659[_6651] = (int)0;
        while ( ((_6667 < _6600) || (_6666 < _6600)) )
        {
          {
            int _6668 = _ptr__6620[safe_add( _6632,_6666 )];
            if (((_6667 < _6600) && ((_6666 == _6600) || (_ptr__6612[safe_add( _6609,_6667 )] < _ptr__6621[safe_add( _6619,_6668 )]))))
            {
              {
                if ((_6624 == (int)0))
                {
                  {
                    int _11687 = _ptr__6611[safe_add( _6604,_6667 )];
                    int _11688 = _ptr__6611[safe_add( safe_add( _6604,_6667 ),(int)1 )];
                    for (int _6669 = _11687; _6669 < _11688; ++_6669)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6669 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6669 )] * 0.5);
                        ++ _6663;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11689 = _ptr__6611[safe_add( _6604,_6667 )];
                    int _11690 = _ptr__6611[safe_add( safe_add( _6604,_6667 ),(int)1 )];
                    for (int _6670 = _11689; _6670 < _11690; ++_6670)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6670 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6670 )] * 0.5);
                        int _11691 = _ptr__6611[safe_add( _6606,_6670 )];
                        int _11692 = _ptr__6611[safe_add( safe_add( _6606,_6670 ),(int)1 )];
                        for (int _6671 = _11691; _6671 < _11692; ++_6671)
                        {
                          {
                            _ptr__6659[safe_add( _6656,_6664 )] = _ptr__6611[safe_add( _6605,_6671 )];
                            _ptr__6661[safe_add( _6658,_6664 )] = _ptr__6613[safe_add( _6607,_6671 )];
                            ++ _6664;
                          }
                        }
                        _ptr__6659[safe_add( _6656,_6664 )] = 2;
                        _ptr__6661[safe_add( _6658,_6664 )] = 0.5;
                        ++ _6664;
                        _ptr__6659[safe_add( _6656,_6664 )] = 5;
                        ++ _6664;
                        _ptr__6659[safe_add( safe_add( _6657,_6663 ),(int)1 )] = _6664;
                        ++ _6663;
                      }
                    }
                  }
                }
                _ptr__6660[safe_add( _6654,_6665 )] = _ptr__6612[safe_add( _6609,_6667 )];
                _ptr__6659[safe_add( safe_add( _6651,_6665 ),(int)1 )] = _6663;
                ++ _6665;
                ++ _6667;
              }
            }
            else if(((_6666 < _6600) && ((_6667 == _6600) || (_ptr__6612[safe_add( _6609,_6667 )] > _ptr__6621[safe_add( _6619,_6668 )]))))
            {
              {
                if ((_6624 == (int)0))
                {
                  {
                    int _11693 = _ptr__6611[safe_add( _6604,_6668 )];
                    int _11694 = _ptr__6611[safe_add( safe_add( _6604,_6668 ),(int)1 )];
                    for (int _6672 = _11693; _6672 < _11694; ++_6672)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6672 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6672 )] * 0.5);
                        ++ _6663;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11695 = _ptr__6611[safe_add( _6604,_6668 )];
                    int _11696 = _ptr__6611[safe_add( safe_add( _6604,_6668 ),(int)1 )];
                    for (int _6673 = _11695; _6673 < _11696; ++_6673)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6673 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6673 )] * 0.5);
                        int _11697 = _ptr__6611[safe_add( _6606,_6673 )];
                        int _11698 = _ptr__6611[safe_add( safe_add( _6606,_6673 ),(int)1 )];
                        for (int _6674 = _11697; _6674 < _11698; ++_6674)
                        {
                          {
                            _ptr__6659[safe_add( _6656,_6664 )] = _ptr__6611[safe_add( _6605,_6674 )];
                            _ptr__6661[safe_add( _6658,_6664 )] = _ptr__6613[safe_add( _6607,_6674 )];
                            ++ _6664;
                          }
                        }
                        _ptr__6659[safe_add( _6656,_6664 )] = 2;
                        _ptr__6661[safe_add( _6658,_6664 )] = 0.5;
                        ++ _6664;
                        _ptr__6659[safe_add( _6656,_6664 )] = 5;
                        ++ _6664;
                        _ptr__6659[safe_add( safe_add( _6657,_6663 ),(int)1 )] = _6664;
                        ++ _6663;
                      }
                    }
                  }
                }
                _ptr__6660[safe_add( _6654,_6665 )] = _ptr__6612[safe_add( _6619,_6668 )];
                _ptr__6659[safe_add( safe_add( _6651,_6665 ),(int)1 )] = _6663;
                ++ _6665;
                ++ _6666;
              }
            }
            else if((_ptr__6612[safe_add( _6609,_6667 )] != _ptr__6621[safe_add( _6619,_6668 )]))
            {
              {
                if ((_6624 == (int)0))
                {
                  {
                    int _11699 = _ptr__6611[safe_add( _6604,_6667 )];
                    int _11700 = _ptr__6611[safe_add( safe_add( _6604,_6667 ),(int)1 )];
                    for (int _6675 = _11699; _6675 < _11700; ++_6675)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6675 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6675 )] * 0.5);
                        ++ _6663;
                      }
                    }
                    int _11701 = _ptr__6611[safe_add( _6604,_6668 )];
                    int _11702 = _ptr__6611[safe_add( safe_add( _6604,_6668 ),(int)1 )];
                    for (int _6676 = _11701; _6676 < _11702; ++_6676)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6676 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6676 )] * 0.5);
                        ++ _6663;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11703 = _ptr__6611[safe_add( _6604,_6667 )];
                    int _11704 = _ptr__6611[safe_add( safe_add( _6604,_6667 ),(int)1 )];
                    for (int _6677 = _11703; _6677 < _11704; ++_6677)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6677 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6677 )] * 0.5);
                        int _11705 = _ptr__6611[safe_add( _6606,_6677 )];
                        int _11706 = _ptr__6611[safe_add( safe_add( _6606,_6677 ),(int)1 )];
                        for (int _6678 = _11705; _6678 < _11706; ++_6678)
                        {
                          {
                            _ptr__6659[safe_add( _6656,_6664 )] = _ptr__6611[safe_add( _6605,_6678 )];
                            _ptr__6661[safe_add( _6658,_6664 )] = _ptr__6613[safe_add( _6607,_6678 )];
                            ++ _6664;
                          }
                        }
                        _ptr__6659[safe_add( _6656,_6664 )] = 2;
                        _ptr__6661[safe_add( _6658,_6664 )] = 0.5;
                        ++ _6664;
                        _ptr__6659[safe_add( _6656,_6664 )] = 5;
                        ++ _6664;
                        _ptr__6659[safe_add( safe_add( _6657,_6663 ),(int)1 )] = _6664;
                        ++ _6663;
                      }
                    }
                    int _11707 = _ptr__6611[safe_add( _6604,_6668 )];
                    int _11708 = _ptr__6611[safe_add( safe_add( _6604,_6668 ),(int)1 )];
                    for (int _6679 = _11707; _6679 < _11708; ++_6679)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6679 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = (_ptr__6613[safe_add( _6610,_6679 )] * 0.5);
                        int _11709 = _ptr__6611[safe_add( _6606,_6679 )];
                        int _11710 = _ptr__6611[safe_add( safe_add( _6606,_6679 ),(int)1 )];
                        for (int _6680 = _11709; _6680 < _11710; ++_6680)
                        {
                          {
                            _ptr__6659[safe_add( _6656,_6664 )] = _ptr__6611[safe_add( _6605,_6680 )];
                            _ptr__6661[safe_add( _6658,_6664 )] = _ptr__6613[safe_add( _6607,_6680 )];
                            ++ _6664;
                          }
                        }
                        _ptr__6659[safe_add( _6656,_6664 )] = 2;
                        _ptr__6661[safe_add( _6658,_6664 )] = 0.5;
                        ++ _6664;
                        _ptr__6659[safe_add( _6656,_6664 )] = 5;
                        ++ _6664;
                        _ptr__6659[safe_add( safe_add( _6657,_6663 ),(int)1 )] = _6664;
                        ++ _6663;
                      }
                    }
                  }
                }
                _ptr__6660[safe_add( _6654,_6665 )] = _ptr__6612[safe_add( _6609,_6667 )];
                _ptr__6659[safe_add( safe_add( _6651,_6665 ),(int)1 )] = _6663;
                ++ _6665;
                ++ _6666;
                ++ _6667;
              }
            }
            else
            {
              {
                if ((_6624 == (int)0))
                {
                  {
                    int _11711 = _ptr__6611[safe_add( _6604,_6667 )];
                    int _11712 = _ptr__6611[safe_add( safe_add( _6604,_6667 ),(int)1 )];
                    for (int _6681 = _11711; _6681 < _11712; ++_6681)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6681 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = _ptr__6613[safe_add( _6610,_6681 )];
                        ++ _6663;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11713 = _ptr__6611[safe_add( _6604,_6667 )];
                    int _11714 = _ptr__6611[safe_add( safe_add( _6604,_6667 ),(int)1 )];
                    for (int _6682 = _11713; _6682 < _11714; ++_6682)
                    {
                      {
                        _ptr__6660[safe_add( _6652,_6663 )] = _ptr__6612[safe_add( _6608,_6682 )];
                        _ptr__6661[safe_add( _6655,_6663 )] = _ptr__6613[safe_add( _6610,_6682 )];
                        int _11715 = _ptr__6611[safe_add( _6606,_6682 )];
                        int _11716 = _ptr__6611[safe_add( safe_add( _6606,_6682 ),(int)1 )];
                        for (int _6683 = _11715; _6683 < _11716; ++_6683)
                        {
                          {
                            _ptr__6659[safe_add( _6656,_6664 )] = _ptr__6611[safe_add( _6605,_6683 )];
                            _ptr__6661[safe_add( _6658,_6664 )] = _ptr__6613[safe_add( _6607,_6683 )];
                            ++ _6664;
                          }
                        }
                        _ptr__6659[safe_add( safe_add( _6657,_6663 ),(int)1 )] = _6664;
                        ++ _6663;
                      }
                    }
                  }
                }
                _ptr__6660[safe_add( _6654,_6665 )] = _ptr__6612[safe_add( _6609,_6667 )];
                _ptr__6659[safe_add( safe_add( _6651,_6665 ),(int)1 )] = _6663;
                ++ _6665;
                ++ _6666;
                ++ _6667;
              }
            }
          }
        }
        if ((_6663 != _6623))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nzi"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      _6622 = _6600;
      _6623 = safe_mul( _6599,(int)2 );
      int _11717;
      bool _11718 = (_6601 > (int)0);
      if (_11718)
      {
        _11717 = safe_add( safe_mul( (int)2,_6601 ),safe_mul( safe_mul( (int)2,(int)2 ),_6599 ) );
      }
      else
      {
        _11717 = (int)0;
      }
      _6624 = _11717;
      int _11719 = (int)0;
      int _11720 = _ptr__6625[(int)0];
      for (int _6684 = _11719; _6684 < _11720; ++_6684)
      {
        {
          int _11721 = (int)0;
          int _11722 = _ptr__6625[(int)2];
          for (int _6685 = _11721; _6685 < _11722; ++_6685)
          {
            {
              int _11723 = (int)0;
              int _11724 = _ptr__6625[(int)4];
              for (int _6686 = _11723; _6686 < _11724; ++_6686)
              {
                {
                  int _11725 = (int)0;
                  int _11726 = _ptr__6625[(int)1];
                  for (int _6687 = _11725; _6687 < _11726; ++_6687)
                  {
                    {
                      long long _6688 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__6627[(int)0],_6684 ),safe_mul( _ptr__6627[(int)1],_6687 ) ),safe_mul( _ptr__6627[(int)2],_6685 ) ),safe_mul( _ptr__6627[(int)3],_6687 ) ),safe_mul( _ptr__6627[(int)4],_6686 ) );
                      _6623 -= (_ptr__6611[safe_add( safe_add( _6604,_6688 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6688 )]);
                      if ((_6601 > (int)0))
                      {
                        {
                          _6624 -= safe_add( (_ptr__6611[safe_add( _6606,_ptr__6611[safe_add( safe_add( _6604,_6688 ),(int)1 )] )] - _ptr__6611[safe_add( _6606,_ptr__6611[safe_add( _6604,_6688 )] )]),safe_mul( safe_mul( (int)2,(int)2 ),(_ptr__6611[safe_add( safe_add( _6604,_6688 ),(int)1 )] - _ptr__6611[safe_add( _6604,_6688 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
      _6594->alloc_expr(_6598,_6622,_6623,false,_6624);
      int _6689 = mosek::fusion::p_WorkStack::_get_impl(_6594)->ptr_base;
      int _6690 = mosek::fusion::p_WorkStack::_get_impl(_6594)->shape_base;
      int _6691 = mosek::fusion::p_WorkStack::_get_impl(_6594)->code_base;
      int _6692 = mosek::fusion::p_WorkStack::_get_impl(_6594)->codeptr_base;
      int _6693 = mosek::fusion::p_WorkStack::_get_impl(_6594)->nidxs_base;
      int _6694 = mosek::fusion::p_WorkStack::_get_impl(_6594)->sp_base;
      int _6695 = mosek::fusion::p_WorkStack::_get_impl(_6594)->cof_base;
      int _6696 = mosek::fusion::p_WorkStack::_get_impl(_6594)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6697 = mosek::fusion::p_WorkStack::_get_impl(_6594)->i32;
      _checked_ptr_1<int> _ptr__6697(_6697 ? _6697->raw() : nullptr,_6697 ? _6697->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6698 = mosek::fusion::p_WorkStack::_get_impl(_6594)->i64;
      _checked_ptr_1<long long> _ptr__6698(_6698 ? _6698->raw() : nullptr,_6698 ? _6698->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6699 = mosek::fusion::p_WorkStack::_get_impl(_6594)->f64;
      _checked_ptr_1<double> _ptr__6699(_6699 ? _6699->raw() : nullptr,_6699 ? _6699->size(0) : 0);
      int _6700 = (int)0;
      int _6701 = (int)0;
      int _6702 = (int)0;
      int _11727 = (int)0;
      int _11728 = _6598;
      for (int _6703 = _11727; _6703 < _11728; ++_6703)
      {
        {
          _ptr__6697[safe_add( _6690,_6703 )] = _ptr__6611[safe_add( _6603,_6703 )];
        }
      }
      _ptr__6697[_6689] = (int)0;
      if ((_6624 > (int)0))
      {
        {
          _ptr__6697[_6692] = (int)0;
        }
      }
      {}
      int _6704 = (int)0;
      int _11729 = (int)0;
      int _11730 = _ptr__6625[(int)0];
      for (int _6705 = _11729; _6705 < _11730; ++_6705)
      {
        {
          int _11731 = (int)0;
          int _11732 = _ptr__6625[(int)1];
          for (int _6706 = _11731; _6706 < _11732; ++_6706)
          {
            {
              int _11733 = (int)0;
              int _11734 = _ptr__6625[(int)2];
              for (int _6707 = _11733; _6707 < _11734; ++_6707)
              {
                {
                  int _11735 = (int)0;
                  int _11736 = _ptr__6625[(int)3];
                  for (int _6708 = _11735; _6708 < _11736; ++_6708)
                  {
                    {
                      int _11737 = (int)0;
                      int _11738 = _ptr__6625[(int)4];
                      for (int _6709 = _11737; _6709 < _11738; ++_6709)
                      {
                        {
                          if ((_6706 == _6708))
                          {
                            {
                              if ((_6624 == (int)0))
                              {
                                {
                                  int _11739 = _ptr__6611[safe_add( _6604,_6704 )];
                                  int _11740 = _ptr__6611[safe_add( safe_add( _6604,_6704 ),(int)1 )];
                                  for (int _6710 = _11739; _6710 < _11740; ++_6710)
                                  {
                                    {
                                      _ptr__6698[safe_add( _6693,_6700 )] = _ptr__6612[safe_add( _6608,_6710 )];
                                      _ptr__6699[safe_add( _6695,_6700 )] = _ptr__6613[safe_add( _6610,_6710 )];
                                      ++ _6700;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11741 = _ptr__6611[safe_add( _6604,_6704 )];
                                  int _11742 = _ptr__6611[safe_add( safe_add( _6604,_6704 ),(int)1 )];
                                  for (int _6711 = _11741; _6711 < _11742; ++_6711)
                                  {
                                    {
                                      _ptr__6698[safe_add( _6693,_6700 )] = _ptr__6612[safe_add( _6608,_6711 )];
                                      _ptr__6699[safe_add( _6695,_6700 )] = _ptr__6613[safe_add( _6610,_6711 )];
                                      int _11743 = _ptr__6611[safe_add( _6606,_6711 )];
                                      int _11744 = _ptr__6611[safe_add( safe_add( _6606,_6711 ),(int)1 )];
                                      for (int _6712 = _11743; _6712 < _11744; ++_6712)
                                      {
                                        {
                                          _ptr__6697[safe_add( _6691,_6702 )] = _ptr__6611[safe_add( _6605,_6712 )];
                                          _ptr__6699[safe_add( _6696,_6702 )] = _ptr__6613[safe_add( _6607,_6712 )];
                                          ++ _6702;
                                        }
                                      }
                                      _ptr__6697[safe_add( safe_add( _6692,_6700 ),(int)1 )] = _6702;
                                      ++ _6700;
                                    }
                                  }
                                }
                              }
                              _ptr__6697[safe_add( safe_add( _6689,_6701 ),(int)1 )] = _6700;
                              ++ _6704;
                            }
                          }
                          else
                          {
                            {
                              long long _6713 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6705,_ptr__6627[(int)0] ),safe_mul( _6708,_ptr__6627[(int)1] ) ),safe_mul( _6707,_ptr__6627[(int)2] ) ),safe_mul( _6706,_ptr__6627[(int)3] ) ),_6709 );
                              if ((_6624 == (int)0))
                              {
                                {
                                  int _11745 = _ptr__6611[safe_add( _6604,_6704 )];
                                  int _11746 = _ptr__6611[safe_add( safe_add( _6604,_6704 ),(int)1 )];
                                  for (int _6714 = _11745; _6714 < _11746; ++_6714)
                                  {
                                    {
                                      _ptr__6698[safe_add( _6693,_6700 )] = _ptr__6612[safe_add( _6608,_6714 )];
                                      _ptr__6699[safe_add( _6695,_6700 )] = (_ptr__6613[safe_add( _6610,_6714 )] * 0.5);
                                      ++ _6700;
                                    }
                                  }
                                  int _11747 = _ptr__6611[safe_add( _6604,_6713 )];
                                  int _11748 = _ptr__6611[safe_add( safe_add( _6604,_6713 ),(int)1 )];
                                  for (int _6715 = _11747; _6715 < _11748; ++_6715)
                                  {
                                    {
                                      _ptr__6698[safe_add( _6693,_6700 )] = _ptr__6612[safe_add( _6608,_6715 )];
                                      _ptr__6699[safe_add( _6695,_6700 )] = (_ptr__6613[safe_add( _6610,_6715 )] * 0.5);
                                      ++ _6700;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11749 = _ptr__6611[safe_add( _6604,_6704 )];
                                  int _11750 = _ptr__6611[safe_add( safe_add( _6604,_6704 ),(int)1 )];
                                  for (int _6716 = _11749; _6716 < _11750; ++_6716)
                                  {
                                    {
                                      _ptr__6698[safe_add( _6693,_6700 )] = _ptr__6612[safe_add( _6608,_6716 )];
                                      _ptr__6699[safe_add( _6695,_6700 )] = (_ptr__6613[safe_add( _6610,_6716 )] * 0.5);
                                      int _11751 = _ptr__6611[safe_add( _6606,_6716 )];
                                      int _11752 = _ptr__6611[safe_add( safe_add( _6606,_6716 ),(int)1 )];
                                      for (int _6717 = _11751; _6717 < _11752; ++_6717)
                                      {
                                        {
                                          _ptr__6697[safe_add( _6691,_6702 )] = _ptr__6611[safe_add( _6605,_6717 )];
                                          _ptr__6699[safe_add( _6696,_6702 )] = _ptr__6613[safe_add( _6607,_6717 )];
                                          ++ _6702;
                                        }
                                      }
                                      _ptr__6697[safe_add( _6691,_6702 )] = 2;
                                      _ptr__6699[safe_add( _6696,_6702 )] = 0.5;
                                      ++ _6702;
                                      _ptr__6697[safe_add( _6691,_6702 )] = 5;
                                      ++ _6702;
                                      _ptr__6697[safe_add( safe_add( _6692,_6700 ),(int)1 )] = _6702;
                                      ++ _6700;
                                    }
                                  }
                                  int _11753 = _ptr__6611[safe_add( _6604,_6713 )];
                                  int _11754 = _ptr__6611[safe_add( safe_add( _6604,_6713 ),(int)1 )];
                                  for (int _6718 = _11753; _6718 < _11754; ++_6718)
                                  {
                                    {
                                      _ptr__6698[safe_add( _6693,_6700 )] = _ptr__6612[safe_add( _6608,_6718 )];
                                      _ptr__6699[safe_add( _6695,_6700 )] = (_ptr__6613[safe_add( _6610,_6718 )] * 0.5);
                                      int _11755 = _ptr__6611[safe_add( _6606,_6718 )];
                                      int _11756 = _ptr__6611[safe_add( safe_add( _6606,_6718 ),(int)1 )];
                                      for (int _6719 = _11755; _6719 < _11756; ++_6719)
                                      {
                                        {
                                          _ptr__6697[safe_add( _6691,_6702 )] = _ptr__6611[safe_add( _6605,_6719 )];
                                          _ptr__6699[safe_add( _6696,_6702 )] = _ptr__6613[safe_add( _6607,_6719 )];
                                          ++ _6702;
                                        }
                                      }
                                      _ptr__6697[safe_add( _6691,_6702 )] = 2;
                                      _ptr__6699[safe_add( _6696,_6702 )] = 0.5;
                                      ++ _6702;
                                      _ptr__6697[safe_add( _6691,_6702 )] = 5;
                                      ++ _6702;
                                      _ptr__6697[safe_add( safe_add( _6692,_6700 ),(int)1 )] = _6702;
                                      ++ _6700;
                                    }
                                  }
                                }
                              }
                              _ptr__6697[safe_add( safe_add( _6689,_6701 ),(int)1 )] = _6700;
                              ++ _6704;
                            }
                          }
                          ++ _6701;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6700 != _6623))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
        }
      }
      {}
      if ((_6701 != _6622))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  _6596->clear();
  _6594->peek_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_6594)->nnz != ((*mosek::fusion::p_WorkStack::_get_impl(_6594)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6594)->ptr_base,mosek::fusion::p_WorkStack::_get_impl(_6594)->nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
  if ((((*mosek::fusion::p_WorkStack::_get_impl(_6594)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6594)->ptr_base)) != (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
}
std::string mosek::fusion::ExprSymmetrize :: toString() { return mosek::fusion::p_ExprSymmetrize::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSymmetrize::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSymmetrize(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6720){ return new mosek::fusion::ExprCondense(_6720); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6720) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_6720); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6720){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6720->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _6720;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6721,monty::rc_ptr< ::mosek::fusion::WorkStack > _6722,monty::rc_ptr< ::mosek::fusion::WorkStack > _6723) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_6721,_6722,_6723); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6721,monty::rc_ptr< ::mosek::fusion::WorkStack > _6722,monty::rc_ptr< ::mosek::fusion::WorkStack > _6723){
  expr->eval(_6721,_6722,_6723);
  _6721->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_6721)->hassp)
  {
    {
      int _6724 = _6721->popi32();
      _6721->popi32(_6724);
      int _6725 = _6721->popi32();
      int _6726 = _6721->popi32();
      _6721->popi32();
      _6721->popi64(_6725);
      _6721->pushi32((int)0);
      _6721->pushi32(_6726);
      _6721->pushi32(_6725);
      _6721->pushi32(_6725);
      _6721->pushi32((int)1);
      _6721->peek_expr();
    }
  }
  {}
}
std::string mosek::fusion::ExprCondense :: toString() { return mosek::fusion::p_ExprCondense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCondense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCondense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6727){ return new mosek::fusion::ExprFromVar(_6727); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6727) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_6727); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6727){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6727->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _6727;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6728,monty::rc_ptr< ::mosek::fusion::WorkStack > _6729,monty::rc_ptr< ::mosek::fusion::WorkStack > _6730) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_6728,_6729,_6730); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6728,monty::rc_ptr< ::mosek::fusion::WorkStack > _6729,monty::rc_ptr< ::mosek::fusion::WorkStack > _6730){
  std::shared_ptr< monty::ndarray< int,1 > > _6731 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6731(_6731 ? _6731->raw() : nullptr,_6731 ? _6731->size(0) : 0);
  long long _6732 = ::mosek::fusion::p_Set::size(_6731);
  int _6733 = x->numInst();
  int _6734 = _6733;
  bool _6735 = (_6732 > _6733);
  _6728->alloc_expr((int)((_6731)->size(0)),_6733,_6734,_6735);
  int _6736 = mosek::fusion::p_WorkStack::_get_impl(_6728)->ptr_base;
  int _6737 = mosek::fusion::p_WorkStack::_get_impl(_6728)->nidxs_base;
  int _6738 = mosek::fusion::p_WorkStack::_get_impl(_6728)->sp_base;
  int _6739 = mosek::fusion::p_WorkStack::_get_impl(_6728)->cof_base;
  int _6740 = mosek::fusion::p_WorkStack::_get_impl(_6728)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6741 = mosek::fusion::p_WorkStack::_get_impl(_6728)->i32;
  _checked_ptr_1<int> _ptr__6741(_6741 ? _6741->raw() : nullptr,_6741 ? _6741->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6742 = mosek::fusion::p_WorkStack::_get_impl(_6728)->i64;
  _checked_ptr_1<long long> _ptr__6742(_6742 ? _6742->raw() : nullptr,_6742 ? _6742->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6743 = mosek::fusion::p_WorkStack::_get_impl(_6728)->f64;
  _checked_ptr_1<double> _ptr__6743(_6743 ? _6743->raw() : nullptr,_6743 ? _6743->size(0) : 0);
  int _11757 = (int)0;
  int _11758 = (int)((_6731)->size(0));
  for (int _6744 = _11757; _6744 < _11758; ++_6744)
  {
    {
      _ptr__6741[safe_add( _6740,_6744 )] = _ptr__6731[_6744];
    }
  }
  {
    int _11759 = (int)0;
    int _11760 = safe_add( _6733,(int)1 );
    for (int _6745 = _11759; _6745 < _11760; ++_6745)
    {
      {
        _ptr__6741[safe_add( _6736,_6745 )] = _6745;
      }
    }
    int _11761 = (int)0;
    int _11762 = _6734;
    for (int _6746 = _11761; _6746 < _11762; ++_6746)
    {
      {
        _ptr__6743[safe_add( _6739,_6746 )] = 1.0;
      }
    }
  }
  if (_6735)
  {
    {
      x->inst(_6738,_6742,_6737,_6742);
    }
  }
  else
  {
    {
      x->inst(_6737,_6742);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6747,    monty::rc_ptr< ::mosek::fusion::Expression > _6748){ return new mosek::fusion::ExprReshape(_6747,_6748); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6747,    monty::rc_ptr< ::mosek::fusion::Expression > _6748) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_6747,_6748); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6747,    monty::rc_ptr< ::mosek::fusion::Expression > _6748){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6747(_6747 ? _6747->raw() : nullptr, _6747 ? _6747->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6747));
    long long _6749 = _6748->getSize();
    if ((::mosek::fusion::p_Set::size(_6747) != _6748->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _6748;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6750,monty::rc_ptr< ::mosek::fusion::WorkStack > _6751,monty::rc_ptr< ::mosek::fusion::WorkStack > _6752) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_6750,_6751,_6752); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6750,monty::rc_ptr< ::mosek::fusion::WorkStack > _6751,monty::rc_ptr< ::mosek::fusion::WorkStack > _6752){
  std::shared_ptr< monty::ndarray< int,1 > > _6753 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6753(_6753 ? _6753->raw() : nullptr,_6753 ? _6753->size(0) : 0);
  e->eval(_6750,_6751,_6752);
  _6750->peek_expr();
  int _6754 = _6750->popi32();
  long long _6755 = (int)1;
  int _11763 = (int)0;
  int _11764 = _6754;
  for (int _6756 = _11763; _6756 < _11764; ++_6756)
  {
    {
      _6755 *= _6750->popi32();
    }
  }
  if ((_6755 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _11765 = (int)0;
  int _11766 = (int)((_6753)->size(0));
  for (int _6757 = _11765; _6757 < _11766; ++_6757)
  {
    {
      _6750->pushi32(_ptr__6753[_6757]);
    }
  }
  _6750->pushi32((int)((_6753)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6758 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _6758->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _11767 = (int)1;
      int _11768 = _pubthis->getND();
      for (int _6759 = _11767; _6759 < _11768; ++_6759)
      {
        {
          _6758->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_6759));
        }
      }
    }
  }
  {}
  _6758->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _6758->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6760){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6760(_6760 ? _6760->raw() : nullptr, _6760 ? _6760->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _6760;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
void mosek::fusion::p_BaseExpression::printStack(monty::rc_ptr< ::mosek::fusion::WorkStack > _6761){
  std::shared_ptr< monty::ndarray< int,1 > > _6762 = mosek::fusion::p_WorkStack::_get_impl(_6761)->i32;
  _checked_ptr_1<int> _ptr__6762(_6762 ? _6762->raw() : nullptr,_6762 ? _6762->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6763 = mosek::fusion::p_WorkStack::_get_impl(_6761)->i64;
  _checked_ptr_1<long long> _ptr__6763(_6763 ? _6763->raw() : nullptr,_6763 ? _6763->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6764 = mosek::fusion::p_WorkStack::_get_impl(_6761)->f64;
  _checked_ptr_1<double> _ptr__6764(_6764 ? _6764->raw() : nullptr,_6764 ? _6764->size(0) : 0);
  int _6765 = mosek::fusion::p_WorkStack::_get_impl(_6761)->ptr_base;
  int _6766 = mosek::fusion::p_WorkStack::_get_impl(_6761)->nidxs_base;
  int _6767 = mosek::fusion::p_WorkStack::_get_impl(_6761)->cof_base;
  int _6768 = mosek::fusion::p_WorkStack::_get_impl(_6761)->shape_base;
  int _6769 = mosek::fusion::p_WorkStack::_get_impl(_6761)->codeptr_base;
  int _6770 = mosek::fusion::p_WorkStack::_get_impl(_6761)->code_base;
  int _6771 = mosek::fusion::p_WorkStack::_get_impl(_6761)->cconst_base;
  int _6772 = mosek::fusion::p_WorkStack::_get_impl(_6761)->sp_base;
  int _6773 = mosek::fusion::p_WorkStack::_get_impl(_6761)->nelem;
  int _6774 = mosek::fusion::p_WorkStack::_get_impl(_6761)->nnz;
  int _6775 = mosek::fusion::p_WorkStack::_get_impl(_6761)->ncodeatom;
  int _6776 = mosek::fusion::p_WorkStack::_get_impl(_6761)->nd;
  bool _6777 = mosek::fusion::p_WorkStack::_get_impl(_6761)->hassp;
  std::vector<int> _11769;
  for (int _6778 = (int)0, _11770 = _6776; _6778 < _11770 ; ++_6778)
  {
    _11769.push_back(_ptr__6762[safe_add( _6768,_6778 )]);
  }
  auto _11771 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11769.size()),_11769.begin(),_11769.end()));
  std::vector<int> _11772;
  for (int _6779 = (int)0, _11773 = safe_add( _6773,(int)1 ); _6779 < _11773 ; ++_6779)
  {
    _11772.push_back(_ptr__6762[safe_add( _6765,_6779 )]);
  }
  auto _11774 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11772.size()),_11772.begin(),_11772.end()));
  ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("### "))->__mosek_2fusion_2Debug__p(_pubthis->toString())->__mosek_2fusion_2Debug__p(std::string (" ###"))->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nelem     = "))->__mosek_2fusion_2Debug__p(_6773)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nnz       = "))->__mosek_2fusion_2Debug__p(_6774)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  hassp     = "))->__mosek_2fusion_2Debug__p(_6777)->__mosek_2fusion_2Debug__p(std::string (" / "))->__mosek_2fusion_2Debug__p(_ptr__6762[((mosek::fusion::p_WorkStack::_get_impl(_6761)->pi32 - _6776) - (int)4)])->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  shape     = "))->__mosek_2fusion_2Debug__p(_11771)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  ptr       = "))->__mosek_2fusion_2Debug__p(_11774)->__mosek_2fusion_2Debug__lf();
  if (mosek::fusion::p_WorkStack::_get_impl(_6761)->hassp)
  {
    {
      std::vector<long long> _11775;
      for (int _6780 = (int)0, _11776 = _6773; _6780 < _11776 ; ++_6780)
      {
        _11775.push_back(_ptr__6763[safe_add( _6772,_6780 )]);
      }
      auto _11777 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11775.size()),_11775.begin(),_11775.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  sp       = "))->__mosek_2fusion_2Debug__p(_11777)->__mosek_2fusion_2Debug__lf();
    }
  }
  {}
  int _11778 = (int)0;
  int _11779 = _6773;
  for (int _6781 = _11778; _6781 < _11779; ++_6781)
  {
    {
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  row["))->__mosek_2fusion_2Debug__p(_6781)->__mosek_2fusion_2Debug__p(std::string ("]"))->__mosek_2fusion_2Debug__lf();
      std::vector<long long> _11780;
      for (int _6782 = _ptr__6762[safe_add( _6765,_6781 )], _11781 = _ptr__6762[safe_add( safe_add( _6765,_6781 ),(int)1 )]; _6782 < _11781 ; ++_6782)
      {
        _11780.push_back(_ptr__6763[safe_add( _6766,_6782 )]);
      }
      auto _11782 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11780.size()),_11780.begin(),_11780.end()));
      std::vector<double> _11783;
      for (int _6783 = _ptr__6762[safe_add( _6765,_6781 )], _11784 = _ptr__6762[safe_add( safe_add( _6765,_6781 ),(int)1 )]; _6783 < _11784 ; ++_6783)
      {
        _11783.push_back(_ptr__6764[safe_add( _6767,_6783 )]);
      }
      auto _11785 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11783.size()),_11783.begin(),_11783.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("    nidx : "))->__mosek_2fusion_2Debug__p(_11782)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("    cof  : "))->__mosek_2fusion_2Debug__p(_11785)->__mosek_2fusion_2Debug__lf();
      if ((_6775 > (int)0))
      {
        {
          int _11786 = _ptr__6762[safe_add( _6765,_6781 )];
          int _11787 = _ptr__6762[safe_add( safe_add( _6765,_6781 ),(int)1 )];
          for (int _6784 = _11786; _6784 < _11787; ++_6784)
          {
            {
              std::vector<int> _11788;
              for (int _6785 = _ptr__6762[safe_add( _6769,_6784 )], _11789 = _ptr__6762[safe_add( safe_add( _6769,_6784 ),(int)1 )]; _6785 < _11789 ; ++_6785)
              {
                _11788.push_back(_ptr__6762[safe_add( _6770,_6785 )]);
              }
              auto _11790 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11788.size()),_11788.begin(),_11788.end()));
              std::vector<double> _11791;
              for (int _6786 = _ptr__6762[safe_add( _6769,_6784 )], _11792 = _ptr__6762[safe_add( safe_add( _6769,_6784 ),(int)1 )]; _6786 < _11792 ; ++_6786)
              {
                _11791.push_back(_ptr__6764[safe_add( _6771,_6786 )]);
              }
              auto _11793 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11791.size()),_11791.begin(),_11791.end()));
              ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("      code["))->__mosek_2fusion_2Debug__p(_ptr__6763[safe_add( _6766,_6784 )])->__mosek_2fusion_2Debug__p(std::string ("] "))->__mosek_2fusion_2Debug__p(_11790)->__mosek_2fusion_2Debug__p(_11793)->__mosek_2fusion_2Debug__lf();
            }
          }
        }
      }
      {}
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6790) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _6790) { return __mosek_2fusion_2BaseExpression__pick(_6790); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6790) { return __mosek_2fusion_2BaseExpression__pick(_6790); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6790){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6790)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6791) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6791); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _6791) { return __mosek_2fusion_2BaseExpression__pick(_6791); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6791) { return __mosek_2fusion_2BaseExpression__pick(_6791); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6791){
  _checked_ptr_1<int> _ptr__6791(_6791 ? _6791->raw() : nullptr, _6791 ? _6791->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6792 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_6791)->size(0)),(int)1)));
  int _11794 = (int)0;
  int _11795 = (int)((_6791)->size(0));
  for (int _6793 = _11794; _6793 < _11795; ++_6793)
  {
    {
      ((*_6792)(_6793,(int)0)) = _ptr__6791[_6793];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6792)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6794) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6794); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _6794) { return __mosek_2fusion_2BaseExpression__index(_6794); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _6794) { return __mosek_2fusion_2BaseExpression__index(_6794); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6794){
  _checked_ptr_1<int> _ptr__6794(_6794 ? _6794->raw() : nullptr, _6794 ? _6794->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6795 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_6794)->size(0)))));
  int _11796 = (int)0;
  int _11797 = (int)((_6794)->size(0));
  for (int _6796 = _11796; _6796 < _11797; ++_6796)
  {
    {
      ((*_6795)((int)0,_6796)) = _ptr__6794[_6796];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6795)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _6797) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6797); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _6797) { return __mosek_2fusion_2BaseExpression__index(_6797); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _6797) { return __mosek_2fusion_2BaseExpression__index(_6797); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _6797){
  std::shared_ptr< monty::ndarray< int,2 > > _6798 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_6798)((int)0,(int)0)) = _6797;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6798)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6799,std::shared_ptr< monty::ndarray< int,1 > > _6800) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6799,_6800); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _6799,std::shared_ptr< monty::ndarray< int,1 > > _6800) { return __mosek_2fusion_2BaseExpression__slice(_6799,_6800); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6799,std::shared_ptr< monty::ndarray< int,1 > > _6800) { return __mosek_2fusion_2BaseExpression__slice(_6799,_6800); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6799,std::shared_ptr< monty::ndarray< int,1 > > _6800){
  _checked_ptr_1<int> _ptr__6799(_6799 ? _6799->raw() : nullptr, _6799 ? _6799->size(0) : 0);
  _checked_ptr_1<int> _ptr__6800(_6800 ? _6800->raw() : nullptr, _6800 ? _6800->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6799,_6800)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _6801,int _6802) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6801,_6802); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _6801,int _6802) { return __mosek_2fusion_2BaseExpression__slice(_6801,_6802); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _6801,int _6802) { return __mosek_2fusion_2BaseExpression__slice(_6801,_6802); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _6801,int _6802){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6801)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6802)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _6803) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_6803); }int mosek::fusion::p_BaseExpression::getDim(int _6803){
  return ((*shape)(_6803));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_code_base() { return _impl->code_base; }
void mosek::fusion::WorkStack::set_code_base(int _val) { _impl->code_base = _val; }
int mosek::fusion::WorkStack::get_cconst_base() { return _impl->cconst_base; }
void mosek::fusion::WorkStack::set_cconst_base(int _val) { _impl->cconst_base = _val; }
int mosek::fusion::WorkStack::get_codeptr_base() { return _impl->codeptr_base; }
void mosek::fusion::WorkStack::set_codeptr_base(int _val) { _impl->codeptr_base = _val; }
int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_ncodeatom() { return _impl->ncodeatom; }
void mosek::fusion::WorkStack::set_ncodeatom(int _val) { _impl->ncodeatom = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ncodeatom = (int)0;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    cof_base = (int)0;
    cconst_base = (int)0;
    code_base = (int)0;
    codeptr_base = (int)0;
  }
}std::string mosek::fusion::WorkStack :: formatCurrent() { return mosek::fusion::p_WorkStack::_get_impl(this)->formatCurrent(); }std::string mosek::fusion::p_WorkStack::formatCurrent(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6804 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  std::vector<int> _11798;
  for (int _6805 = (int)0, _11799 = nd; _6805 < _11799 ; ++_6805)
  {
    _11798.push_back(((*i32)(safe_add( shape_base,_6805 ))));
  }
  auto _11800 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11798.size()),_11798.begin(),_11798.end()));
  std::vector<int> _11801;
  for (int _6806 = (int)0, _11802 = safe_add( nelem,(int)1 ); _6806 < _11802 ; ++_6806)
  {
    _11801.push_back(((*i32)(safe_add( ptr_base,_6806 ))));
  }
  auto _11803 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11801.size()),_11801.begin(),_11801.end()));
  _6804->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nelem     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nelem)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nnz       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nnz)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  hassp     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" / "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  shape     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11800)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  ptr       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11803)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
  if ((ncodeatom > (int)0))
  {
    {
      std::vector<int> _11804;
      for (int _6807 = (int)0, _11805 = safe_add( nnz,(int)1 ); _6807 < _11805 ; ++_6807)
      {
        _11804.push_back(((*i32)(safe_add( codeptr_base,_6807 ))));
      }
      auto _11806 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11804.size()),_11804.begin(),_11804.end()));
      _6804->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  codeptr   = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11806)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  if (hassp)
  {
    {
      std::vector<long long> _11807;
      for (int _6808 = (int)0, _11808 = nelem; _6808 < _11808 ; ++_6808)
      {
        _11807.push_back(((*i64)(safe_add( sp_base,_6808 ))));
      }
      auto _11809 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11807.size()),_11807.begin(),_11807.end()));
      _6804->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  sp        = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11809)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  int _11810 = (int)0;
  int _11811 = nelem;
  for (int _6809 = _11810; _6809 < _11811; ++_6809)
  {
    {
      std::vector<long long> _11812;
      for (int _6810 = ((*i32)(safe_add( ptr_base,_6809 ))), _11813 = ((*i32)(safe_add( safe_add( ptr_base,_6809 ),(int)1 ))); _6810 < _11813 ; ++_6810)
      {
        _11812.push_back(((*i64)(safe_add( nidxs_base,_6810 ))));
      }
      auto _11814 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11812.size()),_11812.begin(),_11812.end()));
      std::vector<double> _11815;
      for (int _6811 = ((*i32)(safe_add( ptr_base,_6809 ))), _11816 = ((*i32)(safe_add( safe_add( ptr_base,_6809 ),(int)1 ))); _6811 < _11816 ; ++_6811)
      {
        _11815.push_back(((*f64)(safe_add( cof_base,_6811 ))));
      }
      auto _11817 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11815.size()),_11815.begin(),_11815.end()));
      _6804->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  row["))->__mosek_2fusion_2Utils_2StringBuffer__a(_6809)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    nidx : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11814)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    cof  : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11817)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
      if ((ncodeatom > (int)0))
      {
        {
          int _11818 = ((*i32)(safe_add( ptr_base,_6809 )));
          int _11819 = ((*i32)(safe_add( safe_add( ptr_base,_6809 ),(int)1 )));
          for (int _6812 = _11818; _6812 < _11819; ++_6812)
          {
            {
              std::vector<int> _11820;
              for (int _6813 = ((*i32)(safe_add( codeptr_base,_6812 ))), _11821 = ((*i32)(safe_add( safe_add( codeptr_base,_6812 ),(int)1 ))); _6813 < _11821 ; ++_6813)
              {
                _11820.push_back(((*i32)(safe_add( code_base,_6813 ))));
              }
              auto _11822 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11820.size()),_11820.begin(),_11820.end()));
              std::vector<double> _11823;
              for (int _6814 = ((*i32)(safe_add( codeptr_base,_6812 ))), _11824 = ((*i32)(safe_add( safe_add( codeptr_base,_6812 ),(int)1 ))); _6814 < _11824 ; ++_6814)
              {
                _11823.push_back(((*f64)(safe_add( cconst_base,_6814 ))));
              }
              auto _11825 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11823.size()),_11823.begin(),_11823.end()));
              _6804->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("      code["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*i64)(safe_add( nidxs_base,_6812 ))))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11822)->__mosek_2fusion_2Utils_2StringBuffer__a(_11825)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
            }
          }
        }
      }
      {}
    }
  }
  return _6804->toString();
}
bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _6815) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_6815); }int mosek::fusion::p_WorkStack::peek_dim(int _6815){
  return _pubthis->peeki32(safe_add( _6815,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _6816,int _6817,int _6818,bool _6819) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6816,_6817,_6818,_6819); }void mosek::fusion::p_WorkStack::alloc_expr(int _6816,int _6817,int _6818,bool _6819){
  _pubthis->alloc_expr(_6816,_6817,_6818,_6819,(int)0);
}
void mosek::fusion::WorkStack :: alloc_expr(int _6820,int _6821,int _6822,bool _6823,int _6824) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6820,_6821,_6822,_6823,_6824); }void mosek::fusion::p_WorkStack::alloc_expr(int _6820,int _6821,int _6822,bool _6823,int _6824){
  cof_base = _pubthis->allocf64(_6822);
  cconst_base = _pubthis->allocf64(_6824);
  nidxs_base = _pubthis->alloci64(_6822);
  int _11826;
  bool _11827 = _6823;
  if (_11827)
  {
    _11826 = _pubthis->alloci64(_6821);
  }
  else
  {
    _11826 = (-(int)9999);
  }
  sp_base = _11826;
  code_base = _pubthis->alloci32(_6824);
  int _11828;
  bool _11829 = (_6824 > (int)0);
  if (_11829)
  {
    _11828 = _pubthis->alloci32(safe_add( _6822,(int)1 ));
  }
  else
  {
    _11828 = (-(int)9999);
  }
  codeptr_base = _11828;
  ptr_base = _pubthis->alloci32(safe_add( _6821,(int)1 ));
  _pubthis->pushi32(_6824);
  int _11830;
  bool _11831 = _6823;
  if (_11831)
  {
    _11830 = (int)1;
  }
  else
  {
    _11830 = (int)0;
  }
  _pubthis->pushi32(_11830);
  _pubthis->pushi32(_6822);
  _pubthis->pushi32(_6821);
  shape_base = _pubthis->alloci32(_6820);
  _pubthis->pushi32(_6820);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->ncodeatom = _6824;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _6820;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _6821;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _6822;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _6823;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ncodeatom = _pubthis->popi32();
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _11832;
  bool _11833 = (ncodeatom > (int)0);
  if (_11833)
  {
    _11832 = _pubthis->popi32(safe_add( nnz,(int)1 ));
  }
  else
  {
    _11832 = (-(int)9999);
  }
  codeptr_base = _11832;
  code_base = _pubthis->popi32(ncodeatom);
  int _11834;
  bool _11835 = hassp;
  if (_11835)
  {
    _11834 = _pubthis->popi64(nelem);
  }
  else
  {
    _11834 = (-(int)9999);
  }
  sp_base = _11834;
  nidxs_base = _pubthis->popi64(nnz);
  cconst_base = _pubthis->popf64(ncodeatom);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6825) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_6825); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6825){
  int _6826 = pi32;
  int _6827 = pi64;
  int _6828 = pf64;
  _pubthis->pop_expr();
  int _6829 = _6825->alloci32((_6826 - pi32));
  int _6830 = _6825->alloci64((_6827 - pi64));
  int _6831 = _6825->allocf64((_6828 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_6825)->i32,_6829,(_6826 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_6825)->i64,_6830,(_6827 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_6825)->f64,_6831,(_6828 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _6832 = pi32;
  int _6833 = pi64;
  int _6834 = pf64;
  _pubthis->pop_expr();
  pi32 = _6832;
  pi64 = _6833;
  pf64 = _6834;
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _6835 = ((*i32)((pi32 - (int)1)));
  bool _6836 = (((*i32)(((pi32 - _6835) - (int)3))) != (int)0);
  int _6837 = ((*i32)(((pi32 - _6835) - (int)1)));
  if ((!_6836))
  {
    {
      ((*i32)(((pi32 - _6835) - (int)3))) = (int)1;
      int _6838 = _pubthis->alloci64(_6837);
      int _11836 = (int)0;
      int _11837 = _6837;
      for (int _6839 = _11836; _6839 < _11837; ++_6839)
      {
        {
          ((*i64)(_6838)) = _6839;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _6840) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_6840); }int mosek::fusion::p_WorkStack::allocf64(int _6840){
  _pubthis->ensuref64(_6840);
  int _6841 = pf64;
  pf64 += _6840;
  return _6841;
}
int mosek::fusion::WorkStack :: alloci64(int _6842) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_6842); }int mosek::fusion::p_WorkStack::alloci64(int _6842){
  _pubthis->ensurei64(_6842);
  int _6843 = pi64;
  pi64 += _6842;
  return _6843;
}
int mosek::fusion::WorkStack :: alloci32(int _6844) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_6844); }int mosek::fusion::p_WorkStack::alloci32(int _6844){
  if ((_6844 > (int)0))
  {
    {
      _pubthis->ensurei32(_6844);
      int _6845 = pi32;
      pi32 += _6844;
      return _6845;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _6846) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_6846); }void mosek::fusion::p_WorkStack::pushf64(double _6846){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _6846;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _6847) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_6847); }void mosek::fusion::p_WorkStack::pushi64(long long _6847){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _6847;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _6848) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_6848); }void mosek::fusion::p_WorkStack::pushi32(int _6848){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _6848;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _6849) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_6849); }void mosek::fusion::p_WorkStack::ensuref64(int _6849){
  if ((safe_add( pf64,_6849 ) > (int)((f64)->size(0))))
  {
    {
      int _11838;
      bool _11839 = ((_6849 < (int)((f64)->size(0))) && ((int)((f64)->size(0)) < (int)0x3FFFFFFF));
      if (_11839)
      {
        _11838 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _11838 = safe_add( (int)((f64)->size(0)),_6849 );
      }
      int _6850 = _11838;
      std::shared_ptr< monty::ndarray< double,1 > > _6851 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6850)));
      _checked_ptr_1<double> _ptr__6851(_6851 ? _6851->raw() : nullptr,_6851 ? _6851->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_6851,(int)0,pf64);
      f64 = _6851;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _6852) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_6852); }void mosek::fusion::p_WorkStack::ensurei64(int _6852){
  if ((safe_add( pi64,_6852 ) > (int)((i64)->size(0))))
  {
    {
      int _11840;
      bool _11841 = ((_6852 < (int)((i64)->size(0))) && ((int)((i64)->size(0)) < (int)0x3FFFFFFF));
      if (_11841)
      {
        _11840 = (int)((i64)->size(0));
      }
      else
      {
        _11840 = _6852;
      }
      int _6853 = safe_add( (int)((i64)->size(0)),_11840 );
      std::shared_ptr< monty::ndarray< long long,1 > > _6854 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6853)));
      _checked_ptr_1<long long> _ptr__6854(_6854 ? _6854->raw() : nullptr,_6854 ? _6854->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_6854,(int)0,pi64);
      i64 = _6854;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _6855) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_6855); }void mosek::fusion::p_WorkStack::ensurei32(int _6855){
  if ((safe_add( pi32,_6855 ) > (int)((i32)->size(0))))
  {
    {
      int _11842;
      bool _11843 = ((_6855 < (int)((i32)->size(0))) && ((int)((i32)->size(0)) < (int)0x3FFFFFFF));
      if (_11843)
      {
        _11842 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _11842 = safe_add( (int)((i32)->size(0)),_6855 );
      }
      int _6856 = _11842;
      std::shared_ptr< monty::ndarray< int,1 > > _6857 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6856)));
      _checked_ptr_1<int> _ptr__6857(_6857 ? _6857->raw() : nullptr,_6857 ? _6857->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_6857,(int)0,pi32);
      i32 = _6857;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _6858) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6858); }int mosek::fusion::p_WorkStack::popf64(int _6858){
  pf64 -= _6858;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _6859) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6859); }int mosek::fusion::p_WorkStack::popi64(int _6859){
  pi64 -= _6859;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _6860) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6860); }int mosek::fusion::p_WorkStack::popi32(int _6860){
  pi32 -= _6860;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _6861,std::shared_ptr< monty::ndarray< double,1 > > _6862,int _6863) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6861,_6862,_6863); }void mosek::fusion::p_WorkStack::popf64(int _6861,std::shared_ptr< monty::ndarray< double,1 > > _6862,int _6863){
  _checked_ptr_1<double> _ptr__6862(_6862 ? _6862->raw() : nullptr, _6862 ? _6862->size(0) : 0);
  pf64 -= _6861;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_6862,_6863,_6861);
}
void mosek::fusion::WorkStack :: popi64(int _6864,std::shared_ptr< monty::ndarray< long long,1 > > _6865,int _6866) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6864,_6865,_6866); }void mosek::fusion::p_WorkStack::popi64(int _6864,std::shared_ptr< monty::ndarray< long long,1 > > _6865,int _6866){
  _checked_ptr_1<long long> _ptr__6865(_6865 ? _6865->raw() : nullptr, _6865 ? _6865->size(0) : 0);
  pi64 -= _6864;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_6865,_6866,_6864);
}
void mosek::fusion::WorkStack :: popi32(int _6867,std::shared_ptr< monty::ndarray< int,1 > > _6868,int _6869) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6867,_6868,_6869); }void mosek::fusion::p_WorkStack::popi32(int _6867,std::shared_ptr< monty::ndarray< int,1 > > _6868,int _6869){
  _checked_ptr_1<int> _ptr__6868(_6868 ? _6868->raw() : nullptr, _6868 ? _6868->size(0) : 0);
  pi32 -= _6867;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_6868,_6869,_6867);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _6870) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_6870); }double mosek::fusion::p_WorkStack::peekf64(int _6870){
  return ((*f64)(((pf64 - _6870) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _6871) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_6871); }long long mosek::fusion::p_WorkStack::peeki64(int _6871){
  return ((*i64)(((pi64 - _6871) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _6872) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_6872); }int mosek::fusion::p_WorkStack::peeki32(int _6872){
  return ((*i32)(((pi32 - _6872) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _6873,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6874,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6875,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6876){ return new mosek::fusion::SymmetricExpr(_6873,_6874,_6875,_6876); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _6873,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6874,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6875,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6876) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_6873,_6874,_6875,_6876); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _6873,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6874,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6875,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6876){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _6873;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _6874;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _6875;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _6876;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6877,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6878){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6877)->n != _6878->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11844;
  bool _11845 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6877)->b.get());
  if (_11845)
  {
    _11844 = mosek::fusion::p_SymmetricExpr::_get_impl(_6877)->b->__mosek_2fusion_2SymmetricMatrix__add(_6878);
  }
  else
  {
    _11844 = _6878;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6877)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_6877)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_6877)->xs,_11844);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6879,double _6880){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _11846;
  for (int _6881 = (int)0, _11847 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->Ms)->size(0)); _6881 < _11847 ; ++_6881)
  {
    _11846.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->Ms)(_6881))->__mosek_2fusion_2SymmetricMatrix__mul(_6880));
  }
  auto _11848 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_11846.size()),_11846.begin(),_11846.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11849;
  bool _11850 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b.get());
  if (_11850)
  {
    _11849 = mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b->__mosek_2fusion_2SymmetricMatrix__mul(_6880);
  }
  else
  {
    _11849 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->n,_11848,mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->xs,_11849);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6882,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6883){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6884 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6885 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->xs)->size(0)) ))));
  int _6886 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->Ms)->size(0));
  int _11851 = (int)0;
  int _11852 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->Ms)->size(0));
  for (int _6887 = _11851; _6887 < _11852; ++_6887)
  {
    {
      ((*_6884)(_6887)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->Ms)(_6887));
    }
  }
  int _11853 = (int)0;
  int _11854 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->Ms)->size(0));
  for (int _6888 = _11853; _6888 < _11854; ++_6888)
  {
    {
      ((*_6884)(safe_add( _6888,_6886 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->Ms)(_6888));
    }
  }
  int _6889 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->xs)->size(0));
  int _11855 = (int)0;
  int _11856 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->xs)->size(0));
  for (int _6890 = _11855; _6890 < _11856; ++_6890)
  {
    {
      ((*_6885)(_6890)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->xs)(_6890));
    }
  }
  int _11857 = (int)0;
  int _11858 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->xs)->size(0));
  for (int _6891 = _11857; _6891 < _11858; ++_6891)
  {
    {
      ((*_6885)(safe_add( _6891,_6889 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->xs)(_6891));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11859;
  bool _11860 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->b.get()));
  if (_11860)
  {
    _11859 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11861;
    bool _11862 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->b.get()));
    if (_11862)
    {
      _11861 = mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11863;
      bool _11864 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b.get());
      if (_11864)
      {
        _11863 = mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->b;
      }
      else
      {
        _11863 = mosek::fusion::p_SymmetricExpr::_get_impl(_6883)->b;
      }
      _11861 = _11863;
    }
    _11859 = _11861;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6892 = _11859;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6882)->n,_6884,_6885,_6892);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6893 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _6893->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _6893->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6894,    std::shared_ptr< monty::ndarray< long long,1 > > _6895,    std::shared_ptr< monty::ndarray< double,1 > > _6896,    std::shared_ptr< monty::ndarray< double,1 > > _6897,    std::shared_ptr< monty::ndarray< int,1 > > _6898,    std::shared_ptr< monty::ndarray< long long,1 > > _6899){ return new mosek::fusion::Expr(_6894,_6895,_6896,_6897,_6898,_6899); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6894,    std::shared_ptr< monty::ndarray< long long,1 > > _6895,    std::shared_ptr< monty::ndarray< double,1 > > _6896,    std::shared_ptr< monty::ndarray< double,1 > > _6897,    std::shared_ptr< monty::ndarray< int,1 > > _6898,    std::shared_ptr< monty::ndarray< long long,1 > > _6899) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6894,_6895,_6896,_6897,_6898,_6899); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6894,    std::shared_ptr< monty::ndarray< long long,1 > > _6895,    std::shared_ptr< monty::ndarray< double,1 > > _6896,    std::shared_ptr< monty::ndarray< double,1 > > _6897,    std::shared_ptr< monty::ndarray< int,1 > > _6898,    std::shared_ptr< monty::ndarray< long long,1 > > _6899){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6894(_6894 ? _6894->raw() : nullptr, _6894 ? _6894->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6895(_6895 ? _6895->raw() : nullptr, _6895 ? _6895->size(0) : 0);
    _checked_ptr_1<double> _ptr__6896(_6896 ? _6896->raw() : nullptr, _6896 ? _6896->size(0) : 0);
    _checked_ptr_1<double> _ptr__6897(_6897 ? _6897->raw() : nullptr, _6897 ? _6897->size(0) : 0);
    _checked_ptr_1<int> _ptr__6898(_6898 ? _6898->raw() : nullptr, _6898 ? _6898->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6899(_6899 ? _6899->raw() : nullptr, _6899 ? _6899->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _11865;
    bool _11866 = (NULL != _6898.get());
    if (_11866)
    {
      _11865 = ::mosek::fusion::Utils::Tools::arraycopy(_6898);
    }
    else
    {
      _11865 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_6894)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _11867;
    bool _11868 = (NULL != _6899.get());
    if (_11868)
    {
      _11867 = ::mosek::fusion::Utils::Tools::arraycopy(_6899);
    }
    else
    {
      _11867 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6894),::mosek::fusion::Utils::Tools::arraycopy(_6895),::mosek::fusion::Utils::Tools::arraycopy(_6896),::mosek::fusion::Utils::Tools::arraycopy(_6897),_11865,_11867,(int)1);
    int _6900 = ((int)((_6894)->size(0)) - (int)1);
    if ((_6900 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _6901 = _ptr__6894[_6900];
    if (((_6901 < (int)0) || ((_6901 != (int)((_6896)->size(0))) || (_6901 != (int)((_6895)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _6902 = true;
    bool _6903 = true;
    bool _6904 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _6905 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__6905(_6905 ? _6905->raw() : nullptr,_6905 ? _6905->size(0) : 0);
    long long _6906 = ::mosek::fusion::p_Set::size(_6905);
    {
      int _11869 = (int)0;
      int _11870 = (int)((_6905)->size(0));
      for (int _6907 = _11869; _6907 < _11870; ++_6907)
      {
        {
          _6903 = (_6903 && (_ptr__6905[_6907] >= (int)0));
        }
      }
      int _11871 = (int)0;
      int _11872 = _6900;
      for (int _6908 = _11871; _6908 < _11872; ++_6908)
      {
        {
          _6902 = (_6902 && (_ptr__6894[_6908] <= _ptr__6894[safe_add( _6908,(int)1 )]));
        }
      }
      if (((NULL != _6899.get()) && ((int)((_6899)->size(0)) > (int)0)))
      {
        {
          _6904 = ((_ptr__6899[(int)0] >= (int)0) && (_ptr__6899[(_6900 - (int)1)] < _6906));
          int _11873 = (int)0;
          int _11874 = (_6900 - (int)1);
          for (int _6909 = _11873; _6909 < _11874; ++_6909)
          {
            {
              _6904 = (_6904 && (_ptr__6899[_6909] < _ptr__6899[safe_add( _6909,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_6903))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_6902))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_6904))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6910,    std::shared_ptr< monty::ndarray< long long,1 > > _6911,    std::shared_ptr< monty::ndarray< double,1 > > _6912,    std::shared_ptr< monty::ndarray< double,1 > > _6913,    std::shared_ptr< monty::ndarray< int,1 > > _6914,    std::shared_ptr< monty::ndarray< long long,1 > > _6915,    int _6916){ return new mosek::fusion::Expr(_6910,_6911,_6912,_6913,_6914,_6915,_6916); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6910,    std::shared_ptr< monty::ndarray< long long,1 > > _6911,    std::shared_ptr< monty::ndarray< double,1 > > _6912,    std::shared_ptr< monty::ndarray< double,1 > > _6913,    std::shared_ptr< monty::ndarray< int,1 > > _6914,    std::shared_ptr< monty::ndarray< long long,1 > > _6915,    int _6916) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6910,_6911,_6912,_6913,_6914,_6915,_6916); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6910,    std::shared_ptr< monty::ndarray< long long,1 > > _6911,    std::shared_ptr< monty::ndarray< double,1 > > _6912,    std::shared_ptr< monty::ndarray< double,1 > > _6913,    std::shared_ptr< monty::ndarray< int,1 > > _6914,    std::shared_ptr< monty::ndarray< long long,1 > > _6915,    int _6916){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6910(_6910 ? _6910->raw() : nullptr, _6910 ? _6910->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6911(_6911 ? _6911->raw() : nullptr, _6911 ? _6911->size(0) : 0);
    _checked_ptr_1<double> _ptr__6912(_6912 ? _6912->raw() : nullptr, _6912 ? _6912->size(0) : 0);
    _checked_ptr_1<double> _ptr__6913(_6913 ? _6913->raw() : nullptr, _6913 ? _6913->size(0) : 0);
    _checked_ptr_1<int> _ptr__6914(_6914 ? _6914->raw() : nullptr, _6914 ? _6914->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6915(_6915 ? _6915->raw() : nullptr, _6915 ? _6915->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_6914);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _6914;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _6910;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _6911;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _6912;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _6913;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _6915;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6917){ return new mosek::fusion::Expr(_6917); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6917) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6917); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6917){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6917->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _11875 = _6917;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_11875.get()))
    {
      ::mosek::fusion::Expr::t _6918 (dynamic_cast<::mosek::fusion::Expr*>(_11875.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_6918)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_6918)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_6918)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_6918)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_6918)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_6918)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _6919 = _11875;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6920 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6921 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6922 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _6919->eval(_6922,_6921,_6920);
        int _6923 = _6922->popi32();
        int _6924 = _6922->popi32(_6923);
        int _6925 = _6922->popi32();
        int _6926 = _6922->popi32();
        bool _6927 = (_6922->popi32() != (int)0);
        int _6928 = _6922->popi32(safe_add( _6925,(int)1 ));
        int _11876;
        bool _11877 = _6927;
        if (_11877)
        {
          _11876 = _6922->popi64(_6925);
        }
        else
        {
          _11876 = (int)0;
        }
        int _6929 = _11876;
        int _6930 = _6922->popi64(_6926);
        int _6931 = _6922->popf64(_6925);
        int _6932 = _6922->popf64(_6926);
        std::shared_ptr< monty::ndarray< int,1 > > _6933 = mosek::fusion::p_WorkStack::_get_impl(_6922)->i32;
        _checked_ptr_1<int> _ptr__6933(_6933 ? _6933->raw() : nullptr,_6933 ? _6933->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _6934 = mosek::fusion::p_WorkStack::_get_impl(_6922)->i64;
        _checked_ptr_1<long long> _ptr__6934(_6934 ? _6934->raw() : nullptr,_6934 ? _6934->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _6935 = mosek::fusion::p_WorkStack::_get_impl(_6922)->f64;
        _checked_ptr_1<double> _ptr__6935(_6935 ? _6935->raw() : nullptr,_6935 ? _6935->size(0) : 0);
        std::vector<int> _11878;
        for (int _6936 = (int)0, _11879 = _6923; _6936 < _11879 ; ++_6936)
        {
          _11878.push_back(_ptr__6933[safe_add( _6924,_6936 )]);
        }
        auto _11880 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11878.size()),_11878.begin(),_11878.end()));
        shape = _11880;
        std::vector<long long> _11881;
        for (int _6937 = (int)0, _11882 = safe_add( _6925,(int)1 ); _6937 < _11882 ; ++_6937)
        {
          _11881.push_back(_ptr__6933[safe_add( _6928,_6937 )]);
        }
        auto _11883 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11881.size()),_11881.begin(),_11881.end()));
        ptrb = _11883;
        std::vector<long long> _11884;
        for (int _6938 = (int)0, _11885 = _6926; _6938 < _11885 ; ++_6938)
        {
          _11884.push_back(_ptr__6934[safe_add( _6930,_6938 )]);
        }
        auto _11886 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11884.size()),_11884.begin(),_11884.end()));
        subj = _11886;
        std::vector<double> _11887;
        for (int _6939 = (int)0, _11888 = _6926; _6939 < _11888 ; ++_6939)
        {
          _11887.push_back(_ptr__6935[safe_add( _6932,_6939 )]);
        }
        auto _11889 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11887.size()),_11887.begin(),_11887.end()));
        cof_v = _11889;
        std::vector<double> _11890;
        for (int _6940 = (int)0, _11891 = _6926; _6940 < _11891 ; ++_6940)
        {
          _11890.push_back(_ptr__6935[safe_add( _6931,_6940 )]);
        }
        auto _11892 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11890.size()),_11890.begin(),_11890.end()));
        bfix = _11892;
        std::shared_ptr< monty::ndarray< long long,1 > > _11893;
        bool _11894 = _6927;
        if (_11894)
        {
          std::vector<long long> _11895;
          for (int _6941 = (int)0, _11896 = _6926; _6941 < _11896 ; ++_6941)
          {
            _11895.push_back(_ptr__6934[safe_add( _6929,_6941 )]);
          }
          auto _11897 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11895.size()),_11895.begin(),_11895.end()));
          _11893 = _11897;
        }
        else
        {
          _11893 = nullptr;
        }
        inst = _11893;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _6942){
  _checked_ptr_1<int> _ptr__6942(_6942 ? _6942->raw() : nullptr, _6942 ? _6942->size(0) : 0);
  int _6943 = (int)1;
  int _11898 = (int)0;
  int _11899 = (int)((_6942)->size(0));
  for (int _6944 = _11898; _6944 < _11899; ++_6944)
  {
    {
      _6943 *= _ptr__6942[_6944];
    }
  }
  return _6943;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _6945){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _11900;
  for (int _6946 = (int)0, _11901 = (int)((_6945)->size(0)); _6946 < _11901 ; ++_6946)
  {
    for (int _6947 = (int)0, _11902 = (int)((((*_6945)(_6946)))->size(0)); _6947 < _11902 ; ++_6947)
    {
      _11900.push_back(((*((*_6945)(_6946)))(_6947)));
    }
  }
  auto _11903 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_11900.size()),_11900.begin(),_11900.end()));
  return _11903;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6948,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6949){
  if ((NULL == _6948.get()))
  {
    {
      return _6949;
    }
  }
  else if((NULL == _6949.get()))
  {
    {
      return _6948;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6950 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_6948)->size(0)),(int)((_6949)->size(0)) ))));
      int _11904 = (int)0;
      int _11905 = (int)((_6948)->size(0));
      for (int _6951 = _11904; _6951 < _11905; ++_6951)
      {
        {
          ((*_6950)(_6951)) = ((*_6948)(_6951));
        }
      }
      int _11906 = (int)0;
      int _11907 = (int)((_6949)->size(0));
      for (int _6952 = _11906; _6952 < _11907; ++_6952)
      {
        {
          ((*_6950)(safe_add( _6952,(int)((_6948)->size(0)) ))) = ((*_6949)(_6952));
        }
      }
      return _6950;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _6953) { return mosek::fusion::p_Expr::condense(_6953); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _6953){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_6953)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _6954) { return mosek::fusion::p_Expr::flatten(_6954); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _6954){
  if ((NULL == _6954.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  long long _6955 = _6954->getSize();
  if ((!(_6955 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum dimension size exceeded"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6954,(int)_6955);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6956,    int _6957,    int _6958) { return mosek::fusion::p_Expr::reshape(_6956,_6957,_6958); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6956,int _6957,int _6958){
  if ((NULL == _6956.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6956,::mosek::fusion::p_Set::make(_6957,_6958));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6959,    int _6960) { return mosek::fusion::p_Expr::reshape(_6959,_6960); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6959,int _6960){
  if ((NULL == _6959.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6959,::mosek::fusion::p_Set::make(_6960));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6961,    std::shared_ptr< monty::ndarray< int,1 > > _6962) { return mosek::fusion::p_Expr::reshape(_6961,_6962); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6961,std::shared_ptr< monty::ndarray< int,1 > > _6962){
  _checked_ptr_1<int> _ptr__6962(_6962 ? _6962->raw() : nullptr, _6962 ? _6962->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_6962,_6961)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _6963) { return mosek::fusion::p_Expr::zeros(_6963); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _6963){
  _checked_ptr_1<int> _ptr__6963(_6963 ? _6963->raw() : nullptr, _6963 ? _6963->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6963,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _6964) { return mosek::fusion::p_Expr::zeros(_6964); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _6964){
  return ::mosek::fusion::p_Expr::constTerm(_6964,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6965,    std::shared_ptr< monty::ndarray< int,2 > > _6966) { return mosek::fusion::p_Expr::ones(_6965,_6966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6965,std::shared_ptr< monty::ndarray< int,2 > > _6966){
  _checked_ptr_1<int> _ptr__6965(_6965 ? _6965->raw() : nullptr, _6965 ? _6965->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6965,_6966,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6967) { return mosek::fusion::p_Expr::ones(_6967); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6967){
  _checked_ptr_1<int> _ptr__6967(_6967 ? _6967->raw() : nullptr, _6967 ? _6967->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6967,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _6968) { return mosek::fusion::p_Expr::ones(_6968); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _6968){
  return ::mosek::fusion::p_Expr::constTerm(_6968,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6969) { return mosek::fusion::p_Expr::constTerm(_6969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6969){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_6969)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_6969)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_6969)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6970) { return mosek::fusion::p_Expr::constTerm(_6970); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _6970){
  int _6971 = _6970->numRows();
  int _6972 = _6970->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _6973 = ::mosek::fusion::p_Set::make(_6971,_6972);
  _checked_ptr_1<int> _ptr__6973(_6973 ? _6973->raw() : nullptr,_6973 ? _6973->size(0) : 0);
  if (_6970->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _6974 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6970->numNonzeros())));
      _checked_ptr_1<double> _ptr__6974(_6974 ? _6974->raw() : nullptr,_6974 ? _6974->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6975 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6970->numNonzeros())));
      _checked_ptr_1<int> _ptr__6975(_6975 ? _6975->raw() : nullptr,_6975 ? _6975->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6976 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6970->numNonzeros())));
      _checked_ptr_1<int> _ptr__6976(_6976 ? _6976->raw() : nullptr,_6976 ? _6976->size(0) : 0);
      _6970->getDataAsTriplets(_6976,_6975,_6974);
      std::vector<long long> _11908;
      for (int _6978 = (int)0, _11909 = (int)((_6975)->size(0)); _6978 < _11909 ; ++_6978)
      {
        _11908.push_back(safe_add( safe_mul( _ptr__6976[_6978],_6972 ),_ptr__6975[_6978] ));
      }
      auto _11910 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11908.size()),_11908.begin(),_11908.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _6977 = _11910;
      _checked_ptr_1<long long> _ptr__6977(_6977 ? _6977->raw() : nullptr,_6977 ? _6977->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6973,_6977,_6974)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6973,nullptr,_6970->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _6979) { return mosek::fusion::p_Expr::constTerm(_6979); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _6979){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_6979)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6980,    std::shared_ptr< monty::ndarray< int,2 > > _6981,    double _6982) { return mosek::fusion::p_Expr::constTerm(_6980,_6981,_6982); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6980,std::shared_ptr< monty::ndarray< int,2 > > _6981,double _6982){
  _checked_ptr_1<int> _ptr__6980(_6980 ? _6980->raw() : nullptr, _6980 ? _6980->size(0) : 0);
  int _6983 = (int)((_6981)->size(0));
  int _6984 = (int)((_6980)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6985 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6983)));
  _checked_ptr_1<long long> _ptr__6985(_6985 ? _6985->raw() : nullptr,_6985 ? _6985->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6986 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6984)));
  _checked_ptr_1<long long> _ptr__6986(_6986 ? _6986->raw() : nullptr,_6986 ? _6986->size(0) : 0);
  _ptr__6986[(_6984 - (int)1)] = (int)1;
  int _11911 = (int)1;
  int _11912 = _6984;
  for (int _6987 = _11911; _6987 < _11912; ++_6987)
  {
    {
      _ptr__6986[((_6984 - _6987) - (int)1)] = safe_mul( _ptr__6986[(_6984 - _6987)],_ptr__6980[(_6984 - _6987)] );
    }
  }
  int _11913 = (int)0;
  int _11914 = _6983;
  for (int _6988 = _11913; _6988 < _11914; ++_6988)
  {
    {
      int _11915 = (int)0;
      int _11916 = _6984;
      for (int _6989 = _11915; _6989 < _11916; ++_6989)
      {
        {
          _ptr__6985[_6988] += safe_mul( _ptr__6986[_6989],((*_6981)(_6988,_6989)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6980,_6985,_6982)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6990,    std::shared_ptr< monty::ndarray< int,2 > > _6991,    std::shared_ptr< monty::ndarray< double,1 > > _6992) { return mosek::fusion::p_Expr::constTerm(_6990,_6991,_6992); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6990,std::shared_ptr< monty::ndarray< int,2 > > _6991,std::shared_ptr< monty::ndarray< double,1 > > _6992){
  _checked_ptr_1<int> _ptr__6990(_6990 ? _6990->raw() : nullptr, _6990 ? _6990->size(0) : 0);
  _checked_ptr_1<double> _ptr__6992(_6992 ? _6992->raw() : nullptr, _6992 ? _6992->size(0) : 0);
  int _6993 = (int)((_6991)->size(0));
  int _6994 = (int)((_6990)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6995 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6993)));
  _checked_ptr_1<long long> _ptr__6995(_6995 ? _6995->raw() : nullptr,_6995 ? _6995->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6996 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6994)));
  _checked_ptr_1<long long> _ptr__6996(_6996 ? _6996->raw() : nullptr,_6996 ? _6996->size(0) : 0);
  _ptr__6996[(_6994 - (int)1)] = (int)1;
  int _11917 = (int)1;
  int _11918 = _6994;
  for (int _6997 = _11917; _6997 < _11918; ++_6997)
  {
    {
      _ptr__6996[((_6994 - _6997) - (int)1)] = safe_mul( _ptr__6996[(_6994 - _6997)],_ptr__6990[(_6994 - _6997)] );
    }
  }
  int _11919 = (int)0;
  int _11920 = _6993;
  for (int _6998 = _11919; _6998 < _11920; ++_6998)
  {
    {
      int _11921 = (int)0;
      int _11922 = _6994;
      for (int _6999 = _11921; _6999 < _11922; ++_6999)
      {
        {
          _ptr__6995[_6998] += safe_mul( _ptr__6996[_6999],((*_6991)(_6998,_6999)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6990,_6995,_6992)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _7000,    double _7001) { return mosek::fusion::p_Expr::constTerm(_7000,_7001); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _7000,double _7001){
  _checked_ptr_1<int> _ptr__7000(_7000 ? _7000->raw() : nullptr, _7000 ? _7000->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7000,nullptr,_7001)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _7002,    double _7003) { return mosek::fusion::p_Expr::constTerm(_7002,_7003); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _7002,double _7003){
  std::vector<double> _11923;
  for (int _7004 = (int)0, _11924 = _7002; _7004 < _11924 ; ++_7004)
  {
    _11923.push_back(_7003);
  }
  auto _11925 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11923.size()),_11923.begin(),_11923.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7002)}),nullptr,_11925)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _7005) { return mosek::fusion::p_Expr::constTerm(_7005); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _7005){
  std::vector<double> _11926;
  for (int _7006 = (int)0, _11927 = (int)((_7005)->size(0)); _7006 < _11927 ; ++_7006)
  {
    for (int _7007 = (int)0, _11928 = (int)((_7005)->size(1)); _7007 < _11928 ; ++_7007)
    {
      _11926.push_back(((*_7005)(_7006,_7007)));
    }
  }
  auto _11929 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11926.size()),_11926.begin(),_11926.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7005)->size(0))),(int)((int)((_7005)->size(1)))}),nullptr,_11929)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _7008) { return mosek::fusion::p_Expr::constTerm(_7008); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _7008){
  _checked_ptr_1<double> _ptr__7008(_7008 ? _7008->raw() : nullptr, _7008 ? _7008->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7008)->size(0)))}),nullptr,_7008)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7009,    int _7010) { return mosek::fusion::p_Expr::sum(_7009,_7010); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7009,int _7010){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_7010,_7009)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7011) { return mosek::fusion::p_Expr::sum(_7011); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7011){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_7011))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _7012) { return mosek::fusion::p_Expr::neg(_7012); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _7012){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_7012)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _7013,monty::rc_ptr< ::mosek::fusion::Matrix > _7014,monty::rc_ptr< ::mosek::fusion::Expression > _7015){
  long long _7016 = _7014->numNonzeros();
  int _7017 = _7014->numRows();
  int _7018 = _7014->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7019 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7016)));
  _checked_ptr_1<double> _ptr__7019(_7019 ? _7019->raw() : nullptr,_7019 ? _7019->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7020 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7016)));
  _checked_ptr_1<int> _ptr__7020(_7020 ? _7020->raw() : nullptr,_7020 ? _7020->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7021 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7016)));
  _checked_ptr_1<int> _ptr__7021(_7021 ? _7021->raw() : nullptr,_7021 ? _7021->size(0) : 0);
  _7014->getDataAsTriplets(_7021,_7020,_7019);
  if (_7013)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_7017,_7018,_7021,_7020,_7019,_7015)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_7017,_7018,_7021,_7020,_7019,_7015)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7022,    monty::rc_ptr< ::mosek::fusion::Parameter > _7023) { return mosek::fusion::p_Expr::mulDiag(_7022,_7023); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7022,monty::rc_ptr< ::mosek::fusion::Parameter > _7023){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7022->__mosek_2fusion_2Variable__asExpr(),_7023)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7024,    monty::rc_ptr< ::mosek::fusion::Variable > _7025) { return mosek::fusion::p_Expr::mulDiag(_7024,_7025); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7024,monty::rc_ptr< ::mosek::fusion::Variable > _7025){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7024,_7025->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7026,    monty::rc_ptr< ::mosek::fusion::Parameter > _7027) { return mosek::fusion::p_Expr::mulDiag(_7026,_7027); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7026,monty::rc_ptr< ::mosek::fusion::Parameter > _7027){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7026,_7027)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7028,    monty::rc_ptr< ::mosek::fusion::Expression > _7029) { return mosek::fusion::p_Expr::mulDiag(_7028,_7029); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7028,monty::rc_ptr< ::mosek::fusion::Expression > _7029){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7028,_7029)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7030,    monty::rc_ptr< ::mosek::fusion::Matrix > _7031) { return mosek::fusion::p_Expr::mulDiag(_7030,_7031); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7030,monty::rc_ptr< ::mosek::fusion::Matrix > _7031){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7031,_7030->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7032,    monty::rc_ptr< ::mosek::fusion::Variable > _7033) { return mosek::fusion::p_Expr::mulDiag(_7032,_7033); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7032,monty::rc_ptr< ::mosek::fusion::Variable > _7033){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7032,_7033->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7034,    monty::rc_ptr< ::mosek::fusion::Matrix > _7035) { return mosek::fusion::p_Expr::mulDiag(_7034,_7035); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7034,monty::rc_ptr< ::mosek::fusion::Matrix > _7035){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7035,_7034);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7036,    monty::rc_ptr< ::mosek::fusion::Expression > _7037) { return mosek::fusion::p_Expr::mulDiag(_7036,_7037); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7036,monty::rc_ptr< ::mosek::fusion::Expression > _7037){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7036,_7037);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7038,    std::shared_ptr< monty::ndarray< double,2 > > _7039) { return mosek::fusion::p_Expr::mulDiag(_7038,_7039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7038,std::shared_ptr< monty::ndarray< double,2 > > _7039){
  std::vector<int> _11930;
  for (int _7040 = (int)0, _11931 = (int)((_7039)->size(0)); _7040 < _11931 ; ++_7040)
  {
    for (int _7041 = (int)0, _11932 = (int)((_7039)->size(1)); _7041 < _11932 ; ++_7041)
    {
      _11930.push_back(_7040);
    }
  }
  auto _11933 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11930.size()),_11930.begin(),_11930.end()));
  std::vector<int> _11934;
  for (int _7042 = (int)0, _11935 = (int)((_7039)->size(0)); _7042 < _11935 ; ++_7042)
  {
    for (int _7043 = (int)0, _11936 = (int)((_7039)->size(1)); _7043 < _11936 ; ++_7043)
    {
      _11934.push_back(_7043);
    }
  }
  auto _11937 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11934.size()),_11934.begin(),_11934.end()));
  std::vector<double> _11938;
  for (int _7044 = (int)0, _11939 = (int)((_7039)->size(0)); _7044 < _11939 ; ++_7044)
  {
    for (int _7045 = (int)0, _11940 = (int)((_7039)->size(1)); _7045 < _11940 ; ++_7045)
    {
      _11938.push_back(((*_7039)(_7044,_7045)));
    }
  }
  auto _11941 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11938.size()),_11938.begin(),_11938.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7039)->size(0)),(int)((_7039)->size(1)),_11933,_11937,_11941,_7038->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7046,    std::shared_ptr< monty::ndarray< double,2 > > _7047) { return mosek::fusion::p_Expr::mulDiag(_7046,_7047); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7046,std::shared_ptr< monty::ndarray< double,2 > > _7047){
  std::vector<int> _11942;
  for (int _7048 = (int)0, _11943 = (int)((_7047)->size(0)); _7048 < _11943 ; ++_7048)
  {
    for (int _7049 = (int)0, _11944 = (int)((_7047)->size(1)); _7049 < _11944 ; ++_7049)
    {
      _11942.push_back(_7048);
    }
  }
  auto _11945 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11942.size()),_11942.begin(),_11942.end()));
  std::vector<int> _11946;
  for (int _7050 = (int)0, _11947 = (int)((_7047)->size(0)); _7050 < _11947 ; ++_7050)
  {
    for (int _7051 = (int)0, _11948 = (int)((_7047)->size(1)); _7051 < _11948 ; ++_7051)
    {
      _11946.push_back(_7051);
    }
  }
  auto _11949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11946.size()),_11946.begin(),_11946.end()));
  std::vector<double> _11950;
  for (int _7052 = (int)0, _11951 = (int)((_7047)->size(0)); _7052 < _11951 ; ++_7052)
  {
    for (int _7053 = (int)0, _11952 = (int)((_7047)->size(1)); _7053 < _11952 ; ++_7053)
    {
      _11950.push_back(((*_7047)(_7052,_7053)));
    }
  }
  auto _11953 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11950.size()),_11950.begin(),_11950.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7047)->size(0)),(int)((_7047)->size(1)),_11945,_11949,_11953,_7046)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7054,    monty::rc_ptr< ::mosek::fusion::Variable > _7055) { return mosek::fusion::p_Expr::mulDiag(_7054,_7055); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7054,monty::rc_ptr< ::mosek::fusion::Variable > _7055){
  std::vector<int> _11954;
  for (int _7056 = (int)0, _11955 = (int)((_7054)->size(0)); _7056 < _11955 ; ++_7056)
  {
    for (int _7057 = (int)0, _11956 = (int)((_7054)->size(1)); _7057 < _11956 ; ++_7057)
    {
      _11954.push_back(_7056);
    }
  }
  auto _11957 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11954.size()),_11954.begin(),_11954.end()));
  std::vector<int> _11958;
  for (int _7058 = (int)0, _11959 = (int)((_7054)->size(0)); _7058 < _11959 ; ++_7058)
  {
    for (int _7059 = (int)0, _11960 = (int)((_7054)->size(1)); _7059 < _11960 ; ++_7059)
    {
      _11958.push_back(_7059);
    }
  }
  auto _11961 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11958.size()),_11958.begin(),_11958.end()));
  std::vector<double> _11962;
  for (int _7060 = (int)0, _11963 = (int)((_7054)->size(0)); _7060 < _11963 ; ++_7060)
  {
    for (int _7061 = (int)0, _11964 = (int)((_7054)->size(1)); _7061 < _11964 ; ++_7061)
    {
      _11962.push_back(((*_7054)(_7060,_7061)));
    }
  }
  auto _11965 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11962.size()),_11962.begin(),_11962.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7054)->size(0)),(int)((_7054)->size(1)),_11957,_11961,_11965,_7055->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7062,    monty::rc_ptr< ::mosek::fusion::Expression > _7063) { return mosek::fusion::p_Expr::mulDiag(_7062,_7063); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7062,monty::rc_ptr< ::mosek::fusion::Expression > _7063){
  std::vector<int> _11966;
  for (int _7064 = (int)0, _11967 = (int)((_7062)->size(0)); _7064 < _11967 ; ++_7064)
  {
    for (int _7065 = (int)0, _11968 = (int)((_7062)->size(1)); _7065 < _11968 ; ++_7065)
    {
      _11966.push_back(_7064);
    }
  }
  auto _11969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11966.size()),_11966.begin(),_11966.end()));
  std::vector<int> _11970;
  for (int _7066 = (int)0, _11971 = (int)((_7062)->size(0)); _7066 < _11971 ; ++_7066)
  {
    for (int _7067 = (int)0, _11972 = (int)((_7062)->size(1)); _7067 < _11972 ; ++_7067)
    {
      _11970.push_back(_7067);
    }
  }
  auto _11973 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11970.size()),_11970.begin(),_11970.end()));
  std::vector<double> _11974;
  for (int _7068 = (int)0, _11975 = (int)((_7062)->size(0)); _7068 < _11975 ; ++_7068)
  {
    for (int _7069 = (int)0, _11976 = (int)((_7062)->size(1)); _7069 < _11976 ; ++_7069)
    {
      _11974.push_back(((*_7062)(_7068,_7069)));
    }
  }
  auto _11977 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11974.size()),_11974.begin(),_11974.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7062)->size(0)),(int)((_7062)->size(1)),_11969,_11973,_11977,_7063)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _7070,monty::rc_ptr< ::mosek::fusion::Expression > _7071){
  std::shared_ptr< monty::ndarray< int,1 > > _7072 = _7071->getShape();
  _checked_ptr_1<int> _ptr__7072(_7072 ? _7072->raw() : nullptr,_7072 ? _7072->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _7073 = _7071;
  if (((int)((_7072)->size(0)) == (int)1))
  {
    {
      _7072 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7072[(int)0]),(int)((int)1)});
      _ptr__7072.update(_7072 ? _7072->raw() : nullptr, _7072 ? _7072->size(0) : 0);
      _7073 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7072,_7071)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7072)->size(0)) != (int)2) || ((_7070->numRows() != _ptr__7072[(int)0]) || (_7070->numColumns() != _ptr__7072[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _7074 = _7070->numColumns();
  long long _7075 = _7070->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7076 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7075)));
  _checked_ptr_1<int> _ptr__7076(_7076 ? _7076->raw() : nullptr,_7076 ? _7076->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7077 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7075)));
  _checked_ptr_1<int> _ptr__7077(_7077 ? _7077->raw() : nullptr,_7077 ? _7077->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7078 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7075)));
  _checked_ptr_1<double> _ptr__7078(_7078 ? _7078->raw() : nullptr,_7078 ? _7078->size(0) : 0);
  _7070->getDataAsTriplets(_7076,_7077,_7078);
  std::vector<long long> _11978;
  for (long long _7079 = (int)0, _11979 = _7075; _7079 < _11979 ; ++_7079)
  {
    _11978.push_back(safe_add( safe_mul( _ptr__7076[_7079],_7074 ),_ptr__7077[_7079] ));
  }
  auto _11980 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11978.size()),_11978.begin(),_11978.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7078,_11980,_7073,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _7080,monty::rc_ptr< ::mosek::fusion::Expression > _7081){
  _checked_ptr_1<double> _ptr__7080(_7080 ? _7080->raw() : nullptr, _7080 ? _7080->size(0) : 0);
  if (((NULL == _7080.get()) || (NULL == _7081.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_7081->getND() == (int)0) && ((int)((_7080)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__7080[(int)0],_7081)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7081->getND() != (int)1) || (_7081->getDim((int)0) != (int)((_7080)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _11981;
      for (int _7082 = (int)0, _11982 = (int)((_7080)->size(0)); _7082 < _11982 ; ++_7082)
      {
        _11981.push_back(_7082);
      }
      auto _11983 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11981.size()),_11981.begin(),_11981.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7080,_11983,_7081)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7083,monty::rc_ptr< ::mosek::fusion::Expression > _7084){
  if (((NULL == _7083.get()) || (NULL == _7084.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7085 = _7084->getShape();
  _checked_ptr_1<int> _ptr__7085(_7085 ? _7085->raw() : nullptr,_7085 ? _7085->size(0) : 0);
  if (((int)((_7085)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7083)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _11984 = (int)0;
  int _11985 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7083)->dims)->size(0));
  for (int _7086 = _11984; _7086 < _11985; ++_7086)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7083)->dims)(_7086)) != _ptr__7085[_7086]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_7083)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_7083)->inst,_7084)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7087,    double _7088) { return mosek::fusion::p_Expr::mul(_7087,_7088); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7087,double _7088){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7088,_7087)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _7089,    monty::rc_ptr< ::mosek::fusion::Expression > _7090) { return mosek::fusion::p_Expr::mul(_7089,_7090); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _7089,monty::rc_ptr< ::mosek::fusion::Expression > _7090){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7089,_7090)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7091,    std::shared_ptr< monty::ndarray< double,1 > > _7092) { return mosek::fusion::p_Expr::mul(_7091,_7092); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7091,std::shared_ptr< monty::ndarray< double,1 > > _7092){
  _checked_ptr_1<double> _ptr__7092(_7092 ? _7092->raw() : nullptr, _7092 ? _7092->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_7092,_7091);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _7093,    monty::rc_ptr< ::mosek::fusion::Expression > _7094) { return mosek::fusion::p_Expr::mul(_7093,_7094); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _7093,monty::rc_ptr< ::mosek::fusion::Expression > _7094){
  _checked_ptr_1<double> _ptr__7093(_7093 ? _7093->raw() : nullptr, _7093 ? _7093->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_7093,_7094);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7095,    std::shared_ptr< monty::ndarray< double,2 > > _7096) { return mosek::fusion::p_Expr::mul(_7095,_7096); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7095,std::shared_ptr< monty::ndarray< double,2 > > _7096){
  return ::mosek::fusion::p_Expr::mul(false,_7096,_7095);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _7097,    monty::rc_ptr< ::mosek::fusion::Expression > _7098) { return mosek::fusion::p_Expr::mul(_7097,_7098); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7097,monty::rc_ptr< ::mosek::fusion::Expression > _7098){
  return ::mosek::fusion::p_Expr::mul(true,_7097,_7098);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7099,    monty::rc_ptr< ::mosek::fusion::Matrix > _7100) { return mosek::fusion::p_Expr::mul(_7099,_7100); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7099,monty::rc_ptr< ::mosek::fusion::Matrix > _7100){
  return ::mosek::fusion::p_Expr::mul(false,_7100,_7099);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7101,    monty::rc_ptr< ::mosek::fusion::Expression > _7102) { return mosek::fusion::p_Expr::mul(_7101,_7102); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7101,monty::rc_ptr< ::mosek::fusion::Expression > _7102){
  return ::mosek::fusion::p_Expr::mul(true,_7101,_7102);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7103,std::shared_ptr< monty::ndarray< double,1 > > _7104,monty::rc_ptr< ::mosek::fusion::Expression > _7105){
  _checked_ptr_1<double> _ptr__7104(_7104 ? _7104->raw() : nullptr, _7104 ? _7104->size(0) : 0);
  int _7106 = (int)((_7104)->size(0));
  int _7107 = _7106;
  std::shared_ptr< monty::ndarray< double,1 > > _7108 = ::mosek::fusion::Utils::Tools::arraycopy(_7104);
  _checked_ptr_1<double> _ptr__7108(_7108 ? _7108->raw() : nullptr,_7108 ? _7108->size(0) : 0);
  int _7109 = _7105->getND();
  if ((_7109 == (int)0))
  {
    {
      std::vector<int> _11986;
      for (int _7110 = (int)0, _11987 = _7106; _7110 < _11987 ; ++_7110)
      {
        _11986.push_back(_7110);
      }
      auto _11988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11986.size()),_11986.begin(),_11986.end()));
      std::vector<int> _11989;
      for (int _7111 = (int)0, _11990 = _7106; _7111 < _11990 ; ++_7111)
      {
        _11989.push_back((int)0);
      }
      auto _11991 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11989.size()),_11989.begin(),_11989.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7106)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7106,(int)1,_11988,_11991,_7108,_7105,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7109 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_7103 && (_7105->getDim((int)0) == (int)((_7104)->size(0)))))
  {
    {
      std::vector<int> _11992;
      for (int _7112 = (int)0, _11993 = _7106; _7112 < _11993 ; ++_7112)
      {
        _11992.push_back((int)0);
      }
      auto _11994 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11992.size()),_11992.begin(),_11992.end()));
      std::vector<int> _11995;
      for (int _7113 = (int)0, _11996 = _7106; _7113 < _11996 ; ++_7113)
      {
        _11995.push_back(_7113);
      }
      auto _11997 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11995.size()),_11995.begin(),_11995.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7105->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_7106,_11994,_11997,_7108,_7105)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7103 && (_7105->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _11998;
      for (int _7114 = (int)0, _11999 = _7106; _7114 < _11999 ; ++_7114)
      {
        _11998.push_back(_7114);
      }
      auto _12000 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11998.size()),_11998.begin(),_11998.end()));
      std::vector<int> _12001;
      for (int _7115 = (int)0, _12002 = _7106; _7115 < _12002 ; ++_7115)
      {
        _12001.push_back((int)0);
      }
      auto _12003 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12001.size()),_12001.begin(),_12001.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7106,(int)1,_12000,_12003,_7108,_7105,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7103) && (_7105->getDim((int)1) == _7106)))
  {
    {
      std::vector<int> _12004;
      for (int _7116 = (int)0, _12005 = _7106; _7116 < _12005 ; ++_7116)
      {
        _12004.push_back(_7116);
      }
      auto _12006 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12004.size()),_12004.begin(),_12004.end()));
      std::vector<int> _12007;
      for (int _7117 = (int)0, _12008 = _7106; _7117 < _12008 ; ++_7117)
      {
        _12007.push_back((int)0);
      }
      auto _12009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12007.size()),_12007.begin(),_12007.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7105->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7106,(int)1,_12006,_12009,_7108,_7105)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7103) && (_7105->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _12010;
      for (int _7118 = (int)0, _12011 = _7106; _7118 < _12011 ; ++_7118)
      {
        _12010.push_back((int)0);
      }
      auto _12012 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12010.size()),_12010.begin(),_12010.end()));
      std::vector<int> _12013;
      for (int _7119 = (int)0, _12014 = _7106; _7119 < _12014 ; ++_7119)
      {
        _12013.push_back(_7119);
      }
      auto _12015 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12013.size()),_12013.begin(),_12013.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_7106,_12012,_12015,_7108,_7105,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7120,std::shared_ptr< monty::ndarray< double,2 > > _7121,monty::rc_ptr< ::mosek::fusion::Expression > _7122){
  int _7123 = (int)((_7121)->size(0));
  int _7124 = (int)((_7121)->size(1));
  int _7125 = safe_mul( _7123,_7124 );
  std::vector<int> _12016;
  for (int _7127 = (int)0, _12017 = _7123; _7127 < _12017 ; ++_7127)
  {
    for (int _7128 = (int)0, _12018 = _7124; _7128 < _12018 ; ++_7128)
    {
      _12016.push_back(_7127);
    }
  }
  auto _12019 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12016.size()),_12016.begin(),_12016.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7126 = _12019;
  _checked_ptr_1<int> _ptr__7126(_7126 ? _7126->raw() : nullptr,_7126 ? _7126->size(0) : 0);
  std::vector<int> _12020;
  for (int _7130 = (int)0, _12021 = _7123; _7130 < _12021 ; ++_7130)
  {
    for (int _7131 = (int)0, _12022 = _7124; _7131 < _12022 ; ++_7131)
    {
      _12020.push_back(_7131);
    }
  }
  auto _12023 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12020.size()),_12020.begin(),_12020.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7129 = _12023;
  _checked_ptr_1<int> _ptr__7129(_7129 ? _7129->raw() : nullptr,_7129 ? _7129->size(0) : 0);
  std::vector<double> _12024;
  for (int _7133 = (int)0, _12025 = _7123; _7133 < _12025 ; ++_7133)
  {
    for (int _7134 = (int)0, _12026 = _7124; _7134 < _12026 ; ++_7134)
    {
      _12024.push_back(((*_7121)(_7133,_7134)));
    }
  }
  auto _12027 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12024.size()),_12024.begin(),_12024.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7132 = _12027;
  _checked_ptr_1<double> _ptr__7132(_7132 ? _7132->raw() : nullptr,_7132 ? _7132->size(0) : 0);
  long long _7135 = _7122->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _7136 = _7122->getShape();
  _checked_ptr_1<int> _ptr__7136(_7136 ? _7136->raw() : nullptr,_7136 ? _7136->size(0) : 0);
  if (((int)((_7136)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7123,_7124,_7126,_7129,_7132,_7122,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_7120)
  {
    {
      if (((int)((_7136)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7121)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7123,_7124,_7126,_7129,_7132,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7136[(int)0]),(int)((int)1)}),_7122)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7136)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7123,_7124,_7126,_7129,_7132,_7122)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_7136)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7121)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7123,_7124,_7126,_7129,_7132,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7136[(int)0])}),_7122)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7136)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7123,_7124,_7126,_7129,_7132,_7122)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7137,monty::rc_ptr< ::mosek::fusion::Matrix > _7138,monty::rc_ptr< ::mosek::fusion::Expression > _7139){
  long long _7140 = _7138->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7140)));
  _checked_ptr_1<int> _ptr__7141(_7141 ? _7141->raw() : nullptr,_7141 ? _7141->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7142 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7140)));
  _checked_ptr_1<int> _ptr__7142(_7142 ? _7142->raw() : nullptr,_7142 ? _7142->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7143 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7140)));
  _checked_ptr_1<double> _ptr__7143(_7143 ? _7143->raw() : nullptr,_7143 ? _7143->size(0) : 0);
  int _7144 = _7138->numRows();
  int _7145 = _7138->numColumns();
  _7138->getDataAsTriplets(_7141,_7142,_7143);
  int _7146 = _7139->getND();
  if ((_7146 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7144,_7145,_7141,_7142,_7143,_7139)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7146 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7147 = _7139->getShape();
      _checked_ptr_1<int> _ptr__7147(_7147 ? _7147->raw() : nullptr,_7147 ? _7147->size(0) : 0);
      if (_7137)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7144)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7144,_7145,_7141,_7142,_7143,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7147[(int)0]),(int)((int)1)}),_7139)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7145)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7144,_7145,_7141,_7142,_7143,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7147[(int)0])}),_7139)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_7146 == (int)2))
  {
    {
      if (_7137)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7144,_7145,_7141,_7142,_7143,_7139)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7144,_7145,_7141,_7142,_7143,_7139)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _7148,    monty::rc_ptr< ::mosek::fusion::Matrix > _7149) { return mosek::fusion::p_Expr::mul(_7148,_7149); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7148,monty::rc_ptr< ::mosek::fusion::Matrix > _7149){
  int _7150 = _7149->numRows();
  int _7151 = _7149->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7152 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7149->numNonzeros())));
  _checked_ptr_1<double> _ptr__7152(_7152 ? _7152->raw() : nullptr,_7152 ? _7152->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7153 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7149->numNonzeros())));
  _checked_ptr_1<int> _ptr__7153(_7153 ? _7153->raw() : nullptr,_7153 ? _7153->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7154 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7149->numNonzeros())));
  _checked_ptr_1<int> _ptr__7154(_7154 ? _7154->raw() : nullptr,_7154 ? _7154->size(0) : 0);
  _7149->getDataAsTriplets(_7154,_7153,_7152);
  return ::mosek::fusion::p_Expr::mul(false,_7150,_7151,_7154,_7153,_7152,_7148);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7155,    monty::rc_ptr< ::mosek::fusion::Variable > _7156) { return mosek::fusion::p_Expr::mul(_7155,_7156); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7155,monty::rc_ptr< ::mosek::fusion::Variable > _7156){
  int _7157 = _7155->numRows();
  int _7158 = _7155->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7159 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7155->numNonzeros())));
  _checked_ptr_1<double> _ptr__7159(_7159 ? _7159->raw() : nullptr,_7159 ? _7159->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7160 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7155->numNonzeros())));
  _checked_ptr_1<int> _ptr__7160(_7160 ? _7160->raw() : nullptr,_7160 ? _7160->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7161 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7155->numNonzeros())));
  _checked_ptr_1<int> _ptr__7161(_7161 ? _7161->raw() : nullptr,_7161 ? _7161->size(0) : 0);
  _7155->getDataAsTriplets(_7161,_7160,_7159);
  return ::mosek::fusion::p_Expr::mul(true,_7157,_7158,_7161,_7160,_7159,_7156);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7162,int _7163,int _7164,std::shared_ptr< monty::ndarray< int,1 > > _7165,std::shared_ptr< monty::ndarray< int,1 > > _7166,std::shared_ptr< monty::ndarray< double,1 > > _7167,monty::rc_ptr< ::mosek::fusion::Variable > _7168){
  _checked_ptr_1<int> _ptr__7165(_7165 ? _7165->raw() : nullptr, _7165 ? _7165->size(0) : 0);
  _checked_ptr_1<int> _ptr__7166(_7166 ? _7166->raw() : nullptr, _7166 ? _7166->size(0) : 0);
  _checked_ptr_1<double> _ptr__7167(_7167 ? _7167->raw() : nullptr, _7167 ? _7167->size(0) : 0);
  if ((_7168->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_7163,_7164,_7165,_7166,_7167,_7168)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7168->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7169 = _7168->getShape();
      _checked_ptr_1<int> _ptr__7169(_7169 ? _7169->raw() : nullptr,_7169 ? _7169->size(0) : 0);
      int _12028;
      bool _12029 = _7162;
      if (_12029)
      {
        _12028 = _7163;
      }
      else
      {
        _12028 = _7164;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _12030;
      bool _12031 = _7162;
      if (_12031)
      {
        _12030 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7169[(int)0]),(int)((int)1)});
      }
      else
      {
        _12030 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7169[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_12028)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7162,_7163,_7164,_7165,_7166,_7167,::mosek::fusion::p_Var::reshape(_7168,_12030))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7162,_7163,_7164,_7165,_7166,_7167,_7168)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7170,    monty::rc_ptr< ::mosek::fusion::Parameter > _7171) { return mosek::fusion::p_Expr::mul(_7170,_7171); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7170,monty::rc_ptr< ::mosek::fusion::Parameter > _7171){
  if (((_7171->getND() == (int)2) && (_7170->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7170,_7171)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7171->getND() == (int)1) && (_7170->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7170->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7170,_7171->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7171->getDim((int)0)),(int)((int)1)})))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7171->getND() == (int)2) && (_7170->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7171->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight((::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7170->getDim((int)0))}),_7170)).as<::mosek::fusion::Expression>(),_7171)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7171->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7171,_7170)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7170->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7171,_7170)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7172,    monty::rc_ptr< ::mosek::fusion::Expression > _7173) { return mosek::fusion::p_Expr::mul(_7172,_7173); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Parameter > _7172,monty::rc_ptr< ::mosek::fusion::Expression > _7173){
  if (((_7172->getND() == (int)2) && (_7173->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7172,_7173)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7172->getND() == (int)1) && (_7173->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7173->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7172->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7172->getDim((int)0))})),_7173)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7172->getND() == (int)2) && (_7173->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7172->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7172,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7173->getDim((int)0)),(int)((int)1)}),_7173)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7172->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7172,_7173)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7173->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7172,_7173)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7174,    monty::rc_ptr< ::mosek::fusion::Matrix > _7175) { return mosek::fusion::p_Expr::dot(_7174,_7175); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7174,monty::rc_ptr< ::mosek::fusion::Matrix > _7175){
  long long _7176 = _7175->numNonzeros();
  if ((!_7175->isSparse()))
  {
    {
      std::vector<long long> _12032;
      for (long long _7177 = (int)0, _12033 = _7176; _7177 < _12033 ; ++_7177)
      {
        _12032.push_back(_7177);
      }
      auto _12034 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12032.size()),_12032.begin(),_12032.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7174,_12034,_7175->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7178 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7176)));
      _checked_ptr_1<int> _ptr__7178(_7178 ? _7178->raw() : nullptr,_7178 ? _7178->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7179 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7176)));
      _checked_ptr_1<int> _ptr__7179(_7179 ? _7179->raw() : nullptr,_7179 ? _7179->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7180 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7176)));
      _checked_ptr_1<double> _ptr__7180(_7180 ? _7180->raw() : nullptr,_7180 ? _7180->size(0) : 0);
      int _7181 = _7175->numColumns();
      _7175->getDataAsTriplets(_7178,_7179,_7180);
      std::vector<long long> _12035;
      for (int _7182 = (int)0, _12036 = (int)((_7178)->size(0)); _7182 < _12036 ; ++_7182)
      {
        _12035.push_back(safe_add( safe_mul( _ptr__7178[_7182],_7181 ),_ptr__7179[_7182] ));
      }
      auto _12037 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12035.size()),_12035.begin(),_12035.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7174,_12037,_7180)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7183,    std::shared_ptr< monty::ndarray< double,2 > > _7184) { return mosek::fusion::p_Expr::dot(_7183,_7184); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7183,std::shared_ptr< monty::ndarray< double,2 > > _7184){
  std::vector<long long> _12038;
  for (int _7185 = (int)0, _12039 = safe_mul( (int)((_7184)->size(0)),(int)((_7184)->size(1)) ); _7185 < _12039 ; ++_7185)
  {
    _12038.push_back(_7185);
  }
  auto _12040 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12038.size()),_12038.begin(),_12038.end()));
  std::vector<double> _12041;
  for (int _7186 = (int)0, _12042 = (int)((_7184)->size(0)); _7186 < _12042 ; ++_7186)
  {
    for (int _7187 = (int)0, _12043 = (int)((_7184)->size(1)); _7187 < _12043 ; ++_7187)
    {
      _12041.push_back(((*_7184)(_7186,_7187)));
    }
  }
  auto _12044 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12041.size()),_12041.begin(),_12041.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7183,_12040,_12044)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7188,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7189) { return mosek::fusion::p_Expr::dot(_7188,_7189); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7188,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7189){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7188,mosek::fusion::p_NDSparseArray::_get_impl(_7189)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7189)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7190,    std::shared_ptr< monty::ndarray< double,1 > > _7191) { return mosek::fusion::p_Expr::dot(_7190,_7191); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7190,std::shared_ptr< monty::ndarray< double,1 > > _7191){
  _checked_ptr_1<double> _ptr__7191(_7191 ? _7191->raw() : nullptr, _7191 ? _7191->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7192 = _7190->getShape();
  _checked_ptr_1<int> _ptr__7192(_7192 ? _7192->raw() : nullptr,_7192 ? _7192->size(0) : 0);
  if (((_7190->getSize() == (int)((_7191)->size(0))) && ((int)((_7192)->size(0)) > (int)1)))
  {
    {
      int _7193 = (int)0;
      int _12045 = (int)0;
      int _12046 = (int)((_7192)->size(0));
      for (int _7194 = _12045; _7194 < _12046; ++_7194)
      {
        {
          if ((_ptr__7192[_7194] > (int)1))
          {
            {
              ++ _7193;
            }
          }
          {}
        }
      }
      if ((_7193 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7195 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_7190->getSize())});
          _checked_ptr_1<int> _ptr__7195(_7195 ? _7195->raw() : nullptr,_7195 ? _7195->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7195,_7190)).as<::mosek::fusion::Expression>(),_7191)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7190,_7191)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7196,    monty::rc_ptr< ::mosek::fusion::Expression > _7197) { return mosek::fusion::p_Expr::dot(_7196,_7197); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _7196,monty::rc_ptr< ::mosek::fusion::Expression > _7197){
  return ::mosek::fusion::p_Expr::dot(_7197,_7196);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7198,    monty::rc_ptr< ::mosek::fusion::Expression > _7199) { return mosek::fusion::p_Expr::dot(_7198,_7199); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7198,monty::rc_ptr< ::mosek::fusion::Expression > _7199){
  return ::mosek::fusion::p_Expr::dot(_7199,_7198);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _7200,    monty::rc_ptr< ::mosek::fusion::Expression > _7201) { return mosek::fusion::p_Expr::dot(_7200,_7201); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _7200,monty::rc_ptr< ::mosek::fusion::Expression > _7201){
  return ::mosek::fusion::p_Expr::dot(_7201,_7200);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _7202,    monty::rc_ptr< ::mosek::fusion::Expression > _7203) { return mosek::fusion::p_Expr::dot(_7202,_7203); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _7202,monty::rc_ptr< ::mosek::fusion::Expression > _7203){
  _checked_ptr_1<double> _ptr__7202(_7202 ? _7202->raw() : nullptr, _7202 ? _7202->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_7203,_7202);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7204,    monty::rc_ptr< ::mosek::fusion::Parameter > _7205) { return mosek::fusion::p_Expr::dot(_7204,_7205); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7204,monty::rc_ptr< ::mosek::fusion::Parameter > _7205){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7205,_7204)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7206,    monty::rc_ptr< ::mosek::fusion::Expression > _7207) { return mosek::fusion::p_Expr::dot(_7206,_7207); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Parameter > _7206,monty::rc_ptr< ::mosek::fusion::Expression > _7207){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7206,_7207)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7208,    monty::rc_ptr< ::mosek::fusion::Variable > _7209) { return mosek::fusion::p_Expr::outer(_7208,_7209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _7208,monty::rc_ptr< ::mosek::fusion::Variable > _7209){
  std::shared_ptr< monty::ndarray< int,1 > > _7210 = _7209->getShape();
  _checked_ptr_1<int> _ptr__7210(_7210 ? _7210->raw() : nullptr,_7210 ? _7210->size(0) : 0);
  if ((!(((int)((_7210)->size(0)) == (int)1) || (((int)((_7210)->size(0)) == (int)2) && (_ptr__7210[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7208)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _12047 = _7208;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12047.get()))
  {
    ::mosek::fusion::DenseMatrix::t _7211 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12047.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_7209,_ptr__7210[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_7211)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_7211)->data)->size(0)),true);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _7212 = _12047;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7213 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7212->numNonzeros())));
      _checked_ptr_1<double> _ptr__7213(_7213 ? _7213->raw() : nullptr,_7213 ? _7213->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7214 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7212->numNonzeros())));
      _checked_ptr_1<int> _ptr__7214(_7214 ? _7214->raw() : nullptr,_7214 ? _7214->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7215 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7212->numNonzeros())));
      _checked_ptr_1<int> _ptr__7215(_7215 ? _7215->raw() : nullptr,_7215 ? _7215->size(0) : 0);
      _7212->getDataAsTriplets(_7215,_7214,_7213);
      return ::mosek::fusion::p_Expr::outer_(_7209,_ptr__7210[(int)0],_7213,_7215,mosek::fusion::p_Matrix::_get_impl(_7212)->dimi,true);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _7216,    monty::rc_ptr< ::mosek::fusion::Matrix > _7217) { return mosek::fusion::p_Expr::outer(_7216,_7217); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _7216,monty::rc_ptr< ::mosek::fusion::Matrix > _7217){
  std::shared_ptr< monty::ndarray< int,1 > > _7218 = _7216->getShape();
  _checked_ptr_1<int> _ptr__7218(_7218 ? _7218->raw() : nullptr,_7218 ? _7218->size(0) : 0);
  if ((!((_7216->getND() == (int)1) || ((_7216->getND() == (int)2) && (_ptr__7218[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7217)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _12048 = _7217;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12048.get()))
  {
    ::mosek::fusion::DenseMatrix::t _7219 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12048.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_7216,_ptr__7218[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_7219)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_7219)->data)->size(0)),false);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _7220 = _12048;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7221 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7220->numNonzeros())));
      _checked_ptr_1<double> _ptr__7221(_7221 ? _7221->raw() : nullptr,_7221 ? _7221->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7222 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7220->numNonzeros())));
      _checked_ptr_1<int> _ptr__7222(_7222 ? _7222->raw() : nullptr,_7222 ? _7222->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7223 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7217->numNonzeros())));
      _checked_ptr_1<int> _ptr__7223(_7223 ? _7223->raw() : nullptr,_7223 ? _7223->size(0) : 0);
      _7220->getDataAsTriplets(_7223,_7222,_7221);
      return ::mosek::fusion::p_Expr::outer_(_7216,((*_7216->getShape())((int)0)),_7221,_7223,mosek::fusion::p_Matrix::_get_impl(_7220)->dimi,false);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _7224,    monty::rc_ptr< ::mosek::fusion::Variable > _7225) { return mosek::fusion::p_Expr::outer(_7224,_7225); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _7224,monty::rc_ptr< ::mosek::fusion::Variable > _7225){
  _checked_ptr_1<double> _ptr__7224(_7224 ? _7224->raw() : nullptr, _7224 ? _7224->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7226 = _7225->getShape();
  _checked_ptr_1<int> _ptr__7226(_7226 ? _7226->raw() : nullptr,_7226 ? _7226->size(0) : 0);
  if ((!((_7225->getND() == (int)1) || ((_7225->getND() == (int)2) && (_ptr__7226[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_7225,_ptr__7226[(int)0],_7224,nullptr,(int)((_7224)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _7227,    std::shared_ptr< monty::ndarray< double,1 > > _7228) { return mosek::fusion::p_Expr::outer(_7227,_7228); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _7227,std::shared_ptr< monty::ndarray< double,1 > > _7228){
  _checked_ptr_1<double> _ptr__7228(_7228 ? _7228->raw() : nullptr, _7228 ? _7228->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7229 = _7227->getShape();
  _checked_ptr_1<int> _ptr__7229(_7229 ? _7229->raw() : nullptr,_7229 ? _7229->size(0) : 0);
  if ((!((_7227->getND() == (int)1) || ((_7227->getND() == (int)2) && (_ptr__7229[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_7227,_ptr__7229[(int)0],_7228,nullptr,(int)((_7228)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _7230,std::shared_ptr< monty::ndarray< long long,1 > > _7231,std::shared_ptr< monty::ndarray< long long,1 > > _7232,std::shared_ptr< monty::ndarray< double,1 > > _7233,std::shared_ptr< monty::ndarray< double,1 > > _7234,std::shared_ptr< monty::ndarray< long long,1 > > _7235,std::shared_ptr< monty::ndarray< double,1 > > _7236,std::shared_ptr< monty::ndarray< int,1 > > _7237,int _7238,bool _7239){
  _checked_ptr_1<long long> _ptr__7231(_7231 ? _7231->raw() : nullptr, _7231 ? _7231->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7232(_7232 ? _7232->raw() : nullptr, _7232 ? _7232->size(0) : 0);
  _checked_ptr_1<double> _ptr__7233(_7233 ? _7233->raw() : nullptr, _7233 ? _7233->size(0) : 0);
  _checked_ptr_1<double> _ptr__7234(_7234 ? _7234->raw() : nullptr, _7234 ? _7234->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7235(_7235 ? _7235->raw() : nullptr, _7235 ? _7235->size(0) : 0);
  _checked_ptr_1<double> _ptr__7236(_7236 ? _7236->raw() : nullptr, _7236 ? _7236->size(0) : 0);
  _checked_ptr_1<int> _ptr__7237(_7237 ? _7237->raw() : nullptr, _7237 ? _7237->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12049;
  bool _12050 = (!_7239);
  if (_12050)
  {
    _12049 = ::mosek::fusion::p_Set::make(_7230,_7238);
  }
  else
  {
    _12049 = ::mosek::fusion::p_Set::make(_7238,_7230);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7240 = _12049;
  _checked_ptr_1<int> _ptr__7240(_7240 ? _7240->raw() : nullptr,_7240 ? _7240->size(0) : 0);
  int _7241 = safe_mul( (int)((_7236)->size(0)),(int)((_7235)->size(0)) );
  int _7242 = safe_mul( (int)((_7236)->size(0)),(int)((_7232)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _7243 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7241)));
  _checked_ptr_1<long long> _ptr__7243(_7243 ? _7243->raw() : nullptr,_7243 ? _7243->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12051;
  bool _12052 = (NULL != _7234.get());
  if (_12052)
  {
    _12051 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7241)));
  }
  else
  {
    _12051 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7244 = _12051;
  _checked_ptr_1<double> _ptr__7244(_7244 ? _7244->raw() : nullptr,_7244 ? _7244->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7245 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7242)));
  _checked_ptr_1<double> _ptr__7245(_7245 ? _7245->raw() : nullptr,_7245 ? _7245->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7246 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7242)));
  _checked_ptr_1<long long> _ptr__7246(_7246 ? _7246->raw() : nullptr,_7246 ? _7246->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7247 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7241,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7247(_7247 ? _7247->raw() : nullptr,_7247 ? _7247->size(0) : 0);
  int _7248 = (int)_ptr__7247[((int)((_7247)->size(0)) - (int)1)];
  if ((!_7239))
  {
    {
      long long _7249 = (long long)0;
      long long _7250 = (long long)0;
      int _12053 = (int)0;
      int _12054 = (int)((_7235)->size(0));
      for (int _7251 = _12053; _7251 < _12054; ++_7251)
      {
        {
          long long _7252 = (_ptr__7231[safe_add( _7251,(int)1 )] - _ptr__7231[_7251]);
          int _12055 = (int)0;
          int _12056 = (int)((_7236)->size(0));
          for (int _7253 = _12055; _7253 < _12056; ++_7253)
          {
            {
              _ptr__7235[_7249] = safe_add( safe_mul( _ptr__7235[_7251],_7238 ),_ptr__7237[_7253] );
              _ptr__7247[safe_add( _7249,(int)1 )] = safe_add( _ptr__7247[_7249],_7252 );
              ++ _7249;
              long long _12057 = _ptr__7231[_7251];
              long long _12058 = _ptr__7231[safe_add( _7251,(int)1 )];
              for (long long _7254 = _12057; _7254 < _12058; ++_7254)
              {
                {
                  _ptr__7246[_7250] = _ptr__7232[_7254];
                  _ptr__7245[_7250] = (_ptr__7233[_7254] * _ptr__7236[_7253]);
                  ++ _7250;
                }
              }
            }
          }
        }
      }
      if ((NULL != _7244.get()))
      {
        {
          int _7255 = (int)0;
          int _12059 = (int)0;
          int _12060 = (int)((_7235)->size(0));
          for (int _7256 = _12059; _7256 < _12060; ++_7256)
          {
            {
              int _12061 = (int)0;
              int _12062 = (int)((_7236)->size(0));
              for (int _7257 = _12061; _7257 < _12062; ++_7257)
              {
                {
                  _ptr__7244[_7255] = (_ptr__7236[_7257] * _ptr__7234[_7256]);
                  ++ _7255;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _7258 = (long long)0;
      long long _7259 = (long long)0;
      int _12063 = (int)0;
      int _12064 = (int)((_7236)->size(0));
      for (int _7260 = _12063; _7260 < _12064; ++_7260)
      {
        {
          double _7261 = _ptr__7236[_7260];
          ::mosek::fusion::Utils::Tools::arraycopy(_7232,(long long)((int)0),_7246,_7259,(long long)(_7248));
          int _12065 = (int)0;
          int _12066 = _7248;
          for (int _7262 = _12065; _7262 < _12066; ++_7262)
          {
            {
              _ptr__7245[safe_add( _7259,_7262 )] = (_ptr__7233[_7262] * _ptr__7236[_7260]);
            }
          }
          int _12067 = (int)0;
          int _12068 = (int)((_7235)->size(0));
          for (int _7263 = _12067; _7263 < _12068; ++_7263)
          {
            {
              long long _7264 = (_ptr__7231[safe_add( _7263,(int)1 )] - _ptr__7231[_7263]);
              _ptr__7235[_7258] = safe_add( safe_mul( _ptr__7235[_7263],_7238 ),_ptr__7237[_7260] );
              _ptr__7247[safe_add( _7258,(int)1 )] = safe_add( _ptr__7247[_7258],_7264 );
              ++ _7258;
            }
          }
          _7259 += _7248;
        }
      }
      if ((NULL != _7244.get()))
      {
        {
          int _7265 = (int)0;
          int _12069 = (int)0;
          int _12070 = (int)((_7236)->size(0));
          for (int _7266 = _12069; _7266 < _12070; ++_7266)
          {
            {
              double _7267 = _ptr__7236[_7266];
              int _12071 = (int)0;
              int _12072 = (int)((_7235)->size(0));
              for (int _7268 = _12071; _7268 < _12072; ++_7268)
              {
                {
                  _ptr__7244[_7265] = (_ptr__7234[_7268] * _7267);
                  ++ _7265;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7247,_7246,_7245,_7244,_7240,_7243)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _7269,int _7270,std::shared_ptr< monty::ndarray< double,1 > > _7271,std::shared_ptr< monty::ndarray< int,1 > > _7272,int _7273,bool _7274){
  _checked_ptr_1<double> _ptr__7271(_7271 ? _7271->raw() : nullptr, _7271 ? _7271->size(0) : 0);
  _checked_ptr_1<int> _ptr__7272(_7272 ? _7272->raw() : nullptr, _7272 ? _7272->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12073;
  bool _12074 = (!_7274);
  if (_12074)
  {
    _12073 = ::mosek::fusion::p_Set::make(_7270,_7273);
  }
  else
  {
    _12073 = ::mosek::fusion::p_Set::make(_7273,_7270);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7275 = _12073;
  _checked_ptr_1<int> _ptr__7275(_7275 ? _7275->raw() : nullptr,_7275 ? _7275->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _12075;
  bool _12076 = (_7273 == (int)((_7271)->size(0)));
  if (_12076)
  {
    _12075 = nullptr;
  }
  else
  {
    _12075 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7271)->size(0)),_7270 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7276 = _12075;
  _checked_ptr_1<long long> _ptr__7276(_7276 ? _7276->raw() : nullptr,_7276 ? _7276->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7277 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7271)->size(0)),_7270 ))));
  _checked_ptr_1<double> _ptr__7277(_7277 ? _7277->raw() : nullptr,_7277 ? _7277->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7278 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7271)->size(0)),_7270 ))));
  _checked_ptr_1<double> _ptr__7278(_7278 ? _7278->raw() : nullptr,_7278 ? _7278->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7279 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7271)->size(0)),_7270 ))));
  _checked_ptr_1<long long> _ptr__7279(_7279 ? _7279->raw() : nullptr,_7279 ? _7279->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7280 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_7271)->size(0)),_7270 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__7280(_7280 ? _7280->raw() : nullptr,_7280 ? _7280->size(0) : 0);
  if ((_7273 == (int)((_7271)->size(0))))
  {
    {
      long long _7281 = (long long)0;
      if ((!_7274))
      {
        {
          int _12077 = (int)0;
          int _12078 = _7270;
          for (int _7282 = _12077; _7282 < _12078; ++_7282)
          {
            {
              int _12079 = (int)0;
              int _12080 = _7273;
              for (int _7283 = _12079; _7283 < _12080; ++_7283)
              {
                {
                  _ptr__7280[safe_add( _7281,(int)1 )] = safe_add( _7281,(int)1 );
                  _ptr__7279[_7281] = (long long)_7282;
                  _ptr__7278[_7281] = _ptr__7271[_7283];
                  ++ _7281;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12081 = (int)0;
          int _12082 = _7273;
          for (int _7284 = _12081; _7284 < _12082; ++_7284)
          {
            {
              int _12083 = (int)0;
              int _12084 = _7270;
              for (int _7285 = _12083; _7285 < _12084; ++_7285)
              {
                {
                  _ptr__7280[safe_add( _7281,(int)1 )] = safe_add( _7281,(int)1 );
                  _ptr__7279[_7281] = (long long)_7285;
                  _ptr__7278[_7281] = _ptr__7271[_7284];
                  ++ _7281;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _7286 = (long long)0;
      if ((!_7274))
      {
        {
          int _12085 = (int)0;
          int _12086 = _7270;
          for (int _7287 = _12085; _7287 < _12086; ++_7287)
          {
            {
              int _12087 = (int)0;
              int _12088 = (int)((_7271)->size(0));
              for (int _7288 = _12087; _7288 < _12088; ++_7288)
              {
                {
                  _ptr__7280[safe_add( _7286,(int)1 )] = safe_add( _7286,(int)1 );
                  _ptr__7279[_7286] = (long long)_7287;
                  _ptr__7278[_7286] = _ptr__7271[_7288];
                  _ptr__7276[_7286] = safe_add( safe_mul( _7287,_7273 ),_ptr__7272[_7288] );
                  ++ _7286;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12089 = (int)0;
          int _12090 = (int)((_7271)->size(0));
          for (int _7289 = _12089; _7289 < _12090; ++_7289)
          {
            {
              int _12091 = (int)0;
              int _12092 = _7270;
              for (int _7290 = _12091; _7290 < _12092; ++_7290)
              {
                {
                  _ptr__7280[safe_add( _7286,(int)1 )] = safe_add( _7286,(int)1 );
                  _ptr__7279[_7286] = (long long)_7290;
                  _ptr__7278[_7286] = _ptr__7271[_7289];
                  _ptr__7276[_7286] = safe_add( safe_mul( _ptr__7272[_7289],_7270 ),_7290 );
                  ++ _7286;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7280,_7279,_7278,_7277,_7275,_7276)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7291) { return mosek::fusion::p_Expr::stack(_7291); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7291){
  if ((NULL == _7291.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12093 = (int)0;
  int _12094 = (int)((_7291)->size(0));
  for (int _7292 = _12093; _7292 < _12094; ++_7292)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7293 = ((*_7291)(_7292));
      if ((NULL == _7293.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _12095 = (int)0;
      int _12096 = (int)((_7293)->size(0));
      for (int _7294 = _12095; _7294 < _12096; ++_7294)
      {
        {
          if ((NULL == ((*_7293)(_7294)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12097;
  for (int _7296 = (int)0, _12098 = (int)((_7291)->size(0)); _7296 < _12098 ; ++_7296)
  {
    _12097.push_back(::mosek::fusion::p_Expr::stack_(((*_7291)(_7296)),(int)1));
  }
  auto _12099 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12097.size()),_12097.begin(),_12097.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7295 = _12099;
  return ::mosek::fusion::p_Expr::stack_(_7295,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7297,    double _7298,    double _7299) { return mosek::fusion::p_Expr::vstack(_7297,_7298,_7299); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7297,double _7298,double _7299){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7297).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7298).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7299).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7300,    double _7301,    monty::rc_ptr< ::mosek::fusion::Expression > _7302) { return mosek::fusion::p_Expr::vstack(_7300,_7301,_7302); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7300,double _7301,monty::rc_ptr< ::mosek::fusion::Expression > _7302){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7300).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7301).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7302.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7303,    monty::rc_ptr< ::mosek::fusion::Expression > _7304,    double _7305) { return mosek::fusion::p_Expr::vstack(_7303,_7304,_7305); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7303,monty::rc_ptr< ::mosek::fusion::Expression > _7304,double _7305){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7303).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7304.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7305).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7306,    monty::rc_ptr< ::mosek::fusion::Expression > _7307,    monty::rc_ptr< ::mosek::fusion::Expression > _7308) { return mosek::fusion::p_Expr::vstack(_7306,_7307,_7308); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7306,monty::rc_ptr< ::mosek::fusion::Expression > _7307,monty::rc_ptr< ::mosek::fusion::Expression > _7308){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7306).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7307.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7308.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7309,    double _7310,    double _7311) { return mosek::fusion::p_Expr::vstack(_7309,_7310,_7311); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7309,double _7310,double _7311){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7309.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7310).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7311).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7312,    double _7313,    monty::rc_ptr< ::mosek::fusion::Expression > _7314) { return mosek::fusion::p_Expr::vstack(_7312,_7313,_7314); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7312,double _7313,monty::rc_ptr< ::mosek::fusion::Expression > _7314){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7312.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7313).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7314.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7315,    monty::rc_ptr< ::mosek::fusion::Expression > _7316,    double _7317) { return mosek::fusion::p_Expr::vstack(_7315,_7316,_7317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7315,monty::rc_ptr< ::mosek::fusion::Expression > _7316,double _7317){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7315.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7316.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7317).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7318,    monty::rc_ptr< ::mosek::fusion::Expression > _7319,    monty::rc_ptr< ::mosek::fusion::Expression > _7320) { return mosek::fusion::p_Expr::vstack(_7318,_7319,_7320); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7318,monty::rc_ptr< ::mosek::fusion::Expression > _7319,monty::rc_ptr< ::mosek::fusion::Expression > _7320){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7318.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7319.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7320.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7321,    monty::rc_ptr< ::mosek::fusion::Expression > _7322) { return mosek::fusion::p_Expr::vstack(_7321,_7322); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7321,monty::rc_ptr< ::mosek::fusion::Expression > _7322){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7321).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7322.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7323,    double _7324) { return mosek::fusion::p_Expr::vstack(_7323,_7324); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7323,double _7324){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7323.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7324).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7325,    monty::rc_ptr< ::mosek::fusion::Expression > _7326) { return mosek::fusion::p_Expr::vstack(_7325,_7326); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7325,monty::rc_ptr< ::mosek::fusion::Expression > _7326){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7325.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7326.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7327) { return mosek::fusion::p_Expr::vstack(_7327); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7327){
  if ((NULL == _7327.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12100 = (int)0;
  int _12101 = (int)((_7327)->size(0));
  for (int _7328 = _12100; _7328 < _12101; ++_7328)
  {
    {
      if ((NULL == ((*_7327)(_7328)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7327,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7329,    monty::rc_ptr< ::mosek::fusion::Expression > _7330,    monty::rc_ptr< ::mosek::fusion::Expression > _7331) { return mosek::fusion::p_Expr::hstack(_7329,_7330,_7331); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7329,monty::rc_ptr< ::mosek::fusion::Expression > _7330,monty::rc_ptr< ::mosek::fusion::Expression > _7331){
  if (((NULL == _7329.get()) || ((NULL == _7330.get()) || (NULL == _7331.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7329.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7330.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7331.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7332,    monty::rc_ptr< ::mosek::fusion::Expression > _7333,    double _7334) { return mosek::fusion::p_Expr::hstack(_7332,_7333,_7334); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7332,monty::rc_ptr< ::mosek::fusion::Expression > _7333,double _7334){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7332.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7333.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7334).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7335,    double _7336,    monty::rc_ptr< ::mosek::fusion::Expression > _7337) { return mosek::fusion::p_Expr::hstack(_7335,_7336,_7337); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7335,double _7336,monty::rc_ptr< ::mosek::fusion::Expression > _7337){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7335.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7336).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7337.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7338,    double _7339,    double _7340) { return mosek::fusion::p_Expr::hstack(_7338,_7339,_7340); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7338,double _7339,double _7340){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7338.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7339).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7340).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7341,    monty::rc_ptr< ::mosek::fusion::Expression > _7342,    monty::rc_ptr< ::mosek::fusion::Expression > _7343) { return mosek::fusion::p_Expr::hstack(_7341,_7342,_7343); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7341,monty::rc_ptr< ::mosek::fusion::Expression > _7342,monty::rc_ptr< ::mosek::fusion::Expression > _7343){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7341).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7342.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7343.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7344,    monty::rc_ptr< ::mosek::fusion::Expression > _7345,    double _7346) { return mosek::fusion::p_Expr::hstack(_7344,_7345,_7346); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7344,monty::rc_ptr< ::mosek::fusion::Expression > _7345,double _7346){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7344).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7345.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7346).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7347,    double _7348,    monty::rc_ptr< ::mosek::fusion::Expression > _7349) { return mosek::fusion::p_Expr::hstack(_7347,_7348,_7349); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7347,double _7348,monty::rc_ptr< ::mosek::fusion::Expression > _7349){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7347).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7348).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7349.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7350,    monty::rc_ptr< ::mosek::fusion::Expression > _7351) { return mosek::fusion::p_Expr::hstack(_7350,_7351); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7350,monty::rc_ptr< ::mosek::fusion::Expression > _7351){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7350).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7351.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7352,    double _7353) { return mosek::fusion::p_Expr::hstack(_7352,_7353); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7352,double _7353){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7352.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7353).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7354,    monty::rc_ptr< ::mosek::fusion::Expression > _7355) { return mosek::fusion::p_Expr::hstack(_7354,_7355); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7354,monty::rc_ptr< ::mosek::fusion::Expression > _7355){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7354.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7355.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7356) { return mosek::fusion::p_Expr::hstack(_7356); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7356){
  if ((NULL == _7356.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12102 = (int)0;
  int _12103 = (int)((_7356)->size(0));
  for (int _7357 = _12102; _7357 < _12103; ++_7357)
  {
    {
      if ((NULL == ((*_7356)(_7357)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7356,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7358,    monty::rc_ptr< ::mosek::fusion::Expression > _7359,    monty::rc_ptr< ::mosek::fusion::Expression > _7360,    monty::rc_ptr< ::mosek::fusion::Expression > _7361) { return mosek::fusion::p_Expr::stack(_7358,_7359,_7360,_7361); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7358,monty::rc_ptr< ::mosek::fusion::Expression > _7359,monty::rc_ptr< ::mosek::fusion::Expression > _7360,monty::rc_ptr< ::mosek::fusion::Expression > _7361){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7359.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7360.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7361.get())}),_7358);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7362,    monty::rc_ptr< ::mosek::fusion::Expression > _7363,    monty::rc_ptr< ::mosek::fusion::Expression > _7364,    double _7365) { return mosek::fusion::p_Expr::stack(_7362,_7363,_7364,_7365); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7362,monty::rc_ptr< ::mosek::fusion::Expression > _7363,monty::rc_ptr< ::mosek::fusion::Expression > _7364,double _7365){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7363.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7364.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7365).get())}),_7362);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7366,    monty::rc_ptr< ::mosek::fusion::Expression > _7367,    double _7368,    monty::rc_ptr< ::mosek::fusion::Expression > _7369) { return mosek::fusion::p_Expr::stack(_7366,_7367,_7368,_7369); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7366,monty::rc_ptr< ::mosek::fusion::Expression > _7367,double _7368,monty::rc_ptr< ::mosek::fusion::Expression > _7369){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7367.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7368).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7369.get())}),_7366);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7370,    monty::rc_ptr< ::mosek::fusion::Expression > _7371,    double _7372,    double _7373) { return mosek::fusion::p_Expr::stack(_7370,_7371,_7372,_7373); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7370,monty::rc_ptr< ::mosek::fusion::Expression > _7371,double _7372,double _7373){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7371.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7372).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7373).get())}),_7370);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7374,    double _7375,    monty::rc_ptr< ::mosek::fusion::Expression > _7376,    monty::rc_ptr< ::mosek::fusion::Expression > _7377) { return mosek::fusion::p_Expr::stack(_7374,_7375,_7376,_7377); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7374,double _7375,monty::rc_ptr< ::mosek::fusion::Expression > _7376,monty::rc_ptr< ::mosek::fusion::Expression > _7377){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7375).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7376.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7377.get())}),_7374);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7378,    double _7379,    monty::rc_ptr< ::mosek::fusion::Expression > _7380,    double _7381) { return mosek::fusion::p_Expr::stack(_7378,_7379,_7380,_7381); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7378,double _7379,monty::rc_ptr< ::mosek::fusion::Expression > _7380,double _7381){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7379).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7380.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7381).get())}),_7378);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7382,    double _7383,    double _7384,    monty::rc_ptr< ::mosek::fusion::Expression > _7385) { return mosek::fusion::p_Expr::stack(_7382,_7383,_7384,_7385); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7382,double _7383,double _7384,monty::rc_ptr< ::mosek::fusion::Expression > _7385){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7383).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7384).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7385.get())}),_7382);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7386,    double _7387,    monty::rc_ptr< ::mosek::fusion::Expression > _7388) { return mosek::fusion::p_Expr::stack(_7386,_7387,_7388); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7386,double _7387,monty::rc_ptr< ::mosek::fusion::Expression > _7388){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7387).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7388.get())}),_7386);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7389,    monty::rc_ptr< ::mosek::fusion::Expression > _7390,    double _7391) { return mosek::fusion::p_Expr::stack(_7389,_7390,_7391); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7389,monty::rc_ptr< ::mosek::fusion::Expression > _7390,double _7391){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7390.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7391).get())}),_7389);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7392,    monty::rc_ptr< ::mosek::fusion::Expression > _7393,    monty::rc_ptr< ::mosek::fusion::Expression > _7394) { return mosek::fusion::p_Expr::stack(_7392,_7393,_7394); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7392,monty::rc_ptr< ::mosek::fusion::Expression > _7393,monty::rc_ptr< ::mosek::fusion::Expression > _7394){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7393.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7394.get())}),_7392);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7395,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7396) { return mosek::fusion::p_Expr::stack(_7395,_7396); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7395,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7396){
  return ::mosek::fusion::p_Expr::stack_(_7396,_7395);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7397,int _7398){
  if (((int)((_7397)->size(0)) == (int)1))
  {
    {
      return ((*_7397)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_7397,_7398),_7398)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7399,int _7400){
  int _7401 = (int)((_7399)->size(0));
  std::vector<int> _12104;
  for (int _7403 = (int)0, _12105 = _7401; _7403 < _12105 ; ++_7403)
  {
    _12104.push_back(((*_7399)(_7403))->getND());
  }
  auto _12106 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12104.size()),_12104.begin(),_12104.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7402 = _12106;
  _checked_ptr_1<int> _ptr__7402(_7402 ? _7402->raw() : nullptr,_7402 ? _7402->size(0) : 0);
  int _7404 = _ptr__7402[(int)0];
  int _7405 = _ptr__7402[(int)0];
  int _12107 = (int)1;
  int _12108 = _7401;
  for (int _7406 = _12107; _7406 < _12108; ++_7406)
  {
    {
      if ((_ptr__7402[_7406] < _7405))
      {
        {
          _7405 = _ptr__7402[_7406];
        }
      }
      {}
      if ((_ptr__7402[_7406] > _7404))
      {
        {
          _7404 = _ptr__7402[_7406];
        }
      }
      {}
    }
  }
  if ((_7404 < _7400))
  {
    {
      _7404 = _7400;
    }
  }
  {}
  if ((_7405 < _7404))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7407 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_7401)));
      std::shared_ptr< monty::ndarray< int,1 > > _7408 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7404)));
      _checked_ptr_1<int> _ptr__7408(_7408 ? _7408->raw() : nullptr,_7408 ? _7408->size(0) : 0);
      int _12109 = (int)0;
      int _12110 = _7401;
      for (int _7409 = _12109; _7409 < _12110; ++_7409)
      {
        {
          if ((((*_7399)(_7409))->getND() == _7404))
          {
            {
              ((*_7407)(_7409)) = ((*_7399)(_7409));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _7410 = ((*_7399)(_7409))->getShape();
              _checked_ptr_1<int> _ptr__7410(_7410 ? _7410->raw() : nullptr,_7410 ? _7410->size(0) : 0);
              int _12111 = (int)0;
              int _12112 = (int)((_7410)->size(0));
              for (int _7411 = _12111; _7411 < _12112; ++_7411)
              {
                {
                  _ptr__7408[_7411] = _ptr__7410[_7411];
                }
              }
              int _12113 = (int)((_7410)->size(0));
              int _12114 = _7404;
              for (int _7412 = _12113; _7412 < _12114; ++_7412)
              {
                {
                  _ptr__7408[_7412] = (int)1;
                }
              }
              ((*_7407)(_7409)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7408,((*_7399)(_7409)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _7407;
    }
  }
  else
  {
    {
      return _7399;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _7413,    int _7414,    int _7415) { return mosek::fusion::p_Expr::repeat(_7413,_7414,_7415); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _7413,int _7414,int _7415){
  return ::mosek::fusion::p_Expr::repeat(_7413->__mosek_2fusion_2Variable__asExpr(),_7414,_7415);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _7416,    int _7417,    int _7418) { return mosek::fusion::p_Expr::repeat(_7416,_7417,_7418); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _7416,int _7417,int _7418){
  if ((_7417 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  if (((_7418 < (int)0) || (_7418 > _7416->getND())))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  else
  {
    {
      if ((_7418 == _7416->getND()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7419 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _7418,(int)1 ))));
          _checked_ptr_1<int> _ptr__7419(_7419 ? _7419->raw() : nullptr,_7419 ? _7419->size(0) : 0);
          int _12115 = (int)0;
          int _12116 = _7418;
          for (int _7420 = _12115; _7420 < _12116; ++_7420)
          {
            {
              _ptr__7419[_7420] = _7416->getDim(_7420);
            }
          }
          _ptr__7419[_7418] = (int)1;
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(::mosek::fusion::p_Expr::reshape(_7416,_7419),_7418,_7417)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(_7416,_7418,_7417)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7421) { return mosek::fusion::p_Expr::add(_7421); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7421){
  std::vector<double> _12117;
  for (int _7422 = (int)0, _12118 = (int)((_7421)->size(0)); _7422 < _12118 ; ++_7422)
  {
    _12117.push_back(1.0);
  }
  auto _12119 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12117.size()),_12117.begin(),_12117.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_7421,_12119)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7423) { return mosek::fusion::p_Expr::add(_7423); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7423){
  if ((NULL == _7423.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_7423)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7423)->size(0)) > (int)0) && (NULL == ((*_7423)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _7424 = ((*_7423)((int)0))->getND();
  int _12120 = (int)1;
  int _12121 = (int)((_7423)->size(0));
  for (int _7425 = _12120; _7425 < _12121; ++_7425)
  {
    {
      if ((_7424 < ((*_7423)(_7425))->getND()))
      {
        {
          _7424 = ((*_7423)(_7425))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _7426 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_7423)->size(0)),_7424)));
  int _12122 = (int)0;
  int _12123 = (int)((_7423)->size(0));
  for (int _7427 = _12122; _7427 < _12123; ++_7427)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7428 = ((*_7423)(_7427))->getShape();
      _checked_ptr_1<int> _ptr__7428(_7428 ? _7428->raw() : nullptr,_7428 ? _7428->size(0) : 0);
      int _12124 = (int)0;
      int _12125 = (int)((_7428)->size(0));
      for (int _7429 = _12124; _7429 < _12125; ++_7429)
      {
        {
          ((*_7426)(_7427,_7429)) = _ptr__7428[_7429];
        }
      }
      int _12126 = (int)((_7428)->size(0));
      int _12127 = _7424;
      for (int _7430 = _12126; _7430 < _12127; ++_7430)
      {
        {
          ((*_7426)(_7427,_7430)) = (int)1;
        }
      }
    }
  }
  int _12128 = (int)1;
  int _12129 = (int)((_7423)->size(0));
  for (int _7431 = _12128; _7431 < _12129; ++_7431)
  {
    {
      int _12130 = (int)0;
      int _12131 = _7424;
      for (int _7432 = _12130; _7432 < _12131; ++_7432)
      {
        {
          if ((((*_7426)((int)0,_7432)) != ((*_7426)(_7431,_7432))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _12132;
  for (int _7434 = (int)0, _12133 = _7424; _7434 < _12133 ; ++_7434)
  {
    _12132.push_back(((*_7426)((int)0,_7434)));
  }
  auto _12134 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12132.size()),_12132.begin(),_12132.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7433 = _12134;
  _checked_ptr_1<int> _ptr__7433(_7433 ? _7433->raw() : nullptr,_7433 ? _7433->size(0) : 0);
  int _7435 = (int)1;
  int _12135 = (int)0;
  int _12136 = _7424;
  for (int _7436 = _12135; _7436 < _12136; ++_7436)
  {
    {
      _7435 *= _ptr__7433[_7436];
    }
  }
  int _7437 = (int)0;
  int _7438 = (int)0;
  int _12137 = (int)0;
  int _12138 = (int)((_7423)->size(0));
  for (int _7439 = _12137; _7439 < _12138; ++_7439)
  {
    {
      int _7440 = ((*_7423)(_7439))->numInst();
      _7437 += _7440;
      int _12139;
      bool _12140 = (_7438 > _7440);
      if (_12140)
      {
        _12139 = _7438;
      }
      else
      {
        _12139 = _7440;
      }
      _7438 = _12139;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7441 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7435,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7441(_7441 ? _7441->raw() : nullptr,_7441 ? _7441->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7442 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7437)));
  _checked_ptr_1<long long> _ptr__7442(_7442 ? _7442->raw() : nullptr,_7442 ? _7442->size(0) : 0);
  std::vector<double> _12141;
  for (int _7444 = (int)0, _12142 = _7437; _7444 < _12142 ; ++_7444)
  {
    _12141.push_back(1.0);
  }
  auto _12143 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12141.size()),_12141.begin(),_12141.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7443 = _12143;
  _checked_ptr_1<double> _ptr__7443(_7443 ? _7443->raw() : nullptr,_7443 ? _7443->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _7445 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7438)));
    _checked_ptr_1<long long> _ptr__7445(_7445 ? _7445->raw() : nullptr,_7445 ? _7445->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7446 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7438)));
    _checked_ptr_1<long long> _ptr__7446(_7446 ? _7446->raw() : nullptr,_7446 ? _7446->size(0) : 0);
    int _12144 = (int)0;
    int _12145 = (int)((_7423)->size(0));
    for (int _7447 = _12144; _7447 < _12145; ++_7447)
    {
      {
        int _7448 = ((*_7423)(_7447))->inst((int)0,_7445,(int)0,_7446);
        int _12146 = (int)0;
        int _12147 = _7448;
        for (int _7449 = _12146; _7449 < _12147; ++_7449)
        {
          {
            _ptr__7441[safe_add( _ptr__7445[_7449],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _12148 = (int)0;
    int _12149 = _7435;
    for (int _7450 = _12148; _7450 < _12149; ++_7450)
    {
      {
        _ptr__7441[safe_add( _7450,(int)1 )] += _ptr__7441[_7450];
      }
    }
    int _12150 = (int)0;
    int _12151 = (int)((_7423)->size(0));
    for (int _7451 = _12150; _7451 < _12151; ++_7451)
    {
      {
        int _7452 = ((*_7423)(_7451))->inst((int)0,_7445,(int)0,_7446);
        int _12152 = (int)0;
        int _12153 = _7452;
        for (int _7453 = _12152; _7453 < _12153; ++_7453)
        {
          {
            _ptr__7442[_ptr__7441[_ptr__7445[_7453]]] = _ptr__7446[_7453];
            ++ _ptr__7441[_ptr__7445[_7453]];
          }
        }
      }
    }
    int _12154 = (int)0;
    int _12155 = _7435;
    for (int _7454 = _12154; _7454 < _12155; ++_7454)
    {
      {
        _ptr__7441[(_7435 - _7454)] = _ptr__7441[((_7435 - _7454) - (int)1)];
      }
    }
    _ptr__7441[(int)0] = (int)0;
  }
  std::vector<double> _12156;
  for (int _7455 = (int)0, _12157 = _7435; _7455 < _12157 ; ++_7455)
  {
    _12156.push_back(0.0);
  }
  auto _12158 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12156.size()),_12156.begin(),_12156.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_7441,_7442,_7443,_12158,_7433,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _7456,double _7457,monty::rc_ptr< ::mosek::fusion::Expression > _7458,double _7459){
  int _7460 = _7456->getND();
  int _7461 = _7458->getND();
  if ((_7460 == _7461))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7456,_7458,_7457,_7459)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _12159;
      bool _12160 = (_7460 > _7461);
      if (_12160)
      {
        _12159 = _7460;
      }
      else
      {
        _12159 = _7461;
      }
      int _7462 = _12159;
      std::shared_ptr< monty::ndarray< int,1 > > _7463 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7462)));
      _checked_ptr_1<int> _ptr__7463(_7463 ? _7463->raw() : nullptr,_7463 ? _7463->size(0) : 0);
      if ((_7460 < _7461))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7464 = _7456->getShape();
          _checked_ptr_1<int> _ptr__7464(_7464 ? _7464->raw() : nullptr,_7464 ? _7464->size(0) : 0);
          int _12161 = (int)0;
          int _12162 = _7460;
          for (int _7465 = _12161; _7465 < _12162; ++_7465)
          {
            {
              _ptr__7463[_7465] = _ptr__7464[_7465];
            }
          }
          int _12163 = _7460;
          int _12164 = _7462;
          for (int _7466 = _12163; _7466 < _12164; ++_7466)
          {
            {
              _ptr__7463[_7466] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7463,_7456)).as<::mosek::fusion::Expression>(),_7458,_7457,_7459)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7467 = _7458->getShape();
          _checked_ptr_1<int> _ptr__7467(_7467 ? _7467->raw() : nullptr,_7467 ? _7467->size(0) : 0);
          int _12165 = (int)0;
          int _12166 = _7461;
          for (int _7468 = _12165; _7468 < _12166; ++_7468)
          {
            {
              _ptr__7463[_7468] = _ptr__7467[_7468];
            }
          }
          int _12167 = _7461;
          int _12168 = _7462;
          for (int _7469 = _12167; _7469 < _12168; ++_7469)
          {
            {
              _ptr__7463[_7469] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7456,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7463,_7458)).as<::mosek::fusion::Expression>(),_7457,_7459)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _7470) { return mosek::fusion::p_Expr::transpose(_7470); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _7470){
  if ((_7470->getND() == (int)0))
  {
    {
      return _7470;
    }
  }
  else if((_7470->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7470->getDim((int)0))}),_7470)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7470->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7470)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7471,    monty::rc_ptr< ::mosek::fusion::Expression > _7472) { return mosek::fusion::p_Expr::mulElm(_7471,_7472); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _7471,monty::rc_ptr< ::mosek::fusion::Expression > _7472){
  return ::mosek::fusion::p_Expr::mulElm_(_7471,_7472);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7473,    monty::rc_ptr< ::mosek::fusion::Expression > _7474) { return mosek::fusion::p_Expr::mulElm(_7473,_7474); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7473,monty::rc_ptr< ::mosek::fusion::Expression > _7474){
  return ::mosek::fusion::p_Expr::mulElm_(_7473,_7474);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _7475,    monty::rc_ptr< ::mosek::fusion::Expression > _7476) { return mosek::fusion::p_Expr::mulElm(_7475,_7476); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _7475,monty::rc_ptr< ::mosek::fusion::Expression > _7476){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7475),_7476);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _7477,    monty::rc_ptr< ::mosek::fusion::Expression > _7478) { return mosek::fusion::p_Expr::mulElm(_7477,_7478); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _7477,monty::rc_ptr< ::mosek::fusion::Expression > _7478){
  _checked_ptr_1<double> _ptr__7477(_7477 ? _7477->raw() : nullptr, _7477 ? _7477->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7477,_7478);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7479,    monty::rc_ptr< ::mosek::fusion::Matrix > _7480) { return mosek::fusion::p_Expr::mulElm(_7479,_7480); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7479,monty::rc_ptr< ::mosek::fusion::Matrix > _7480){
  return ::mosek::fusion::p_Expr::mulElm_(_7480,_7479);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7481,    std::shared_ptr< monty::ndarray< double,2 > > _7482) { return mosek::fusion::p_Expr::mulElm(_7481,_7482); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7481,std::shared_ptr< monty::ndarray< double,2 > > _7482){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7482),_7481);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7483,    std::shared_ptr< monty::ndarray< double,1 > > _7484) { return mosek::fusion::p_Expr::mulElm(_7483,_7484); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7483,std::shared_ptr< monty::ndarray< double,1 > > _7484){
  _checked_ptr_1<double> _ptr__7484(_7484 ? _7484->raw() : nullptr, _7484 ? _7484->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7484,_7483);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7485,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7486) { return mosek::fusion::p_Expr::mulElm(_7485,_7486); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7485,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7486){
  return ::mosek::fusion::p_Expr::mulElm_(_7486,_7485);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7487,    monty::rc_ptr< ::mosek::fusion::Expression > _7488) { return mosek::fusion::p_Expr::mulElm(_7487,_7488); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Parameter > _7487,monty::rc_ptr< ::mosek::fusion::Expression > _7488){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7487,_7488)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7489,    monty::rc_ptr< ::mosek::fusion::Parameter > _7490) { return mosek::fusion::p_Expr::mulElm(_7489,_7490); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7489,monty::rc_ptr< ::mosek::fusion::Parameter > _7490){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7490,_7489)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7491,    monty::rc_ptr< ::mosek::fusion::Expression > _7492) { return mosek::fusion::p_Expr::sub(_7491,_7492); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7491,monty::rc_ptr< ::mosek::fusion::Expression > _7492){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7491),1.0,_7492,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7493,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7494) { return mosek::fusion::p_Expr::sub(_7493,_7494); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7493,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7494){
  return ::mosek::fusion::p_Expr::add_(_7493,1.0,::mosek::fusion::p_Expr::constTerm(_7494),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7495,    monty::rc_ptr< ::mosek::fusion::Expression > _7496) { return mosek::fusion::p_Expr::sub(_7495,_7496); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _7495,monty::rc_ptr< ::mosek::fusion::Expression > _7496){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7495),1.0,_7496,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7497,    monty::rc_ptr< ::mosek::fusion::Matrix > _7498) { return mosek::fusion::p_Expr::sub(_7497,_7498); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7497,monty::rc_ptr< ::mosek::fusion::Matrix > _7498){
  return ::mosek::fusion::p_Expr::add_(_7497,1.0,::mosek::fusion::p_Expr::constTerm(_7498),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _7499,    monty::rc_ptr< ::mosek::fusion::Expression > _7500) { return mosek::fusion::p_Expr::sub(_7499,_7500); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _7499,monty::rc_ptr< ::mosek::fusion::Expression > _7500){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7500->getShape(),_7499),1.0,_7500,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7501,    double _7502) { return mosek::fusion::p_Expr::sub(_7501,_7502); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7501,double _7502){
  return ::mosek::fusion::p_Expr::add_(_7501,1.0,::mosek::fusion::p_Expr::constTerm(_7501->getShape(),_7502),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _7503,    monty::rc_ptr< ::mosek::fusion::Expression > _7504) { return mosek::fusion::p_Expr::sub(_7503,_7504); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _7503,monty::rc_ptr< ::mosek::fusion::Expression > _7504){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7503),1.0,_7504,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _7505,    monty::rc_ptr< ::mosek::fusion::Expression > _7506) { return mosek::fusion::p_Expr::sub(_7505,_7506); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _7505,monty::rc_ptr< ::mosek::fusion::Expression > _7506){
  _checked_ptr_1<double> _ptr__7505(_7505 ? _7505->raw() : nullptr, _7505 ? _7505->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7505),1.0,_7506,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7507,    std::shared_ptr< monty::ndarray< double,2 > > _7508) { return mosek::fusion::p_Expr::sub(_7507,_7508); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7507,std::shared_ptr< monty::ndarray< double,2 > > _7508){
  return ::mosek::fusion::p_Expr::add_(_7507,1.0,::mosek::fusion::p_Expr::constTerm(_7508),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7509,    std::shared_ptr< monty::ndarray< double,1 > > _7510) { return mosek::fusion::p_Expr::sub(_7509,_7510); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7509,std::shared_ptr< monty::ndarray< double,1 > > _7510){
  _checked_ptr_1<double> _ptr__7510(_7510 ? _7510->raw() : nullptr, _7510 ? _7510->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7509,1.0,::mosek::fusion::p_Expr::constTerm(_7510),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7511,    monty::rc_ptr< ::mosek::fusion::Expression > _7512) { return mosek::fusion::p_Expr::sub(_7511,_7512); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7511,monty::rc_ptr< ::mosek::fusion::Expression > _7512){
  return ::mosek::fusion::p_Expr::add_(_7511,1.0,_7512,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7513,    monty::rc_ptr< ::mosek::fusion::Expression > _7514) { return mosek::fusion::p_Expr::add(_7513,_7514); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7513,monty::rc_ptr< ::mosek::fusion::Expression > _7514){
  return ::mosek::fusion::p_Expr::add_(_7514,1.0,::mosek::fusion::p_Expr::constTerm(_7513),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7515,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7516) { return mosek::fusion::p_Expr::add(_7515,_7516); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7515,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7516){
  return ::mosek::fusion::p_Expr::add_(_7515,1.0,::mosek::fusion::p_Expr::constTerm(_7516),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7517,    monty::rc_ptr< ::mosek::fusion::Expression > _7518) { return mosek::fusion::p_Expr::add(_7517,_7518); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _7517,monty::rc_ptr< ::mosek::fusion::Expression > _7518){
  return ::mosek::fusion::p_Expr::add_(_7518,1.0,::mosek::fusion::p_Expr::constTerm(_7517),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7519,    monty::rc_ptr< ::mosek::fusion::Matrix > _7520) { return mosek::fusion::p_Expr::add(_7519,_7520); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7519,monty::rc_ptr< ::mosek::fusion::Matrix > _7520){
  return ::mosek::fusion::p_Expr::add_(_7519,1.0,::mosek::fusion::p_Expr::constTerm(_7520),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _7521,    monty::rc_ptr< ::mosek::fusion::Expression > _7522) { return mosek::fusion::p_Expr::add(_7521,_7522); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _7521,monty::rc_ptr< ::mosek::fusion::Expression > _7522){
  return ::mosek::fusion::p_Expr::add_(_7522,1.0,::mosek::fusion::p_Expr::constTerm(_7522->getShape(),_7521),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7523,    double _7524) { return mosek::fusion::p_Expr::add(_7523,_7524); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7523,double _7524){
  return ::mosek::fusion::p_Expr::add_(_7523,1.0,::mosek::fusion::p_Expr::constTerm(_7523->getShape(),_7524),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _7525,    monty::rc_ptr< ::mosek::fusion::Expression > _7526) { return mosek::fusion::p_Expr::add(_7525,_7526); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _7525,monty::rc_ptr< ::mosek::fusion::Expression > _7526){
  return ::mosek::fusion::p_Expr::add_(_7526,1.0,::mosek::fusion::p_Expr::constTerm(_7525),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _7527,    monty::rc_ptr< ::mosek::fusion::Expression > _7528) { return mosek::fusion::p_Expr::add(_7527,_7528); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _7527,monty::rc_ptr< ::mosek::fusion::Expression > _7528){
  _checked_ptr_1<double> _ptr__7527(_7527 ? _7527->raw() : nullptr, _7527 ? _7527->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7528,1.0,::mosek::fusion::p_Expr::constTerm(_7527),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7529,    std::shared_ptr< monty::ndarray< double,2 > > _7530) { return mosek::fusion::p_Expr::add(_7529,_7530); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7529,std::shared_ptr< monty::ndarray< double,2 > > _7530){
  return ::mosek::fusion::p_Expr::add_(_7529,1.0,::mosek::fusion::p_Expr::constTerm(_7530),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7531,    std::shared_ptr< monty::ndarray< double,1 > > _7532) { return mosek::fusion::p_Expr::add(_7531,_7532); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7531,std::shared_ptr< monty::ndarray< double,1 > > _7532){
  _checked_ptr_1<double> _ptr__7532(_7532 ? _7532->raw() : nullptr, _7532 ? _7532->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7531,1.0,::mosek::fusion::p_Expr::constTerm(_7532),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7533,    monty::rc_ptr< ::mosek::fusion::Expression > _7534) { return mosek::fusion::p_Expr::add(_7533,_7534); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7533,monty::rc_ptr< ::mosek::fusion::Expression > _7534){
  return ::mosek::fusion::p_Expr::add_(_7533,1.0,_7534,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7535,monty::rc_ptr< ::mosek::fusion::WorkStack > _7536,monty::rc_ptr< ::mosek::fusion::WorkStack > _7537) { mosek::fusion::p_Expr::_get_impl(this)->eval(_7535,_7536,_7537); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7535,monty::rc_ptr< ::mosek::fusion::WorkStack > _7536,monty::rc_ptr< ::mosek::fusion::WorkStack > _7537){
  int _7538 = ((int)((ptrb)->size(0)) - (int)1);
  int _7539 = safe_add( (int)((*ptrb)(_7538)),_7538 );
  int _7540 = (int)((shape)->size(0));
  _7535->alloc_expr(_7540,_7538,_7539,(NULL != inst.get()));
  int _7541 = mosek::fusion::p_WorkStack::_get_impl(_7535)->ptr_base;
  int _7542 = mosek::fusion::p_WorkStack::_get_impl(_7535)->nidxs_base;
  int _7543 = mosek::fusion::p_WorkStack::_get_impl(_7535)->sp_base;
  int _7544 = mosek::fusion::p_WorkStack::_get_impl(_7535)->cof_base;
  int _7545 = mosek::fusion::p_WorkStack::_get_impl(_7535)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _7546 = mosek::fusion::p_WorkStack::_get_impl(_7535)->i32;
  _checked_ptr_1<int> _ptr__7546(_7546 ? _7546->raw() : nullptr,_7546 ? _7546->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7547 = mosek::fusion::p_WorkStack::_get_impl(_7535)->i64;
  _checked_ptr_1<long long> _ptr__7547(_7547 ? _7547->raw() : nullptr,_7547 ? _7547->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7548 = mosek::fusion::p_WorkStack::_get_impl(_7535)->f64;
  _checked_ptr_1<double> _ptr__7548(_7548 ? _7548->raw() : nullptr,_7548 ? _7548->size(0) : 0);
  {
    int _12169 = (int)0;
    int _12170 = _7540;
    for (int _7549 = _12169; _7549 < _12170; ++_7549)
    {
      {
        _ptr__7546[safe_add( _7545,_7549 )] = ((*shape)(_7549));
      }
    }
    _ptr__7546[_7541] = (int)0;
    int _7550 = (int)0;
    int _12171 = (int)0;
    int _12172 = _7538;
    for (int _7551 = _12171; _7551 < _12172; ++_7551)
    {
      {
        long long _12173 = ((*ptrb)(_7551));
        long long _12174 = ((*ptrb)(safe_add( _7551,(int)1 )));
        for (long long _7552 = _12173; _7552 < _12174; ++_7552)
        {
          {
            _ptr__7547[safe_add( _7542,_7550 )] = ((*subj)(_7552));
            _ptr__7548[safe_add( _7544,_7550 )] = ((*cof_v)(_7552));
            ++ _7550;
          }
        }
        _ptr__7547[safe_add( _7542,_7550 )] = (int)0;
        _ptr__7548[safe_add( _7544,_7550 )] = ((*bfix)(_7551));
        ++ _7550;
        _ptr__7546[safe_add( safe_add( _7541,_7551 ),(int)1 )] = _7550;
      }
    }
  }
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _7553,std::shared_ptr< monty::ndarray< long long,1 > > _7554,std::shared_ptr< monty::ndarray< double,1 > > _7555,std::shared_ptr< monty::ndarray< double,1 > > _7556,std::shared_ptr< monty::ndarray< int,1 > > _7557,std::shared_ptr< monty::ndarray< long long,1 > > _7558){
  _checked_ptr_1<long long> _ptr__7553(_7553 ? _7553->raw() : nullptr, _7553 ? _7553->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7554(_7554 ? _7554->raw() : nullptr, _7554 ? _7554->size(0) : 0);
  _checked_ptr_1<double> _ptr__7555(_7555 ? _7555->raw() : nullptr, _7555 ? _7555->size(0) : 0);
  _checked_ptr_1<double> _ptr__7556(_7556 ? _7556->raw() : nullptr, _7556 ? _7556->size(0) : 0);
  _checked_ptr_1<int> _ptr__7557(_7557 ? _7557->raw() : nullptr, _7557 ? _7557->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7558(_7558 ? _7558->raw() : nullptr, _7558 ? _7558->size(0) : 0);
  if ((NULL == _7557.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _7559 = ((int)((_7553)->size(0)) - (int)1);
  long long _7560 = _ptr__7553[((int)((_7553)->size(0)) - (int)1)];
  int _7561 = (int)((_7557)->size(0));
  long long _7562 = (long long)1;
  int _12175 = (int)0;
  int _12176 = _7561;
  for (int _7563 = _12175; _7563 < _12176; ++_7563)
  {
    {
      _7562 *= _ptr__7557[_7563];
    }
  }
  if (((int)((_7553)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_7560 != (int)((_7554)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_7560 != (int)((_7555)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _7556.get()) || (_7559 != (int)((_7556)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _7558.get()) && ((int)((_7558)->size(0)) < _7562)))
  {
    {
      if (((int)((_7558)->size(0)) != ((int)((_7553)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_7558)->size(0)) > (int)0))
      {
        {
          if (((_ptr__7558[(int)0] < (int)0) || (_ptr__7558[(int)0] >= _7562)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _7564 = true;
          long long _7565 = _7562;
          int _12177 = (int)1;
          int _12178 = (int)((_7558)->size(0));
          for (int _7566 = _12177; _7566 < _12178; ++_7566)
          {
            {
              _7564 = (_7564 && ((_ptr__7558[_7566] >= (int)0) && ((_ptr__7558[_7566] < _7565) && (_ptr__7558[_7566] > _ptr__7558[(_7566 - (int)1)]))));
            }
          }
          if ((!_7564))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_7562 != ((long long)((_7553)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _7567 = false;
  bool _7568 = false;
  if ((_ptr__7553[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _7569 = true;
  int _12179 = (int)0;
  int _12180 = _7559;
  for (int _7570 = _12179; _7570 < _12180; ++_7570)
  {
    {
      _7569 = (_7569 && (_ptr__7553[_7570] <= _ptr__7553[safe_add( _7570,(int)1 )]));
    }
  }
  if ((!_7569))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7571){
  monty::rc_ptr< ::mosek::fusion::Model > _12181;
  bool _12182 = ((NULL == _7571.get()) || ((int)((_7571)->size(0)) == (int)0));
  if (_12182)
  {
    _12181 = nullptr;
  }
  else
  {
    _12181 = ((*_7571)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _12181;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _7572) { return __mosek_2fusion_2Expression__pick(_7572); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _7573) { return __mosek_2fusion_2Expression__pick(_7573); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _7574) { return __mosek_2fusion_2Expression__index(_7574); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _7575) { return __mosek_2fusion_2Expression__index(_7575); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _7576,std::shared_ptr< monty::ndarray< int,1 > > _7577) { return __mosek_2fusion_2Expression__slice(_7576,_7577); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _7578,int _7579) { return __mosek_2fusion_2Expression__slice(_7578,_7579); }
mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _7584,    int _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< int,1 > > _7587,    std::shared_ptr< monty::ndarray< double,1 > > _7588,    std::shared_ptr< monty::ndarray< int,1 > > _7589,    std::shared_ptr< monty::ndarray< int,1 > > _7590,    std::shared_ptr< monty::ndarray< double,1 > > _7591,    double _7592){ return new mosek::fusion::SymmetricMatrix(_7584,_7585,_7586,_7587,_7588,_7589,_7590,_7591,_7592); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _7584,    int _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< int,1 > > _7587,    std::shared_ptr< monty::ndarray< double,1 > > _7588,    std::shared_ptr< monty::ndarray< int,1 > > _7589,    std::shared_ptr< monty::ndarray< int,1 > > _7590,    std::shared_ptr< monty::ndarray< double,1 > > _7591,    double _7592) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_7584,_7585,_7586,_7587,_7588,_7589,_7590,_7591,_7592); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _7584,    int _7585,    std::shared_ptr< monty::ndarray< int,1 > > _7586,    std::shared_ptr< monty::ndarray< int,1 > > _7587,    std::shared_ptr< monty::ndarray< double,1 > > _7588,    std::shared_ptr< monty::ndarray< int,1 > > _7589,    std::shared_ptr< monty::ndarray< int,1 > > _7590,    std::shared_ptr< monty::ndarray< double,1 > > _7591,    double _7592){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7586(_7586 ? _7586->raw() : nullptr, _7586 ? _7586->size(0) : 0);
    _checked_ptr_1<int> _ptr__7587(_7587 ? _7587->raw() : nullptr, _7587 ? _7587->size(0) : 0);
    _checked_ptr_1<double> _ptr__7588(_7588 ? _7588->raw() : nullptr, _7588 ? _7588->size(0) : 0);
    _checked_ptr_1<int> _ptr__7589(_7589 ? _7589->raw() : nullptr, _7589 ? _7589->size(0) : 0);
    _checked_ptr_1<int> _ptr__7590(_7590 ? _7590->raw() : nullptr, _7590 ? _7590->size(0) : 0);
    _checked_ptr_1<double> _ptr__7591(_7591 ? _7591->raw() : nullptr, _7591 ? _7591->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _7584;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _7585;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _7586;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _7587;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _7588;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _7589;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _7590;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _7591;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _7592;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _7593,    std::shared_ptr< monty::ndarray< int,1 > > _7594,    std::shared_ptr< monty::ndarray< double,1 > > _7595) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7593,_7594,_7595); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _7593,std::shared_ptr< monty::ndarray< int,1 > > _7594,std::shared_ptr< monty::ndarray< double,1 > > _7595){
  _checked_ptr_1<int> _ptr__7594(_7594 ? _7594->raw() : nullptr, _7594 ? _7594->size(0) : 0);
  _checked_ptr_1<double> _ptr__7595(_7595 ? _7595->raw() : nullptr, _7595 ? _7595->size(0) : 0);
  if (((int)((_7594)->size(0)) != (int)((_7595)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _12183 = (int)0;
  int _12184 = (int)((_7594)->size(0));
  for (int _7596 = _12183; _7596 < _12184; ++_7596)
  {
    {
      if (((_ptr__7594[_7596] < (int)0) || (_ptr__7594[_7596] >= _7593)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _12185;
  for (int _7598 = (int)0, _12186 = (int)((_7594)->size(0)); _7598 < _12186 ; ++_7598)
  {
    _12185.push_back(_ptr__7594[_7598]);
  }
  auto _12187 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12185.size()),_12185.begin(),_12185.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7597 = _12187;
  _checked_ptr_1<int> _ptr__7597(_7597 ? _7597->raw() : nullptr,_7597 ? _7597->size(0) : 0);
  std::vector<int> _12188;
  for (int _7600 = (int)0, _12189 = (int)((_7594)->size(0)); _7600 < _12189 ; ++_7600)
  {
    _12188.push_back((int)1);
  }
  auto _12190 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12188.size()),_12188.begin(),_12188.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7599 = _12190;
  _checked_ptr_1<int> _ptr__7599(_7599 ? _7599->raw() : nullptr,_7599 ? _7599->size(0) : 0);
  std::vector<double> _12191;
  for (int _7602 = (int)0, _12192 = (int)((_7595)->size(0)); _7602 < _12192 ; ++_7602)
  {
    _12191.push_back(_ptr__7595[_7602]);
  }
  auto _12193 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12191.size()),_12191.begin(),_12191.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7601 = _12193;
  _checked_ptr_1<double> _ptr__7601(_7601 ? _7601->raw() : nullptr,_7601 ? _7601->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7593,(int)1,_7597,_7599,_7601,_7597,_7599,_7601,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _7603) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7603); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _7603){
  _checked_ptr_1<double> _ptr__7603(_7603 ? _7603->raw() : nullptr, _7603 ? _7603->size(0) : 0);
  int _7604 = (int)((_7603)->size(0));
  std::vector<int> _12194;
  for (int _7606 = (int)0, _12195 = _7604; _7606 < _12195 ; ++_7606)
  {
    _12194.push_back(_7606);
  }
  auto _12196 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12194.size()),_12194.begin(),_12194.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7605 = _12196;
  _checked_ptr_1<int> _ptr__7605(_7605 ? _7605->raw() : nullptr,_7605 ? _7605->size(0) : 0);
  std::vector<int> _12197;
  for (int _7608 = (int)0, _12198 = _7604; _7608 < _12198 ; ++_7608)
  {
    _12197.push_back((int)1);
  }
  auto _12199 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12197.size()),_12197.begin(),_12197.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7607 = _12199;
  _checked_ptr_1<int> _ptr__7607(_7607 ? _7607->raw() : nullptr,_7607 ? _7607->size(0) : 0);
  std::vector<double> _12200;
  for (int _7610 = (int)0, _12201 = _7604; _7610 < _12201 ; ++_7610)
  {
    _12200.push_back(_ptr__7603[_7610]);
  }
  auto _12202 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12200.size()),_12200.begin(),_12200.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7609 = _12202;
  _checked_ptr_1<double> _ptr__7609(_7609 ? _7609->raw() : nullptr,_7609 ? _7609->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7604,(int)1,_7605,_7607,_7609,_7605,_7607,_7609,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7611) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_7611); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _7611){
  _checked_ptr_1<double> _ptr__7611(_7611 ? _7611->raw() : nullptr, _7611 ? _7611->size(0) : 0);
  int _7612 = (int)((_7611)->size(0));
  std::vector<int> _12203;
  for (int _7614 = (int)0, _12204 = _7612; _7614 < _12204 ; ++_7614)
  {
    _12203.push_back(_7614);
  }
  auto _12205 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12203.size()),_12203.begin(),_12203.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7613 = _12205;
  _checked_ptr_1<int> _ptr__7613(_7613 ? _7613->raw() : nullptr,_7613 ? _7613->size(0) : 0);
  std::vector<int> _12206;
  for (int _7615 = (int)0, _12207 = _7612; _7615 < _12207 ; ++_7615)
  {
    _12206.push_back((_7612 - _7615));
  }
  auto _12208 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12206.size()),_12206.begin(),_12206.end()));
  std::vector<double> _12209;
  for (int _7616 = (int)0, _12210 = _7612; _7616 < _12210 ; ++_7616)
  {
    _12209.push_back(_ptr__7611[_7616]);
  }
  auto _12211 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12209.size()),_12209.begin(),_12209.end()));
  std::vector<double> _12212;
  for (int _7617 = (int)0, _12213 = _7612; _7617 < _12213 ; ++_7617)
  {
    _12212.push_back(1.0);
  }
  auto _12214 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12212.size()),_12212.begin(),_12212.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7612,_7612,_7613,_12208,_12211,_7613,_7613,_12214,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7618) { return mosek::fusion::p_SymmetricMatrix::diag(_7618); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7618){
  _checked_ptr_1<double> _ptr__7618(_7618 ? _7618->raw() : nullptr, _7618 ? _7618->size(0) : 0);
  int _7619 = (int)((_7618)->size(0));
  std::vector<int> _12215;
  for (int _7621 = (int)0, _12216 = _7619; _7621 < _12216 ; ++_7621)
  {
    _12215.push_back(_7621);
  }
  auto _12217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12215.size()),_12215.begin(),_12215.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7620 = _12217;
  _checked_ptr_1<int> _ptr__7620(_7620 ? _7620->raw() : nullptr,_7620 ? _7620->size(0) : 0);
  std::vector<double> _12218;
  for (int _7622 = (int)0, _12219 = _7619; _7622 < _12219 ; ++_7622)
  {
    _12218.push_back(_ptr__7618[_7622]);
  }
  auto _12220 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12218.size()),_12218.begin(),_12218.end()));
  std::vector<double> _12221;
  for (int _7623 = (int)0, _12222 = _7619; _7623 < _12222 ; ++_7623)
  {
    _12221.push_back(1.0);
  }
  auto _12223 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12221.size()),_12221.begin(),_12221.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7619,_7619,_7620,_7620,_12220,_7620,_7620,_12223,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7624) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_7624); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7624) { return __mosek_2fusion_2SymmetricMatrix__add(_7624); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7624){
  int _7625 = _pubthis->getdim();
  if ((_7624->getdim() != _7625))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _7626 = (int)((usubi)->size(0));
  int _7627 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->usubi)->size(0));
  int _7628 = safe_add( _7626,_7627 );
  int _7629 = (int)((vsubi)->size(0));
  int _7630 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->vsubi)->size(0));
  int _7631 = safe_add( _7629,_7630 );
  std::shared_ptr< monty::ndarray< double,1 > > _7632 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7631)));
  _checked_ptr_1<double> _ptr__7632(_7632 ? _7632->raw() : nullptr,_7632 ? _7632->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7633 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7631)));
  _checked_ptr_1<int> _ptr__7633(_7633 ? _7633->raw() : nullptr,_7633 ? _7633->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7634 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7631)));
  _checked_ptr_1<int> _ptr__7634(_7634 ? _7634->raw() : nullptr,_7634 ? _7634->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7635 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7628)));
  _checked_ptr_1<double> _ptr__7635(_7635 ? _7635->raw() : nullptr,_7635 ? _7635->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7636 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7628)));
  _checked_ptr_1<int> _ptr__7636(_7636 ? _7636->raw() : nullptr,_7636 ? _7636->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7637 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7628)));
  _checked_ptr_1<int> _ptr__7637(_7637 ? _7637->raw() : nullptr,_7637 ? _7637->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7637,(int)0,_7626);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->usubi,(int)0,_7637,_7626,_7627);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_7636,(int)0,_7626);
  int _12224 = (int)0;
  int _12225 = _7627;
  for (int _7638 = _12224; _7638 < _12225; ++_7638)
  {
    {
      _ptr__7636[safe_add( _7638,_7626 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->usubj)(_7638)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_7635,(int)0,_7626);
    }
  }
  else
  {
    {
      int _12226 = (int)0;
      int _12227 = _7626;
      for (int _7639 = _12226; _7639 < _12227; ++_7639)
      {
        {
          _ptr__7635[_7639] = (scale * ((*uval)(_7639)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->uval,(int)0,_7635,_7626,_7627);
    }
  }
  else
  {
    {
      int _12228 = (int)0;
      int _12229 = _7627;
      for (int _7640 = _12228; _7640 < _12229; ++_7640)
      {
        {
          _ptr__7635[safe_add( _7640,_7626 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->uval)(_7640)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7637,(int)0,_7626);
  int _12230 = (int)0;
  int _12231 = _7630;
  for (int _7641 = _12230; _7641 < _12231; ++_7641)
  {
    {
      _ptr__7634[safe_add( _7641,_7629 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->vsubi)(_7641)),mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_7633,(int)0,_7629);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->vsubj,_7629,_7633,_7629,_7630);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_7632,(int)0,_7629);
    }
  }
  else
  {
    {
      int _12232 = (int)0;
      int _12233 = _7629;
      for (int _7642 = _12232; _7642 < _12233; ++_7642)
      {
        {
          _ptr__7632[_7642] = (scale * ((*vval)(_7642)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->vval,(int)0,_7632,_7629,_7630);
    }
  }
  else
  {
    {
      int _12234 = (int)0;
      int _12235 = _7630;
      for (int _7643 = _12234; _7643 < _12235; ++_7643)
      {
        {
          _ptr__7632[safe_add( _7643,_7629 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->vval)(_7643)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_7624)->d1 ),_7637,_7636,_7635,_7634,_7633,_7632,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7644) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_7644); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7644) { return __mosek_2fusion_2SymmetricMatrix__sub(_7644); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7644){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_7644->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _7645) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_7645); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _7645) { return __mosek_2fusion_2SymmetricMatrix__mul(_7645); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _7645){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _7645));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7646,    std::shared_ptr< monty::ndarray< int,2 > > _7647,    std::shared_ptr< monty::ndarray< double,1 > > _7648){ return new mosek::fusion::NDSparseArray(_7646,_7647,_7648); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7646,    std::shared_ptr< monty::ndarray< int,2 > > _7647,    std::shared_ptr< monty::ndarray< double,1 > > _7648) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7646,_7647,_7648); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7646,    std::shared_ptr< monty::ndarray< int,2 > > _7647,    std::shared_ptr< monty::ndarray< double,1 > > _7648){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7646(_7646 ? _7646->raw() : nullptr, _7646 ? _7646->size(0) : 0);
    _checked_ptr_1<double> _ptr__7648(_7648 ? _7648->raw() : nullptr, _7648 ? _7648->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7649 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_7647)->size(0)))));
    _checked_ptr_1<long long> _ptr__7649(_7649 ? _7649->raw() : nullptr,_7649 ? _7649->size(0) : 0);
    size = (long long)1;
    int _12236 = (int)0;
    int _12237 = (int)((_7646)->size(0));
    for (int _7650 = _12236; _7650 < _12237; ++_7650)
    {
      {
        size = safe_mul( size,_ptr__7646[_7650] );
      }
    }
    int _7651 = (int)((_7646)->size(0));
    if (((int)((_7647)->size(0)) != (int)((_7648)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_7647)->size(1)) != _7651))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _7652 = false;
    int _12238 = (int)0;
    int _12239 = (int)((_7647)->size(0));
    for (int _7653 = _12238; _7653 < _12239; ++_7653)
    {
      {
        int _12240 = (int)0;
        int _12241 = (int)((_7647)->size(1));
        for (int _7654 = _12240; _7654 < _12241; ++_7654)
        {
          {
            if (((((*_7647)(_7653,_7654)) < (int)0) || (((*_7647)(_7653,_7654)) >= _ptr__7646[_7654])))
            {
              {
                _7652 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_7652)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int _12242 = (int)0;
    int _12243 = (int)((_7647)->size(0));
    for (int _7655 = _12242; _7655 < _12243; ++_7655)
    {
      {
        long long _7656 = (long long)0;
        int _12244 = (int)0;
        int _12245 = (int)((_7647)->size(1));
        for (int _7657 = _12244; _7657 < _12245; ++_7657)
        {
          {
            _7656 = safe_add( safe_mul( _7656,_ptr__7646[_7657] ),((*_7647)(_7655,_7657)) );
          }
        }
        _ptr__7649[_7655] = _7656;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7646);
    bool _7658 = true;
    int _12246 = (int)1;
    int _12247 = (int)((_7649)->size(0));
    for (int _7659 = _12246; _7659 < _12247; ++_7659)
    {
      {
        _7658 = (_7658 && (_ptr__7649[_7659] >= _ptr__7649[(_7659 - (int)1)]));
      }
    }
    if (_7658)
    {
      {
        int _7660 = (int)1;
        int _12248 = (int)1;
        int _12249 = (int)((_7649)->size(0));
        for (int _7661 = _12248; _7661 < _12249; ++_7661)
        {
          {
            if ((_ptr__7649[(_7661 - (int)1)] < _ptr__7649[_7661]))
            {
              {
                ++ _7660;
              }
            }
            {}
          }
        }
        if ((_7660 == (int)((_7649)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7649);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7648);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7660)));
            ((*inst)((int)0)) = _ptr__7649[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7660)));
            ((*cof)((int)0)) = _ptr__7648[(int)0];
            int _7662 = (int)0;
            int _12250 = (int)1;
            int _12251 = (int)((_7649)->size(0));
            for (int _7663 = _12250; _7663 < _12251; ++_7663)
            {
              {
                if ((_ptr__7649[_7663] > _ptr__7649[(_7663 - (int)1)]))
                {
                  {
                    ++ _7662;
                    ((*inst)(_7662)) = _ptr__7649[_7663];
                    ((*cof)(_7662)) = _ptr__7648[_7663];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7662)) = (((*cof)(_7662)) + _ptr__7648[_7663]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7664 = ::mosek::fusion::Utils::Tools::range((long long)((_7649)->size(0)));
        _checked_ptr_1<long long> _ptr__7664(_7664 ? _7664->raw() : nullptr,_7664 ? _7664->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7664,_7649,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7649)->size(0)));
        int _7665 = (int)1;
        int _12252 = (int)1;
        int _12253 = (int)((_7649)->size(0));
        for (int _7666 = _12252; _7666 < _12253; ++_7666)
        {
          {
            if ((_ptr__7649[_ptr__7664[(_7666 - (int)1)]] < _ptr__7649[_ptr__7664[_7666]]))
            {
              {
                ++ _7665;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7665)));
        ((*inst)((int)0)) = _ptr__7649[_ptr__7664[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7665)));
        ((*cof)((int)0)) = _ptr__7648[_ptr__7664[(int)0]];
        int _7667 = (int)0;
        int _12254 = (int)1;
        int _12255 = (int)((_7649)->size(0));
        for (int _7668 = _12254; _7668 < _12255; ++_7668)
        {
          {
            if ((_ptr__7649[_ptr__7664[_7668]] > _ptr__7649[_ptr__7664[(_7668 - (int)1)]]))
            {
              {
                ++ _7667;
                ((*inst)(_7667)) = _ptr__7649[_ptr__7664[_7668]];
                ((*cof)(_7667)) = _ptr__7648[_ptr__7664[_7668]];
              }
            }
            else
            {
              {
                ((*cof)(_7667)) = (((*cof)(_7667)) + _ptr__7648[_ptr__7664[_7668]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7669,    std::shared_ptr< monty::ndarray< long long,1 > > _7670,    std::shared_ptr< monty::ndarray< double,1 > > _7671){ return new mosek::fusion::NDSparseArray(_7669,_7670,_7671); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7669,    std::shared_ptr< monty::ndarray< long long,1 > > _7670,    std::shared_ptr< monty::ndarray< double,1 > > _7671) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7669,_7670,_7671); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7669,    std::shared_ptr< monty::ndarray< long long,1 > > _7670,    std::shared_ptr< monty::ndarray< double,1 > > _7671){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7669(_7669 ? _7669->raw() : nullptr, _7669 ? _7669->size(0) : 0);
    _checked_ptr_1<long long> _ptr__7670(_7670 ? _7670->raw() : nullptr, _7670 ? _7670->size(0) : 0);
    _checked_ptr_1<double> _ptr__7671(_7671 ? _7671->raw() : nullptr, _7671 ? _7671->size(0) : 0);
    size = (long long)1;
    int _12256 = (int)0;
    int _12257 = (int)((_7669)->size(0));
    for (int _7672 = _12256; _7672 < _12257; ++_7672)
    {
      {
        size = safe_mul( size,_ptr__7669[_7672] );
      }
    }
    int _7673 = (int)((_7670)->size(0));
    if ((_7673 != (int)((_7671)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _7674 = false;
      int _12258 = (int)0;
      int _12259 = _7673;
      for (int _7675 = _12258; _7675 < _12259; ++_7675)
      {
        {
          _7674 = (_7674 || ((_ptr__7670[_7675] < (int)0) || (_ptr__7670[_7675] >= size)));
        }
      }
      if (_7674)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7669);
    bool _7676 = true;
    int _12260 = (int)1;
    int _12261 = (int)((_7670)->size(0));
    for (int _7677 = _12260; _7677 < _12261; ++_7677)
    {
      {
        _7676 = (_7676 && (_ptr__7670[_7677] >= _ptr__7670[(_7677 - (int)1)]));
      }
    }
    if (_7676)
    {
      {
        int _7678 = (int)1;
        int _12262 = (int)1;
        int _12263 = (int)((_7670)->size(0));
        for (int _7679 = _12262; _7679 < _12263; ++_7679)
        {
          {
            if ((_ptr__7670[(_7679 - (int)1)] < _ptr__7670[_7679]))
            {
              {
                ++ _7678;
              }
            }
            {}
          }
        }
        if ((_7678 == (int)((_7670)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7670);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7671);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7678)));
            ((*inst)((int)0)) = _ptr__7670[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7678)));
            ((*cof)((int)0)) = _ptr__7671[(int)0];
            int _7680 = (int)0;
            int _12264 = (int)1;
            int _12265 = (int)((_7670)->size(0));
            for (int _7681 = _12264; _7681 < _12265; ++_7681)
            {
              {
                if ((_ptr__7670[_7681] > _ptr__7670[(_7681 - (int)1)]))
                {
                  {
                    ++ _7680;
                    ((*inst)(_7680)) = _ptr__7670[_7681];
                    ((*cof)(_7680)) = _ptr__7671[_7681];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7680)) = (((*cof)(_7680)) + _ptr__7671[_7681]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7682 = ::mosek::fusion::Utils::Tools::range((long long)((_7670)->size(0)));
        _checked_ptr_1<long long> _ptr__7682(_7682 ? _7682->raw() : nullptr,_7682 ? _7682->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7682,_7670,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7670)->size(0)));
        int _7683 = (int)1;
        int _12266 = (int)1;
        int _12267 = (int)((_7670)->size(0));
        for (int _7684 = _12266; _7684 < _12267; ++_7684)
        {
          {
            if ((_ptr__7670[_ptr__7682[(_7684 - (int)1)]] < _ptr__7670[_ptr__7682[_7684]]))
            {
              {
                ++ _7683;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7683)));
        ((*inst)((int)0)) = _ptr__7670[_ptr__7682[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7683)));
        ((*cof)((int)0)) = _ptr__7671[_ptr__7682[(int)0]];
        int _7685 = (int)0;
        int _12268 = (int)1;
        int _12269 = (int)((_7670)->size(0));
        for (int _7686 = _12268; _7686 < _12269; ++_7686)
        {
          {
            if ((_ptr__7670[_ptr__7682[_7686]] > ((*inst)(_ptr__7682[(_7686 - (int)1)]))))
            {
              {
                ++ _7685;
                ((*inst)(_7685)) = _ptr__7670[_ptr__7682[_7686]];
                ((*cof)(_7685)) = _ptr__7671[_ptr__7682[_7686]];
              }
            }
            else
            {
              {
                ((*cof)(_7685)) = (((*cof)(_7685)) + _ptr__7671[_ptr__7682[_7686]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7687){ return new mosek::fusion::NDSparseArray(_7687); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7687) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7687); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7687){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _7688 = _7687->numNonzeros();
    int _7689 = _7687->numColumns();
    int _7690 = _7687->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _7691 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7688)));
    _checked_ptr_1<double> _ptr__7691(_7691 ? _7691->raw() : nullptr,_7691 ? _7691->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7692 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7688)));
    _checked_ptr_1<int> _ptr__7692(_7692 ? _7692->raw() : nullptr,_7692 ? _7692->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7693 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7688)));
    _checked_ptr_1<int> _ptr__7693(_7693 ? _7693->raw() : nullptr,_7693 ? _7693->size(0) : 0);
    _7687->getDataAsTriplets(_7693,_7692,_7691);
    size = safe_mul( (long long)_7687->numRows(),(long long)_7687->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7690),(int)(_7689)});
    std::vector<long long> _12270;
    for (long long _7694 = (long long)0, _12271 = _7688; _7694 < _12271 ; ++_7694)
    {
      _12270.push_back(safe_add( safe_mul( (long long)_ptr__7693[_7694],_7689 ),(long long)_ptr__7692[_7694] ));
    }
    auto _12272 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12270.size()),_12270.begin(),_12270.end()));
    inst = _12272;
    cof = _7691;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7695) { return mosek::fusion::p_NDSparseArray::make(_7695); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _7695){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7695);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7696,    std::shared_ptr< monty::ndarray< long long,1 > > _7697,    std::shared_ptr< monty::ndarray< double,1 > > _7698) { return mosek::fusion::p_NDSparseArray::make(_7696,_7697,_7698); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7696,std::shared_ptr< monty::ndarray< long long,1 > > _7697,std::shared_ptr< monty::ndarray< double,1 > > _7698){
  _checked_ptr_1<int> _ptr__7696(_7696 ? _7696->raw() : nullptr, _7696 ? _7696->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7697(_7697 ? _7697->raw() : nullptr, _7697 ? _7697->size(0) : 0);
  _checked_ptr_1<double> _ptr__7698(_7698 ? _7698->raw() : nullptr, _7698 ? _7698->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7696,_7697,_7698);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7699,    std::shared_ptr< monty::ndarray< int,2 > > _7700,    std::shared_ptr< monty::ndarray< double,1 > > _7701) { return mosek::fusion::p_NDSparseArray::make(_7699,_7700,_7701); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7699,std::shared_ptr< monty::ndarray< int,2 > > _7700,std::shared_ptr< monty::ndarray< double,1 > > _7701){
  _checked_ptr_1<int> _ptr__7699(_7699 ? _7699->raw() : nullptr, _7699 ? _7699->size(0) : 0);
  _checked_ptr_1<double> _ptr__7701(_7701 ? _7701->raw() : nullptr, _7701 ? _7701->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7699,_7700,_7701);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7702,    int _7703,    std::shared_ptr< monty::ndarray< double,1 > > _7704){ return new mosek::fusion::DenseMatrix(_7702,_7703,_7704); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7702,    int _7703,    std::shared_ptr< monty::ndarray< double,1 > > _7704) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7702,_7703,_7704); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7702,    int _7703,    std::shared_ptr< monty::ndarray< double,1 > > _7704){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__7704(_7704 ? _7704->raw() : nullptr, _7704 ? _7704->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7702,_7703);
    nnz = (long long)safe_mul( _7702,_7703 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _7702,_7703 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_7704,(int)0,data,(int)0,safe_mul( _7702,_7703 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7705){ return new mosek::fusion::DenseMatrix(_7705); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7705) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7705); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7705){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_7705)->dimi,mosek::fusion::p_Matrix::_get_impl(_7705)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _12273 = _7705;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12273.get()))
    {
      ::mosek::fusion::DenseMatrix::t _7706 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12273.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_7706)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12273.get()))
    {
      ::mosek::fusion::SparseMatrix::t _7707 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12273.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_7707)->dimi,mosek::fusion::p_Matrix::_get_impl(_7707)->dimj ));
        long long _12274 = (long long)0;
        long long _12275 = mosek::fusion::p_SparseMatrix::_get_impl(_7707)->nnz;
        for (long long _7709 = _12274; _7709 < _12275; ++_7709)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7707)->subi)(_7709)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_7707)->subj)(_7709)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7707)->val)(_7709));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _7708 = _12273;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7710){ return new mosek::fusion::DenseMatrix(_7710); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7710) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7710); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _7710){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_7710)->size(0)),(int)((_7710)->size(1)));
    std::vector<double> _12276;
    for (int _7711 = (int)0, _12277 = dimi; _7711 < _12277 ; ++_7711)
    {
      for (int _7712 = (int)0, _12278 = dimj; _7712 < _12278 ; ++_7712)
      {
        _12276.push_back(((*_7710)(_7711,_7712)));
      }
    }
    auto _12279 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12276.size()),_12276.begin(),_12276.end()));
    data = _12279;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7713,    int _7714,    double _7715){ return new mosek::fusion::DenseMatrix(_7713,_7714,_7715); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7713,    int _7714,    double _7715) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7713,_7714,_7715); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7713,    int _7714,    double _7715){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_7713,_7714);
    std::vector<double> _12280;
    for (int _7716 = (int)0, _12281 = _7713; _7716 < _12281 ; ++_7716)
    {
      for (int _7717 = (int)0, _12282 = _7714; _7717 < _12282 ; ++_7717)
      {
        _12280.push_back(_7715);
      }
    }
    auto _12283 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12280.size()),_12280.begin(),_12280.end()));
    data = _12283;
    nnz = (long long)safe_mul( _7713,_7714 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7718 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _7718->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _7718->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _7719 = (int)0;
  {
    int _7720 = (int)0;
    for(;(_7720 < dimi);++ _7720)
    {
      {
        if ((_7720 > (int)0))
        {
          {
            _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _7718->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7719)));
        ++ _7719;
        {
          int _7721 = (int)1;
          for(;(_7721 < dimj);++ _7721)
          {
            {
              _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _7718->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7719)));
              ++ _7719;
            }
          }
        }
        _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _7718->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _7718->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _7722 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7722(_7722 ? _7722->raw() : nullptr,_7722 ? _7722->size(0) : 0);
  int _7723 = (int)0;
  int _7724 = dimi;
  int _12284 = (int)0;
  int _12285 = dimi;
  for (int _7725 = _12284; _7725 < _12285; ++_7725)
  {
    {
      int _7726 = _7725;
      int _12286 = (int)0;
      int _12287 = dimj;
      for (int _7727 = _12286; _7727 < _12287; ++_7727)
      {
        {
          _ptr__7722[_7726] = ((*data)(_7723));
          _7726 = safe_add( _7726,_7724 );
          ++ _7723;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_7722)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7728,std::shared_ptr< monty::ndarray< int,1 > > _7729,std::shared_ptr< monty::ndarray< double,1 > > _7730) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_7728,_7729,_7730); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7728,std::shared_ptr< monty::ndarray< int,1 > > _7729,std::shared_ptr< monty::ndarray< double,1 > > _7730){
  _checked_ptr_1<int> _ptr__7728(_7728 ? _7728->raw() : nullptr, _7728 ? _7728->size(0) : 0);
  _checked_ptr_1<int> _ptr__7729(_7729 ? _7729->raw() : nullptr, _7729 ? _7729->size(0) : 0);
  _checked_ptr_1<double> _ptr__7730(_7730 ? _7730->raw() : nullptr, _7730 ? _7730->size(0) : 0);
  if ((((int)((_7728)->size(0)) < nnz) || (((int)((_7729)->size(0)) < nnz) || ((int)((_7730)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_7730,(int)0,(int)((data)->size(0)));
  int _7731 = (int)0;
  int _12288 = (int)0;
  int _12289 = dimi;
  for (int _7732 = _12288; _7732 < _12289; ++_7732)
  {
    {
      int _12290 = (int)0;
      int _12291 = dimj;
      for (int _7733 = _12290; _7733 < _12291; ++_7733)
      {
        {
          _ptr__7728[_7731] = _7732;
          _ptr__7729[_7731] = _7733;
          ++ _7731;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _7734,int _7735) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_7734,_7735); }double mosek::fusion::p_DenseMatrix::get(int _7734,int _7735){
  return ((*data)(safe_add( safe_mul( _7734,dimj ),_7735 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7736,    int _7737,    std::shared_ptr< monty::ndarray< int,1 > > _7738,    std::shared_ptr< monty::ndarray< int,1 > > _7739,    std::shared_ptr< monty::ndarray< double,1 > > _7740,    long long _7741){ return new mosek::fusion::SparseMatrix(_7736,_7737,_7738,_7739,_7740,_7741); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7736,    int _7737,    std::shared_ptr< monty::ndarray< int,1 > > _7738,    std::shared_ptr< monty::ndarray< int,1 > > _7739,    std::shared_ptr< monty::ndarray< double,1 > > _7740,    long long _7741) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7736,_7737,_7738,_7739,_7740,_7741); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7736,    int _7737,    std::shared_ptr< monty::ndarray< int,1 > > _7738,    std::shared_ptr< monty::ndarray< int,1 > > _7739,    std::shared_ptr< monty::ndarray< double,1 > > _7740,    long long _7741){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7738(_7738 ? _7738->raw() : nullptr, _7738 ? _7738->size(0) : 0);
    _checked_ptr_1<int> _ptr__7739(_7739 ? _7739->raw() : nullptr, _7739 ? _7739->size(0) : 0);
    _checked_ptr_1<double> _ptr__7740(_7740 ? _7740->raw() : nullptr, _7740 ? _7740->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7736,_7737);
    if ((_7741 > (int)0))
    {
      {
        if ((((int)((_7738)->size(0)) < _7741) || (((int)((_7739)->size(0)) < _7741) || ((int)((_7740)->size(0)) < _7741))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _7742 = false;
        long long _12292 = (long long)0;
        long long _12293 = _7741;
        for (long long _7743 = _12292; _7743 < _12293; ++_7743)
        {
          {
            if (((_ptr__7738[_7743] < (int)0) || ((_ptr__7738[_7743] >= dimi) || ((_ptr__7739[_7743] < (int)0) || (_ptr__7739[_7743] >= dimj)))))
            {
              {
                _7742 = true;
              }
            }
            {}
          }
        }
        if (_7742)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7744 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7745 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _7746 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_7738,_7739,_7740,_7744,_7745,_7746,_7741,dimi,dimj);
        subi = ((*_7744)((int)0));
        subj = ((*_7745)((int)0));
        val = ((*_7746)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7747,    int _7748,    std::shared_ptr< monty::ndarray< int,1 > > _7749,    std::shared_ptr< monty::ndarray< int,1 > > _7750,    std::shared_ptr< monty::ndarray< double,1 > > _7751){ return new mosek::fusion::SparseMatrix(_7747,_7748,_7749,_7750,_7751); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7747,    int _7748,    std::shared_ptr< monty::ndarray< int,1 > > _7749,    std::shared_ptr< monty::ndarray< int,1 > > _7750,    std::shared_ptr< monty::ndarray< double,1 > > _7751) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7747,_7748,_7749,_7750,_7751); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7747,    int _7748,    std::shared_ptr< monty::ndarray< int,1 > > _7749,    std::shared_ptr< monty::ndarray< int,1 > > _7750,    std::shared_ptr< monty::ndarray< double,1 > > _7751){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7749(_7749 ? _7749->raw() : nullptr, _7749 ? _7749->size(0) : 0);
    _checked_ptr_1<int> _ptr__7750(_7750 ? _7750->raw() : nullptr, _7750 ? _7750->size(0) : 0);
    _checked_ptr_1<double> _ptr__7751(_7751 ? _7751->raw() : nullptr, _7751 ? _7751->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7747,_7748);
    int _7752 = (int)0;
    int _12294 = (int)0;
    int _12295 = (int)((_7751)->size(0));
    for (int _7753 = _12294; _7753 < _12295; ++_7753)
    {
      {
        if (((_ptr__7751[_7753] > (int)0) || (_ptr__7751[_7753] < (int)0)))
        {
          {
            ++ _7752;
          }
        }
        {}
      }
    }
    if (((_7752 > (int)0) && (_7752 < (int)((_7749)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7752)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7752)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7752)));
        nnz = _7752;
        int _7754 = (int)0;
        int _12296 = (int)0;
        int _12297 = (int)((_7751)->size(0));
        for (int _7755 = _12296; _7755 < _12297; ++_7755)
        {
          {
            if (((_ptr__7751[_7755] < (int)0) || (_ptr__7751[_7755] > (int)0)))
            {
              {
                ((*val)(_7754)) = _ptr__7751[_7755];
                ((*subj)(_7754)) = _ptr__7750[_7755];
                ((*subi)(_7754)) = _ptr__7749[_7755];
                ++ _7754;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _7749;
        subj = _7750;
        val = _7751;
        if ((NULL == _7749.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _7756 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7756(_7756 ? _7756->raw() : nullptr,_7756 ? _7756->size(0) : 0);
  long long _7757 = (long long)0;
  int _12298 = (int)0;
  int _12299 = dimi;
  for (int _7758 = _12298; _7758 < _12299; ++_7758)
  {
    {
      _ptr__7756[_7758] = _7757;
      {
        for(;((_7757 < nnz) && (((*subi)(_7757)) == _7758));++ _7757)
        {
          {
          }
        }
      }
    }
  }
  _ptr__7756[dimi] = _7757;
  return _7756;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7759 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _7759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _12300 = (int)1;
      int _12301 = (int)((subi)->size(0));
      for (int _7760 = _12300; _7760 < _12301; ++_7760)
      {
        {
          _7759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_7760)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_7760)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_7760)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _7759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _7759->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _7761 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7761(_7761 ? _7761->raw() : nullptr,_7761 ? _7761->size(0) : 0);
  int _12302 = (int)0;
  int _12303 = (int)((subi)->size(0));
  for (int _7762 = _12302; _7762 < _12303; ++_7762)
  {
    {
      _ptr__7761[safe_add( safe_mul( ((*subi)(_7762)),dimj ),((*subj)(_7762)) )] = ((*val)(_7762));
    }
  }
  return _7761;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7763,std::shared_ptr< monty::ndarray< int,1 > > _7764,std::shared_ptr< monty::ndarray< double,1 > > _7765) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_7763,_7764,_7765); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7763,std::shared_ptr< monty::ndarray< int,1 > > _7764,std::shared_ptr< monty::ndarray< double,1 > > _7765){
  _checked_ptr_1<int> _ptr__7763(_7763 ? _7763->raw() : nullptr, _7763 ? _7763->size(0) : 0);
  _checked_ptr_1<int> _ptr__7764(_7764 ? _7764->raw() : nullptr, _7764 ? _7764->size(0) : 0);
  _checked_ptr_1<double> _ptr__7765(_7765 ? _7765->raw() : nullptr, _7765 ? _7765->size(0) : 0);
  if ((((long long)((_7763)->size(0)) < nnz) || (((long long)((_7764)->size(0)) < nnz) || ((long long)((_7765)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_7763,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_7764,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_7765,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _7766,int _7767) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_7766,_7767); }double mosek::fusion::p_SparseMatrix::get(int _7766,int _7767){
  if (((_7766 < (int)0) || ((_7766 >= dimi) || ((_7767 < (int)0) || (_7767 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _7768 = (int)((subi)->size(0));
  int _7769 = (int)0;
  while ( ((_7768 - _7769) > (int)1) )
  {
    {
      int _7770 = (safe_add( _7769,_7768 ) / (int)2);
      if (((((*subi)(_7770)) < _7766) || ((((*subi)(_7770)) == _7766) && (((*subj)(_7770)) < _7767))))
      {
        {
          _7769 = _7770;
        }
      }
      else if(((((*subi)(_7770)) > _7766) || ((((*subi)(_7770)) == _7766) && (((*subj)(_7770)) > _7767))))
      {
        {
          _7768 = _7770;
        }
      }
      else
      {
        {
          return ((*val)(_7770));
        }
      }
    }
  }
  if (((((*subi)(_7769)) == _7766) && (((*subj)(_7769)) == _7767)))
  {
    {
      return ((*val)(_7769));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _7771,    int _7772){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_7771 < (int)0) || (_7772 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _7771;
    dimj = _7772;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _7773 = dimi;
  dimi = dimj;
  dimj = _7773;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7774,    monty::rc_ptr< ::mosek::fusion::Matrix > _7775) { return mosek::fusion::p_Matrix::diag(_7774,_7775); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7774,monty::rc_ptr< ::mosek::fusion::Matrix > _7775){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _12304;
  for (int _7776 = (int)0, _12305 = _7774; _7776 < _12305 ; ++_7776)
  {
    _12304.push_back(_7775);
  }
  auto _12306 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_12304.size()),_12304.begin(),_12304.end()));
  return ::mosek::fusion::p_Matrix::diag(_12306);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7777) { return mosek::fusion::p_Matrix::diag(_7777); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7777){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7778 = _7777;
  long long _7779 = (long long)0;
  int _7780 = (int)0;
  int _7781 = (int)0;
  int _12307 = (int)0;
  int _12308 = (int)((_7777)->size(0));
  for (int _7782 = _12307; _7782 < _12308; ++_7782)
  {
    {
      _7781 = safe_add( _7781,mosek::fusion::p_Matrix::_get_impl(((*_7777)(_7782)))->dimi );
      _7780 = safe_add( _7780,mosek::fusion::p_Matrix::_get_impl(((*_7777)(_7782)))->dimj );
      _7779 = safe_add( _7779,((*_7777)(_7782))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7783 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7779)));
  _checked_ptr_1<int> _ptr__7783(_7783 ? _7783->raw() : nullptr,_7783 ? _7783->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7784 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7779)));
  _checked_ptr_1<int> _ptr__7784(_7784 ? _7784->raw() : nullptr,_7784 ? _7784->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7785 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7779)));
  _checked_ptr_1<double> _ptr__7785(_7785 ? _7785->raw() : nullptr,_7785 ? _7785->size(0) : 0);
  {
    int _7786 = (int)0;
    int _7787 = (int)0;
    long long _7788 = (long long)0;
    int _12309 = (int)0;
    int _12310 = (int)((_7777)->size(0));
    for (int _7789 = _12309; _7789 < _12310; ++_7789)
    {
      {
        long long _7790 = ((*_7777)(_7789))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _7791 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7790)));
        _checked_ptr_1<double> _ptr__7791(_7791 ? _7791->raw() : nullptr,_7791 ? _7791->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7792 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7790)));
        _checked_ptr_1<int> _ptr__7792(_7792 ? _7792->raw() : nullptr,_7792 ? _7792->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7793 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7790)));
        _checked_ptr_1<int> _ptr__7793(_7793 ? _7793->raw() : nullptr,_7793 ? _7793->size(0) : 0);
        ((*_7777)(_7789))->getDataAsTriplets(_7793,_7792,_7791);
        ::mosek::fusion::Utils::Tools::arraycopy(_7791,(long long)0,_7785,_7788,_7790);
        long long _12311 = (long long)0;
        long long _12312 = _7790;
        for (long long _7794 = _12311; _7794 < _12312; ++_7794)
        {
          {
            _ptr__7783[safe_add( _7788,_7794 )] = safe_add( _ptr__7793[_7794],_7787 );
            _ptr__7784[safe_add( _7788,_7794 )] = safe_add( _ptr__7793[_7794],_7786 );
          }
        }
        _7788 = safe_add( _7788,_7790 );
        _7787 = safe_add( _7787,mosek::fusion::p_Matrix::_get_impl(((*_7777)(_7789)))->dimi );
        _7786 = safe_add( _7786,mosek::fusion::p_Matrix::_get_impl(((*_7777)(_7789)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7781,_7780,_7783,_7784,_7785)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7795,    double _7796,    int _7797) { return mosek::fusion::p_Matrix::antidiag(_7795,_7796,_7797); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7795,double _7796,int _7797){
  if (((_7797 < _7795) && (_7797 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7796,(_7795 - _7797)),_7797);
    }
  }
  else if(((_7797 > (-_7795)) && (_7797 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7796,safe_add( _7795,_7797 )),_7797);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7798,    double _7799) { return mosek::fusion::p_Matrix::antidiag(_7798,_7799); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7798,double _7799){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7799,_7798),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7800,    double _7801,    int _7802) { return mosek::fusion::p_Matrix::diag(_7800,_7801,_7802); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7800,double _7801,int _7802){
  if (((_7802 < _7800) && (_7802 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7801,(_7800 - _7802)),_7802);
    }
  }
  else if(((_7802 > (-_7800)) && (_7802 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7801,safe_add( _7800,_7802 )),_7802);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7803,    double _7804) { return mosek::fusion::p_Matrix::diag(_7803,_7804); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7803,double _7804){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7804,_7803),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7805,    int _7806) { return mosek::fusion::p_Matrix::antidiag(_7805,_7806); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7805,int _7806){
  _checked_ptr_1<double> _ptr__7805(_7805 ? _7805->raw() : nullptr, _7805 ? _7805->size(0) : 0);
  int _12313;
  bool _12314 = (_7806 > (int)0);
  if (_12314)
  {
    _12313 = _7806;
  }
  else
  {
    _12313 = (-_7806);
  }
  int _7807 = _12313;
  int _7808 = safe_add( (int)((_7805)->size(0)),_7807 );
  int _7809 = (int)((_7805)->size(0));
  if ((_7806 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7810 = ::mosek::fusion::Utils::Tools::range(_7806,safe_add( _7809,_7806 ));
      _checked_ptr_1<int> _ptr__7810(_7810 ? _7810->raw() : nullptr,_7810 ? _7810->size(0) : 0);
      std::vector<int> _12315;
      for (int _7812 = (int)1, _12316 = safe_add( _7809,(int)1 ); _7812 < _12316 ; ++_7812)
      {
        _12315.push_back((safe_add( _7809,_7806 ) - _7812));
      }
      auto _12317 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12315.size()),_12315.begin(),_12315.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7811 = _12317;
      _checked_ptr_1<int> _ptr__7811(_7811 ? _7811->raw() : nullptr,_7811 ? _7811->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7808,_7808,_7810,_7811,_7805)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7813 = ::mosek::fusion::Utils::Tools::range((int)0,_7809);
      _checked_ptr_1<int> _ptr__7813(_7813 ? _7813->raw() : nullptr,_7813 ? _7813->size(0) : 0);
      std::vector<int> _12318;
      for (int _7815 = (int)1, _12319 = safe_add( _7809,(int)1 ); _7815 < _12319 ; ++_7815)
      {
        _12318.push_back((_7809 - _7815));
      }
      auto _12320 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12318.size()),_12318.begin(),_12318.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7814 = _12320;
      _checked_ptr_1<int> _ptr__7814(_7814 ? _7814->raw() : nullptr,_7814 ? _7814->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7808,_7808,_7813,_7814,_7805)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7816) { return mosek::fusion::p_Matrix::antidiag(_7816); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7816){
  _checked_ptr_1<double> _ptr__7816(_7816 ? _7816->raw() : nullptr, _7816 ? _7816->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_7816,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7817,    int _7818) { return mosek::fusion::p_Matrix::diag(_7817,_7818); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7817,int _7818){
  _checked_ptr_1<double> _ptr__7817(_7817 ? _7817->raw() : nullptr, _7817 ? _7817->size(0) : 0);
  int _12321;
  bool _12322 = (_7818 > (int)0);
  if (_12322)
  {
    _12321 = _7818;
  }
  else
  {
    _12321 = (-_7818);
  }
  int _7819 = _12321;
  int _7820 = safe_add( (int)((_7817)->size(0)),_7819 );
  int _7821 = (int)((_7817)->size(0));
  if ((_7818 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7822 = ::mosek::fusion::Utils::Tools::range((int)0,_7821);
      _checked_ptr_1<int> _ptr__7822(_7822 ? _7822->raw() : nullptr,_7822 ? _7822->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7823 = ::mosek::fusion::Utils::Tools::range(_7819,safe_add( _7821,_7819 ));
      _checked_ptr_1<int> _ptr__7823(_7823 ? _7823->raw() : nullptr,_7823 ? _7823->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7820,_7820,_7822,_7823,_7817)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7824 = ::mosek::fusion::Utils::Tools::range(_7819,safe_add( _7821,_7819 ));
      _checked_ptr_1<int> _ptr__7824(_7824 ? _7824->raw() : nullptr,_7824 ? _7824->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7825 = ::mosek::fusion::Utils::Tools::range((int)0,_7821);
      _checked_ptr_1<int> _ptr__7825(_7825 ? _7825->raw() : nullptr,_7825 ? _7825->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7820,_7820,_7824,_7825,_7817)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7826) { return mosek::fusion::p_Matrix::diag(_7826); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7826){
  _checked_ptr_1<double> _ptr__7826(_7826 ? _7826->raw() : nullptr, _7826 ? _7826->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_7826,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _7827,    int _7828) { return mosek::fusion::p_Matrix::ones(_7827,_7828); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _7827,int _7828){
  return ::mosek::fusion::p_Matrix::dense(_7827,_7828,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _7829) { return mosek::fusion::p_Matrix::eye(_7829); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _7829){
  std::vector<double> _12323;
  for (int _7830 = (int)0, _12324 = _7829; _7830 < _12324 ; ++_7830)
  {
    _12323.push_back(1.0);
  }
  auto _12325 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12323.size()),_12323.begin(),_12323.end()));
  return ::mosek::fusion::p_Matrix::diag(_12325);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7831) { return mosek::fusion::p_Matrix::dense(_7831); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _7831){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7831)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7832,    int _7833,    double _7834) { return mosek::fusion::p_Matrix::dense(_7832,_7833,_7834); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7832,int _7833,double _7834){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7832,_7833,_7834)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7835,    int _7836,    std::shared_ptr< monty::ndarray< double,1 > > _7837) { return mosek::fusion::p_Matrix::dense(_7835,_7836,_7837); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7835,int _7836,std::shared_ptr< monty::ndarray< double,1 > > _7837){
  _checked_ptr_1<double> _ptr__7837(_7837 ? _7837->raw() : nullptr, _7837 ? _7837->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7835,_7836,_7837)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _7838) { return mosek::fusion::p_Matrix::dense(_7838); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _7838){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7838)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7839) { return mosek::fusion::p_Matrix::sparse(_7839); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _7839){
  std::shared_ptr< monty::ndarray< int,1 > > _7840 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7839->numNonzeros())));
  _checked_ptr_1<int> _ptr__7840(_7840 ? _7840->raw() : nullptr,_7840 ? _7840->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7841 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7839->numNonzeros())));
  _checked_ptr_1<int> _ptr__7841(_7841 ? _7841->raw() : nullptr,_7841 ? _7841->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7842 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7839->numNonzeros())));
  _checked_ptr_1<double> _ptr__7842(_7842 ? _7842->raw() : nullptr,_7842 ? _7842->size(0) : 0);
  _7839->getDataAsTriplets(_7840,_7841,_7842);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7839->numRows(),_7839->numColumns(),_7840,_7841,_7842)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7843) { return mosek::fusion::p_Matrix::sparse(_7843); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7843){
  int _7844 = (int)((_7843)->size(0));
  int _7845 = (int)((((*_7843)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _7846 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7844)));
  _checked_ptr_1<int> _ptr__7846(_7846 ? _7846->raw() : nullptr,_7846 ? _7846->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7847 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7845)));
  _checked_ptr_1<int> _ptr__7847(_7847 ? _7847->raw() : nullptr,_7847 ? _7847->size(0) : 0);
  long long _7848 = (long long)0;
  int _7849 = (int)0;
  {
    int _7850 = (int)0;
    for(;(_7850 < _7844);++ _7850)
    {
      {
        {
          int _7851 = (int)0;
          for(;(_7851 < _7845);++ _7851)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _7852 = ((*((*_7843)(_7850)))(_7851));
              if ((NULL != _7852.get()))
              {
                {
                  if ((_ptr__7847[_7851] == (int)0))
                  {
                    {
                      _ptr__7847[_7851] = mosek::fusion::p_Matrix::_get_impl(_7852)->dimj;
                    }
                  }
                  else if((_ptr__7847[_7851] != mosek::fusion::p_Matrix::_get_impl(_7852)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__7846[_7850] == (int)0))
                  {
                    {
                      _ptr__7846[_7850] = mosek::fusion::p_Matrix::_get_impl(_7852)->dimi;
                    }
                  }
                  else if((_ptr__7846[_7850] != mosek::fusion::p_Matrix::_get_impl(_7852)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _7848 = safe_add( _7848,_7852->numNonzeros() );
                }
              }
              {}
              ++ _7849;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7853 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7848)));
  _checked_ptr_1<double> _ptr__7853(_7853 ? _7853->raw() : nullptr,_7853 ? _7853->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7854 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7848)));
  _checked_ptr_1<int> _ptr__7854(_7854 ? _7854->raw() : nullptr,_7854 ? _7854->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7855 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7848)));
  _checked_ptr_1<int> _ptr__7855(_7855 ? _7855->raw() : nullptr,_7855 ? _7855->size(0) : 0);
  int _7856 = (int)0;
  int _7857 = (int)0;
  {
    int _7858 = (int)0;
    for(;(_7858 < _7844);++ _7858)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _7859 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7845)));
        _checked_ptr_1<int> _ptr__7859(_7859 ? _7859->raw() : nullptr,_7859 ? _7859->size(0) : 0);
        {
          int _7860 = (int)0;
          for(;(_7860 < _ptr__7846[_7858]);++ _7860)
          {
            {
              int _7861 = (int)0;
              {
                int _7862 = (int)0;
                for(;(_7862 < _7845);++ _7862)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _7863 = ((*((*_7843)(_7858)))(_7862));
                    if ((NULL != _7863.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _12326 = _7863;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12326.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _7864 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12326.get()));
                          {
                            int _7867 = _ptr__7859[_7862];
                            {
                              int _7868 = (int)0;
                              for(;(_7868 < mosek::fusion::p_Matrix::_get_impl(_7864)->dimj);++ _7868)
                              {
                                {
                                  _ptr__7853[_7856] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_7864)->data)(_7867));
                                  _ptr__7854[_7856] = safe_add( _7857,_7860 );
                                  _ptr__7855[_7856] = safe_add( _7861,_7868 );
                                  ++ _7867;
                                  ++ _7856;
                                }
                              }
                            }
                            _ptr__7859[_7862] = _7867;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12326.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _7865 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12326.get()));
                          {
                            int _7869;
                            {
                              _7869 = _ptr__7859[_7862];
                              for(;((_7869 < mosek::fusion::p_SparseMatrix::_get_impl(_7865)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_7865)->subi)(_7869)) == _7860));++ _7869)
                              {
                                {
                                  _ptr__7853[_7856] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7865)->val)(_7869));
                                  _ptr__7855[_7856] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7865)->subj)(_7869)),_7861 );
                                  _ptr__7854[_7856] = safe_add( _7857,_7860 );
                                  ++ _7856;
                                }
                              }
                            }
                            _ptr__7859[_7862] = _7869;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _7866 = _12326;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _7861 = safe_add( _7861,_ptr__7847[_7862] );
                  }
                }
              }
            }
          }
        }
        _7857 = safe_add( _7857,_ptr__7846[_7858] );
      }
    }
  }
  int _7870 = (int)0;
  int _7871 = (int)0;
  {
    int _7872 = (int)0;
    for(;(_7872 < _7844);++ _7872)
    {
      {
        _7870 = safe_add( _7870,_ptr__7846[_7872] );
      }
    }
  }
  {
    int _7873 = (int)0;
    for(;(_7873 < _7845);++ _7873)
    {
      {
        _7871 = safe_add( _7871,_ptr__7847[_7873] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7870,_7871,_7854,_7855,_7853)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _7874) { return mosek::fusion::p_Matrix::sparse(_7874); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _7874){
  int _7875 = (int)((_7874)->size(0));
  int _7876 = (int)((_7874)->size(1));
  long long _7877 = (long long)safe_mul( _7875,_7876 );
  int _7878 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _7879 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7877)));
  _checked_ptr_1<int> _ptr__7879(_7879 ? _7879->raw() : nullptr,_7879 ? _7879->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7880 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7877)));
  _checked_ptr_1<int> _ptr__7880(_7880 ? _7880->raw() : nullptr,_7880 ? _7880->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7881 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7877)));
  _checked_ptr_1<double> _ptr__7881(_7881 ? _7881->raw() : nullptr,_7881 ? _7881->size(0) : 0);
  {
    int _7882 = (int)0;
    for(;(_7882 < _7875);++ _7882)
    {
      {
        {
          int _7883 = (int)0;
          for(;(_7883 < _7876);++ _7883)
          {
            {
              _ptr__7879[_7878] = _7882;
              _ptr__7880[_7878] = _7883;
              _ptr__7881[_7878] = ((*_7874)(_7882,_7883));
              ++ _7878;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7875,_7876,_7879,_7880,_7881)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7884,    int _7885) { return mosek::fusion::p_Matrix::sparse(_7884,_7885); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7884,int _7885){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7884,_7885,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7886,    int _7887,    std::shared_ptr< monty::ndarray< int,1 > > _7888,    std::shared_ptr< monty::ndarray< int,1 > > _7889,    double _7890) { return mosek::fusion::p_Matrix::sparse(_7886,_7887,_7888,_7889,_7890); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7886,int _7887,std::shared_ptr< monty::ndarray< int,1 > > _7888,std::shared_ptr< monty::ndarray< int,1 > > _7889,double _7890){
  _checked_ptr_1<int> _ptr__7888(_7888 ? _7888->raw() : nullptr, _7888 ? _7888->size(0) : 0);
  _checked_ptr_1<int> _ptr__7889(_7889 ? _7889->raw() : nullptr, _7889 ? _7889->size(0) : 0);
  int _7891 = (int)0;
  if ((NULL != _7888.get()))
  {
    {
      _7891 = (int)((_7888)->size(0));
    }
  }
  else if((NULL != _7889.get()))
  {
    {
      _7891 = (int)((_7889)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_7886,_7887,_7888,_7889,::mosek::fusion::Utils::Tools::makevector(_7890,_7891));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7892,    std::shared_ptr< monty::ndarray< int,1 > > _7893,    double _7894) { return mosek::fusion::p_Matrix::sparse(_7892,_7893,_7894); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7892,std::shared_ptr< monty::ndarray< int,1 > > _7893,double _7894){
  _checked_ptr_1<int> _ptr__7892(_7892 ? _7892->raw() : nullptr, _7892 ? _7892->size(0) : 0);
  _checked_ptr_1<int> _ptr__7893(_7893 ? _7893->raw() : nullptr, _7893 ? _7893->size(0) : 0);
  int _7895 = (int)0;
  int _7896 = (int)0;
  int _7897 = (int)((_7892)->size(0));
  if ((_7897 > (int)((_7893)->size(0))))
  {
    {
      _7897 = (int)((_7893)->size(0));
    }
  }
  {}
  int _12327 = (int)0;
  int _12328 = _7897;
  for (int _7898 = _12327; _7898 < _12328; ++_7898)
  {
    {
      if ((_7896 < _ptr__7892[_7898]))
      {
        {
          _7896 = _ptr__7892[_7898];
        }
      }
      {}
      if ((_7895 < _ptr__7893[_7898]))
      {
        {
          _7895 = _ptr__7893[_7898];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7896,(int)1 ),safe_add( _7895,(int)1 ),_7892,_7893,_7894);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7899,    std::shared_ptr< monty::ndarray< int,1 > > _7900,    std::shared_ptr< monty::ndarray< double,1 > > _7901) { return mosek::fusion::p_Matrix::sparse(_7899,_7900,_7901); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7899,std::shared_ptr< monty::ndarray< int,1 > > _7900,std::shared_ptr< monty::ndarray< double,1 > > _7901){
  _checked_ptr_1<int> _ptr__7899(_7899 ? _7899->raw() : nullptr, _7899 ? _7899->size(0) : 0);
  _checked_ptr_1<int> _ptr__7900(_7900 ? _7900->raw() : nullptr, _7900 ? _7900->size(0) : 0);
  _checked_ptr_1<double> _ptr__7901(_7901 ? _7901->raw() : nullptr, _7901 ? _7901->size(0) : 0);
  int _7902 = (int)0;
  int _7903 = (int)0;
  int _7904 = (int)((_7899)->size(0));
  if ((_7904 > (int)((_7900)->size(0))))
  {
    {
      _7904 = (int)((_7900)->size(0));
    }
  }
  {}
  if ((_7904 > (int)((_7901)->size(0))))
  {
    {
      _7904 = (int)((_7901)->size(0));
    }
  }
  {}
  int _12329 = (int)0;
  int _12330 = _7904;
  for (int _7905 = _12329; _7905 < _12330; ++_7905)
  {
    {
      if ((_7903 < _ptr__7899[_7905]))
      {
        {
          _7903 = _ptr__7899[_7905];
        }
      }
      {}
      if ((_7902 < _ptr__7900[_7905]))
      {
        {
          _7902 = _ptr__7900[_7905];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7903,(int)1 ),safe_add( _7902,(int)1 ),_7899,_7900,_7901);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7906,    int _7907,    std::shared_ptr< monty::ndarray< int,1 > > _7908,    std::shared_ptr< monty::ndarray< int,1 > > _7909,    std::shared_ptr< monty::ndarray< double,1 > > _7910) { return mosek::fusion::p_Matrix::sparse(_7906,_7907,_7908,_7909,_7910); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7906,int _7907,std::shared_ptr< monty::ndarray< int,1 > > _7908,std::shared_ptr< monty::ndarray< int,1 > > _7909,std::shared_ptr< monty::ndarray< double,1 > > _7910){
  _checked_ptr_1<int> _ptr__7908(_7908 ? _7908->raw() : nullptr, _7908 ? _7908->size(0) : 0);
  _checked_ptr_1<int> _ptr__7909(_7909 ? _7909->raw() : nullptr, _7909 ? _7909->size(0) : 0);
  _checked_ptr_1<double> _ptr__7910(_7910 ? _7910->raw() : nullptr, _7910 ? _7910->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12331;
  bool _12332 = (NULL != _7910.get());
  if (_12332)
  {
    _12331 = _7910;
  }
  else
  {
    _12331 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7911 = _12331;
  _checked_ptr_1<double> _ptr__7911(_7911 ? _7911->raw() : nullptr,_7911 ? _7911->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12333;
  bool _12334 = (NULL != _7909.get());
  if (_12334)
  {
    _12333 = _7909;
  }
  else
  {
    _12333 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7912 = _12333;
  _checked_ptr_1<int> _ptr__7912(_7912 ? _7912->raw() : nullptr,_7912 ? _7912->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12335;
  bool _12336 = (NULL != _7908.get());
  if (_12336)
  {
    _12335 = _7908;
  }
  else
  {
    _12335 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7913 = _12335;
  _checked_ptr_1<int> _ptr__7913(_7913 ? _7913->raw() : nullptr,_7913 ? _7913->size(0) : 0);
  long long _7914 = (long long)((_7913)->size(0));
  if ((((long long)((_7912)->size(0)) != _7914) || ((long long)((_7911)->size(0)) != _7914)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7906,_7907,_7913,_7912,_7911,_7914)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _7920) : RuntimeException(_7920)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _7921) : RuntimeException(_7921)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _7922) : RuntimeException(_7922.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _7923) : RuntimeException(_7923)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _7924) : mosek::fusion::FusionRuntimeException(_7924)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _7925) : mosek::fusion::FusionException(_7925)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _7926) : mosek::fusion::FusionRuntimeException(_7926)  {
  }
mosek::fusion::UpdateError::UpdateError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Cannot update parameterized item"))  {
  }
mosek::fusion::UpdateError::UpdateError  ( const std::string &  _7927) : mosek::fusion::FusionRuntimeException(_7927)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _7928) : mosek::fusion::FusionRuntimeException(_7928)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _7929) : mosek::fusion::FusionRuntimeException(_7929)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _7930) : mosek::fusion::FusionRuntimeException(_7930)  {
  }
mosek::fusion::DeletionError::DeletionError  ( const std::string &  _7931) : mosek::fusion::FusionRuntimeException(_7931)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _7932) : mosek::fusion::FusionRuntimeException(_7932)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _7933) : mosek::fusion::FusionRuntimeException(_7933)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _7934) : mosek::fusion::FusionRuntimeException(_7934)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _7935) : mosek::fusion::FusionRuntimeException(_7935)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _7936) : mosek::fusion::FusionRuntimeException(_7936)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _7937) : mosek::fusion::FusionRuntimeException(_7937)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _7938) : mosek::fusion::FusionRuntimeException(_7938)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _7939) : mosek::fusion::FusionRuntimeException(_7939)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _7940) : mosek::fusion::FusionRuntimeException(_7940)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _7941) : mosek::fusion::FusionRuntimeException(_7941)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _7942) : mosek::fusion::FusionRuntimeException(_7942)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _7943) : RuntimeException(_7943)  {
    msg = _7943;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _7944) : Exception(_7944)  {
    msg = _7944;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _7945){ return new mosek::fusion::LinkedBlocks(_7945); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _7945) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7945); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _7945){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_7945);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7946){ return new mosek::fusion::LinkedBlocks(_7946); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7946) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7946); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7946){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7946)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7946)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7946)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7946)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _7947) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_7947); }void mosek::fusion::p_LinkedBlocks::free(int _7947){
  int _7948 = ((*bfirst)(_7947));
  ints->free(_7947,((*bsize)(_7947)));
  ((*bsize)(_7947)) = (-(int)1);
  ((*bfirst)(_7947)) = (-(int)1);
  blocks->free(_7948,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _7949) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_7949); }int mosek::fusion::p_LinkedBlocks::alloc(int _7949){
  int _12337;
  bool _12338 = (_7949 > (int)0);
  if (_12338)
  {
    _12337 = ints->alloc(_7949);
  }
  else
  {
    _12337 = (-(int)1);
  }
  int _7950 = _12337;
  int _7951 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7952 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7952(_7952 ? _7952->raw() : nullptr,_7952 ? _7952->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7953(_7953 ? _7953->raw() : nullptr,_7953 ? _7953->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_7952,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_7953,(int)0,(int)((bfirst)->size(0)));
      bsize = _7952;
      bfirst = _7953;
    }
  }
  {}
  ((*bfirst)(_7951)) = _7950;
  ((*bsize)(_7951)) = _7949;
  return _7951;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _7954) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_7954); }int mosek::fusion::p_LinkedBlocks::maxidx(int _7954){
  return ints->maxidx(((*bfirst)(_7954)),((*bsize)(_7954)));
}
void mosek::fusion::LinkedBlocks :: get(int _7955,std::shared_ptr< monty::ndarray< int,1 > > _7956,int _7957) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_7955,_7956,_7957); }void mosek::fusion::p_LinkedBlocks::get(int _7955,std::shared_ptr< monty::ndarray< int,1 > > _7956,int _7957){
  _checked_ptr_1<int> _ptr__7956(_7956 ? _7956->raw() : nullptr, _7956 ? _7956->size(0) : 0);
  ints->get(((*bfirst)(_7955)),((*bsize)(_7955)),_7956,_7957);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _7958) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_7958); }int mosek::fusion::p_LinkedBlocks::blocksize(int _7958){
  return ((*bsize)(_7958));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _7959){ return new mosek::fusion::LinkedInts(_7959); }mosek::fusion::LinkedInts::LinkedInts  (int _7959) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7959); }void mosek::fusion::p_LinkedInts::_initialize  (int _7959){monty::rc_reserve __reserve_this(_pubthis);   {
    int _12339;
    bool _12340 = (_7959 > (int)0);
    if (_12340)
    {
      _12339 = _7959;
    }
    else
    {
      _12339 = (int)128;
    }
    int _7960 = _12339;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7960)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7960)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_7960 - (int)1);
    int _12341 = (int)1;
    int _12342 = _7960;
    for (int _7961 = _12341; _7961 < _12342; ++_7961)
    {
      {
        ((*prev)(_7961)) = (_7961 - (int)1);
        ((*next)((_7961 - (int)1))) = _7961;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_7960 - (int)1))) = (-(int)1);
    nfree = _7960;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7962){ return new mosek::fusion::LinkedInts(_7962); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7962) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7962); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7962){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7962)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7962)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_7962)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_7962)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_7962)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_7962)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _7963,int _7964) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_7963,_7964); }void mosek::fusion::p_LinkedInts::free(int _7963,int _7964){
  int _7965 = _7963;
  int _7966 = _7965;
  int _12343 = (int)0;
  int _12344 = (_7964 - (int)1);
  for (int _7967 = _12343; _7967 < _12344; ++_7967)
  {
    {
      _7966 = ((*next)(_7966));
    }
  }
  int _7968 = ((*prev)(_7965));
  int _7969 = ((*next)(_7966));
  if ((_7968 >= (int)0))
  {
    {
      ((*next)(_7968)) = _7969;
    }
  }
  {}
  if ((_7969 >= (int)0))
  {
    {
      ((*prev)(_7969)) = _7968;
    }
  }
  {}
  ((*prev)(_7965)) = (-(int)1);
  ((*next)(_7966)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _7966;
    }
  }
  {}
  first_free = _7965;
  nfree += _7964;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _7970) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7970); }int mosek::fusion::p_LinkedInts::alloc(int _7970){
  return allocblock(_7970);
}
void mosek::fusion::LinkedInts :: alloc(int _7971,std::shared_ptr< monty::ndarray< int,1 > > _7972,int _7973) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7971,_7972,_7973); }void mosek::fusion::p_LinkedInts::alloc(int _7971,std::shared_ptr< monty::ndarray< int,1 > > _7972,int _7973){
  _checked_ptr_1<int> _ptr__7972(_7972 ? _7972->raw() : nullptr, _7972 ? _7972->size(0) : 0);
  int _7974 = allocblock(_7971);
  int _12345 = (int)0;
  int _12346 = _7971;
  for (int _7975 = _12345; _7975 < _12346; ++_7975)
  {
    {
      _ptr__7972[safe_add( _7975,_7973 )] = _7974;
      _7974 = ((*next)(_7974));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _7976,int _7977,std::shared_ptr< monty::ndarray< int,1 > > _7978,int _7979) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_7976,_7977,_7978,_7979); }void mosek::fusion::p_LinkedInts::get(int _7976,int _7977,std::shared_ptr< monty::ndarray< int,1 > > _7978,int _7979){
  _checked_ptr_1<int> _ptr__7978(_7978 ? _7978->raw() : nullptr, _7978 ? _7978->size(0) : 0);
  int _7980 = _7976;
  int _12347 = (int)0;
  int _12348 = _7977;
  for (int _7981 = _12347; _7981 < _12348; ++_7981)
  {
    {
      _ptr__7978[safe_add( _7981,_7979 )] = _7980;
      _7980 = ((*next)(_7980));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _7982,int _7983) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_7982,_7983); }int mosek::fusion::p_LinkedInts::maxidx(int _7982,int _7983){
  int _7984 = _7982;
  int _7985 = _7982;
  int _12349 = (int)1;
  int _12350 = _7983;
  for (int _7986 = _12349; _7986 < _12350; ++_7986)
  {
    {
      _7985 = ((*next)(_7985));
      if ((_7984 < _7985))
      {
        {
          _7984 = _7985;
        }
      }
      {}
    }
  }
  return _7984;
}
int mosek::fusion::p_LinkedInts::allocblock(int _7987){
  int _7988 = (int)((next)->size(0));
  if ((nfree < _7987))
  {
    {
      int _7989 = (_7987 - nfree);
      if ((_7989 < _7988))
      {
        {
          _7989 = _7988;
        }
      }
      {}
      recap(safe_add( _7989,_7988 ));
    }
  }
  {}
  int _7990 = first_free;
  int _7991 = _7990;
  int _12351 = (int)0;
  int _12352 = (_7987 - (int)1);
  for (int _7992 = _12351; _7992 < _12352; ++_7992)
  {
    {
      _7991 = ((*next)(_7991));
    }
  }
  first_free = ((*next)(_7991));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_7991)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _7991;
    }
  }
  {}
  first_used = _7990;
  nfree -= _7987;
  return _7990;
}
void mosek::fusion::p_LinkedInts::recap(int _7993){
  int _7994 = (int)((next)->size(0));
  if ((_7993 > _7994))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_7993);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_7993);
      int _12353 = _7994;
      int _12354 = (_7993 - (int)1);
      for (int _7995 = _12353; _7995 < _12354; ++_7995)
      {
        {
          ((*next)(_7995)) = safe_add( _7995,(int)1 );
          ((*prev)(safe_add( _7995,(int)1 ))) = _7995;
        }
      }
      ((*next)((_7993 - (int)1))) = (-(int)1);
      ((*prev)(_7994)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _7994;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _7994;
        }
      }
      last_free = (_7993 - (int)1);
      nfree += (_7993 - _7994);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _7996 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _7997 = first_used;
  while ( (_7997 >= (int)0) )
  {
    {
      ((*_7996)(_7997)) = true;
      _7997 = ((*next)(_7997));
      if (((_7997 >= (int)0) && ((*_7996)(_7997))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _7997 = first_free;
  int _7998 = (int)0;
  while ( (_7997 >= (int)0) )
  {
    {
      ++ _7998;
      ((*_7996)(_7997)) = true;
      _7997 = ((*next)(_7997));
      if (((_7997 >= (int)0) && ((*_7996)(_7997))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_7998 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _12355 = (int)0;
  int _12356 = (int)((_7996)->size(0));
  for (int _7999 = _12355; _7999 < _12356; ++_7999)
  {
    {
      if ((!((*_7996)(_7997))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _12357 = (int)0;
  int _12358 = (int)((_7996)->size(0));
  for (int _8000 = _12357; _8000 < _12358; ++_8000)
  {
    {
      ((*_7996)(_8000)) = false;
    }
  }
  _7997 = last_free;
  int _8001 = (int)0;
  while ( (_7997 >= (int)0) )
  {
    {
      ++ _8001;
      ((*_7996)(_7997)) = true;
      _7997 = ((*prev)(_7997));
      if (((_7997 >= (int)0) && ((*_7996)(_7997))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8001 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8002,    const std::string & _8003,    double _8004) { mosek::fusion::p_Parameters::setParameter(_8002,_8003,_8004); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8002,const std::string & _8003,double _8004){
  if (false)
  {
    {
    }
  }
  else if((_8003 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8003 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8003 == std::string ("numThreads")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8005 = _8004;
          if (((int)0 <= _8005))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8005);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_8003 == std::string ("mtSpincount")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8006 = _8004;
          if ((((int)0 <= _8006) && (_8006 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8006);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8003 == std::string ("biMaxIterations")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8007 = _8004;
          if (((int)0 <= _8007))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8007);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8008 = _8004;
          if (((int)0 <= _8008))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8008);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8009 = _8004;
          if (((int)0 <= _8009))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8009);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logResponse")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8010 = _8004;
          if (((int)0 <= _8010))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8010);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8003 == std::string ("logBi")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8011 = _8004;
          if (((int)0 <= _8011))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8011);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logBiFreq")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8012 = _8004;
          if (((int)0 <= _8012))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8012);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8003 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8003 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8003 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8003 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8003 == std::string ("logIntpnt")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8013 = _8004;
          if (((int)0 <= _8013))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8013);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8014 = _8004;
          if (((int)0 <= _8014))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8014);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8015 = _8004;
          if (((int)0 <= _8015))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8015);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8003 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8016 = _8004;
          if (((int)0 <= _8016))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8016);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8003 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8003 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8003 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8017 = _8004;
          if (((-(int)1) <= _8017))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8017);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8003 == std::string ("presolveLevel")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8018 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8018);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logPresolve")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8019 = _8004;
          if (((int)0 <= _8019))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8019);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8003 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8020 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8020);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8021 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8021);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8022 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8022);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("simPrimalCrash")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8023 = _8004;
          if (((int)0 <= _8023))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8023);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logSim")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8024 = _8004;
          if (((int)0 <= _8024))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8024);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logSimMinor")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8025 = _8004;
          if (((int)0 <= _8025))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8025);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logSimFreq")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8026 = _8004;
          if (((int)0 <= _8026))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8026);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8027 = _8004;
          if ((((int)0 <= _8027) && (_8027 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8027);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8003 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8028 = _8004;
          if ((((int)0 <= _8028) && (_8028 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8028);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8003 == std::string ("simMaxIterations")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8029 = _8004;
          if (((int)0 <= _8029))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8029);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8003 == std::string ("simRefactorFreq")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8030 = _8004;
          if (((int)0 <= _8030))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8030);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("simSeed")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8031 = _8004;
          if ((((int)0 <= _8031) && (_8031 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8031);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8003 == std::string ("logMio")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8032 = _8004;
          if (((int)0 <= _8032))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8032);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logMioFreq")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8033 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8033);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8034 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8034);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8035 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8035);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8036 = _8004;
          if (((int)0 <= _8036))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8036);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8037 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8037);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8003 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8038 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8038);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioProbingLevel")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8039 = _8004;
          if ((((-(int)1) <= _8039) && (_8039 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8039);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8040 = _8004;
          if ((((-(int)1) <= _8040) && (_8040 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8040);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8041 = _8004;
          if ((((-(int)1) <= _8041) && (_8041 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8041);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8003 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8003 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8003 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8003 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8003 == std::string ("mioSeed")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8042 = _8004;
          if (((int)0 <= _8042))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8042);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8003 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_8003 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8043 = _8004;
          if (((int)40 <= _8043))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8043);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8044 = _8004;
          if (((int)0 <= _8044))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8044);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_8003 == std::string ("logInfeasAna")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8045 = _8004;
          if (((int)0 <= _8045))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8045);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8003 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8003 == std::string ("licensePauseTime")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8046 = _8004;
          if ((((int)0 <= _8046) && (_8046 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8046);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8003 == std::string ("log")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8047 = _8004;
          if (((int)0 <= _8047))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8047);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logExpand")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8048 = _8004;
          if (((int)0 <= _8048))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8048);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logFile")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8049 = _8004;
          if (((int)0 <= _8049))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8049);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("logOrder")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8050 = _8004;
          if (((int)0 <= _8050))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8050);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8003 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8003 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8051 = _8004;
          if ((((int)0 <= _8051) && (_8051 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8051);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8052 = _8004;
          if ((((int)0 <= _8052) && (_8052 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8052);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8053 = _8004;
          if (((int)0 <= _8053))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8053);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8003 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8003 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8003 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8003 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8003 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8003 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8003 == std::string ("simDualCrash")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8054 = _8004;
          if (((int)0 <= _8054))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8054);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8003 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8055 = _8004;
          if ((((-(int)1) <= _8055) && (_8055 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8055);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8003 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8003 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8003 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8003 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_8003 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8056 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8056);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8057 = _8004;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8057);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8003 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8003 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8003 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8003 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8058 = _8004;
          if (((-(int)1) <= _8058))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8058);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_8004 - (int)_8004) == 0.0))
      {
        {
          double _8059 = _8004;
          if ((((-(int)1) <= _8059) && (_8059 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8059);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("optimizerMaxTime")))
  {
    {
      double _8060 = _8004;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8060);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("lowerObjCut")))
  {
    {
      double _8061 = _8004;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8061);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("upperObjCut")))
  {
    {
      double _8062 = _8004;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8062);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8063 = _8004;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8063);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8064 = _8004;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8064);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolRelGap")))
  {
    {
      double _8065 = _8004;
      if ((1.000000e-14 <= _8065))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8065);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolStepSize")))
  {
    {
      double _8066 = _8004;
      if (((0.000000e+00 <= _8066) && (_8066 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8066);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8067 = _8004;
      if (((1.000000e-06 <= _8067) && (_8067 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8067);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolRelStep")))
  {
    {
      double _8068 = _8004;
      if (((1.000000e-04 <= _8068) && (_8068 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8068);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolPath")))
  {
    {
      double _8069 = _8004;
      if (((0.000000e+00 <= _8069) && (_8069 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8069);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolPfeas")))
  {
    {
      double _8070 = _8004;
      if (((0.000000e+00 <= _8070) && (_8070 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8070);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolDfeas")))
  {
    {
      double _8071 = _8004;
      if (((0.000000e+00 <= _8071) && (_8071 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8071);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolMuRed")))
  {
    {
      double _8072 = _8004;
      if (((0.000000e+00 <= _8072) && (_8072 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8072);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolInfeas")))
  {
    {
      double _8073 = _8004;
      if (((0.000000e+00 <= _8073) && (_8073 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8073);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8074 = _8004;
      if (((0.000000e+00 <= _8074) && (_8074 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8074);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8075 = _8004;
      if (((0.000000e+00 <= _8075) && (_8075 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8075);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8076 = _8004;
      if (((0.000000e+00 <= _8076) && (_8076 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8076);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8077 = _8004;
      if (((0.000000e+00 <= _8077) && (_8077 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8077);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8078 = _8004;
      if ((1.000000e+00 <= _8078))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8078);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8079 = _8004;
      if (((0.000000e+00 <= _8079) && (_8079 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8079);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolPsafe")))
  {
    {
      double _8080 = _8004;
      if ((1.000000e-04 <= _8080))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8080);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("intpntTolDsafe")))
  {
    {
      double _8081 = _8004;
      if ((1.000000e-04 <= _8081))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8081);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioMaxTime")))
  {
    {
      double _8082 = _8004;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8082);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioRelGapConst")))
  {
    {
      double _8083 = _8004;
      if ((1.000000e-15 <= _8083))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8083);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioTolRelGap")))
  {
    {
      double _8084 = _8004;
      if ((0.000000e+00 <= _8084))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8084);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioTolAbsGap")))
  {
    {
      double _8085 = _8004;
      if ((0.000000e+00 <= _8085))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8085);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8086 = _8004;
      if ((1.000000e-09 <= _8086))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8086);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("basisTolX")))
  {
    {
      double _8087 = _8004;
      if ((1.000000e-09 <= _8087))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8087);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("basisTolS")))
  {
    {
      double _8088 = _8004;
      if ((1.000000e-09 <= _8088))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8088);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("basisRelTolS")))
  {
    {
      double _8089 = _8004;
      if ((0.000000e+00 <= _8089))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8089);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveTolX")))
  {
    {
      double _8090 = _8004;
      if ((0.000000e+00 <= _8090))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8090);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveTolS")))
  {
    {
      double _8091 = _8004;
      if ((0.000000e+00 <= _8091))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8091);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveTolAij")))
  {
    {
      double _8092 = _8004;
      if ((1.000000e-15 <= _8092))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8092);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8093 = _8004;
      if ((0.000000e+00 <= _8093))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8093);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8094 = _8004;
      if ((0.000000e+00 <= _8094))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8094);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8095 = _8004;
      if ((1.000000e-12 <= _8095))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8095);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioTolFeas")))
  {
    {
      double _8096 = _8004;
      if (((1.000000e-09 <= _8096) && (_8096 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8096);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8003 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8097 = _8004;
      if (((0.000000e+00 <= _8097) && (_8097 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8002.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8097);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8003 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8003 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8003 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8003 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8003 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8003 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8098,    const std::string & _8099,    int _8100) { mosek::fusion::p_Parameters::setParameter(_8098,_8099,_8100); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8098,const std::string & _8099,int _8100){
  if (false)
  {
    {
    }
  }
  else if((_8099 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8099 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8099 == std::string ("numThreads")))
  {
    {
      int _8101 = _8100;
      if (((int)0 <= _8101))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8101);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_8099 == std::string ("mtSpincount")))
  {
    {
      int _8102 = _8100;
      if ((((int)0 <= _8102) && (_8102 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8102);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8099 == std::string ("biMaxIterations")))
  {
    {
      int _8103 = _8100;
      if (((int)0 <= _8103))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8103);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _8104 = _8100;
      if (((int)0 <= _8104))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8104);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logCutSecondOpt")))
  {
    {
      int _8105 = _8100;
      if (((int)0 <= _8105))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8105);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logResponse")))
  {
    {
      int _8106 = _8100;
      if (((int)0 <= _8106))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8106);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8099 == std::string ("logBi")))
  {
    {
      int _8107 = _8100;
      if (((int)0 <= _8107))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8107);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logBiFreq")))
  {
    {
      int _8108 = _8100;
      if (((int)0 <= _8108))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8108);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8099 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8099 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8099 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8099 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8099 == std::string ("logIntpnt")))
  {
    {
      int _8109 = _8100;
      if (((int)0 <= _8109))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8109);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntMaxIterations")))
  {
    {
      int _8110 = _8100;
      if (((int)0 <= _8110))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8110);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntOffColTrh")))
  {
    {
      int _8111 = _8100;
      if (((int)0 <= _8111))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8111);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8099 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _8112 = _8100;
      if (((int)0 <= _8112))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8112);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8099 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8099 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8099 == std::string ("intpntMaxNumCor")))
  {
    {
      int _8113 = _8100;
      if (((-(int)1) <= _8113))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8113);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8099 == std::string ("presolveLevel")))
  {
    {
      int _8114 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8114);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logPresolve")))
  {
    {
      int _8115 = _8100;
      if (((int)0 <= _8115))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8115);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8099 == std::string ("presolveMaxNumPass")))
  {
    {
      int _8116 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8116);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _8117 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8117);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _8118 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8118);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("simPrimalCrash")))
  {
    {
      int _8119 = _8100;
      if (((int)0 <= _8119))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8119);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logSim")))
  {
    {
      int _8120 = _8100;
      if (((int)0 <= _8120))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8120);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logSimMinor")))
  {
    {
      int _8121 = _8100;
      if (((int)0 <= _8121))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8121);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logSimFreq")))
  {
    {
      int _8122 = _8100;
      if (((int)0 <= _8122))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8122);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _8123 = _8100;
      if ((((int)0 <= _8123) && (_8123 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8123);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8099 == std::string ("simDualRestrictSelection")))
  {
    {
      int _8124 = _8100;
      if ((((int)0 <= _8124) && (_8124 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8124);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8099 == std::string ("simMaxIterations")))
  {
    {
      int _8125 = _8100;
      if (((int)0 <= _8125))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8125);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8099 == std::string ("simRefactorFreq")))
  {
    {
      int _8126 = _8100;
      if (((int)0 <= _8126))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8126);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("simSeed")))
  {
    {
      int _8127 = _8100;
      if ((((int)0 <= _8127) && (_8127 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8127);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8099 == std::string ("logMio")))
  {
    {
      int _8128 = _8100;
      if (((int)0 <= _8128))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8128);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logMioFreq")))
  {
    {
      int _8129 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8129);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _8130 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8130);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioMaxNumBranches")))
  {
    {
      int _8131 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8131);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _8132 = _8100;
      if (((int)0 <= _8132))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8132);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _8133 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8133);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8099 == std::string ("mioHeuristicLevel")))
  {
    {
      int _8134 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8134);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioProbingLevel")))
  {
    {
      int _8135 = _8100;
      if ((((-(int)1) <= _8135) && (_8135 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8135);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _8136 = _8100;
      if ((((-(int)1) <= _8136) && (_8136 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8136);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _8137 = _8100;
      if ((((-(int)1) <= _8137) && (_8137 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8137);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8099 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8099 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8099 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8099 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8099 == std::string ("mioSeed")))
  {
    {
      int _8138 = _8100;
      if (((int)0 <= _8138))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8138);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8099 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_8099 == std::string ("writeLpLineWidth")))
  {
    {
      int _8139 = _8100;
      if (((int)40 <= _8139))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8139);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _8140 = _8100;
      if (((int)0 <= _8140))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8140);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_8099 == std::string ("logInfeasAna")))
  {
    {
      int _8141 = _8100;
      if (((int)0 <= _8141))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8141);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8099 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8099 == std::string ("licensePauseTime")))
  {
    {
      int _8142 = _8100;
      if ((((int)0 <= _8142) && (_8142 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8142);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8099 == std::string ("log")))
  {
    {
      int _8143 = _8100;
      if (((int)0 <= _8143))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8143);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logExpand")))
  {
    {
      int _8144 = _8100;
      if (((int)0 <= _8144))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8144);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logFile")))
  {
    {
      int _8145 = _8100;
      if (((int)0 <= _8145))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8145);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("logOrder")))
  {
    {
      int _8146 = _8100;
      if (((int)0 <= _8146))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8146);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8099 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8099 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _8147 = _8100;
      if ((((int)0 <= _8147) && (_8147 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8147);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _8148 = _8100;
      if ((((int)0 <= _8148) && (_8148 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8148);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _8149 = _8100;
      if (((int)0 <= _8149))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8149);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8099 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8099 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8099 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8099 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8099 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8099 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8099 == std::string ("simDualCrash")))
  {
    {
      int _8150 = _8100;
      if (((int)0 <= _8150))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8150);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8099 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _8151 = _8100;
      if ((((-(int)1) <= _8151) && (_8151 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8151);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8099 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8099 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8099 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8099 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_8099 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _8152 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8152);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _8153 = _8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8153);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8099 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8099 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8099 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8099 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _8154 = _8100;
      if (((-(int)1) <= _8154))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8154);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _8155 = _8100;
      if ((((-(int)1) <= _8155) && (_8155 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8155);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("optimizerMaxTime")))
  {
    {
      double _8156 = (double)_8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8156);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("lowerObjCut")))
  {
    {
      double _8157 = (double)_8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8157);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("upperObjCut")))
  {
    {
      double _8158 = (double)_8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8158);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8159 = (double)_8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8159);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8160 = (double)_8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8160);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolRelGap")))
  {
    {
      double _8161 = (double)_8100;
      if ((1.000000e-14 <= _8161))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8161);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolStepSize")))
  {
    {
      double _8162 = (double)_8100;
      if (((0.000000e+00 <= _8162) && (_8162 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8162);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8163 = (double)_8100;
      if (((1.000000e-06 <= _8163) && (_8163 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8163);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolRelStep")))
  {
    {
      double _8164 = (double)_8100;
      if (((1.000000e-04 <= _8164) && (_8164 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8164);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolPath")))
  {
    {
      double _8165 = (double)_8100;
      if (((0.000000e+00 <= _8165) && (_8165 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8165);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolPfeas")))
  {
    {
      double _8166 = (double)_8100;
      if (((0.000000e+00 <= _8166) && (_8166 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8166);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolDfeas")))
  {
    {
      double _8167 = (double)_8100;
      if (((0.000000e+00 <= _8167) && (_8167 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8167);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolMuRed")))
  {
    {
      double _8168 = (double)_8100;
      if (((0.000000e+00 <= _8168) && (_8168 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8168);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolInfeas")))
  {
    {
      double _8169 = (double)_8100;
      if (((0.000000e+00 <= _8169) && (_8169 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8169);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8170 = (double)_8100;
      if (((0.000000e+00 <= _8170) && (_8170 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8170);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8171 = (double)_8100;
      if (((0.000000e+00 <= _8171) && (_8171 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8171);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8172 = (double)_8100;
      if (((0.000000e+00 <= _8172) && (_8172 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8172);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8173 = (double)_8100;
      if (((0.000000e+00 <= _8173) && (_8173 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8173);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8174 = (double)_8100;
      if ((1.000000e+00 <= _8174))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8174);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8175 = (double)_8100;
      if (((0.000000e+00 <= _8175) && (_8175 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8175);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolPsafe")))
  {
    {
      double _8176 = (double)_8100;
      if ((1.000000e-04 <= _8176))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8176);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("intpntTolDsafe")))
  {
    {
      double _8177 = (double)_8100;
      if ((1.000000e-04 <= _8177))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8177);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioMaxTime")))
  {
    {
      double _8178 = (double)_8100;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8178);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioRelGapConst")))
  {
    {
      double _8179 = (double)_8100;
      if ((1.000000e-15 <= _8179))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8179);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioTolRelGap")))
  {
    {
      double _8180 = (double)_8100;
      if ((0.000000e+00 <= _8180))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8180);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioTolAbsGap")))
  {
    {
      double _8181 = (double)_8100;
      if ((0.000000e+00 <= _8181))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8181);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8182 = (double)_8100;
      if ((1.000000e-09 <= _8182))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8182);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("basisTolX")))
  {
    {
      double _8183 = (double)_8100;
      if ((1.000000e-09 <= _8183))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8183);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("basisTolS")))
  {
    {
      double _8184 = (double)_8100;
      if ((1.000000e-09 <= _8184))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8184);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("basisRelTolS")))
  {
    {
      double _8185 = (double)_8100;
      if ((0.000000e+00 <= _8185))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8185);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveTolX")))
  {
    {
      double _8186 = (double)_8100;
      if ((0.000000e+00 <= _8186))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8186);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveTolS")))
  {
    {
      double _8187 = (double)_8100;
      if ((0.000000e+00 <= _8187))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8187);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveTolAij")))
  {
    {
      double _8188 = (double)_8100;
      if ((1.000000e-15 <= _8188))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8188);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8189 = (double)_8100;
      if ((0.000000e+00 <= _8189))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8189);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8190 = (double)_8100;
      if ((0.000000e+00 <= _8190))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8190);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8191 = (double)_8100;
      if ((1.000000e-12 <= _8191))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8191);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioTolFeas")))
  {
    {
      double _8192 = (double)_8100;
      if (((1.000000e-09 <= _8192) && (_8192 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8192);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8099 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8193 = (double)_8100;
      if (((0.000000e+00 <= _8193) && (_8193 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8098.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8193);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8099 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8099 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8099 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8099 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8099 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8099 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8194,    const std::string & _8195,    const std::string & _8196) { mosek::fusion::p_Parameters::setParameter(_8194,_8195,_8196); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8194,const std::string & _8195,const std::string & _8196){
  if (false)
  {
    {
    }
  }
  {}
  if ((_8195 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _8197 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8197 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_8197);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("removeUnusedSolutions")))
  {
    {
      int _8198 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8198 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_8198);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _8200 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8200))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8200);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8199)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntMultiThread")))
  {
    {
      int _8201 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8201 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_8201);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _8203 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((int)0 <= _8203) && (_8203 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8203);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8202)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("optimizer")))
  {
    {
      int _8204 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8196);
      if ((_8204 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_8204);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _8206 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8206))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8206);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8205)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _8208 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8208))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8208);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8207)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _8210 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8210))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8210);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8209)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _8212 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8212))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8212);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8211)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logLocalInfo")))
  {
    {
      int _8213 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8213 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_8213);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _8215 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8215))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8215);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8214)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _8217 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8217))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8217);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8216)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("biCleanOptimizer")))
  {
    {
      int _8218 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8196);
      if ((_8218 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_8218);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intpntStartingPoint")))
  {
    {
      int _8219 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_8196);
      if ((_8219 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_8219);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intpntDiffStep")))
  {
    {
      int _8220 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8220 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_8220);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intpntScaling")))
  {
    {
      int _8221 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8196);
      if ((_8221 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_8221);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intpntSolveForm")))
  {
    {
      int _8222 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8196);
      if ((_8222 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_8222);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _8224 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8224))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8224);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8223)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _8226 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8226))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8226);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8225)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _8228 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8228))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8228);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8227)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntOrderMethod")))
  {
    {
      int _8229 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_8196);
      if ((_8229 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_8229);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _8231 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8231))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8231);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8230)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntBasis")))
  {
    {
      int _8232 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_8196);
      if ((_8232 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_8232);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _8233 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8233 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_8233);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("biIgnoreNumError")))
  {
    {
      int _8234 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8234 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_8234);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _8236 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((-(int)1) <= _8236))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8236);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8235)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveUse")))
  {
    {
      int _8237 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_8196);
      if ((_8237 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_8237);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _8239 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8239);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8238)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _8241 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8241))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8241);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8240)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveLindepUse")))
  {
    {
      int _8242 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8242 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_8242);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _8244 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8244);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8243)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _8246 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8246);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8245)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _8248 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8248);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8247)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _8250 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8250))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8250);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8249)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _8252 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8252))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8252);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8251)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _8254 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8254))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8254);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8253)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _8256 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8256))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8256);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8255)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _8258 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((int)0 <= _8258) && (_8258 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8258);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8257)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simPrimalSelection")))
  {
    {
      int _8259 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8196);
      if ((_8259 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_8259);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _8261 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((int)0 <= _8261) && (_8261 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8261);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8260)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simDualSelection")))
  {
    {
      int _8262 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8196);
      if ((_8262 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_8262);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _8264 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8264))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8264);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8263)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simHotstartLu")))
  {
    {
      int _8265 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8265 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_8265);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _8267 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8267))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8267);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8266)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _8269 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((int)0 <= _8269) && (_8269 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8269);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8268)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioMode")))
  {
    {
      int _8270 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_8196);
      if ((_8270 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_8270);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _8272 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8272))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8272);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8271)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _8274 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8274);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8273)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _8276 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8276);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8275)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _8278 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8278);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8277)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _8280 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8280))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8280);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8279)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _8282 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8282);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8281)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioNodeSelection")))
  {
    {
      int _8283 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_8196);
      if ((_8283 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_8283);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _8285 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8285);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8284)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _8287 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((-(int)1) <= _8287) && (_8287 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8287);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8286)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _8289 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((-(int)1) <= _8289) && (_8289 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8289);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8288)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _8291 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((-(int)1) <= _8291) && (_8291 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8291);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8290)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioBranchDir")))
  {
    {
      int _8292 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_8196);
      if ((_8292 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_8292);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioRootOptimizer")))
  {
    {
      int _8293 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8196);
      if ((_8293 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_8293);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioNodeOptimizer")))
  {
    {
      int _8294 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8196);
      if ((_8294 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_8294);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _8295 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8295 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_8295);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _8296 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8296 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_8296);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _8298 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8298))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8298);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8297)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _8299 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8299 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_8299);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("writeLpQuotedNames")))
  {
    {
      int _8300 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8300 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_8300);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _8302 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)40 <= _8302))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8302);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8301)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _8304 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8304))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8304);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8303)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("writeLpFullObj")))
  {
    {
      int _8305 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8305 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_8305);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _8307 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8307))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8307);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8306)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("licenseWait")))
  {
    {
      int _8308 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8308 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_8308);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _8309 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8309 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_8309);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _8311 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((int)0 <= _8311) && (_8311 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8311);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8310)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("licenseDebug")))
  {
    {
      int _8312 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8312 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_8312);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("log")))
  {
    {
      try
      {
        {
          int _8314 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8314))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8314);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8313)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _8316 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8316))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8316);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8315)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _8318 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8318))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8318);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8317)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _8320 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8320))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8320);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8319)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simScaling")))
  {
    {
      int _8321 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8196);
      if ((_8321 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_8321);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simScalingMethod")))
  {
    {
      int _8322 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_8196);
      if ((_8322 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_8322);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8324 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((int)0 <= _8324) && (_8324 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8324);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8323)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8326 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((int)0 <= _8326) && (_8326 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8326);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8325)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _8328 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8328))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8328);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8327)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simHotstart")))
  {
    {
      int _8329 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_8196);
      if ((_8329 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_8329);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simBasisFactorUse")))
  {
    {
      int _8330 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8330 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_8330);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simDegen")))
  {
    {
      int _8331 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_8196);
      if ((_8331 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_8331);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simReformulation")))
  {
    {
      int _8332 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_8196);
      if ((_8332 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_8332);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simExploitDupvec")))
  {
    {
      int _8333 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_8196);
      if ((_8333 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_8333);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simSaveLu")))
  {
    {
      int _8334 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8334 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_8334);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simNonSingular")))
  {
    {
      int _8335 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8335 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_8335);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _8337 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((int)0 <= _8337))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8337);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8336)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("infeasPreferPrimal")))
  {
    {
      int _8338 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8338 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_8338);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _8340 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((-(int)1) <= _8340) && (_8340 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8340);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8339)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioCutCmir")))
  {
    {
      int _8341 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8341 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_8341);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioCutClique")))
  {
    {
      int _8342 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8342 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_8342);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioCutImpliedBound")))
  {
    {
      int _8343 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8343 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_8343);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _8344 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8344 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_8344);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioCutGmi")))
  {
    {
      int _8345 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8345 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_8345);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _8347 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8347);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8346)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _8349 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8349);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8348)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("cacheLicense")))
  {
    {
      int _8350 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8350 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_8350);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intpntRegularizationUse")))
  {
    {
      int _8351 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8351 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_8351);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simSolveForm")))
  {
    {
      int _8352 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8196);
      if ((_8352 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_8352);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("simSwitchOptimizer")))
  {
    {
      int _8353 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8196);
      if ((_8353 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_8353);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _8355 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if (((-(int)1) <= _8355))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8355);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8354)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _8357 = ::mosek::fusion::Utils::Tools::toInt(_8196);
          if ((((-(int)1) <= _8357) && (_8357 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8357);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8356)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _8359 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8359);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8358)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _8361 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8361);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8360)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _8363 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8363);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8362)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8365 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8365);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8364)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8367 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8367);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8366)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _8369 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-14 <= _8369))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8369);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8368)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _8371 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8371) && (_8371 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8371);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8370)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _8373 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((1.000000e-06 <= _8373) && (_8373 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8373);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8372)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _8375 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((1.000000e-04 <= _8375) && (_8375 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8375);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8374)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _8377 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8377) && (_8377 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8377);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8376)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _8379 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8379) && (_8379 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8379);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8378)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _8381 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8381) && (_8381 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8381);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8380)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _8383 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8383) && (_8383 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8383);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8382)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _8385 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8385) && (_8385 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8385);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8384)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _8387 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8387) && (_8387 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8387);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8386)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _8389 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8389) && (_8389 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8389);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8388)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _8391 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8391) && (_8391 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8391);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8390)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _8393 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8393) && (_8393 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8393);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8392)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _8395 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e+00 <= _8395))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8395);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8394)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _8397 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8397) && (_8397 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8397);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8396)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _8399 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-04 <= _8399))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8399);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8398)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _8401 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-04 <= _8401))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8401);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8400)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _8403 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8403);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8402)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _8405 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-15 <= _8405))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8405);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8404)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _8407 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((0.000000e+00 <= _8407))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8407);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8406)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _8409 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((0.000000e+00 <= _8409))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8409);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8408)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _8411 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-09 <= _8411))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8411);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8410)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _8413 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-09 <= _8413))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8413);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8412)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _8415 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-09 <= _8415))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8415);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8414)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _8417 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((0.000000e+00 <= _8417))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8417);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8416)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _8419 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((0.000000e+00 <= _8419))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8419);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8418)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _8421 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((0.000000e+00 <= _8421))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8421);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8420)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _8423 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-15 <= _8423))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8423);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8422)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _8425 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((0.000000e+00 <= _8425))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8425);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8424)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _8427 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((0.000000e+00 <= _8427))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8427);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8426)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _8429 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if ((1.000000e-12 <= _8429))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8429);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8428)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _8431 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((1.000000e-09 <= _8431) && (_8431 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8431);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8430)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _8433 = ::mosek::fusion::Utils::Tools::toDouble(_8196);
          if (((0.000000e+00 <= _8433) && (_8433 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8433);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8432)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_8195 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_8196);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_8196);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_8196);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_8196);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_8196);
      return;
    }
  }
  {}
  if ((_8195 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8194.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_8196);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _8434){
  if ((_8434 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8434 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8434 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8434 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8434 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _8435){
  if ((_8435 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8435 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8435 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8435 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8435 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8435 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8435 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _8436){
  if ((_8436 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8436 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _8437){
  if ((_8437 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8437 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8437 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8437 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8437 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _8438){
  if ((_8438 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8438 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8438 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8438 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8438 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8438 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8438 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8438 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8438 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8438 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _8439){
  if ((_8439 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8439 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8439 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8439 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8439 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8439 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8439 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_8439 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8439 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8439 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8439 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8439 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8439 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8439 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8439 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8439 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8439 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8439 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8439 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8439 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8439 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8439 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8439 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8439 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8439 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8439 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8439 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8439 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8439 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8439 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8439 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8439 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8439 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8439 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8439 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8439 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8439 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8439 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8439 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8439 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8439 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8439 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8439 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_8439 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8439 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8439 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_8439 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_8439 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_8439 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_8439 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_8439 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_8439 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_8439 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8439 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8439 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8439 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8439 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8439 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8439 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8439 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8439 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8439 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8439 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8439 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8439 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8439 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8439 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8439 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8439 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8439 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8439 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8439 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8439 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8439 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_8439 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8439 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8439 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8439 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_8439 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_8439 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_8439 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_8439 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_8439 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_8439 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_8439 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_8439 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_8439 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_8439 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_8439 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_8439 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_8439 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_8439 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_8439 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_8439 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_8439 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_8439 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_8439 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_8439 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_8439 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_8439 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_8439 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_8439 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_8439 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8439 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8439 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8439 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8439 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8439 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8439 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8439 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8439 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_8439 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_8439 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8439 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8439 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8439 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8439 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8439 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8439 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8439 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_8439 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8439 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8439 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_8439 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_8439 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_8439 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_8439 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_8439 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_8439 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_8439 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_8439 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_8439 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_8439 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_8439 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_8439 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_8439 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8439 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8439 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8439 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8439 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8439 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8439 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8439 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8439 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8439 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8439 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8439 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8439 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8439 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8439 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8439 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8439 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8439 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8439 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8439 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_8439 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_8439 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_8439 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8439 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8439 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8439 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8439 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_8439 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8439 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8439 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8439 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8439 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8439 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _8440){
  if ((_8440 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8440 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8440 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8440 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8440 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8440 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _8441){
  if ((_8441 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8441 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _8442){
  if ((_8442 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8442 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _8443){
  if ((_8443 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8443 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8443 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8443 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8443 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8443 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8443 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8443 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8443 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8443 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8443 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8443 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8443 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8443 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8443 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8443 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8443 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8443 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8443 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8443 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8443 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8443 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8443 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8443 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8443 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8443 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8443 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8443 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8443 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8443 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8443 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8443 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8443 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8443 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8443 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8443 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8443 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8443 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8443 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8443 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8443 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8443 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8443 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8443 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8443 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8443 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8443 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8443 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _8444){
  if ((_8444 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8444 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8444 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8444 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _8445){
  if ((_8445 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8445 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8445 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8445 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _8446){
  if ((_8446 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8446 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8446 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8446 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _8447){
  if ((_8447 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8447 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8447 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8447 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _8448){
  if ((_8448 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8448 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8448 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8448 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _8449){
  if ((_8449 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8449 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8449 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _8450){
  if ((_8450 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8450 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8450 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8450 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8450 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8450 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8450 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8450 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8450 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8450 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8450 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8450 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8450 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8450 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8450 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8450 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8450 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8450 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8450 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8450 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8450 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8450 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8450 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8450 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8450 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8450 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8450 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8450 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8450 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8450 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8450 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8450 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8450 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8450 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8450 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8450 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8450 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8450 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8450 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8450 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8450 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8450 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8450 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8450 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8450 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8450 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8450 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8450 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8450 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8450 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8450 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8450 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8450 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8450 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8450 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8450 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8450 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8450 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8450 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8450 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8450 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8450 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8450 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8450 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8450 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8450 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8450 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8450 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8450 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8450 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8450 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8450 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8450 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8450 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _8451){
  if ((_8451 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8451 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _8452){
  if ((_8452 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8452 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8452 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8452 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8452 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8452 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8452 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8452 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8452 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _8453){
  if ((_8453 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8453 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8453 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8453 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8453 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8453 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8453 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8453 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8453 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8453 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8453 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8453 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8453 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _8454){
  if ((_8454 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8454 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _8455){
  if ((_8455 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8455 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8455 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8455 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8455 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8455 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _8456){
  if ((_8456 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8456 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _8457){
  if ((_8457 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8457 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8457 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _8458){
  if ((_8458 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8458 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8458 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _8459){
  if ((_8459 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8459 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8459 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8459 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8459 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8459 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8459 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8459 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8459 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _8460){
  if ((_8460 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8460 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8460 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8460 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8460 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _8461){
  if ((_8461 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8461 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8461 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _8462){
  if ((_8462 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8462 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8462 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8462 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8462 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8462 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8462 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8462 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _8463){
  if ((_8463 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8463 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8463 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8463 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8463 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8463 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8463 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8463 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8463 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8463 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8463 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8463 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8463 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8463 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8463 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8463 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8463 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8463 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8463 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8463 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8463 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8463 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8463 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8463 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _8464){
  if ((_8464 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8464 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8464 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8464 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8464 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _8465){
  if ((_8465 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8465 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _8466){
  if ((_8466 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _8467){
  if ((_8467 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8467 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8467 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8467 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8467 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8467 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8467 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8467 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8467 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8467 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8467 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8467 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8467 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8467 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8467 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8467 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8467 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8467 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8467 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8467 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8467 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8467 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8467 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8467 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8467 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8467 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8467 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8467 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8467 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8467 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8467 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8467 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8467 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8467 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8467 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8467 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8467 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8467 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8467 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8467 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _8468){
  if ((_8468 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8468 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8468 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8468 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _8469){
  if ((_8469 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8469 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _8470){
  if ((_8470 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8470 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8470 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8470 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8470 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8470 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8470 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8470 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _8471){
  if ((_8471 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8471 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8471 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8471 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8471 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _8472){
  if ((_8472 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8472 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8472 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _8473){
  if ((_8473 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8473 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8473 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8473 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8473 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8473 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8473 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _8474){
  if ((_8474 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8474 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _8475){
  if ((_8475 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8475 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8475 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _8476){
  if ((_8476 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8476 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8476 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _8477){
  if ((_8477 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8477 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8477 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8477 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8477 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8477 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8477 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8477 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8477 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8477 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8477 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8477 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8477 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8477 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8477 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8477 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8477 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8477 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8477 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8477 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8477 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8477 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8477 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8477 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8477 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8477 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8477 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8477 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8477 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8477 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8477 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8477 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8477 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8477 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8477 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8477 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8477 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8477 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8477 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8477 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8477 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8477 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8477 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8477 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8477 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _8478){
  if ((_8478 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _8479){
  if ((_8479 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8479 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8479 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8479 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8479 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8479 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8479 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8479 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8479 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_8479 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_8479 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_8479 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_8479 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_8479 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_8479 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_8479 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_8479 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_8479 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_8479 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_8479 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_8479 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_8479 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_8479 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_8479 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_8479 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_8479 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_8479 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_8479 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_8479 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_8479 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_8479 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_8479 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_8479 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_8479 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_8479 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_8479 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_8479 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_8479 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_8479 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_8479 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_8479 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_8479 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_8479 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_8479 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_8479 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_8479 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_8479 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_8479 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_8479 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_8479 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_8479 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_8479 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_8479 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_8479 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_8479 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_8479 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_8479 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_8479 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_8479 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_8479 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_8479 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_8479 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_8479 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_8479 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_8479 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_8479 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_8479 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_8479 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_8479 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_8479 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_8479 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_8479 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_8479 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_8479 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_8479 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_8479 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_8479 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_8479 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_8479 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_8479 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_8479 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_8479 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_8479 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_8479 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_8479 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_8479 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_8479 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_8479 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_8479 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_8479 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_8479 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_8479 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_8479 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_8479 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_8479 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_8479 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_8479 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_8479 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_8479 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_8479 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_8479 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_8479 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_8479 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_8479 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_8479 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_8479 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_8479 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_8479 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_8479 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_8479 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_8479 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_8479 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_8479 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_8479 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_8479 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_8479 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_8479 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_8479 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_8479 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_8479 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_8479 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_8479 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_8479 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_8479 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_8479 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_8479 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_8479 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_8479 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_8479 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_8479 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_8479 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_8479 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_8479 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_8479 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_8479 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_8479 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_8479 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_8479 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_8479 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_8479 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_8479 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_8479 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_8479 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_8479 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_8479 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_8479 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_8479 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_8479 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_8479 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_8479 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_8479 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_8479 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_8479 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_8479 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_8479 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_8479 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_8479 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_8479 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_8479 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_8479 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_8479 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_8479 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_8479 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_8479 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_8479 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_8479 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_8479 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_8479 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_8479 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_8479 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_8479 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_8479 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_8479 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_8479 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_8479 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_8479 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_8479 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_8479 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_8479 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_8479 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_8479 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_8479 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_8479 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_8479 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_8479 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_8479 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_8479 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_8479 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_8479 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_8479 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_8479 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_8479 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_8479 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_8479 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_8479 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_8479 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_8479 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_8479 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_8479 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_8479 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_8479 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_8479 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_8479 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_8479 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_8479 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_8479 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_8479 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_8479 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_8479 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_8479 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_8479 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_8479 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_8479 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_8479 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_8479 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_8479 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_8479 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_8479 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_8479 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_8479 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_8479 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_8479 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_8479 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_8479 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_8479 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_8479 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_8479 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_8479 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_8479 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_8479 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_8479 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_8479 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_8479 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_8479 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_8479 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_8479 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_8479 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_8479 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_8479 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_8479 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_8479 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_8479 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_8479 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_8479 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_8479 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_8479 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_8479 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_8479 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_8479 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_8479 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_8479 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_8479 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_8479 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_8479 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_8479 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_8479 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_8479 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_8479 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_8479 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_8479 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_8479 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_8479 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_8479 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_8479 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_8479 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_8479 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_8479 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_8479 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_8479 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_8479 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_8479 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_8479 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_8479 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_8479 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_8479 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_8479 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_8479 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_8479 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_8479 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_8479 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_8479 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_8479 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_8479 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_8479 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_8479 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_8479 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_8479 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_8479 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_8479 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_8479 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_8479 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_8479 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_8479 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_8479 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_8479 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_8479 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_8479 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_8479 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_8479 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_8479 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_8479 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_8479 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_8479 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_8479 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_8479 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_8479 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_8479 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_8479 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_8479 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_8479 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_8479 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_8479 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_8479 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_8479 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_8479 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_8479 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_8479 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_8479 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_8479 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_8479 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_8479 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_8479 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_8479 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_8479 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_8479 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_8479 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_8479 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_8479 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_8479 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_8479 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_8479 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_8479 == std::string ("errServerProblemSize")))
  {
    {
      return (int)8008;
    }
  }
  {}
  if ((_8479 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_8479 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_8479 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_8479 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_8479 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_8479 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_8479 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_8479 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_8479 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_8479 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_8479 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_8479 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _8480){
  if ((_8480 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8480 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _8481){
  if ((_8481 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_8481 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _8482){
  if ((_8482 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8482 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8482 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _8483){
  if ((_8483 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8483 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8483 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8483 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _8484){
  if ((_8484 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8484 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8484 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8484 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8484 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8484 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8484 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _8485){
  if ((_8485 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8485 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8485 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _8486){
  if ((_8486 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8486 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8486 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8486 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8486 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _8487){
  if ((_8487 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8487 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8487 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8487 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8487 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _8488){
  if ((_8488 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8488 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8488 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8488 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8488 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8488 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8488 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8488 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _8489){
  if ((_8489 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8489 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8489 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8489 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _8490){
  if ((_8490 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8490 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8490 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8490 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8490 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8490 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8490 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8490 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8490 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8490 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8490 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8490 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8490 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8490 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8490 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8490 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8490 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8490 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8490 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8490 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8490 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8490 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8490 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8490 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8490 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8490 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8490 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8490 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8490 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8490 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8490 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8490 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8490 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8490 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8490 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8490 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8490 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8490 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8490 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8490 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8490 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8490 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8490 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8490 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8490 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8490 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8490 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8490 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8490 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8490 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _8491){
  if ((_8491 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8491 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8491 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8491 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _8492){
  if ((_8492 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8492 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _8493){
  if ((_8493 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8493 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8493 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _8494){
  if ((_8494 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8494 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8494 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8494 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _8495){
  if ((_8495 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8495 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8495 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8495 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8495 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8495 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8495 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8495 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8495 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8495 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8495 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8495 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8495 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8495 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8495 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8495 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8495 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8495 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8495 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8495 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8495 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8495 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8495 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8495 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8495 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8495 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8495 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8495 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8495 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8495 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8495 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8495 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8495 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8495 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8495 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8495 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8495 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8495 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8495 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8495 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8495 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8495 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8495 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8495 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8495 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8495 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8495 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8495 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8495 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8495 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8495 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8495 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8495 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8495 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8495 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8495 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8495 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8495 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8495 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8495 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8495 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8495 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8495 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8495 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8495 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8495 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8495 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8495 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8495 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8495 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8495 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8495 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8495 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8495 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8495 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8495 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8495 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8495 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8495 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8495 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8495 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8495 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8495 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8495 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8495 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8495 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8495 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8495 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8495 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8495 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8495 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8495 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8495 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }